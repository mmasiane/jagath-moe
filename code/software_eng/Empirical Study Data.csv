Project	Security Bug Level	Bug Type	Commit	 Author	 Date	 Message	 Bug	 Test	 Review URL	 Git SVN ID	Code																								
Chromium	5		906cac26ecd6cfd5c98ee5ab296c64e34c78eab	sergeyu@chromium.org <sergeyu@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Mar 6 00:36:10 2013 +0000	Pass ID of the calling extension to the native messaging host. Previously native hosts didn't have a way to know which extension started them. With this change security origin of the calling extension will be passed to the native host process as a parameter, so that it knows which extension is calling it.	142915		https://codereview.chromium.org/12406002	svn://svn.chromium.org/chrome/trunk/src@186297 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/test/data/native_messaging/native_hosts/echo.py b/chrome/test/data/native_messaging/native_hosts/echo.py <newline>index d0be74b..96c19f7 100755 <newline>--- a/chrome/test/data/native_messaging/native_hosts/echo.py <newline>+++ b/chrome/test/data/native_messaging/native_hosts/echo.py <newline>@@ -12,6 +12,11 @@ import struct <newline> def Main(): <newline>   message_number = 0 <newline>+  if len(sys.argv) < 2: <newline>+    sys.stderr.write("URL of the calling application is not specified.\n") <newline>+    return; <newline>+  caller_url = sys.argv[1] <newline>+ <newline>   while 1: <newline>     # Read the message type (first 4 bytes). <newline>     text_length_bytes = sys.stdin.read(4) <newline>@@ -27,8 +32,8 @@ def Main(): <newline>     message_number += 1 <newline>-    response = '{{"id": {0}, "echo": {1}}}'.format(message_number, <newline>-                                                   text).encode('utf-8') <newline>+    response = '{{"id": {0}, "echo": {1}, "caller_url": "{2}"}}'.format( <newline>+        message_number, text, caller_url).encode('utf-8') <newline>     try: <newline>       sys.stdout.write(struct.pack("I", len(response)))																								
Chromium	3	2	d65223d5129c232db8e8650f578e2d070263dfd	alexeypa@chromium.org <alexeypa@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Mar 5 20:32:46 2013 +0000	Initialize COM and configure security settings in the daemon. This CL initializes a single-threaded apartment on the main thread in the daemon and configures COM security in the following way: - The daemon authenticates that all data received is from the expected client. - The daemon can impersonate clients to check their identity but cannot act on their behalf. - The caller's identity on every call (Dynamic cloaking). - Activations where the activated COM server would run under the daemon's identity are prohibited.	137696		https://codereview.chromium.org/12378078	svn://svn.chromium.org/chrome/trunk/src@186245 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/remoting/host/win/security_descriptor.h b/remoting/host/win/security_descriptor.h <newline>index 98713f8..e83948e 100644 <newline>--- a/remoting/host/win/security_descriptor.h <newline>+++ b/remoting/host/win/security_descriptor.h <newline>@@ -13,6 +13,7 @@ <newline> namespace remoting { <newline>+typedef TypedBuffer<ACL> ScopedAcl; <newline> typedef TypedBuffer<SECURITY_DESCRIPTOR> ScopedSd; <newline> typedef TypedBuffer<SID> ScopedSid; <newline>@@ -26,6 +27,15 @@ std::string ConvertSidToString(SID* sid); <newline> // a logon SID or in case of an error. <newline> ScopedSid GetLogonSid(HANDLE token); <newline>+// Converts a security descriptor in self-relative format to a security <newline>+// descriptor in absolute format. <newline>+bool MakeScopedAbsoluteSd(const ScopedSd& relative_sd, <newline>+                          ScopedSd* absolute_sd, <newline>+                          ScopedAcl* dacl, <newline>+                          ScopedSid* group, <newline>+                          ScopedSid* owner, <newline>+                          ScopedAcl* sacl); <newline>+ <newline> }  // namespace remoting <newline> #endif  // REMOTING_HOST_WIN_SECURITY_DESCRIPTOR_H_																								
Chromium	3	1	78886f4bb23fde9ca9907884d6651d55883c79a	tedchoc@chromium.org <tedchoc@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Mar 4 23:18:00 2013 +0000	Allow querying the security level at the Tab level. Also, use a template for generating the SecurityLevel constants to allow them to be shared in C++ and Java. For another example of using the templates, take a look at this CL that generated the PageTransitionTypes: https://codereview.chromium.org/11577016	174361		https://chromiumcodereview.appspot.com/12391024	svn://svn.chromium.org/chrome/trunk/src@186021 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/chrome_browser_ui.gypi b/chrome/chrome_browser_ui.gypi <newline>index 278b737..93826fc 100644 <newline>--- a/chrome/chrome_browser_ui.gypi <newline>+++ b/chrome/chrome_browser_ui.gypi <newline>@@ -1368,6 +1368,7 @@ <newline>         'browser/ui/toolbar/toolbar_model_impl.cc', <newline>         'browser/ui/toolbar/toolbar_model_impl.h', <newline>         'browser/ui/toolbar/toolbar_model_delegate.h', <newline>+        'browser/ui/toolbar/toolbar_model_security_level_list.h', <newline>         'browser/ui/toolbar/wrench_menu_model.cc', <newline>         'browser/ui/toolbar/wrench_menu_model.h', <newline>         'browser/ui/top_level_widget.h', <newline>@@ -2641,6 +2642,7 @@ <newline>             ['include', '^browser/ui/toolbar/toolbar_model\\.(cc|h)$'], <newline>             ['include', '^browser/ui/toolbar/toolbar_model_delegate\\.(cc|h)$'], <newline>             ['include', '^browser/ui/toolbar/toolbar_model_impl\\.(cc|h)$'], <newline>+            ['include', '^browser/ui/toolbar/toolbar_model_security_level_list\\.h$'], <newline>             ['exclude', '^browser/ui/webui/downloads_'], <newline>             ['exclude', '^browser/ui/webui/feedback_'], <newline>             ['exclude', '^browser/ui/webui/help/'],																								
Chromium	3	1	b022e4b81125336f3ed9b8f4ae3e98cdd253e85	tedchoc@chromium.org <tedchoc@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Feb 28 17:43:49 2013 +0000	Revert 184999 > Revert 184869 > > This revert seems like it caused test failures in FileSystemApiOpenBackgroundTest and > FileSystemApiSaveBackgroundTest on linux. > > http://build.chromium.org/p/chromium.linux/builders/Linux%20Tests%20%28dbg%29%281%29/builds/23657 > > In particular, this change could change the security level of background pages (pages with no > web contents), and therefore seems to be a reasonable culprit. > > Apologies if this turns out to be misdirected.  We've been starting at these red bots (on linux > and chromeos, e.g., http://build.chromium.org/p/chromium.chromiumos/builders/Linux%20ChromiumOS%20Tests%20%282%29/builds/12033 ) > for a while now.  We even rolled about another change in the same blamelist, but that > didn't appear to help, possibly even made things worse. > > > Expose the utility for getting the SecurityLevel for any WebContents. > > > > On android, we need handle rendering more than one location bar for a > > given "window" so the ability to query the security level without updating > > the concept of the active WebContents to the toolbar model. > > > > BUG= > > > > > > Review URL: https://chromiumcodereview.appspot.com/12314119 > > TBR=tedchoc@chromium.org > Review URL: https://codereview.chromium.org/12334129 TBR=mpearson@chromium.org			https://codereview.chromium.org/12378017	svn://svn.chromium.org/chrome/trunk/src@185272 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/ui/toolbar/toolbar_model_impl.h b/chrome/browser/ui/toolbar/toolbar_model_impl.h <newline>index 91843a7..1adf474 100644 <newline>--- a/chrome/browser/ui/toolbar/toolbar_model_impl.h <newline>+++ b/chrome/browser/ui/toolbar/toolbar_model_impl.h <newline>@@ -18,6 +18,7 @@ class ToolbarModelDelegate; <newline> namespace content { <newline> class NavigationController; <newline>+class WebContents; <newline> } <newline> namespace net { <newline>@@ -32,6 +33,9 @@ class ToolbarModelImpl : public ToolbarModel { <newline>   explicit ToolbarModelImpl(ToolbarModelDelegate* delegate); <newline>   virtual ~ToolbarModelImpl(); <newline>+  static SecurityLevel GetSecurityLevelForWebContents( <newline>+      content::WebContents* web_contents); <newline>+ <newline>   // Overriden from ToolbarModel. <newline>   virtual string16 GetText( <newline>       bool display_search_urls_as_search_terms) const OVERRIDE;																								
Chromium	3	1	980d065a42772a1196342c727b0377d0590f512	tsepez@chromium.org <tsepez@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Feb 28 02:37:40 2013 +0000	Add security team members as owners of IPC message files.  This ownership was lost during a directory rename operation. TBR=jbauman@chromium.org			https://chromiumcodereview.appspot.com/12335150	svn://svn.chromium.org/chrome/trunk/src@185122 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/components/tracing/OWNERS b/components/tracing/OWNERS <newline>index ba7dc1b..a73665a 100644 <newline>--- a/components/tracing/OWNERS <newline>+++ b/components/tracing/OWNERS <newline>@@ -1,2 +1,11 @@ <newline> jbauman@chromium.org <newline> nduca@chromium.org <newline>+ <newline>+# Changes to IPC messages require a security review to avoid introducing <newline>+# new sandbox escapes. <newline>+per-file *_messages.h=set noparent <newline>+per-file *_messages.h=cdn@chromium.org <newline>+per-file *_messages.h=jln@chromium.org <newline>+per-file *_messages.h=jschuh@chromium.org <newline>+per-file *_messages.h=palmer@chromium.org <newline>+per-file *_messages.h=tsepez@chromium.org																								
Chromium	3	1	b3933f9f2d908fb8e677815dfc3b13dbe13b42b	mpearson@chromium.org <mpearson@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Feb 27 19:07:55 2013 +0000	Revert 184869 This revert seems like it caused test failures in FileSystemApiOpenBackgroundTest and FileSystemApiSaveBackgroundTest on linux. http://build.chromium.org/p/chromium.linux/builders/Linux%20Tests%20%28dbg%29%281%29/builds/23657 In particular, this change could change the security level of background pages (pages with no web contents), and therefore seems to be a reasonable culprit. Apologies if this turns out to be misdirected.  We've been starting at these red bots (on linux and chromeos, e.g., http://build.chromium.org/p/chromium.chromiumos/builders/Linux%20ChromiumOS%20Tests%20%282%29/builds/12033 ) for a while now.  We even rolled about another change in the same blamelist, but that didn't appear to help, possibly even made things worse. > Expose the utility for getting the SecurityLevel for any WebContents. > > On android, we need handle rendering more than one location bar for a > given "window" so the ability to query the security level without updating > the concept of the active WebContents to the toolbar model. > > BUG= > > > Review URL: https://chromiumcodereview.appspot.com/12314119 TBR=tedchoc@chromium.org			https://codereview.chromium.org/12334129	svn://svn.chromium.org/chrome/trunk/src@184999 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/ui/toolbar/toolbar_model_impl.h b/chrome/browser/ui/toolbar/toolbar_model_impl.h <newline>index 1adf474..91843a7 100644 <newline>--- a/chrome/browser/ui/toolbar/toolbar_model_impl.h <newline>+++ b/chrome/browser/ui/toolbar/toolbar_model_impl.h <newline>@@ -18,7 +18,6 @@ class ToolbarModelDelegate; <newline> namespace content { <newline> class NavigationController; <newline>-class WebContents; <newline> } <newline> namespace net { <newline>@@ -33,9 +32,6 @@ class ToolbarModelImpl : public ToolbarModel { <newline>   explicit ToolbarModelImpl(ToolbarModelDelegate* delegate); <newline>   virtual ~ToolbarModelImpl(); <newline>-  static SecurityLevel GetSecurityLevelForWebContents( <newline>-      content::WebContents* web_contents); <newline>- <newline>   // Overriden from ToolbarModel. <newline>   virtual string16 GetText( <newline>       bool display_search_urls_as_search_terms) const OVERRIDE;																								
Chromium	5		cef23d337bf13f96bc932e0536d5ef5ffd2b713	jochen@chromium.org <jochen@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Feb 27 13:11:21 2013 +0000	Do not set the main frame's name to the frame name parameter of createView If e.g. a link has target=_blank, createView is invoked with a frame name parameter "_blank". However, WebCore assumes that no frame ever has the name _blank (see e.g. FrameTree::find). R=darin@chromium.org TEST=e.g. http/tests/security/mixedContent tests pass on content_shell	177982,111316		https://chromiumcodereview.appspot.com/12313090	svn://svn.chromium.org/chrome/trunk/src@184941 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/renderer/render_view_impl.cc b/content/renderer/render_view_impl.cc <newline>index 8b3f021..7983f7a 100644 <newline>--- a/content/renderer/render_view_impl.cc <newline>+++ b/content/renderer/render_view_impl.cc <newline>@@ -1917,7 +1917,8 @@ WebView* RenderViewImpl::createView( <newline>   params.user_gesture = creator->isProcessingUserGesture(); <newline>   params.window_container_type = WindowFeaturesToContainerType(features); <newline>   params.session_storage_namespace_id = session_storage_namespace_id_; <newline>-  params.frame_name = frame_name; <newline>+  if (frame_name != "_blank") <newline>+    params.frame_name = frame_name; <newline>   params.opener_frame_id = creator->identifier(); <newline>   params.opener_url = creator->document().url(); <newline>   GURL security_url(creator->document().securityOrigin().toString().utf8()); <newline>@@ -1951,7 +1952,7 @@ WebView* RenderViewImpl::createView( <newline>       routing_id, <newline>       surface_id, <newline>       cloned_session_storage_namespace_id, <newline>-      frame_name, <newline>+      string16(),  // WebCore will take care of setting the correct name. <newline>       true, <newline>       false, <newline>       1,																								
Chromium	3	1	2cb675846bd4947910e8a3d5fd8dad315038c90	tedchoc@chromium.org <tedchoc@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Feb 27 04:15:17 2013 +0000	Expose the utility for getting the SecurityLevel for any WebContents. On android, we need handle rendering more than one location bar for a given "window" so the ability to query the security level without updating the concept of the active WebContents to the toolbar model.			https://chromiumcodereview.appspot.com/12314119	svn://svn.chromium.org/chrome/trunk/src@184869 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/ui/toolbar/toolbar_model_impl.h b/chrome/browser/ui/toolbar/toolbar_model_impl.h <newline>index 91843a7..1adf474 100644 <newline>--- a/chrome/browser/ui/toolbar/toolbar_model_impl.h <newline>+++ b/chrome/browser/ui/toolbar/toolbar_model_impl.h <newline>@@ -18,6 +18,7 @@ class ToolbarModelDelegate; <newline> namespace content { <newline> class NavigationController; <newline>+class WebContents; <newline> } <newline> namespace net { <newline>@@ -32,6 +33,9 @@ class ToolbarModelImpl : public ToolbarModel { <newline>   explicit ToolbarModelImpl(ToolbarModelDelegate* delegate); <newline>   virtual ~ToolbarModelImpl(); <newline>+  static SecurityLevel GetSecurityLevelForWebContents( <newline>+      content::WebContents* web_contents); <newline>+ <newline>   // Overriden from ToolbarModel. <newline>   virtual string16 GetText( <newline>       bool display_search_urls_as_search_terms) const OVERRIDE;																								
Chromium	5		8b5eef7d47215a318634daa9cbc411dae2ecf71	msw@chromium.org <msw@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Sat Feb 23 18:09:24 2013 +0000	Fix Views Omnibox diagonal strike styling. Clear the diagonal strike style (before potentially applying URL security styling). This was a simple regression from my http://crrev.com/180067 OmniboxViewViews previously cleared the diagonal strike style in line 919 of: https://chromiumcodereview.appspot.com/11535014/diff/57050/chrome/browser/ui/views/omnibox/omnibox_view_views.cc ApplyURLStyle(textfield_, 0, text.length(), base_color, false); My change still reset the overall textfield color, but not the diagonal strike style. TEST=Get SSL error (https://cacert.org), new tab, switch back to SSL error tab; only scheme has a strike. R=pkasting@chromium.org	177082		https://chromiumcodereview.appspot.com/12315027	svn://svn.chromium.org/chrome/trunk/src@184322 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/ui/views/omnibox/omnibox_view_views.cc b/chrome/browser/ui/views/omnibox/omnibox_view_views.cc <newline>index 785d0fd..0edcdad 100644 <newline>--- a/chrome/browser/ui/views/omnibox/omnibox_view_views.cc <newline>+++ b/chrome/browser/ui/views/omnibox/omnibox_view_views.cc <newline>@@ -796,6 +796,7 @@ void OmniboxViewViews::EmphasizeURLComponents() { <newline>   // URLs with search terms, we may have a non-URL even when the user is not <newline>   // editing; and in some cases, e.g. for "site:foo.com" searches, the parser <newline>   // may have incorrectly identified a qualifier as a scheme. <newline>+  SetStyle(gfx::DIAGONAL_STRIKE, false); <newline>   if (!model()->user_input_in_progress() && model()->CurrentTextIsURL() && <newline>       scheme.is_nonempty() && (security_level_ != ToolbarModel::NONE)) { <newline>     SkColor security_color = location_bar_view_->GetColor(																								
Chromium	5		74df279ad39b91bd21923d182fe4318e9de24c4	mmenke@chromium.org <mmenke@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Sat Feb 23 01:08:03 2013 +0000	Fix a pair of bugs that broke exporting from about:profiler. 1)  Fix use of undefined variable. 2)  The content security policy doesn't allow changing the src of an iframe, so switch to using an anchor to start the download. R=eroman@chromium.org	177778		https://chromiumcodereview.appspot.com/12340034	svn://svn.chromium.org/chrome/trunk/src@184244 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/resources/profiler/profiler.js b/chrome/browser/resources/profiler/profiler.js <newline>index c82617c..baf6071 100644 <newline>--- a/chrome/browser/resources/profiler/profiler.js <newline>+++ b/chrome/browser/resources/profiler/profiler.js <newline>@@ -110,7 +110,7 @@ var MainView = (function() { <newline>   var SNAPSHOT_FILE_LOADER_ID = 'snapshot-file-loader'; <newline>   var LOAD_ERROR_ID = 'file-load-error'; <newline>-  var DOWNLOAD_IFRAME_ID = 'download-iframe'; <newline>+  var DOWNLOAD_ANCHOR_ID = 'download-anchor'; <newline>   // -------------------------------------------------------------------------- <newline>   // Row keys <newline>@@ -1799,9 +1799,10 @@ var MainView = (function() { <newline>       }; <newline>       var dumpText = JSON.stringify(dump, null, ' '); <newline>-      var blobBuilder = new Blob([dumpText, 'native'], {type: 'octet/stream'}); <newline>+      var textBlob = new Blob([dumpText, 'native'], { type: 'octet/stream' }); <newline>       var blobUrl = window.webkitURL.createObjectURL(textBlob); <newline>-      $(DOWNLOAD_IFRAME_ID).src = blobUrl; <newline>+      $(DOWNLOAD_ANCHOR_ID).href = blobUrl; <newline>+      $(DOWNLOAD_ANCHOR_ID).click(); <newline>     }, <newline>     loadFileChanged_: function() {																								
Chromium	5		8c3fb43e7c08f68283204d697a63ebc970468a9	tedchoc@chromium.org <tedchoc@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Feb 22 03:49:37 2013 +0000	Start using ToolbarModel in android for consistent SSL security processing. TBR=thakis@chromium.org # for chrome_browser_ui.gypi	174361		https://chromiumcodereview.appspot.com/12316054	svn://svn.chromium.org/chrome/trunk/src@184007 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/chrome_browser_ui.gypi b/chrome/chrome_browser_ui.gypi <newline>index 4ab8787..93ee755 100644 <newline>--- a/chrome/chrome_browser_ui.gypi <newline>+++ b/chrome/chrome_browser_ui.gypi <newline>@@ -2622,6 +2622,9 @@ <newline>             ['exclude', '^browser/ui/startup/'], <newline>             ['exclude', '^browser/ui/tabs/'], <newline>             ['exclude', '^browser/ui/toolbar/'], <newline>+            ['include', '^browser/ui/toolbar/toolbar_model\\.(cc|h)$'], <newline>+            ['include', '^browser/ui/toolbar/toolbar_model_delegate\\.(cc|h)$'], <newline>+            ['include', '^browser/ui/toolbar/toolbar_model_impl\\.(cc|h)$'], <newline>             ['exclude', '^browser/ui/webui/downloads_'], <newline>             ['exclude', '^browser/ui/webui/feedback_'], <newline>             ['exclude', '^browser/ui/webui/help/'],																								
Chromium	5		49c238c049ea78dd634d2b63c4b6517e579c092	cevans@chromium.org <cevans@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Feb 21 02:35:10 2013 +0000	Update Java version metadata for Feb 2013 CPU. http://www.oracle.com/technetwork/topics/security/javacpufeb2013update-1905892.html	177152		https://codereview.chromium.org/12321004	svn://svn.chromium.org/chrome/trunk/src@183720 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/resources/plugin_metadata/plugins_win.json b/chrome/browser/resources/plugin_metadata/plugins_win.json <newline>index 8066f41..52411f2 100644 <newline>--- a/chrome/browser/resources/plugin_metadata/plugins_win.json <newline>+++ b/chrome/browser/resources/plugin_metadata/plugins_win.json <newline>@@ -1,5 +1,5 @@ <newline> { <newline>-  "x-version": 1, <newline>+  "x-version": 2, <newline>   "google-talk": { <newline>     "mime_types": [ <newline>     ], <newline>@@ -54,18 +54,18 @@ <newline>     ], <newline>     "versions": [ <newline>       { <newline>-        "version": "6.0.390", <newline>+        "version": "6.0.410", <newline>         "status": "requires_authorization", <newline>-        "comment": "Java SE 6 Update 39. '390' is not a typo." <newline>+        "comment": "Java SE 6 Update 41. '410' is not a typo." <newline>       }, <newline>       { <newline>         "version": "7", <newline>         "status": "out_of_date" <newline>       }, <newline>       { <newline>-        "version": "10.13", <newline>+        "version": "10.15", <newline>         "status": "requires_authorization", <newline>-        "comment": "Java SE 7u13" <newline>+        "comment": "Java SE 7u15" <newline>       } <newline>     ], <newline>     "lang": "en-US",																								
Chromium	1	5	6a6cea6231e77f0c92c0528e772c8e5586eb3ff	jln@chromium.org <jln@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Feb 15 06:10:40 2013 +0000	Base: account for calloc aborting in security unittests On Linux, when not using tcmalloc, we still have a small wrapper that aborts when allocation functions OOM. In that configuration, we now We consider it a successful detection of an overflow condition if the process aborts.	175500		https://chromiumcodereview.appspot.com/12220107	svn://svn.chromium.org/chrome/trunk/src@182628 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/base/security_unittest.cc b/base/security_unittest.cc <newline>index 59a3ddd..1454003 100644 <newline>--- a/base/security_unittest.cc <newline>+++ b/base/security_unittest.cc <newline>@@ -37,20 +37,15 @@ Type HideValueFromCompiler(volatile Type value) { <newline>   return value; <newline> } <newline>-// Check that we can not allocate a memory range that cannot be indexed <newline>-// via an int. This is used to mitigate vulnerabilities in libraries that use <newline>-// int instead of size_t. <newline>-// See crbug.com/169327. <newline>- <newline>-// - NO_TCMALLOC because we only patched tcmalloc <newline>+// - NO_TCMALLOC (should be defined if we compile with linux_use_tcmalloc=0) <newline> // - ADDRESS_SANITIZER because it has its own memory allocator <newline>-// - IOS does not seem to honor nothrow in new properly <newline>+// - IOS does not use tcmalloc <newline> // - OS_MACOSX does not use tcmalloc <newline> #if !defined(NO_TCMALLOC) && !defined(ADDRESS_SANITIZER) && \ <newline>     !defined(OS_IOS) && !defined(OS_MACOSX) <newline>-  #define ALLOC_TEST(function) function <newline>+  #define TCMALLOC_TEST(function) function <newline> #else <newline>-  #define ALLOC_TEST(function) DISABLED_##function <newline>+  #define TCMALLOC_TEST(function) DISABLED_##function <newline> #endif <newline> // TODO(jln): switch to std::numeric_limits<int>::max() when we switch to <newline>@@ -68,13 +63,28 @@ bool IsTcMallocBypassed() { <newline>   return false; <newline> } <newline>+bool CallocDiesOnOOM() { <newline>+// The wrapper function in base/process_util_linux.cc that is used when we <newline>+// compile without TCMalloc will just die on OOM instead of returning NULL. <newline>+#if defined(OS_LINUX) && defined(NO_TCMALLOC) <newline>+  return true; <newline>+#else <newline>+  return false; <newline>+#endif <newline>+} <newline>+ <newline> // Fake test that allow to know the state of TCMalloc by looking at bots. <newline>-TEST(SecurityTest, ALLOC_TEST(IsTCMallocDynamicallyBypassed)) { <newline>+TEST(SecurityTest, TCMALLOC_TEST(IsTCMallocDynamicallyBypassed)) { <newline>   printf("Malloc is dynamically bypassed: %s\n", <newline>          IsTcMallocBypassed() ? "yes." : "no."); <newline> } <newline>-TEST(SecurityTest, ALLOC_TEST(MemoryAllocationRestrictionsMalloc)) { <newline>+// The MemoryAllocationRestrictions* tests test that we can not allocate a <newline>+// memory range that cannot be indexed via an int. This is used to mitigate <newline>+// vulnerabilities in libraries that use int instead of size_t.  See <newline>+// crbug.com/169327. <newline>+ <newline>+TEST(SecurityTest, TCMALLOC_TEST(MemoryAllocationRestrictionsMalloc)) { <newline>   if (!IsTcMallocBypassed()) { <newline>     scoped_ptr<char, base::FreeDeleter> ptr(static_cast<char*>( <newline>         HideValueFromCompiler(malloc(kTooBigAllocSize)))); <newline>@@ -82,7 +92,7 @@ TEST(SecurityTest, ALLOC_TEST(MemoryAllocationRestrictionsMalloc)) { <newline>   } <newline> } <newline>-TEST(SecurityTest, ALLOC_TEST(MemoryAllocationRestrictionsCalloc)) { <newline>+TEST(SecurityTest, TCMALLOC_TEST(MemoryAllocationRestrictionsCalloc)) { <newline>   if (!IsTcMallocBypassed()) { <newline>     scoped_ptr<char, base::FreeDeleter> ptr(static_cast<char*>( <newline>         HideValueFromCompiler(calloc(kTooBigAllocSize, 1)))); <newline>@@ -90,7 +100,7 @@ TEST(SecurityTest, ALLOC_TEST(MemoryAllocationRestrictionsCalloc)) { <newline>   } <newline> } <newline>-TEST(SecurityTest, ALLOC_TEST(MemoryAllocationRestrictionsRealloc)) { <newline>+TEST(SecurityTest, TCMALLOC_TEST(MemoryAllocationRestrictionsRealloc)) { <newline>   if (!IsTcMallocBypassed()) { <newline>     char* orig_ptr = static_cast<char*>(malloc(1)); <newline>     ASSERT_TRUE(orig_ptr); <newline>@@ -106,7 +116,7 @@ typedef struct { <newline>   char large_array[kTooBigAllocSize]; <newline> } VeryLargeStruct; <newline>-TEST(SecurityTest, ALLOC_TEST(MemoryAllocationRestrictionsNew)) { <newline>+TEST(SecurityTest, TCMALLOC_TEST(MemoryAllocationRestrictionsNew)) { <newline>   if (!IsTcMallocBypassed()) { <newline>     scoped_ptr<VeryLargeStruct> ptr( <newline>         HideValueFromCompiler(new (nothrow) VeryLargeStruct)); <newline>@@ -114,7 +124,7 @@ TEST(SecurityTest, ALLOC_TEST(MemoryAllocationRestrictionsNew)) { <newline>   } <newline> } <newline>-TEST(SecurityTest, ALLOC_TEST(MemoryAllocationRestrictionsNewArray)) { <newline>+TEST(SecurityTest, TCMALLOC_TEST(MemoryAllocationRestrictionsNewArray)) { <newline>   if (!IsTcMallocBypassed()) { <newline>     scoped_ptr<char[]> ptr( <newline>         HideValueFromCompiler(new (nothrow) char[kTooBigAllocSize])); <newline>@@ -184,27 +194,32 @@ TEST(SecurityTest, DISABLE_ON_IOS_AND_WIN(NewOverflow)) { <newline> } <newline> #endif <newline>+// Call calloc(), eventually free the memory and return whether or not <newline>+// calloc() did succeed. <newline>+bool CallocReturnsNull(size_t nmemb, size_t size) { <newline>+  scoped_ptr<char, base::FreeDeleter> array_pointer( <newline>+      static_cast<char*>(calloc(nmemb, size))); <newline>+  // We need the call to HideValueFromCompiler(): we have seen LLVM <newline>+  // optimize away the call to calloc() entirely and assume <newline>+  // the pointer to not be NULL. <newline>+  return HideValueFromCompiler(array_pointer.get()) == NULL; <newline>+} <newline>+ <newline> // Test if calloc() can overflow. Disable on ASAN for now since the <newline>-// overflow seems present there. <newline>+// overflow seems present there (crbug.com/175554). <newline> TEST(SecurityTest, DISABLE_ON_ASAN(CallocOverflow)) { <newline>   const size_t kArraySize = 4096; <newline>   const size_t kMaxSizeT = numeric_limits<size_t>::max(); <newline>   const size_t kArraySize2 = kMaxSizeT / kArraySize + 10; <newline>-  { <newline>-    scoped_ptr<char> array_pointer( <newline>-        static_cast<char*>(calloc(kArraySize, kArraySize2))); <newline>-    // We need the call to HideValueFromCompiler(): we have seen LLVM <newline>-    // optimize away the call to calloc() entirely and assume <newline>-    // the pointer to not be NULL. <newline>-    EXPECT_TRUE(HideValueFromCompiler(array_pointer.get()) == NULL); <newline>-  } <newline>-  { <newline>-    scoped_ptr<char> array_pointer( <newline>-        static_cast<char*>(calloc(kArraySize2, kArraySize))); <newline>-    // We need the call to HideValueFromCompiler(): we have seen LLVM <newline>-    // optimize away the call to calloc() entirely and assume <newline>-    // the pointer to not be NULL. <newline>-    EXPECT_TRUE(HideValueFromCompiler(array_pointer.get()) == NULL); <newline>+  if (!CallocDiesOnOOM()) { <newline>+    EXPECT_TRUE(CallocReturnsNull(kArraySize, kArraySize2)); <newline>+    EXPECT_TRUE(CallocReturnsNull(kArraySize2, kArraySize)); <newline>+  } else { <newline>+    // It's also ok for calloc to just terminate the process. <newline>+#if defined(GTEST_HAS_DEATH_TEST) <newline>+    EXPECT_DEATH(CallocReturnsNull(kArraySize, kArraySize2), ""); <newline>+    EXPECT_DEATH(CallocReturnsNull(kArraySize2, kArraySize), ""); <newline>+#endif  // GTEST_HAS_DEATH_TEST <newline>   } <newline> } <newline>@@ -230,7 +245,7 @@ bool ArePointersToSameArea(void* ptr1, void* ptr2, size_t size) { <newline> } <newline> // Check if TCMalloc uses an underlying random memory allocator. <newline>-TEST(SecurityTest, ALLOC_TEST(RandomMemoryAllocations)) { <newline>+TEST(SecurityTest, TCMALLOC_TEST(RandomMemoryAllocations)) { <newline>   if (IsTcMallocBypassed()) <newline>     return; <newline>   size_t kPageSize = 4096;  // We support x86_64 only.																								
Chromium	1	2	3a07b2ea1a0cb314a7ef409d142cd0f668b2254	digit@chromium.org <digit@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Feb 11 20:13:45 2013 +0000	This patch adds some Android-support code to allow the network stack to use platform-specific private key objects to perform signing in the context of SSL handshakes which require a client certificate. More specifically: - Add net/android/keystore.h, which provides native functions to operate on JNI references pointing to java.security.PrivateKey objects provided by the platform. I.e.: net::android::GetPrivateKeyType() net::android::SignWithPrivateKey() Also provide a function that can get the system's own EVP_PKEY* handle corresponding to a given PrivateKey object. This uses reflection and should *only* be used for RSA private keys when running on Android 4.0 and 4.1, in order to route around a platform bug that was only fixed in 4.2. net::android::GetOpenSSLSytstemHandleForPrivateKey() See the comments in this source file for mode details: net/android/java/org/chromium/net/AndroidKeyStore.java - Add net/android/keystore_openssl.h, which provides a function that can wrap an existing PrivateKey JNI reference around an OpenSSL EVP_PKEY object which uses custom DSA/RSA/ECDSA methods to perform signing as expected to handle client certificates. net::android::GetOpenSSLPrivateKeyWrapper() - Add relevant unit tests for the new functions. Note that the unit test comes with its own Java helper function, which is used to create a platform PrivateKey object from encoded PKCS#8 private key data. This is called from the native unit test, but does not constitute a new Java test (AndroidKeyStoreTestUtil.java). - Add corresponding new test key files under net/data/ssl/certificates/, and their generation script in net/data/ssl/scripts/. - Add net/android/private_key_type_list.h which is used both from C++ and Java to define the list of supported private key types used by this code. - Minor improvements: Add a "release()" method to crypto::ScopedOpenSSL, add missing BASE_EXPORT to one base/android/jni_array.h function declaration.	166642		https://chromiumcodereview.appspot.com/11571059	svn://svn.chromium.org/chrome/trunk/src@181741 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/socket/ssl_client_socket_openssl.h b/net/socket/ssl_client_socket_openssl.h <newline>index 12d9229..74ada9a 100644 <newline>--- a/net/socket/ssl_client_socket_openssl.h <newline>+++ b/net/socket/ssl_client_socket_openssl.h <newline>@@ -16,9 +16,14 @@ <newline> #include "net/socket/ssl_client_socket.h" <newline> #include "net/socket/client_socket_handle.h" <newline>+// Avoid including misc OpenSSL headers, i.e.: <newline>+// <openssl/bio.h> <newline> typedef struct bio_st BIO; <newline>+// <openssl/evp.h> <newline> typedef struct evp_pkey_st EVP_PKEY; <newline>+// <openssl/ssl.h> <newline> typedef struct ssl_st SSL; <newline>+// <openssl/x509.h> <newline> typedef struct x509_st X509; <newline> namespace net {																								
Chromium	1	4	1374f2cd69d98178c45c4789daf8228fb44cd6b	nasko@chromium.org <nasko@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Feb 7 02:03:45 2013 +0000	Kill renderer processes that fail check in RenderViewHostImpl::SetWebUIProperty When setting WebUI property for a renderer, it should have WebUI bindings enabled. If we get into inconsistent state where the renderer doesn't have those bindings, but we are trying to set WebUI properties, we should kill it. This is a defense in depth measure against security exploits.	174063		https://chromiumcodereview.appspot.com/12210038	svn://svn.chromium.org/chrome/trunk/src@181145 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/content_tests.gypi b/content/content_tests.gypi <newline>index 715fcec..92cb115 100644 <newline>--- a/content/content_tests.gypi <newline>+++ b/content/content_tests.gypi <newline>@@ -733,6 +733,7 @@ <newline>             'browser/renderer_host/render_view_host_manager_browsertest.cc', <newline>             'browser/renderer_host/render_widget_host_view_browsertest.cc', <newline>             'browser/renderer_host/render_widget_host_view_win_browsertest.cc', <newline>+            'browser/security_exploit_browsertest.cc', <newline>             'browser/session_history_browsertest.cc', <newline>             'browser/site_per_process_browsertest.cc', <newline>             'browser/speech/speech_recognition_browsertest.cc',																								
Chromium	1	2	44fd8f860d4f88b21fab0447c356ea2b7b22691	scheib@chromium.org <scheib@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Feb 5 21:55:20 2013 +0000	Packaged apps manifest requires 'fullscreen' permission for HTML5 api. For security precautions, packaged applications that use HTML5 fullscreen api must add 'fullscreen' to the permissions in the manifest. No user visible message is required. TEST=Manually load app chrome/test/data/extensions/api_test/fullscreen/has_permission, launch, click in window, verify it takes window fullscreen. alt-f4 to exit. Load adjacent no_permission test, launch, click, it won't go fullscreen, right click and inspect element, view developer console, verify the 'fullscreen' permission is suggested.	166279		https://chromiumcodereview.appspot.com/12205002	svn://svn.chromium.org/chrome/trunk/src@180791 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/test/data/extensions/api_test/fullscreen/no_permission/window.js b/chrome/test/data/extensions/api_test/fullscreen/no_permission/window.js <newline>new file mode 100644 <newline>index 0000000..83fa86d <newline>--- /dev/null <newline>+++ b/chrome/test/data/extensions/api_test/fullscreen/no_permission/window.js <newline>@@ -0,0 +1,13 @@ <newline>+// Copyright (c) 2013 The Chromium Authors. All rights reserved. <newline>+// Use of this source code is governed by a BSD-style license that can be <newline>+// found in the LICENSE file. <newline>+ <newline>+window.onload = function () { <newline>+  function requestFullscreen() { <newline>+    document.onwebkitfullscreenchange = chrome.test.fail; <newline>+    document.onwebkitfullscreenerror = chrome.test.succeed; <newline>+    document.body.webkitRequestFullscreen(); <newline>+  }; <newline>+  document.body.onclick = requestFullscreen;  // enables manual testing. <newline>+  chrome.test.runTests([requestFullscreen]); <newline>+}																								
Chromium	5		47683f5afc6906f93920571ec027d25b965dc14	jln@chromium.org <jln@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Feb 4 23:39:48 2013 +0000	Linux: grow a unique random mapping in ASLR We loosen ASLR by only growing one random mapping. The previous version had security benefits but had a negative performance impact. This change aims to be performance neutral in respect to the pre-ASLR era. At a later date, we may try to strike a good balance between performance and security. This is a re-land of https://chromiumcodereview.appspot.com/12090112/ NOTRY=true TBR=jar	170133, 173371		https://chromiumcodereview.appspot.com/12192024	svn://svn.chromium.org/chrome/trunk/src@180556 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/third_party/tcmalloc/chromium/src/system-alloc.cc b/third_party/tcmalloc/chromium/src/system-alloc.cc <newline>index 05338963..2141d41 100644 <newline>--- a/third_party/tcmalloc/chromium/src/system-alloc.cc <newline>+++ b/third_party/tcmalloc/chromium/src/system-alloc.cc <newline>@@ -137,6 +137,18 @@ void raninit(ranctx* x, u4 seed) { <newline>   } <newline> } <newline>+// If the kernel cannot honor the hint in arch_get_unmapped_area_topdown, it <newline>+// will simply ignore it. So we give a hint that has a good chance of <newline>+// working. <newline>+// The mmap top-down allocator will normally allocate below TASK_SIZE - gap, <newline>+// with a gap that depends on the max stack size. See x86/mm/mmap.c. We <newline>+// should make allocations that are below this area, which would be <newline>+// 0x7ffbf8000000. <newline>+// We use 0x3ffffffff000 as the mask so that we only "pollute" half of the <newline>+// address space. In the unlikely case where fragmentation would become an <newline>+// issue, the kernel will still have another half to use. <newline>+const uint64_t kRandomAddressMask = 0x3ffffffff000ULL; <newline>+ <newline> #endif  // defined(ASLR_IS_SUPPORTED) <newline> // Give a random "hint" that is suitable for use with mmap(). This cannot make <newline>@@ -177,22 +189,51 @@ void* GetRandomAddrHint() { <newline>   } <newline>   uint64_t random_address = (static_cast<uint64_t>(ranval(&ctx)) << 32) | <newline>                             ranval(&ctx); <newline>-  // If the kernel cannot honor the hint in arch_get_unmapped_area_topdown, it <newline>-  // will simply ignore it. So we give a hint that has a good chance of <newline>-  // working. <newline>-  // The mmap top-down allocator will normally allocate below TASK_SIZE - gap, <newline>-  // with a gap that depends on the max stack size. See x86/mm/mmap.c. We <newline>-  // should make allocations that are below this area, which would be <newline>-  // 0x7ffbf8000000. <newline>-  // We use 0x3ffffffff000 as the mask so that we only "pollute" half of the <newline>-  // address space. In the unlikely case where fragmentation would become an <newline>-  // issue, the kernel will still have another half to use. <newline>   // A a bit-wise "and" won't bias our random distribution. <newline>-  random_address &= 0x3ffffffff000ULL; <newline>+  random_address &= kRandomAddressMask; <newline>   return reinterpret_cast<void*>(random_address); <newline> #endif  // ASLR_IS_SUPPORTED <newline> } <newline>+// Allocate |length| bytes of memory using mmap(). The memory will be <newline>+// readable and writeable, but not executable. <newline>+// Like mmap(), we will return MAP_FAILED on failure. <newline>+// |is_aslr_enabled| controls address space layout randomization. When true, we <newline>+// will put the first mapping at a random address and will then try to grow it. <newline>+// If it's not possible to grow an existing mapping, a new one will be created. <newline>+void* AllocWithMmap(size_t length, bool is_aslr_enabled) { <newline>+  // Note: we are protected by the general TCMalloc_SystemAlloc spinlock. <newline>+  static void* address_hint = NULL; <newline>+#if defined(ASLR_IS_SUPPORTED) <newline>+  if (is_aslr_enabled && <newline>+      (!address_hint || <newline>+       reinterpret_cast<uint64_t>(address_hint) & ~kRandomAddressMask)) { <newline>+    address_hint = GetRandomAddrHint(); <newline>+  } <newline>+#endif  // ASLR_IS_SUPPORTED <newline>+ <newline>+  // address_hint is likely to make us grow an existing mapping. <newline>+  void* result = mmap(address_hint, length, PROT_READ|PROT_WRITE, <newline>+                      MAP_PRIVATE|MAP_ANONYMOUS, -1, 0); <newline>+#if defined(ASLR_IS_SUPPORTED) <newline>+  if (result == address_hint) { <newline>+    // If mmap() succeeded at a address_hint, our next mmap() will try to grow <newline>+    // the current mapping as long as it's compatible with our ASLR mask. <newline>+    // This has been done for performance reasons, see crbug.com/173371. <newline>+    // It should be possible to strike a better balance between performance <newline>+    // and security but will be done at a later date. <newline>+    // If this overflows, it could only set address_hint to NULL, which is <newline>+    // what we want (and can't happen on the currently supported architecture). <newline>+    address_hint = static_cast<char*>(result) + length; <newline>+  } else { <newline>+    // mmap failed or a collision prevented the kernel from honoring the hint, <newline>+    // reset the hint. <newline>+    address_hint = NULL; <newline>+  } <newline>+#endif  // ASLR_IS_SUPPORTED <newline>+  return result; <newline>+} <newline>+ <newline> }  // Anonymous namespace to avoid name conflicts on "CheckAddressBits". <newline> COMPILE_ASSERT(kAddressBits <= 8 * sizeof(void*), <newline>@@ -405,14 +446,7 @@ void* MmapSysAllocator::Alloc(size_t size, size_t *actual_size, <newline>   //            size + alignment < (1<<NBITS). <newline>   // and        extra <= alignment <newline>   // therefore  size + extra < (1<<NBITS) <newline>-  void* address_hint = NULL; <newline>-  if (FLAGS_malloc_random_allocator) { <newline>-    address_hint = GetRandomAddrHint(); <newline>-  } <newline>-  void* result = mmap(address_hint, size + extra, <newline>-                      PROT_READ|PROT_WRITE, <newline>-                      MAP_PRIVATE|MAP_ANONYMOUS, <newline>-                      -1, 0); <newline>+  void* result = AllocWithMmap(size + extra, FLAGS_malloc_random_allocator); <newline>   if (result == reinterpret_cast<void*>(MAP_FAILED)) { <newline>     return NULL; <newline>   }																								
Chromium	1	5	fd994bed5fb9f46a8fabccb6ae0294af8bb1163	mpcomplete@chromium.org <mpcomplete@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Feb 4 21:33:08 2013 +0000	Revert 180514: It breaks the windows compile. > Linux: grow a unique random mapping in ASLR > > We loosen ASLR by only growing one random mapping. The previous version > had security benefits but had a negative performance impact. > This change aims to be performance neutral in respect to the pre-ASLR era. > At a later date, we may try to strike a good balance between performance and > security. > > This is a re-land of https://chromiumcodereview.appspot.com/12090112/ > > BUG=170133, 173371 > NOTRY=true > TBR=jar > > > Review URL: https://chromiumcodereview.appspot.com/12185028 TBR=jln@chromium.org			https://codereview.chromium.org/12192022	svn://svn.chromium.org/chrome/trunk/src@180522 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/third_party/tcmalloc/chromium/src/system-alloc.cc b/third_party/tcmalloc/chromium/src/system-alloc.cc <newline>index 2141d41..05338963 100644 <newline>--- a/third_party/tcmalloc/chromium/src/system-alloc.cc <newline>+++ b/third_party/tcmalloc/chromium/src/system-alloc.cc <newline>@@ -137,18 +137,6 @@ void raninit(ranctx* x, u4 seed) { <newline>   } <newline> } <newline>-// If the kernel cannot honor the hint in arch_get_unmapped_area_topdown, it <newline>-// will simply ignore it. So we give a hint that has a good chance of <newline>-// working. <newline>-// The mmap top-down allocator will normally allocate below TASK_SIZE - gap, <newline>-// with a gap that depends on the max stack size. See x86/mm/mmap.c. We <newline>-// should make allocations that are below this area, which would be <newline>-// 0x7ffbf8000000. <newline>-// We use 0x3ffffffff000 as the mask so that we only "pollute" half of the <newline>-// address space. In the unlikely case where fragmentation would become an <newline>-// issue, the kernel will still have another half to use. <newline>-const uint64_t kRandomAddressMask = 0x3ffffffff000ULL; <newline>- <newline> #endif  // defined(ASLR_IS_SUPPORTED) <newline> // Give a random "hint" that is suitable for use with mmap(). This cannot make <newline>@@ -189,51 +177,22 @@ void* GetRandomAddrHint() { <newline>   } <newline>   uint64_t random_address = (static_cast<uint64_t>(ranval(&ctx)) << 32) | <newline>                             ranval(&ctx); <newline>+  // If the kernel cannot honor the hint in arch_get_unmapped_area_topdown, it <newline>+  // will simply ignore it. So we give a hint that has a good chance of <newline>+  // working. <newline>+  // The mmap top-down allocator will normally allocate below TASK_SIZE - gap, <newline>+  // with a gap that depends on the max stack size. See x86/mm/mmap.c. We <newline>+  // should make allocations that are below this area, which would be <newline>+  // 0x7ffbf8000000. <newline>+  // We use 0x3ffffffff000 as the mask so that we only "pollute" half of the <newline>+  // address space. In the unlikely case where fragmentation would become an <newline>+  // issue, the kernel will still have another half to use. <newline>   // A a bit-wise "and" won't bias our random distribution. <newline>-  random_address &= kRandomAddressMask; <newline>+  random_address &= 0x3ffffffff000ULL; <newline>   return reinterpret_cast<void*>(random_address); <newline> #endif  // ASLR_IS_SUPPORTED <newline> } <newline>-// Allocate |length| bytes of memory using mmap(). The memory will be <newline>-// readable and writeable, but not executable. <newline>-// Like mmap(), we will return MAP_FAILED on failure. <newline>-// |is_aslr_enabled| controls address space layout randomization. When true, we <newline>-// will put the first mapping at a random address and will then try to grow it. <newline>-// If it's not possible to grow an existing mapping, a new one will be created. <newline>-void* AllocWithMmap(size_t length, bool is_aslr_enabled) { <newline>-  // Note: we are protected by the general TCMalloc_SystemAlloc spinlock. <newline>-  static void* address_hint = NULL; <newline>-#if defined(ASLR_IS_SUPPORTED) <newline>-  if (is_aslr_enabled && <newline>-      (!address_hint || <newline>-       reinterpret_cast<uint64_t>(address_hint) & ~kRandomAddressMask)) { <newline>-    address_hint = GetRandomAddrHint(); <newline>-  } <newline>-#endif  // ASLR_IS_SUPPORTED <newline>- <newline>-  // address_hint is likely to make us grow an existing mapping. <newline>-  void* result = mmap(address_hint, length, PROT_READ|PROT_WRITE, <newline>-                      MAP_PRIVATE|MAP_ANONYMOUS, -1, 0); <newline>-#if defined(ASLR_IS_SUPPORTED) <newline>-  if (result == address_hint) { <newline>-    // If mmap() succeeded at a address_hint, our next mmap() will try to grow <newline>-    // the current mapping as long as it's compatible with our ASLR mask. <newline>-    // This has been done for performance reasons, see crbug.com/173371. <newline>-    // It should be possible to strike a better balance between performance <newline>-    // and security but will be done at a later date. <newline>-    // If this overflows, it could only set address_hint to NULL, which is <newline>-    // what we want (and can't happen on the currently supported architecture). <newline>-    address_hint = static_cast<char*>(result) + length; <newline>-  } else { <newline>-    // mmap failed or a collision prevented the kernel from honoring the hint, <newline>-    // reset the hint. <newline>-    address_hint = NULL; <newline>-  } <newline>-#endif  // ASLR_IS_SUPPORTED <newline>-  return result; <newline>-} <newline>- <newline> }  // Anonymous namespace to avoid name conflicts on "CheckAddressBits". <newline> COMPILE_ASSERT(kAddressBits <= 8 * sizeof(void*), <newline>@@ -446,7 +405,14 @@ void* MmapSysAllocator::Alloc(size_t size, size_t *actual_size, <newline>   //            size + alignment < (1<<NBITS). <newline>   // and        extra <= alignment <newline>   // therefore  size + extra < (1<<NBITS) <newline>-  void* result = AllocWithMmap(size + extra, FLAGS_malloc_random_allocator); <newline>+  void* address_hint = NULL; <newline>+  if (FLAGS_malloc_random_allocator) { <newline>+    address_hint = GetRandomAddrHint(); <newline>+  } <newline>+  void* result = mmap(address_hint, size + extra, <newline>+                      PROT_READ|PROT_WRITE, <newline>+                      MAP_PRIVATE|MAP_ANONYMOUS, <newline>+                      -1, 0); <newline>   if (result == reinterpret_cast<void*>(MAP_FAILED)) { <newline>     return NULL; <newline>   }																								
Chromium	5		6d1ac629554b8ce748be395674d24ab8793047a	jln@chromium.org <jln@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Feb 4 20:49:16 2013 +0000	Linux: grow a unique random mapping in ASLR We loosen ASLR by only growing one random mapping. The previous version had security benefits but had a negative performance impact. This change aims to be performance neutral in respect to the pre-ASLR era. At a later date, we may try to strike a good balance between performance and security. This is a re-land of https://chromiumcodereview.appspot.com/12090112/ NOTRY=true TBR=jar	170133, 173371		https://chromiumcodereview.appspot.com/12185028	svn://svn.chromium.org/chrome/trunk/src@180514 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/third_party/tcmalloc/chromium/src/system-alloc.cc b/third_party/tcmalloc/chromium/src/system-alloc.cc <newline>index 05338963..2141d41 100644 <newline>--- a/third_party/tcmalloc/chromium/src/system-alloc.cc <newline>+++ b/third_party/tcmalloc/chromium/src/system-alloc.cc <newline>@@ -137,6 +137,18 @@ void raninit(ranctx* x, u4 seed) { <newline>   } <newline> } <newline>+// If the kernel cannot honor the hint in arch_get_unmapped_area_topdown, it <newline>+// will simply ignore it. So we give a hint that has a good chance of <newline>+// working. <newline>+// The mmap top-down allocator will normally allocate below TASK_SIZE - gap, <newline>+// with a gap that depends on the max stack size. See x86/mm/mmap.c. We <newline>+// should make allocations that are below this area, which would be <newline>+// 0x7ffbf8000000. <newline>+// We use 0x3ffffffff000 as the mask so that we only "pollute" half of the <newline>+// address space. In the unlikely case where fragmentation would become an <newline>+// issue, the kernel will still have another half to use. <newline>+const uint64_t kRandomAddressMask = 0x3ffffffff000ULL; <newline>+ <newline> #endif  // defined(ASLR_IS_SUPPORTED) <newline> // Give a random "hint" that is suitable for use with mmap(). This cannot make <newline>@@ -177,22 +189,51 @@ void* GetRandomAddrHint() { <newline>   } <newline>   uint64_t random_address = (static_cast<uint64_t>(ranval(&ctx)) << 32) | <newline>                             ranval(&ctx); <newline>-  // If the kernel cannot honor the hint in arch_get_unmapped_area_topdown, it <newline>-  // will simply ignore it. So we give a hint that has a good chance of <newline>-  // working. <newline>-  // The mmap top-down allocator will normally allocate below TASK_SIZE - gap, <newline>-  // with a gap that depends on the max stack size. See x86/mm/mmap.c. We <newline>-  // should make allocations that are below this area, which would be <newline>-  // 0x7ffbf8000000. <newline>-  // We use 0x3ffffffff000 as the mask so that we only "pollute" half of the <newline>-  // address space. In the unlikely case where fragmentation would become an <newline>-  // issue, the kernel will still have another half to use. <newline>   // A a bit-wise "and" won't bias our random distribution. <newline>-  random_address &= 0x3ffffffff000ULL; <newline>+  random_address &= kRandomAddressMask; <newline>   return reinterpret_cast<void*>(random_address); <newline> #endif  // ASLR_IS_SUPPORTED <newline> } <newline>+// Allocate |length| bytes of memory using mmap(). The memory will be <newline>+// readable and writeable, but not executable. <newline>+// Like mmap(), we will return MAP_FAILED on failure. <newline>+// |is_aslr_enabled| controls address space layout randomization. When true, we <newline>+// will put the first mapping at a random address and will then try to grow it. <newline>+// If it's not possible to grow an existing mapping, a new one will be created. <newline>+void* AllocWithMmap(size_t length, bool is_aslr_enabled) { <newline>+  // Note: we are protected by the general TCMalloc_SystemAlloc spinlock. <newline>+  static void* address_hint = NULL; <newline>+#if defined(ASLR_IS_SUPPORTED) <newline>+  if (is_aslr_enabled && <newline>+      (!address_hint || <newline>+       reinterpret_cast<uint64_t>(address_hint) & ~kRandomAddressMask)) { <newline>+    address_hint = GetRandomAddrHint(); <newline>+  } <newline>+#endif  // ASLR_IS_SUPPORTED <newline>+ <newline>+  // address_hint is likely to make us grow an existing mapping. <newline>+  void* result = mmap(address_hint, length, PROT_READ|PROT_WRITE, <newline>+                      MAP_PRIVATE|MAP_ANONYMOUS, -1, 0); <newline>+#if defined(ASLR_IS_SUPPORTED) <newline>+  if (result == address_hint) { <newline>+    // If mmap() succeeded at a address_hint, our next mmap() will try to grow <newline>+    // the current mapping as long as it's compatible with our ASLR mask. <newline>+    // This has been done for performance reasons, see crbug.com/173371. <newline>+    // It should be possible to strike a better balance between performance <newline>+    // and security but will be done at a later date. <newline>+    // If this overflows, it could only set address_hint to NULL, which is <newline>+    // what we want (and can't happen on the currently supported architecture). <newline>+    address_hint = static_cast<char*>(result) + length; <newline>+  } else { <newline>+    // mmap failed or a collision prevented the kernel from honoring the hint, <newline>+    // reset the hint. <newline>+    address_hint = NULL; <newline>+  } <newline>+#endif  // ASLR_IS_SUPPORTED <newline>+  return result; <newline>+} <newline>+ <newline> }  // Anonymous namespace to avoid name conflicts on "CheckAddressBits". <newline> COMPILE_ASSERT(kAddressBits <= 8 * sizeof(void*), <newline>@@ -405,14 +446,7 @@ void* MmapSysAllocator::Alloc(size_t size, size_t *actual_size, <newline>   //            size + alignment < (1<<NBITS). <newline>   // and        extra <= alignment <newline>   // therefore  size + extra < (1<<NBITS) <newline>-  void* address_hint = NULL; <newline>-  if (FLAGS_malloc_random_allocator) { <newline>-    address_hint = GetRandomAddrHint(); <newline>-  } <newline>-  void* result = mmap(address_hint, size + extra, <newline>-                      PROT_READ|PROT_WRITE, <newline>-                      MAP_PRIVATE|MAP_ANONYMOUS, <newline>-                      -1, 0); <newline>+  void* result = AllocWithMmap(size + extra, FLAGS_malloc_random_allocator); <newline>   if (result == reinterpret_cast<void*>(MAP_FAILED)) { <newline>     return NULL; <newline>   }																								
Chromium	5		bd87aae76ad8be29c469dbe0499d4768ba49fa6	jln@chromium.org <jln@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Feb 4 20:17:35 2013 +0000	Revert 180486 > Linux: grow a unique random mapping in ASLR > > We loosen ASLR by only growing one random mapping. The previous version > had security benefits but had a negative performance impact. > This change aims to be performance neutral in respect to the pre-ASLR era. > At a later date, we may try to strike a good balance between performance and > security. > > BUG=170133,173371 > NOTRY=true > > Review URL: https://chromiumcodereview.appspot.com/12090112 TBR=jln@chromium.org			https://codereview.chromium.org/12186021	svn://svn.chromium.org/chrome/trunk/src@180491 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/third_party/tcmalloc/chromium/src/system-alloc.cc b/third_party/tcmalloc/chromium/src/system-alloc.cc <newline>index 6438d12..05338963 100644 <newline>--- a/third_party/tcmalloc/chromium/src/system-alloc.cc <newline>+++ b/third_party/tcmalloc/chromium/src/system-alloc.cc <newline>@@ -137,18 +137,6 @@ void raninit(ranctx* x, u4 seed) { <newline>   } <newline> } <newline>-// If the kernel cannot honor the hint in arch_get_unmapped_area_topdown, it <newline>-// will simply ignore it. So we give a hint that has a good chance of <newline>-// working. <newline>-// The mmap top-down allocator will normally allocate below TASK_SIZE - gap, <newline>-// with a gap that depends on the max stack size. See x86/mm/mmap.c. We <newline>-// should make allocations that are below this area, which would be <newline>-// 0x7ffbf8000000. <newline>-// We use 0x3ffffffff000 as the mask so that we only "pollute" half of the <newline>-// address space. In the unlikely case where fragmentation would become an <newline>-// issue, the kernel will still have another half to use. <newline>-const uint64_t kRandomAddressMask = 0x3ffffffff000ULL; <newline>- <newline> #endif  // defined(ASLR_IS_SUPPORTED) <newline> // Give a random "hint" that is suitable for use with mmap(). This cannot make <newline>@@ -189,47 +177,22 @@ void* GetRandomAddrHint() { <newline>   } <newline>   uint64_t random_address = (static_cast<uint64_t>(ranval(&ctx)) << 32) | <newline>                             ranval(&ctx); <newline>+  // If the kernel cannot honor the hint in arch_get_unmapped_area_topdown, it <newline>+  // will simply ignore it. So we give a hint that has a good chance of <newline>+  // working. <newline>+  // The mmap top-down allocator will normally allocate below TASK_SIZE - gap, <newline>+  // with a gap that depends on the max stack size. See x86/mm/mmap.c. We <newline>+  // should make allocations that are below this area, which would be <newline>+  // 0x7ffbf8000000. <newline>+  // We use 0x3ffffffff000 as the mask so that we only "pollute" half of the <newline>+  // address space. In the unlikely case where fragmentation would become an <newline>+  // issue, the kernel will still have another half to use. <newline>   // A a bit-wise "and" won't bias our random distribution. <newline>-  random_address &= kRandomAddressMask; <newline>+  random_address &= 0x3ffffffff000ULL; <newline>   return reinterpret_cast<void*>(random_address); <newline> #endif  // ASLR_IS_SUPPORTED <newline> } <newline>-// Allocate |length| bytes of memory using mmap(). The memory will be <newline>-// readable and writeable, but not executable. <newline>-// Like mmap(), we will return MAP_FAILED on failure. <newline>-// |is_aslr_enabled| controls address space layout randomization. When true, we <newline>-// will put the first mapping at a random address and will then try to grow it. <newline>-// If it's not possible to grow an existing mapping, a new one will be created. <newline>-void* AllocWithMmap(size_t length, bool is_aslr_enabled) { <newline>-  // Note: we are protected by the general TCMalloc_SystemAlloc spinlock. <newline>-  static void* address_hint = NULL; <newline>-  if (is_aslr_enabled && <newline>-      (!address_hint || <newline>-       reinterpret_cast<uint64_t>(address_hint) & ~kRandomAddressMask)) { <newline>-    address_hint = GetRandomAddrHint(); <newline>-  } <newline>- <newline>-  // address_hint is likely to make us grow an existing mapping. <newline>-  void* result = mmap(address_hint, length, PROT_READ|PROT_WRITE, <newline>-                      MAP_PRIVATE|MAP_ANONYMOUS, -1, 0); <newline>-  if (result == address_hint) { <newline>-    // If mmap() succeeded at a address_hint, our next mmap() will try to grow <newline>-    // the current mapping as long as it's compatible with our ASLR mask. <newline>-    // This has been done for performance reasons, see crbug.com/173371. <newline>-    // It should be possible to strike a better balance between performance <newline>-    // and security but will be done at a later date. <newline>-    // If this overflows, it could only set address_hint to NULL, which is <newline>-    // what we want (and can't happen on the currently supported architecture). <newline>-    address_hint = static_cast<char*>(result) + length; <newline>-  } else { <newline>-    // mmap failed or a collision prevented the kernel from honoring the hint, <newline>-    // reset the hint. <newline>-    address_hint = NULL; <newline>-  } <newline>-  return result; <newline>-} <newline>- <newline> }  // Anonymous namespace to avoid name conflicts on "CheckAddressBits". <newline> COMPILE_ASSERT(kAddressBits <= 8 * sizeof(void*), <newline>@@ -442,7 +405,14 @@ void* MmapSysAllocator::Alloc(size_t size, size_t *actual_size, <newline>   //            size + alignment < (1<<NBITS). <newline>   // and        extra <= alignment <newline>   // therefore  size + extra < (1<<NBITS) <newline>-  void* result = AllocWithMmap(size + extra, FLAGS_malloc_random_allocator); <newline>+  void* address_hint = NULL; <newline>+  if (FLAGS_malloc_random_allocator) { <newline>+    address_hint = GetRandomAddrHint(); <newline>+  } <newline>+  void* result = mmap(address_hint, size + extra, <newline>+                      PROT_READ|PROT_WRITE, <newline>+                      MAP_PRIVATE|MAP_ANONYMOUS, <newline>+                      -1, 0); <newline>   if (result == reinterpret_cast<void*>(MAP_FAILED)) { <newline>     return NULL; <newline>   }																								
Chromium	5		4fd79627d23f32d817372ad60843ff5d7b2123a	jln@chromium.org <jln@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Feb 4 20:03:17 2013 +0000	Linux: grow a unique random mapping in ASLR We loosen ASLR by only growing one random mapping. The previous version had security benefits but had a negative performance impact. This change aims to be performance neutral in respect to the pre-ASLR era. At a later date, we may try to strike a good balance between performance and security. NOTRY=true	170133,173371		https://chromiumcodereview.appspot.com/12090112	svn://svn.chromium.org/chrome/trunk/src@180486 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/third_party/tcmalloc/chromium/src/system-alloc.cc b/third_party/tcmalloc/chromium/src/system-alloc.cc <newline>index 05338963..6438d12 100644 <newline>--- a/third_party/tcmalloc/chromium/src/system-alloc.cc <newline>+++ b/third_party/tcmalloc/chromium/src/system-alloc.cc <newline>@@ -137,6 +137,18 @@ void raninit(ranctx* x, u4 seed) { <newline>   } <newline> } <newline>+// If the kernel cannot honor the hint in arch_get_unmapped_area_topdown, it <newline>+// will simply ignore it. So we give a hint that has a good chance of <newline>+// working. <newline>+// The mmap top-down allocator will normally allocate below TASK_SIZE - gap, <newline>+// with a gap that depends on the max stack size. See x86/mm/mmap.c. We <newline>+// should make allocations that are below this area, which would be <newline>+// 0x7ffbf8000000. <newline>+// We use 0x3ffffffff000 as the mask so that we only "pollute" half of the <newline>+// address space. In the unlikely case where fragmentation would become an <newline>+// issue, the kernel will still have another half to use. <newline>+const uint64_t kRandomAddressMask = 0x3ffffffff000ULL; <newline>+ <newline> #endif  // defined(ASLR_IS_SUPPORTED) <newline> // Give a random "hint" that is suitable for use with mmap(). This cannot make <newline>@@ -177,22 +189,47 @@ void* GetRandomAddrHint() { <newline>   } <newline>   uint64_t random_address = (static_cast<uint64_t>(ranval(&ctx)) << 32) | <newline>                             ranval(&ctx); <newline>-  // If the kernel cannot honor the hint in arch_get_unmapped_area_topdown, it <newline>-  // will simply ignore it. So we give a hint that has a good chance of <newline>-  // working. <newline>-  // The mmap top-down allocator will normally allocate below TASK_SIZE - gap, <newline>-  // with a gap that depends on the max stack size. See x86/mm/mmap.c. We <newline>-  // should make allocations that are below this area, which would be <newline>-  // 0x7ffbf8000000. <newline>-  // We use 0x3ffffffff000 as the mask so that we only "pollute" half of the <newline>-  // address space. In the unlikely case where fragmentation would become an <newline>-  // issue, the kernel will still have another half to use. <newline>   // A a bit-wise "and" won't bias our random distribution. <newline>-  random_address &= 0x3ffffffff000ULL; <newline>+  random_address &= kRandomAddressMask; <newline>   return reinterpret_cast<void*>(random_address); <newline> #endif  // ASLR_IS_SUPPORTED <newline> } <newline>+// Allocate |length| bytes of memory using mmap(). The memory will be <newline>+// readable and writeable, but not executable. <newline>+// Like mmap(), we will return MAP_FAILED on failure. <newline>+// |is_aslr_enabled| controls address space layout randomization. When true, we <newline>+// will put the first mapping at a random address and will then try to grow it. <newline>+// If it's not possible to grow an existing mapping, a new one will be created. <newline>+void* AllocWithMmap(size_t length, bool is_aslr_enabled) { <newline>+  // Note: we are protected by the general TCMalloc_SystemAlloc spinlock. <newline>+  static void* address_hint = NULL; <newline>+  if (is_aslr_enabled && <newline>+      (!address_hint || <newline>+       reinterpret_cast<uint64_t>(address_hint) & ~kRandomAddressMask)) { <newline>+    address_hint = GetRandomAddrHint(); <newline>+  } <newline>+ <newline>+  // address_hint is likely to make us grow an existing mapping. <newline>+  void* result = mmap(address_hint, length, PROT_READ|PROT_WRITE, <newline>+                      MAP_PRIVATE|MAP_ANONYMOUS, -1, 0); <newline>+  if (result == address_hint) { <newline>+    // If mmap() succeeded at a address_hint, our next mmap() will try to grow <newline>+    // the current mapping as long as it's compatible with our ASLR mask. <newline>+    // This has been done for performance reasons, see crbug.com/173371. <newline>+    // It should be possible to strike a better balance between performance <newline>+    // and security but will be done at a later date. <newline>+    // If this overflows, it could only set address_hint to NULL, which is <newline>+    // what we want (and can't happen on the currently supported architecture). <newline>+    address_hint = static_cast<char*>(result) + length; <newline>+  } else { <newline>+    // mmap failed or a collision prevented the kernel from honoring the hint, <newline>+    // reset the hint. <newline>+    address_hint = NULL; <newline>+  } <newline>+  return result; <newline>+} <newline>+ <newline> }  // Anonymous namespace to avoid name conflicts on "CheckAddressBits". <newline> COMPILE_ASSERT(kAddressBits <= 8 * sizeof(void*), <newline>@@ -405,14 +442,7 @@ void* MmapSysAllocator::Alloc(size_t size, size_t *actual_size, <newline>   //            size + alignment < (1<<NBITS). <newline>   // and        extra <= alignment <newline>   // therefore  size + extra < (1<<NBITS) <newline>-  void* address_hint = NULL; <newline>-  if (FLAGS_malloc_random_allocator) { <newline>-    address_hint = GetRandomAddrHint(); <newline>-  } <newline>-  void* result = mmap(address_hint, size + extra, <newline>-                      PROT_READ|PROT_WRITE, <newline>-                      MAP_PRIVATE|MAP_ANONYMOUS, <newline>-                      -1, 0); <newline>+  void* result = AllocWithMmap(size + extra, FLAGS_malloc_random_allocator); <newline>   if (result == reinterpret_cast<void*>(MAP_FAILED)) { <newline>     return NULL; <newline>   }																								
Chromium	1	1	423369aab8184afa3b5acce25236ad62ef6b222	cevans@chromium.org <cevans@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Feb 1 21:42:30 2013 +0000	Update versions to cover the massive Feb 2013 Java CPU: http://www.oracle.com/technetwork/topics/security/javacpufeb2013-1841061.html	173733		https://codereview.chromium.org/12093116	svn://svn.chromium.org/chrome/trunk/src@180193 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/resources/plugin_metadata/plugins_win.json b/chrome/browser/resources/plugin_metadata/plugins_win.json <newline>index 16f4b0b..343a3b5 100644 <newline>--- a/chrome/browser/resources/plugin_metadata/plugins_win.json <newline>+++ b/chrome/browser/resources/plugin_metadata/plugins_win.json <newline>@@ -53,18 +53,18 @@ <newline>     ], <newline>     "versions": [ <newline>       { <newline>-        "version": "6.0.370", <newline>+        "version": "6.0.390", <newline>         "status": "requires_authorization", <newline>-        "comment": "Java SE 6 Update 37. '370' is not a typo." <newline>+        "comment": "Java SE 6 Update 39. '390' is not a typo." <newline>       }, <newline>       { <newline>         "version": "7", <newline>         "status": "out_of_date" <newline>       }, <newline>       { <newline>-        "version": "10.11", <newline>+        "version": "10.13", <newline>         "status": "requires_authorization", <newline>-        "comment": "Java SE 7u11" <newline>+        "comment": "Java SE 7u13" <newline>       } <newline>     ], <newline>     "lang": "en-US",																								
Chromium	5		f4181a35b24d814f498362c98eab0e161154427	rkc@chromium.org <rkc@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Feb 1 21:31:07 2013 +0000	Screensaver implementation for ChromeOS. This is the initial implementation for screensaver extensions. The feature is currently behind a flag and installing an extension with a screensaver permission without the flag enabled will do nothing. This currently allows one Screensaver extension to be installed at a time, and brings up the screensaver after a fixed 2 minutes. Further work to be done is to add different timeouts for power manager if the screensaver is active, add more tests and add security features for the screensaver permission (if needed, this needs to be discussed still). TBR'ed jhawkins for chrome_browser_chromeos.gypi R=mpcomplete@chromium.org,stevenjb@chromium.org TBR=jhawkins@chromium.org	163681		https://codereview.chromium.org/12093058	svn://svn.chromium.org/chrome/trunk/src@180189 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chromeos/dbus/power_manager_client.cc b/chromeos/dbus/power_manager_client.cc <newline>index 8b0adb8..f3df801 100644 <newline>--- a/chromeos/dbus/power_manager_client.cc <newline>+++ b/chromeos/dbus/power_manager_client.cc <newline>@@ -10,6 +10,7 @@ <newline> #include "base/callback.h" <newline> #include "base/format_macros.h" <newline> #include "base/memory/scoped_ptr.h" <newline>+#include "base/message_loop.h" <newline> #include "base/observer_list.h" <newline> #include "base/stringprintf.h" <newline> #include "base/threading/platform_thread.h" <newline>@@ -806,7 +807,15 @@ class PowerManagerClientStubImpl : public PowerManagerClient { <newline>     callback.Run(0); <newline>   } <newline>-  virtual void RequestIdleNotification(int64 threshold) OVERRIDE {} <newline>+  virtual void RequestIdleNotification(int64 threshold) OVERRIDE { <newline>+    MessageLoop::current()->PostDelayedTask( <newline>+        FROM_HERE, <newline>+        base::Bind(&PowerManagerClientStubImpl::TriggerIdleNotify, <newline>+                   base::Unretained(this), <newline>+                   threshold), <newline>+        base::TimeDelta::FromMilliseconds(threshold)); <newline>+  } <newline>+ <newline>   virtual void NotifyUserActivity( <newline>       const base::TimeTicks& last_activity_time) OVERRIDE {} <newline>   virtual void NotifyVideoActivity( <newline>@@ -869,6 +878,10 @@ class PowerManagerClientStubImpl : public PowerManagerClient { <newline>                       BrightnessChanged(brightness_level, user_initiated)); <newline>   } <newline>+  void TriggerIdleNotify(int64 threshold) { <newline>+    FOR_EACH_OBSERVER(Observer, observers_, IdleNotify(threshold)); <newline>+  } <newline>+ <newline>   bool discharging_; <newline>   int battery_percentage_; <newline>   double brightness_;																								
Chromium	1	2	43094e5a5f6c524ef57a0201906c988ecbc88ba	palmer@chromium.org <palmer@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Feb 1 21:25:54 2013 +0000	Force HTTPS and public keys for sandbox.google.com and subdomains. This would have helped mitigate a recent security bug. TEST=visit http://{plus,www,}.sandbox.google.com and make sure the request is upgraded to HTTPS.	172984		https://codereview.chromium.org/12093100	svn://svn.chromium.org/chrome/trunk/src@180188 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/base/transport_security_state_static.json b/net/base/transport_security_state_static.json <newline>index 1bf06e0..98a0392 100644 <newline>--- a/net/base/transport_security_state_static.json <newline>+++ b/net/base/transport_security_state_static.json <newline>@@ -173,6 +173,7 @@ <newline>     { "name": "talk.google.com", "include_subdomains": true, "mode": "force-https", "pins": "google" }, <newline>     { "name": "hostedtalkgadget.google.com", "include_subdomains": true, "mode": "force-https", "pins": "google" }, <newline>     { "name": "plus.google.com", "include_subdomains": true, "mode": "force-https", "pins": "google" }, <newline>+    { "name": "plus.sandbox.google.com", "include_subdomains": true, "mode": "force-https", "pins": "google" }, <newline>     { "name": "script.google.com", "include_subdomains": true, "mode": "force-https", "pins": "google" }, <newline>     { "name": "history.google.com", "include_subdomains": true, "mode": "force-https", "pins": "google" },																								
Chromium	1	5	c27f2e81cb6fa305b8e5a64bd198273a7bd76bc	jln@chromium.org <jln@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Sat Jan 26 07:37:23 2013 +0000	DrMemory: add suppressions for security overflow tests. TBR=markus NOTRY=true			https://chromiumcodereview.appspot.com/12082014	svn://svn.chromium.org/chrome/trunk/src@179056 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/tools/valgrind/drmemory/suppressions.txt b/tools/valgrind/drmemory/suppressions.txt <newline>index dc11b73..5bfa76a 100644 <newline>--- a/tools/valgrind/drmemory/suppressions.txt <newline>+++ b/tools/valgrind/drmemory/suppressions.txt <newline>@@ -390,3 +390,16 @@ content.dll!* <newline> KERNEL32.dll!* <newline> ntdll.dll!* <newline> ntdll.dll!* <newline>+ <newline>+WARNING <newline>+name=Security test (new oveflow) <newline>+MSVCR100D.dll!operator new <newline>+*!operator new <newline>+*!operator new[] <newline>+*!`anonymous namespace'::SecurityTest_NewOverflow_Test::TestBody <newline>+*!testing::internal::HandleExceptionsInMethodIfSupported<testing::Test,void> <newline>+ <newline>+WARNING <newline>+name=Security test (calloc overflow) <newline>+*!`anonymous namespace'::SecurityTest_CallocOverflow_Test::TestBody <newline>+*!testing::internal::HandleExceptionsInMethodIfSupported<testing::Test,void>																								
Chromium	1	5	c4729bef0bb78bf5128d3f8b8180eed1ecc8805	jln@chromium.org <jln@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Sat Jan 26 04:41:15 2013 +0000	Base: add a security test to check for new[] or calloc() overflowing. This is a re-land of https://chromiumcodereview.appspot.com/12033064/. NOTRY=true TBR=jar	172149		https://chromiumcodereview.appspot.com/12087012	svn://svn.chromium.org/chrome/trunk/src@179040 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/base/security_unittest.cc b/base/security_unittest.cc <newline>index 5db18fd..ffb9202 100644 <newline>--- a/base/security_unittest.cc <newline>+++ b/base/security_unittest.cc <newline>@@ -14,6 +14,7 @@ <newline> #include "testing/gtest/include/gtest/gtest.h" <newline> using std::nothrow; <newline>+using std::numeric_limits; <newline> namespace { <newline>@@ -100,4 +101,95 @@ TEST(SecurityTest, ALLOC_TEST(MemoryAllocationRestrictionsNewArray)) { <newline>   } <newline> } <newline>+// The tests bellow check for overflows in new[] and calloc(). <newline>+ <newline>+#if defined(OS_IOS) || defined(OS_WIN) <newline>+  #define DISABLE_ON_IOS_AND_WIN(function) DISABLED_##function <newline>+#else <newline>+  #define DISABLE_ON_IOS_AND_WIN(function) function <newline>+#endif <newline>+ <newline>+#if defined(ADDRESS_SANITIZER) <newline>+  #define DISABLE_ON_ASAN(function) DISABLED_##function <newline>+#else <newline>+  #define DISABLE_ON_ASAN(function) function <newline>+#endif <newline>+ <newline>+// There are platforms where these tests are known to fail. We would like to <newline>+// be able to easily check the status on the bots, but marking tests as <newline>+// FAILS_ is too clunky. <newline>+void OverflowTestsSoftExpectTrue(bool overflow_detected) { <newline>+  if (!overflow_detected) { <newline>+#if defined(OS_LINUX) || defined(OS_ANDROID) || defined(OS_MACOSX) <newline>+    // Sadly, on Linux, Android, and OSX we don't have a good story yet. Don't <newline>+    // fail the test, but report. <newline>+    printf("Platform has overflow: %s\n", <newline>+           !overflow_detected ? "yes." : "no."); <newline>+#else <newline>+    // Otherwise, fail the test. (Note: EXPECT are ok in subfunctions, ASSERT <newline>+    // aren't). <newline>+    EXPECT_TRUE(overflow_detected); <newline>+#endif <newline>+  } <newline>+} <newline>+ <newline>+// This function acts as a compiler optimization barrier. We use it to <newline>+// prevent the compiler from making an expression a compile-time constant. <newline>+// We also use it so that the compiler doesn't discard certain return values <newline>+// as something we don't need (see the comment with calloc below). <newline>+template <typename Type> <newline>+Type HideValueFromCompiler(volatile Type value) { <newline>+  return value; <newline>+} <newline>+ <newline>+// Test array[TooBig][X] and array[X][TooBig] allocations for int overflows. <newline>+// IOS doesn't honor nothrow, so disable the test there. <newline>+// Disable on Windows, we suspect some are failing because of it. <newline>+TEST(SecurityTest, DISABLE_ON_IOS_AND_WIN(NewOverflow)) { <newline>+  const size_t kArraySize = 4096; <newline>+  // We want something "dynamic" here, so that the compiler doesn't <newline>+  // immediately reject crazy arrays. <newline>+  const size_t kDynamicArraySize = HideValueFromCompiler(kArraySize); <newline>+  // numeric_limits are still not constexpr until we switch to C++11, so we <newline>+  // use an ugly cast. <newline>+  const size_t kMaxSizeT = ~static_cast<size_t>(0); <newline>+  ASSERT_EQ(numeric_limits<size_t>::max(), kMaxSizeT); <newline>+  const size_t kArraySize2 = kMaxSizeT / kArraySize + 10; <newline>+  const size_t kDynamicArraySize2 = HideValueFromCompiler(kArraySize2); <newline>+  { <newline>+    scoped_ptr<char[][kArraySize]> array_pointer(new (nothrow) <newline>+        char[kDynamicArraySize2][kArraySize]); <newline>+    OverflowTestsSoftExpectTrue(array_pointer == NULL); <newline>+  } <newline>+  { <newline>+    scoped_ptr<char[][kArraySize2]> array_pointer(new (nothrow) <newline>+        char[kDynamicArraySize][kArraySize2]); <newline>+    OverflowTestsSoftExpectTrue(array_pointer == NULL); <newline>+  } <newline>+} <newline>+ <newline>+// Test if calloc() can overflow. Disable on ASAN for now since the <newline>+// overflow seems present there. <newline>+TEST(SecurityTest, DISABLE_ON_ASAN(CallocOverflow)) { <newline>+  const size_t kArraySize = 4096; <newline>+  const size_t kMaxSizeT = numeric_limits<size_t>::max(); <newline>+  const size_t kArraySize2 = kMaxSizeT / kArraySize + 10; <newline>+  { <newline>+    scoped_ptr<char> array_pointer( <newline>+        static_cast<char*>(calloc(kArraySize, kArraySize2))); <newline>+    // We need the call to HideValueFromCompiler(): we have seen LLVM <newline>+    // optimize away the call to calloc() entirely and assume <newline>+    // the pointer to not be NULL. <newline>+    EXPECT_TRUE(HideValueFromCompiler(array_pointer.get()) == NULL); <newline>+  } <newline>+  { <newline>+    scoped_ptr<char> array_pointer( <newline>+        static_cast<char*>(calloc(kArraySize2, kArraySize))); <newline>+    // We need the call to HideValueFromCompiler(): we have seen LLVM <newline>+    // optimize away the call to calloc() entirely and assume <newline>+    // the pointer to not be NULL. <newline>+    EXPECT_TRUE(HideValueFromCompiler(array_pointer.get()) == NULL); <newline>+  } <newline>+} <newline>+ <newline> }  // namespace																								
Chromium	1	5	3a14a7da7f2539715bb52faab519e7a755f6189	zea@chromium.org <zea@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Sat Jan 26 00:53:15 2013 +0000	Revert 178928 > Base: add a security test to check for new[] or calloc() > overflowing > > BUG=172149 > NOTRY=true > > Review URL: https://chromiumcodereview.appspot.com/12033064 Reverted due to failing base_unittests (speculative revert). TBR=jln@chromium.org			https://codereview.chromium.org/12086009	svn://svn.chromium.org/chrome/trunk/src@178972 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/base/security_unittest.cc b/base/security_unittest.cc <newline>index 483d2a8..5db18fd 100644 <newline>--- a/base/security_unittest.cc <newline>+++ b/base/security_unittest.cc <newline>@@ -14,7 +14,6 @@ <newline> #include "testing/gtest/include/gtest/gtest.h" <newline> using std::nothrow; <newline>-using std::numeric_limits; <newline> namespace { <newline>@@ -101,94 +100,4 @@ TEST(SecurityTest, ALLOC_TEST(MemoryAllocationRestrictionsNewArray)) { <newline>   } <newline> } <newline>-// The tests bellow check for overflows in new[] and calloc(). <newline>- <newline>-#if defined(OS_IOS) <newline>-  #define DISABLE_ON_IOS(function) DISABLED_##function <newline>-#else <newline>-  #define DISABLE_ON_IOS(function) function <newline>-#endif <newline>- <newline>-#if defined(ADDRESS_SANITIZER) <newline>-  #define DISABLE_ON_ASAN(function) DISABLED_##function <newline>-#else <newline>-  #define DISABLE_ON_ASAN(function) function <newline>-#endif <newline>- <newline>-// There are platforms where these tests are known to fail. We would like to <newline>-// be able to easily check the status on the bots, but marking tests as <newline>-// FAILS_ is too clunky. <newline>-void OverflowTestsSoftExpectTrue(bool overflow_detected) { <newline>-  if (!overflow_detected) { <newline>-#if defined(OS_LINUX) || defined(OS_ANDROID) || defined(OS_MACOSX) <newline>-    // Sadly, on Linux, Android, and OSX we don't have a good story yet. Don't <newline>-    // fail the test, but report. <newline>-    printf("Platform has overflow: %s\n", <newline>-           !overflow_detected ? "yes." : "no."); <newline>-#else <newline>-    // Otherwise, fail the test. (Note: EXPECT are ok in subfunctions, ASSERT <newline>-    // aren't). <newline>-    EXPECT_TRUE(overflow_detected); <newline>-#endif <newline>-  } <newline>-} <newline>- <newline>-// This function acts as a compiler optimization barrier. We use it to <newline>-// prevent the compiler from making an expression a compile-time constant. <newline>-// We also use it so that the compiler doesn't discard certain return values <newline>-// as something we don't need (see the comment with calloc below). <newline>-template <typename Type> <newline>-Type HideValueFromCompiler(volatile Type value) { <newline>-  return value; <newline>-} <newline>- <newline>-// Test array[TooBig][X] and array[X][TooBig] allocations for int overflows. <newline>-// IOS doesn't honor nothrow, so disable the test there. <newline>-TEST(SecurityTest, DISABLE_ON_IOS(NewOverflow)) { <newline>-  const size_t kArraySize = 4096; <newline>-  // We want something "dynamic" here, so that the compiler doesn't <newline>-  // immediately reject crazy arrays. <newline>-  const size_t kDynamicArraySize = HideValueFromCompiler(kArraySize); <newline>-  // numeric_limits are still not constexpr until we switch to C++11, so we <newline>-  // use an ugly cast. <newline>-  const size_t kMaxSizeT = ~static_cast<size_t>(0); <newline>-  ASSERT_EQ(numeric_limits<size_t>::max(), kMaxSizeT); <newline>-  const size_t kArraySize2 = kMaxSizeT / kArraySize + 10; <newline>-  const size_t kDynamicArraySize2 = HideValueFromCompiler(kArraySize2); <newline>-  { <newline>-    scoped_ptr<char[][kArraySize]> array_pointer(new (nothrow) <newline>-        char[kDynamicArraySize2][kArraySize]); <newline>-    OverflowTestsSoftExpectTrue(array_pointer == NULL); <newline>-  } <newline>-  { <newline>-    scoped_ptr<char[][kArraySize2]> array_pointer(new (nothrow) <newline>-        char[kDynamicArraySize][kArraySize2]); <newline>-    OverflowTestsSoftExpectTrue(array_pointer == NULL); <newline>-  } <newline>-} <newline>- <newline>-// Test if calloc() can overflow. Disable on ASAN for now since the <newline>-// overflow seems present there. <newline>-TEST(SecurityTest, DISABLE_ON_ASAN(CallocOverflow)) { <newline>-  const size_t kArraySize = 4096; <newline>-  const size_t kMaxSizeT = numeric_limits<size_t>::max(); <newline>-  const size_t kArraySize2 = kMaxSizeT / kArraySize + 10; <newline>-  { <newline>-    scoped_ptr<char> array_pointer( <newline>-        static_cast<char*>(calloc(kArraySize, kArraySize2))); <newline>-    // We need the call to HideValueFromCompiler(): we have seen LLVM <newline>-    // optimize away the call to calloc() entirely and assume <newline>-    // the pointer to not be NULL. <newline>-    EXPECT_TRUE(HideValueFromCompiler(array_pointer.get()) == NULL); <newline>-  } <newline>-  { <newline>-    scoped_ptr<char> array_pointer( <newline>-        static_cast<char*>(calloc(kArraySize2, kArraySize))); <newline>-    // We need the call to HideValueFromCompiler(): we have seen LLVM <newline>-    // optimize away the call to calloc() entirely and assume <newline>-    // the pointer to not be NULL. <newline>-    EXPECT_TRUE(HideValueFromCompiler(array_pointer.get()) == NULL); <newline>-  } <newline>-} <newline>- <newline> }  // namespace																								
Chromium	1	5	dd40c83ae92697e834c726b4eb0754ac04217a0	jln@chromium.org <jln@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Jan 25 22:47:12 2013 +0000	Base: add a security test to check for new[] or calloc() overflowing NOTRY=true	172149		https://chromiumcodereview.appspot.com/12033064	svn://svn.chromium.org/chrome/trunk/src@178928 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/base/security_unittest.cc b/base/security_unittest.cc <newline>index 5db18fd..483d2a8 100644 <newline>--- a/base/security_unittest.cc <newline>+++ b/base/security_unittest.cc <newline>@@ -14,6 +14,7 @@ <newline> #include "testing/gtest/include/gtest/gtest.h" <newline> using std::nothrow; <newline>+using std::numeric_limits; <newline> namespace { <newline>@@ -100,4 +101,94 @@ TEST(SecurityTest, ALLOC_TEST(MemoryAllocationRestrictionsNewArray)) { <newline>   } <newline> } <newline>+// The tests bellow check for overflows in new[] and calloc(). <newline>+ <newline>+#if defined(OS_IOS) <newline>+  #define DISABLE_ON_IOS(function) DISABLED_##function <newline>+#else <newline>+  #define DISABLE_ON_IOS(function) function <newline>+#endif <newline>+ <newline>+#if defined(ADDRESS_SANITIZER) <newline>+  #define DISABLE_ON_ASAN(function) DISABLED_##function <newline>+#else <newline>+  #define DISABLE_ON_ASAN(function) function <newline>+#endif <newline>+ <newline>+// There are platforms where these tests are known to fail. We would like to <newline>+// be able to easily check the status on the bots, but marking tests as <newline>+// FAILS_ is too clunky. <newline>+void OverflowTestsSoftExpectTrue(bool overflow_detected) { <newline>+  if (!overflow_detected) { <newline>+#if defined(OS_LINUX) || defined(OS_ANDROID) || defined(OS_MACOSX) <newline>+    // Sadly, on Linux, Android, and OSX we don't have a good story yet. Don't <newline>+    // fail the test, but report. <newline>+    printf("Platform has overflow: %s\n", <newline>+           !overflow_detected ? "yes." : "no."); <newline>+#else <newline>+    // Otherwise, fail the test. (Note: EXPECT are ok in subfunctions, ASSERT <newline>+    // aren't). <newline>+    EXPECT_TRUE(overflow_detected); <newline>+#endif <newline>+  } <newline>+} <newline>+ <newline>+// This function acts as a compiler optimization barrier. We use it to <newline>+// prevent the compiler from making an expression a compile-time constant. <newline>+// We also use it so that the compiler doesn't discard certain return values <newline>+// as something we don't need (see the comment with calloc below). <newline>+template <typename Type> <newline>+Type HideValueFromCompiler(volatile Type value) { <newline>+  return value; <newline>+} <newline>+ <newline>+// Test array[TooBig][X] and array[X][TooBig] allocations for int overflows. <newline>+// IOS doesn't honor nothrow, so disable the test there. <newline>+TEST(SecurityTest, DISABLE_ON_IOS(NewOverflow)) { <newline>+  const size_t kArraySize = 4096; <newline>+  // We want something "dynamic" here, so that the compiler doesn't <newline>+  // immediately reject crazy arrays. <newline>+  const size_t kDynamicArraySize = HideValueFromCompiler(kArraySize); <newline>+  // numeric_limits are still not constexpr until we switch to C++11, so we <newline>+  // use an ugly cast. <newline>+  const size_t kMaxSizeT = ~static_cast<size_t>(0); <newline>+  ASSERT_EQ(numeric_limits<size_t>::max(), kMaxSizeT); <newline>+  const size_t kArraySize2 = kMaxSizeT / kArraySize + 10; <newline>+  const size_t kDynamicArraySize2 = HideValueFromCompiler(kArraySize2); <newline>+  { <newline>+    scoped_ptr<char[][kArraySize]> array_pointer(new (nothrow) <newline>+        char[kDynamicArraySize2][kArraySize]); <newline>+    OverflowTestsSoftExpectTrue(array_pointer == NULL); <newline>+  } <newline>+  { <newline>+    scoped_ptr<char[][kArraySize2]> array_pointer(new (nothrow) <newline>+        char[kDynamicArraySize][kArraySize2]); <newline>+    OverflowTestsSoftExpectTrue(array_pointer == NULL); <newline>+  } <newline>+} <newline>+ <newline>+// Test if calloc() can overflow. Disable on ASAN for now since the <newline>+// overflow seems present there. <newline>+TEST(SecurityTest, DISABLE_ON_ASAN(CallocOverflow)) { <newline>+  const size_t kArraySize = 4096; <newline>+  const size_t kMaxSizeT = numeric_limits<size_t>::max(); <newline>+  const size_t kArraySize2 = kMaxSizeT / kArraySize + 10; <newline>+  { <newline>+    scoped_ptr<char> array_pointer( <newline>+        static_cast<char*>(calloc(kArraySize, kArraySize2))); <newline>+    // We need the call to HideValueFromCompiler(): we have seen LLVM <newline>+    // optimize away the call to calloc() entirely and assume <newline>+    // the pointer to not be NULL. <newline>+    EXPECT_TRUE(HideValueFromCompiler(array_pointer.get()) == NULL); <newline>+  } <newline>+  { <newline>+    scoped_ptr<char> array_pointer( <newline>+        static_cast<char*>(calloc(kArraySize2, kArraySize))); <newline>+    // We need the call to HideValueFromCompiler(): we have seen LLVM <newline>+    // optimize away the call to calloc() entirely and assume <newline>+    // the pointer to not be NULL. <newline>+    EXPECT_TRUE(HideValueFromCompiler(array_pointer.get()) == NULL); <newline>+  } <newline>+} <newline>+ <newline> }  // namespace																								
Chromium	1	1	445732a62efc6c449319b1db97f57ef990f5072	grv@chromium.org <grv@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Jan 25 01:23:34 2013 +0000	Revert 11649004 because of potential security exploit. Revert the change allowing chrome:// URLs to component apps. This has previously resulted in a security exploit.	172017		https://chromiumcodereview.appspot.com/12038070	svn://svn.chromium.org/chrome/trunk/src@178720 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/renderer_host/chrome_render_view_host_observer.cc b/chrome/browser/renderer_host/chrome_render_view_host_observer.cc <newline>index 3a2e24c..fd9d9d1 100644 <newline>--- a/chrome/browser/renderer_host/chrome_render_view_host_observer.cc <newline>+++ b/chrome/browser/renderer_host/chrome_render_view_host_observer.cc <newline>@@ -84,11 +84,10 @@ void ChromeRenderViewHostObserver::InitRenderViewForExtensions() { <newline>   content::RenderProcessHost* process = render_view_host()->GetProcess(); <newline>-  // Some extensions and apps use chrome:// URLs. <newline>+  // Some extensions use chrome:// URLs. <newline>   Extension::Type type = extension->GetType(); <newline>   if (type == Extension::TYPE_EXTENSION || <newline>-      type == Extension::TYPE_LEGACY_PACKAGED_APP || <newline>-      extension->location() == Extension::COMPONENT) { <newline>+      type == Extension::TYPE_LEGACY_PACKAGED_APP) { <newline>     ChildProcessSecurityPolicy::GetInstance()->GrantScheme( <newline>         process->GetID(), chrome::kChromeUIScheme);																								
Chromium	5		72b3cc46b2b2a89d2f985c78745d5f7c34dde77	maruel@chromium.org <maruel@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Jan 24 00:48:48 2013 +0000	Fix many test case failures when run isolated on OSX. For an unknown reason, DIR_SOURCE_ROOT may return a path with '..' in it, which triggers the security check added in r175642. This only seems to happen when called inside isolate.py. Fix the issue whoesale by enforcing an absolute path. R=mark@chromium.org	168890		https://chromiumcodereview.appspot.com/12038049	svn://svn.chromium.org/chrome/trunk/src@178448 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/base/base_paths_mac.mm b/base/base_paths_mac.mm <newline>index 630f742..d217d90 100644 <newline>--- a/base/base_paths_mac.mm <newline>+++ b/base/base_paths_mac.mm <newline>@@ -90,6 +90,9 @@ bool PathProviderMac(int key, FilePath* result) { <newline>         *result = result->DirName().DirName(); <newline>       } <newline> #endif <newline>+      if (result->ReferencesParent()) { <newline>+        return file_util::AbsolutePath(result); <newline>+      } <newline>       return true; <newline>     case base::DIR_USER_DESKTOP: <newline> #if defined(OS_IOS)																								
Chromium	5		708ae170964afefadafdaf1e5428595ff6bc976	jam@chromium.org <jam@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Jan 22 18:45:24 2013 +0000	Get rid of the static list of URLs in chrome_url_data_manager_backend.cc which controlled security headers. Instead specify this data through the URLDataSource and WebUIDataSource interfaces. This is needed so that webui pages can be implemented in different modules (i.e. content, chrome, chromeos), so chrome_url_data_manager_backend.cc will move to content and won't know about every type of webui page.	169170		https://codereview.chromium.org/12041014	svn://svn.chromium.org/chrome/trunk/src@178040 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/public/browser/web_ui_data_source.h b/content/public/browser/web_ui_data_source.h <newline>index da9e7c7..b28d014 100644 <newline>--- a/content/public/browser/web_ui_data_source.h <newline>+++ b/content/public/browser/web_ui_data_source.h <newline>@@ -64,6 +64,17 @@ class WebUIDataSource { <newline>   // Allows a caller to add a filter for URL requests. <newline>   virtual void SetRequestFilter(const HandleRequestCallback& callback) = 0; <newline>+ <newline>+  // The following map to methods on URLDataSource. See the documentation there. <newline>+  // NOTE: it's not acceptable to call DisableContentSecurityPolicy for new <newline>+  // pages, see URLDataSource::ShouldAddContentSecurityPolicy and talk to <newline>+  // tsepez. <newline>+  virtual void DisableContentSecurityPolicy() = 0; <newline>+  virtual void OverrideContentSecurityPolicyObjectSrc( <newline>+      const std::string& data) = 0; <newline>+  virtual void OverrideContentSecurityPolicyFrameSrc( <newline>+      const std::string& data) = 0; <newline>+  virtual void DisableDenyXFrameOptions() = 0; <newline> }; <newline> }  // namespace content																								
Chromium	5		34f6ad39b9bb1cddafa5b1f60b7771299a99605	penghuang@chromium.org <penghuang@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Jan 22 17:45:08 2013 +0000	Do not update the geolocation permission for local pages When chrome is launched with --disable-web-security and a local page tries to use the geolocation api, the chrome browser will ask permssion from user and then will update geolocation permission for the local page with URL file:///. But the file:/// is not a valid ContentSettingsPattern. It will cause crash in debug build. This change fixes the crash.	171323		https://chromiumcodereview.appspot.com/12033015	svn://svn.chromium.org/chrome/trunk/src@178026 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/geolocation/geolocation_infobar_queue_controller.h b/chrome/browser/geolocation/geolocation_infobar_queue_controller.h <newline>index 3260c1d..0f40922 100644 <newline>--- a/chrome/browser/geolocation/geolocation_infobar_queue_controller.h <newline>+++ b/chrome/browser/geolocation/geolocation_infobar_queue_controller.h <newline>@@ -78,6 +78,9 @@ class GeolocationInfoBarQueueController : content::NotificationObserver { <newline>   void RegisterForInfoBarNotifications(InfoBarService* infobar_service); <newline>   void UnregisterForInfoBarNotifications(InfoBarService* infobar_service); <newline>+  void UpdateContentSetting( <newline>+      const GURL& requesting_frame, const GURL& embedder, bool allowed); <newline>+ <newline>   content::NotificationRegistrar registrar_; <newline>   Profile* const profile_;																								
Chromium	1	2	cbcabf9c8627175730104d11e1b738ea3900a30	rsleevi@chromium.org <rsleevi@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Jan 16 03:08:54 2013 +0000	Remove support for 'system' SSL on Mac (SecureTransport) and Win (SChannel) Remove support for the command-line fallback --use-system-ssl, as it adds to the maintenance burden and presents a security risk due to inconsistent patching by the OS vendors. On all platforms but Android, NSS is used for SSL in all situations. This does not change how certificate verification is handled, just the underlying SSL implementation. TBR=sky	170214		https://chromiumcodereview.appspot.com/11876044	svn://svn.chromium.org/chrome/trunk/src@177068 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/socket/ssl_client_socket_win.h b/net/socket/ssl_client_socket_win.h <newline>deleted file mode 100644 <newline>index 0877cbc..0000000 <newline>--- a/net/socket/ssl_client_socket_win.h <newline>+++ /dev/null <newline>@@ -1,213 +0,0 @@ <newline>-// Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline>-// Use of this source code is governed by a BSD-style license that can be <newline>-// found in the LICENSE file. <newline>- <newline>-#ifndef NET_SOCKET_SSL_CLIENT_SOCKET_WIN_H_ <newline>-#define NET_SOCKET_SSL_CLIENT_SOCKET_WIN_H_ <newline>- <newline>-#define SECURITY_WIN32  // Needs to be defined before including security.h <newline>- <newline>-#include <windows.h> <newline>-#include <wincrypt.h> <newline>-#include <security.h> <newline>- <newline>-#include <string> <newline>- <newline>-#include "base/memory/scoped_ptr.h" <newline>-#include "net/base/cert_verify_result.h" <newline>-#include "net/base/completion_callback.h" <newline>-#include "net/base/host_port_pair.h" <newline>-#include "net/base/net_log.h" <newline>-#include "net/base/ssl_config_service.h" <newline>-#include "net/socket/ssl_client_socket.h" <newline>- <newline>-namespace net { <newline>- <newline>-class BoundNetLog; <newline>-class CertVerifier; <newline>-class ClientSocketHandle; <newline>-class HostPortPair; <newline>-class SingleRequestCertVerifier; <newline>- <newline>-// An SSL client socket implemented with the Windows Schannel. <newline>-class SSLClientSocketWin : public SSLClientSocket { <newline>- public: <newline>-  // Takes ownership of the |transport_socket|, which must already be connected. <newline>-  // The hostname specified in |host_and_port| will be compared with the name(s) <newline>-  // in the server's certificate during the SSL handshake.  If SSL client <newline>-  // authentication is requested, the host_and_port field of SSLCertRequestInfo <newline>-  // will be populated with |host_and_port|.  |ssl_config| specifies <newline>-  // the SSL settings. <newline>-  SSLClientSocketWin(ClientSocketHandle* transport_socket, <newline>-                     const HostPortPair& host_and_port, <newline>-                     const SSLConfig& ssl_config, <newline>-                     const SSLClientSocketContext& context); <newline>-  ~SSLClientSocketWin(); <newline>- <newline>-  // SSLClientSocket implementation. <newline>-  virtual void GetSSLCertRequestInfo(SSLCertRequestInfo* cert_request_info); <newline>-  virtual NextProtoStatus GetNextProto(std::string* proto, <newline>-                                       std::string* server_protos); <newline>-  virtual ServerBoundCertService* GetServerBoundCertService() const OVERRIDE; <newline>- <newline>-  // SSLSocket implementation. <newline>-  virtual int ExportKeyingMaterial(const base::StringPiece& label, <newline>-                                   bool has_context, <newline>-                                   const base::StringPiece& context, <newline>-                                   unsigned char* out, <newline>-                                   unsigned int outlen); <newline>-  virtual int GetTLSUniqueChannelBinding(std::string* out) OVERRIDE; <newline>- <newline>-  // StreamSocket implementation. <newline>-  virtual int Connect(const CompletionCallback& callback) OVERRIDE; <newline>-  virtual void Disconnect() OVERRIDE; <newline>-  virtual bool IsConnected() const OVERRIDE; <newline>-  virtual bool IsConnectedAndIdle() const OVERRIDE; <newline>-  virtual int GetPeerAddress(IPEndPoint* address) const OVERRIDE; <newline>-  virtual int GetLocalAddress(IPEndPoint* address) const OVERRIDE; <newline>-  virtual const BoundNetLog& NetLog() const  OVERRIDE{ return net_log_; } <newline>-  virtual void SetSubresourceSpeculation() OVERRIDE; <newline>-  virtual void SetOmniboxSpeculation() OVERRIDE; <newline>-  virtual bool WasEverUsed() const OVERRIDE; <newline>-  virtual bool UsingTCPFastOpen() const OVERRIDE; <newline>-  virtual int64 NumBytesRead() const OVERRIDE; <newline>-  virtual base::TimeDelta GetConnectTimeMicros() const OVERRIDE; <newline>-  virtual bool GetSSLInfo(SSLInfo* ssl_info) OVERRIDE; <newline>- <newline>-  // Socket implementation. <newline>-  virtual int Read(IOBuffer* buf, int buf_len, <newline>-                   const CompletionCallback& callback) OVERRIDE; <newline>-  virtual int Write(IOBuffer* buf, int buf_len, <newline>-                    const CompletionCallback& callback) OVERRIDE; <newline>- <newline>-  virtual bool SetReceiveBufferSize(int32 size) OVERRIDE; <newline>-  virtual bool SetSendBufferSize(int32 size) OVERRIDE; <newline>- <newline>- private: <newline>-  bool completed_handshake() const { <newline>-    return next_state_ == STATE_COMPLETED_HANDSHAKE; <newline>-  } <newline>- <newline>-  // Initializes the SSL options and security context. Returns a net error code. <newline>-  int InitializeSSLContext(); <newline>- <newline>-  void OnHandshakeIOComplete(int result); <newline>-  void OnReadComplete(int result); <newline>-  void OnWriteComplete(int result); <newline>- <newline>-  int DoLoop(int last_io_result); <newline>-  int DoHandshakeRead(); <newline>-  int DoHandshakeReadComplete(int result); <newline>-  int DoHandshakeWrite(); <newline>-  int DoHandshakeWriteComplete(int result); <newline>-  int DoVerifyCert(); <newline>-  int DoVerifyCertComplete(int result); <newline>- <newline>-  int DoPayloadRead(); <newline>-  int DoPayloadReadComplete(int result); <newline>-  int DoPayloadDecrypt(); <newline>-  int DoPayloadEncrypt(); <newline>-  int DoPayloadWrite(); <newline>-  int DoPayloadWriteComplete(int result); <newline>-  int DoCompletedRenegotiation(int result); <newline>- <newline>-  int DidCallInitializeSecurityContext(); <newline>-  int DidCompleteHandshake(); <newline>-  void DidCompleteRenegotiation(); <newline>-  void LogConnectionTypeMetrics() const; <newline>-  void FreeSendBuffer(); <newline>- <newline>-  scoped_ptr<ClientSocketHandle> transport_; <newline>-  HostPortPair host_and_port_; <newline>-  SSLConfig ssl_config_; <newline>- <newline>-  // User function to callback when the Connect() completes. <newline>-  CompletionCallback user_connect_callback_; <newline>- <newline>-  // User function to callback when a Read() completes. <newline>-  CompletionCallback user_read_callback_; <newline>-  scoped_refptr<IOBuffer> user_read_buf_; <newline>-  int user_read_buf_len_; <newline>- <newline>-  // User function to callback when a Write() completes. <newline>-  CompletionCallback user_write_callback_; <newline>-  scoped_refptr<IOBuffer> user_write_buf_; <newline>-  int user_write_buf_len_; <newline>- <newline>-  // Used to Read and Write using transport_. <newline>-  scoped_refptr<IOBuffer> transport_read_buf_; <newline>-  scoped_refptr<IOBuffer> transport_write_buf_; <newline>- <newline>-  enum State { <newline>-    STATE_NONE, <newline>-    STATE_HANDSHAKE_READ, <newline>-    STATE_HANDSHAKE_READ_COMPLETE, <newline>-    STATE_HANDSHAKE_WRITE, <newline>-    STATE_HANDSHAKE_WRITE_COMPLETE, <newline>-    STATE_VERIFY_CERT, <newline>-    STATE_VERIFY_CERT_COMPLETE, <newline>-    STATE_COMPLETED_RENEGOTIATION, <newline>-    STATE_COMPLETED_HANDSHAKE <newline>-    // After the handshake, the socket remains <newline>-    // in the STATE_COMPLETED_HANDSHAKE state, <newline>-    // unless a renegotiate handshake occurs. <newline>-  }; <newline>-  State next_state_; <newline>- <newline>-  SecPkgContext_StreamSizes stream_sizes_; <newline>-  scoped_refptr<X509Certificate> server_cert_; <newline>-  CertVerifier* const cert_verifier_; <newline>-  scoped_ptr<SingleRequestCertVerifier> verifier_; <newline>-  CertVerifyResult server_cert_verify_result_; <newline>- <newline>-  CredHandle* creds_; <newline>-  CtxtHandle ctxt_; <newline>-  SecBuffer in_buffers_[2];  // Input buffers for InitializeSecurityContext. <newline>-  SecBuffer send_buffer_;  // Output buffer for InitializeSecurityContext. <newline>-  SECURITY_STATUS isc_status_;  // Return value of InitializeSecurityContext. <newline>-  scoped_array<char> payload_send_buffer_; <newline>-  int payload_send_buffer_len_; <newline>-  int bytes_sent_; <newline>- <newline>-  // recv_buffer_ holds the received ciphertext.  Since Schannel decrypts <newline>-  // data in place, sometimes recv_buffer_ may contain decrypted plaintext and <newline>-  // any undecrypted ciphertext.  (Ciphertext is decrypted one full SSL record <newline>-  // at a time.) <newline>-  // <newline>-  // If bytes_decrypted_ is 0, the received ciphertext is at the beginning of <newline>-  // recv_buffer_, ready to be passed to DecryptMessage. <newline>-  scoped_array<char> recv_buffer_; <newline>-  char* decrypted_ptr_;  // Points to the decrypted plaintext in recv_buffer_ <newline>-  int bytes_decrypted_;  // The number of bytes of decrypted plaintext. <newline>-  char* received_ptr_;  // Points to the received ciphertext in recv_buffer_ <newline>-  int bytes_received_;  // The number of bytes of received ciphertext. <newline>- <newline>-  // True if we're writing the first token (handshake message) to the server, <newline>-  // false if we're writing a subsequent token.  After we have written a token <newline>-  // successfully, DoHandshakeWriteComplete checks this member to set the next <newline>-  // state. <newline>-  bool writing_first_token_; <newline>- <newline>-  // Only used in the STATE_HANDSHAKE_READ_COMPLETE and <newline>-  // STATE_PAYLOAD_READ_COMPLETE states.  True if a 'result' argument of OK <newline>-  // should be ignored, to prevent it from being interpreted as EOF. <newline>-  // <newline>-  // The reason we need this flag is that OK means not only "0 bytes of data <newline>-  // were read" but also EOF.  We set ignore_ok_result_ to true when we need <newline>-  // to continue processing previously read data without reading more data. <newline>-  // We have to pass a 'result' of OK to the DoLoop method, and don't want it <newline>-  // to be interpreted as EOF. <newline>-  bool ignore_ok_result_; <newline>- <newline>-  // Renegotiation is in progress. <newline>-  bool renegotiating_; <newline>- <newline>-  // True when the decrypter needs more data in order to decrypt. <newline>-  bool need_more_data_; <newline>- <newline>-  BoundNetLog net_log_; <newline>-}; <newline>- <newline>-}  // namespace net <newline>- <newline>-#endif  // NET_SOCKET_SSL_CLIENT_SOCKET_WIN_H_																								
Chromium	1	5	5bf9a135808b579f659d73e6048dd86bc6db903	jln@chromium.org <jln@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Jan 15 20:16:33 2013 +0000	TCMalloc: restrict maximum size of memory allocations For security purposes, we restrict the maximum size of memory allocations under what can be indexed by an int. NOTRY=true	169327		https://chromiumcodereview.appspot.com/11857007	svn://svn.chromium.org/chrome/trunk/src@176961 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/third_party/tcmalloc/chromium/src/tcmalloc.cc b/third_party/tcmalloc/chromium/src/tcmalloc.cc <newline>index 2ff2a3b..591c687 100644 <newline>--- a/third_party/tcmalloc/chromium/src/tcmalloc.cc <newline>+++ b/third_party/tcmalloc/chromium/src/tcmalloc.cc <newline>@@ -296,6 +296,16 @@ size_t InvalidGetAllocatedSize(const void* ptr) { <newline>       "Attempt to get the size of an invalid pointer", ptr); <newline>   return 0; <newline> } <newline>+ <newline>+// For security reasons, we want to limit the size of allocations. <newline>+// See crbug.com/169327. <newline>+inline bool IsAllocSizePermitted(size_t alloc_size) { <newline>+  // Never allow an allocation larger than what can be indexed via an int. <newline>+  // Remove kPageSize to account for various rounding, padding and to have a <newline>+  // small margin. <newline>+  return alloc_size <= ((std::numeric_limits<int>::max)() - kPageSize); <newline>+} <newline>+ <newline> }  // unnamed namespace <newline> // Extract interesting stats <newline>@@ -1078,27 +1088,31 @@ inline void* do_malloc(size_t size) { <newline>   // The following call forces module initialization <newline>   ThreadCache* heap = ThreadCache::GetCache(); <newline>-  if (size <= kMaxSize) { <newline>-    size_t cl = Static::sizemap()->SizeClass(size); <newline>-    size = Static::sizemap()->class_to_size(cl); <newline>- <newline>-    // TODO(jar): If this has any detectable performance impact, it can be <newline>-    // optimized by only tallying sizes if the profiler was activated to recall <newline>-    // these tallies.  I don't think this is performance critical, but we really <newline>-    // should measure it. <newline>-    heap->AddToByteAllocatedTotal(size);  // Chromium profiling. <newline>- <newline>-    if ((FLAGS_tcmalloc_sample_parameter > 0) && heap->SampleAllocation(size)) { <newline>-      ret = DoSampledAllocation(size); <newline>-      MarkAllocatedRegion(ret); <newline>+  // First, check if our security policy allows this size. <newline>+  if (IsAllocSizePermitted(size)) { <newline>+    if (size <= kMaxSize) { <newline>+      size_t cl = Static::sizemap()->SizeClass(size); <newline>+      size = Static::sizemap()->class_to_size(cl); <newline>+ <newline>+      // TODO(jar): If this has any detectable performance impact, it can be <newline>+      // optimized by only tallying sizes if the profiler was activated to <newline>+      // recall these tallies.  I don't think this is performance critical, but <newline>+      // we really should measure it. <newline>+      heap->AddToByteAllocatedTotal(size);  // Chromium profiling. <newline>+ <newline>+      if ((FLAGS_tcmalloc_sample_parameter > 0) && <newline>+          heap->SampleAllocation(size)) { <newline>+        ret = DoSampledAllocation(size); <newline>+        MarkAllocatedRegion(ret); <newline>+      } else { <newline>+        // The common case, and also the simplest.  This just pops the <newline>+        // size-appropriate freelist, after replenishing it if it's empty. <newline>+        ret = CheckMallocResult(heap->Allocate(size, cl)); <newline>+      } <newline>     } else { <newline>-      // The common case, and also the simplest.  This just pops the <newline>-      // size-appropriate freelist, after replenishing it if it's empty. <newline>-      ret = CheckMallocResult(heap->Allocate(size, cl)); <newline>+      ret = do_malloc_pages(heap, size); <newline>+      MarkAllocatedRegion(ret); <newline>     } <newline>-  } else { <newline>-    ret = do_malloc_pages(heap, size); <newline>-    MarkAllocatedRegion(ret); <newline>   } <newline>   if (ret == NULL) errno = ENOMEM; <newline>   return ret; <newline>@@ -1233,8 +1247,8 @@ inline void* do_realloc_with_callback( <newline>   //    . If we need to grow, grow to max(new_size, old_size * 1.X) <newline>   //    . Don't shrink unless new_size < old_size * 0.Y <newline>   // X and Y trade-off time for wasted space.  For now we do 1.25 and 0.5. <newline>-  const int lower_bound_to_grow = old_size + old_size / 4; <newline>-  const int upper_bound_to_shrink = old_size / 2; <newline>+  const size_t lower_bound_to_grow = old_size + old_size / 4; <newline>+  const size_t upper_bound_to_shrink = old_size / 2; <newline>   if ((new_size > old_size) || (new_size < upper_bound_to_shrink)) { <newline>     // Need to reallocate. <newline>     void* new_ptr = NULL;																								
Chromium	3	1	130e7b6da93abf7b3fabd12591e8d5ccb16b2c9	dalecurtis@chromium.org <dalecurtis@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Jan 15 09:01:35 2013 +0000	Update FFmpeg DEPS for security fix. Pulls in: fe7d549 Update README for security fix. 9d8789e vorbisdec: Check bark_map_size. c81a7da Explicitly set cygwin_msvs_shell on TEST=unittests, manual. TBR=scherkus	168473		https://chromiumcodereview.appspot.com/11889018	svn://svn.chromium.org/chrome/trunk/src@176861 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/DEPS b/DEPS <newline>index ed72c14..a1ee494 100644 <newline>--- a/DEPS <newline>+++ b/DEPS <newline>@@ -25,8 +25,8 @@ vars = { <newline>   # These two FFmpeg variables must be updated together.  One is used for SVN <newline>   # checkouts and the other for Git checkouts. <newline>-  "ffmpeg_revision": "175176", <newline>-  "ffmpeg_hash": "0c981b3a572f9257e6178f5572e3f3cd47ac3025", <newline>+  "ffmpeg_revision": "176720", <newline>+  "ffmpeg_hash": "fe7d5497f1490914d7c3bb0236a1c722afccf4e4", <newline>   "sfntly_revision": "134", <newline>   "skia_revision": "7146",																								
Chromium	1	2	d005b82fba7e2ad6e82bfab89049f0175508228	cevans@chromium.org <cevans@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Jan 10 03:59:23 2013 +0000	Reject invalid GURLs across IPC. Also add some per-file owners to the common_param_traits.cc, since it's a highly security-sensitive area.	168923		https://codereview.chromium.org/11826002	svn://svn.chromium.org/chrome/trunk/src@176009 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/public/common/common_param_traits.cc b/content/public/common/common_param_traits.cc <newline>index bee1ddb..de32860 100644 <newline>--- a/content/public/common/common_param_traits.cc <newline>+++ b/content/public/common/common_param_traits.cc <newline>@@ -58,13 +58,8 @@ void ParamTraits<GURL>::Write(Message* m, const GURL& p) { <newline>   // type as GURL. See https://crbug.com/166486 for additional work in <newline>   // this area. <newline>   if (!p.is_valid()) { <newline>-    GURL reconstructed_url(p.possibly_invalid_spec()); <newline>-    if (reconstructed_url.is_valid()) { <newline>-      DLOG(WARNING) << "GURL string " << p.possibly_invalid_spec() <newline>-                    << " (marked invalid) but parsed as valid."; <newline>-      m->WriteString(std::string()); <newline>-      return; <newline>-    } <newline>+    m->WriteString(std::string()); <newline>+    return; <newline>   } <newline>   m->WriteString(p.possibly_invalid_spec()); <newline>@@ -78,6 +73,10 @@ bool ParamTraits<GURL>::Read(const Message* m, PickleIterator* iter, GURL* p) { <newline>     return false; <newline>   } <newline>   *p = GURL(s); <newline>+  if (!s.empty() && !p->is_valid()) { <newline>+    *p = GURL(); <newline>+    return false; <newline>+  } <newline>   return true; <newline> }																								
Chromium	1	2	fea5a9b229b6a114629c8787f614b2e9f1048fc	cpu@chromium.org <cpu@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Jan 9 00:38:59 2013 +0000	Don't allow path traversal paths on the base file helpers This forces explicit normalization of paths and make path escaping security bugs much harder to exploit. See for example bug 167122 TEST=included tests	168890		https://codereview.chromium.org/11782005	svn://svn.chromium.org/chrome/trunk/src@175642 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/skia/ext/vector_canvas_unittest.cc b/skia/ext/vector_canvas_unittest.cc <newline>index 9f28645..15ca460 100644 <newline>--- a/skia/ext/vector_canvas_unittest.cc <newline>+++ b/skia/ext/vector_canvas_unittest.cc <newline>@@ -334,8 +334,10 @@ void Premultiply(SkBitmap bitmap) { <newline> void LoadPngFileToSkBitmap(const FilePath& filename, <newline>                            SkBitmap* bitmap, <newline>                            bool is_opaque) { <newline>+  FilePath absolute_path(filename); <newline>+  file_util::AbsolutePath(&absolute_path); <newline>   std::string compressed; <newline>-  file_util::ReadFileToString(filename, &compressed); <newline>+  file_util::ReadFileToString(absolute_path, &compressed); <newline>   ASSERT_TRUE(compressed.size()); <newline>   ASSERT_TRUE(gfx::PNGCodec::Decode(																								
Chromium	1	2	ed72be9850bc59df02b0ec19ce44cfabc805656	unsafe@trevp.net <unsafe@trevp.net@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Jan 8 22:07:33 2013 +0000	This is the first in an intended sequence of CLs to refactor TransportSecurityState, fix some book-keeping bugs, and hopefully add TACK. This sequence of CLs will be derived from the original, overly-large CL #11191005. This CL does a few things: - Adds a high-level API for processing HSTS/HPKP - Move the code for handling HSTS/HPKP headers out of transport_security_state - Move HashValue out of x509_cert_types - Addresses several HSTS/HPKP parsing bugs identified during review of the cleanup - Ignore unknown HSTS/HPKP directives - Ignore unknown hash algorithms - Handle overly-large (> int64) expirations without parsing issues - Reject invalid pins entered by users			https://chromiumcodereview.appspot.com/11274032	svn://svn.chromium.org/chrome/trunk/src@175595 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/url_request/url_request_http_job.cc b/net/url_request/url_request_http_job.cc <newline>index 982e76f..fe5f325 100644 <newline>--- a/net/url_request/url_request_http_job.cc <newline>+++ b/net/url_request/url_request_http_job.cc <newline>@@ -685,93 +685,50 @@ void URLRequestHttpJob::FetchResponseCookies( <newline> // NOTE: |ProcessStrictTransportSecurityHeader| and <newline> // |ProcessPublicKeyPinsHeader| have very similar structures, by design. <newline>-// They manipulate different parts of |TransportSecurityState::DomainState|, <newline>-// and they must remain complementary. If, in future changes here, there is <newline>-// any conflict between their policies (such as in |domain_state.mode|), you <newline>-// should resolve the conflict in favor of the more strict policy. <newline> void URLRequestHttpJob::ProcessStrictTransportSecurityHeader() { <newline>   DCHECK(response_info_); <newline>- <newline>-  const URLRequestContext* ctx = request_->context(); <newline>+  TransportSecurityState* security_state = <newline>+      request_->context()->transport_security_state(); <newline>   const SSLInfo& ssl_info = response_info_->ssl_info; <newline>-  // Only accept strict transport security headers on HTTPS connections that <newline>-  // have no certificate errors. <newline>+  // Only accept HSTS headers on HTTPS connections that have no <newline>+  // certificate errors. <newline>   if (!ssl_info.is_valid() || IsCertStatusError(ssl_info.cert_status) || <newline>-      !ctx->transport_security_state()) { <newline>+      !security_state) <newline>     return; <newline>-  } <newline>- <newline>-  TransportSecurityState* security_state = ctx->transport_security_state(); <newline>-  TransportSecurityState::DomainState domain_state; <newline>-  const std::string& host = request_info_.url.host(); <newline>- <newline>-  bool sni_available = <newline>-      SSLConfigService::IsSNIAvailable(ctx->ssl_config_service()); <newline>-  if (!security_state->GetDomainState(host, sni_available, &domain_state)) <newline>-    // |GetDomainState| may have altered |domain_state| while searching. If <newline>-    // not found, start with a fresh state. <newline>-    domain_state.upgrade_mode = <newline>-        TransportSecurityState::DomainState::MODE_FORCE_HTTPS; <newline>- <newline>-  HttpResponseHeaders* headers = GetResponseHeaders(); <newline>-  std::string value; <newline>-  void* iter = NULL; <newline>-  base::Time now = base::Time::Now(); <newline>   // http://tools.ietf.org/html/draft-ietf-websec-strict-transport-sec: <newline>   // <newline>   //   If a UA receives more than one STS header field in a HTTP response <newline>   //   message over secure transport, then the UA MUST process only the <newline>   //   first such header field. <newline>-  bool seen_sts = false; <newline>-  while (headers->EnumerateHeader(&iter, "Strict-Transport-Security", &value)) { <newline>-    if (seen_sts) <newline>-      return; <newline>-    seen_sts = true; <newline>-    TransportSecurityState::DomainState domain_state; <newline>-    if (domain_state.ParseSTSHeader(now, value)) <newline>-      security_state->EnableHost(host, domain_state); <newline>-  } <newline>+  HttpResponseHeaders* headers = GetResponseHeaders(); <newline>+  std::string value; <newline>+  if (headers->EnumerateHeader(NULL, "Strict-Transport-Security", &value)) <newline>+    security_state->AddHSTSHeader(request_info_.url.host(), value); <newline> } <newline> void URLRequestHttpJob::ProcessPublicKeyPinsHeader() { <newline>   DCHECK(response_info_); <newline>- <newline>-  const URLRequestContext* ctx = request_->context(); <newline>+  TransportSecurityState* security_state = <newline>+      request_->context()->transport_security_state(); <newline>   const SSLInfo& ssl_info = response_info_->ssl_info; <newline>-  // Only accept public key pins headers on HTTPS connections that have no <newline>+  // Only accept HPKP headers on HTTPS connections that have no <newline>   // certificate errors. <newline>   if (!ssl_info.is_valid() || IsCertStatusError(ssl_info.cert_status) || <newline>-      !ctx->transport_security_state()) { <newline>+      !security_state) <newline>     return; <newline>-  } <newline>- <newline>-  TransportSecurityState* security_state = ctx->transport_security_state(); <newline>-  TransportSecurityState::DomainState domain_state; <newline>-  const std::string& host = request_info_.url.host(); <newline>- <newline>-  bool sni_available = <newline>-      SSLConfigService::IsSNIAvailable(ctx->ssl_config_service()); <newline>-  if (!security_state->GetDomainState(host, sni_available, &domain_state)) <newline>-    // |GetDomainState| may have altered |domain_state| while searching. If <newline>-    // not found, start with a fresh state. <newline>-    domain_state.upgrade_mode = <newline>-        TransportSecurityState::DomainState::MODE_DEFAULT; <newline>+  // http://tools.ietf.org/html/draft-ietf-websec-key-pinning: <newline>+  // <newline>+  //   If a UA receives more than one PKP header field in an HTTP <newline>+  //   response message over secure transport, then the UA MUST process <newline>+  //   only the first such header field. <newline>   HttpResponseHeaders* headers = GetResponseHeaders(); <newline>-  void* iter = NULL; <newline>   std::string value; <newline>-  base::Time now = base::Time::Now(); <newline>- <newline>-  while (headers->EnumerateHeader(&iter, "Public-Key-Pins", &value)) { <newline>-    // Note that ParsePinsHeader updates |domain_state| (iff the header parses <newline>-    // correctly), but does not completely overwrite it. It just updates the <newline>-    // dynamic pinning metadata. <newline>-    if (domain_state.ParsePinsHeader(now, value, ssl_info)) <newline>-      security_state->EnableHost(host, domain_state); <newline>-  } <newline>+  if (headers->EnumerateHeader(NULL, "Public-Key-Pins", &value)) <newline>+    security_state->AddHPKPHeader(request_info_.url.host(), value, ssl_info); <newline> } <newline> void URLRequestHttpJob::OnStartCompleted(int result) {																								
Chromium	5		52f52f478d5aa0830cd2b621e464178d2fbaa1f	kochi@chromium.org <kochi@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Jan 8 02:02:33 2013 +0000	Add accounts.youtube.com in content_security_policy in manifest.json. This fixes a login hang with content security policy error output. TEST=manually login on Chrome OS.	168525		https://chromiumcodereview.appspot.com/11778017	svn://svn.chromium.org/chrome/trunk/src@175466 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/resources/gaia_auth/manifest.json b/chrome/browser/resources/gaia_auth/manifest.json <newline>index 9b04c31..dd8a177 100644 <newline>--- a/chrome/browser/resources/gaia_auth/manifest.json <newline>+++ b/chrome/browser/resources/gaia_auth/manifest.json <newline>@@ -4,7 +4,7 @@ <newline>   "name": "GaiaAuthExtension", <newline>   "version": "0.0.1", <newline>   "manifest_version": 2, <newline>-  "content_security_policy": "default-src 'self'; script-src 'self'; frame-src 'self' https://accounts.google.com; style-src 'self' 'unsafe-inline'", <newline>+  "content_security_policy": "default-src 'self'; script-src 'self'; frame-src 'self' https://accounts.google.com https://accounts.youtube.com; style-src 'self' 'unsafe-inline'", <newline>   "description": "GAIA Component Extension", <newline>   "web_accessible_resources": [ <newline>     "main.css",																								
Chromium	1	2	0ecca45278570c58a9e7fb4cd420e746f59c0a1	cevans@chromium.org <cevans@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Jan 7 21:50:56 2013 +0000	Small extra validations on permission checks: reject "0" as a valid permission mask and require the path be absolute. Also add some per-file security owners to child_process_security_policy_impl.cc since it is highly sensitive.	168634		https://chromiumcodereview.appspot.com/11734030	svn://svn.chromium.org/chrome/trunk/src@175390 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/browser/child_process_security_policy_unittest.cc b/content/browser/child_process_security_policy_unittest.cc <newline>index 90befd6..e98b841 100644 <newline>--- a/content/browser/child_process_security_policy_unittest.cc <newline>+++ b/content/browser/child_process_security_policy_unittest.cc <newline>@@ -20,6 +20,12 @@ namespace { <newline> const int kRendererID = 42; <newline> const int kWorkerRendererID = kRendererID + 1; <newline>+#if defined(FILE_PATH_USES_DRIVE_LETTERS) <newline>+#define TEST_PATH(x) FILE_PATH_LITERAL("c:") FILE_PATH_LITERAL(x) <newline>+#else <newline>+#define TEST_PATH(x) FILE_PATH_LITERAL(x) <newline>+#endif <newline>+ <newline> class ChildProcessSecurityPolicyTestBrowserClient <newline>     : public TestContentBrowserClient { <newline>  public: <newline>@@ -294,21 +300,16 @@ TEST_F(ChildProcessSecurityPolicyTest, CanReadFiles) { <newline>   p->Add(kRendererID); <newline>-  EXPECT_FALSE(p->CanReadFile(kRendererID, <newline>-      FilePath(FILE_PATH_LITERAL("/etc/passwd")))); <newline>-  p->GrantReadFile(kRendererID, FilePath(FILE_PATH_LITERAL("/etc/passwd"))); <newline>-  EXPECT_TRUE(p->CanReadFile(kRendererID, <newline>-      FilePath(FILE_PATH_LITERAL("/etc/passwd")))); <newline>-  EXPECT_FALSE(p->CanReadFile(kRendererID, <newline>-      FilePath(FILE_PATH_LITERAL("/etc/shadow")))); <newline>+  EXPECT_FALSE(p->CanReadFile(kRendererID, FilePath(TEST_PATH("/etc/passwd")))); <newline>+  p->GrantReadFile(kRendererID, FilePath(TEST_PATH("/etc/passwd"))); <newline>+  EXPECT_TRUE(p->CanReadFile(kRendererID, FilePath(TEST_PATH("/etc/passwd")))); <newline>+  EXPECT_FALSE(p->CanReadFile(kRendererID, FilePath(TEST_PATH("/etc/shadow")))); <newline>   p->Remove(kRendererID); <newline>   p->Add(kRendererID); <newline>-  EXPECT_FALSE(p->CanReadFile(kRendererID, <newline>-      FilePath(FILE_PATH_LITERAL("/etc/passwd")))); <newline>-  EXPECT_FALSE(p->CanReadFile(kRendererID, <newline>-      FilePath(FILE_PATH_LITERAL("/etc/shadow")))); <newline>+  EXPECT_FALSE(p->CanReadFile(kRendererID, FilePath(TEST_PATH("/etc/passwd")))); <newline>+  EXPECT_FALSE(p->CanReadFile(kRendererID, FilePath(TEST_PATH("/etc/shadow")))); <newline>   p->Remove(kRendererID); <newline> } <newline>@@ -319,49 +320,40 @@ TEST_F(ChildProcessSecurityPolicyTest, CanReadDirectories) { <newline>   p->Add(kRendererID); <newline>-  EXPECT_FALSE(p->CanReadDirectory(kRendererID, <newline>-      FilePath(FILE_PATH_LITERAL("/etc/")))); <newline>-  p->GrantReadDirectory(kRendererID, FilePath(FILE_PATH_LITERAL("/etc/"))); <newline>-  EXPECT_TRUE(p->CanReadDirectory(kRendererID, <newline>-      FilePath(FILE_PATH_LITERAL("/etc/")))); <newline>-  EXPECT_TRUE(p->CanReadFile(kRendererID, <newline>-      FilePath(FILE_PATH_LITERAL("/etc/passwd")))); <newline>+  EXPECT_FALSE(p->CanReadDirectory(kRendererID, FilePath(TEST_PATH("/etc/")))); <newline>+  p->GrantReadDirectory(kRendererID, FilePath(TEST_PATH("/etc/"))); <newline>+  EXPECT_TRUE(p->CanReadDirectory(kRendererID, FilePath(TEST_PATH("/etc/")))); <newline>+  EXPECT_TRUE(p->CanReadFile(kRendererID, FilePath(TEST_PATH("/etc/passwd")))); <newline>   p->Remove(kRendererID); <newline>   p->Add(kRendererID); <newline>-  EXPECT_FALSE(p->CanReadDirectory(kRendererID, <newline>-      FilePath(FILE_PATH_LITERAL("/etc/")))); <newline>-  EXPECT_FALSE(p->CanReadFile(kRendererID, <newline>-      FilePath(FILE_PATH_LITERAL("/etc/passwd")))); <newline>+  EXPECT_FALSE(p->CanReadDirectory(kRendererID, FilePath(TEST_PATH("/etc/")))); <newline>+  EXPECT_FALSE(p->CanReadFile(kRendererID, FilePath(TEST_PATH("/etc/passwd")))); <newline>   // Just granting read permission as a file doesn't imply reading as a <newline>   // directory. <newline>-  p->GrantReadFile(kRendererID, FilePath(FILE_PATH_LITERAL("/etc/"))); <newline>-  EXPECT_TRUE(p->CanReadFile(kRendererID, <newline>-      FilePath(FILE_PATH_LITERAL("/etc/passwd")))); <newline>-  EXPECT_FALSE(p->CanReadDirectory(kRendererID, <newline>-      FilePath(FILE_PATH_LITERAL("/etc/")))); <newline>+  p->GrantReadFile(kRendererID, FilePath(TEST_PATH("/etc/"))); <newline>+  EXPECT_TRUE(p->CanReadFile(kRendererID, FilePath(TEST_PATH("/etc/passwd")))); <newline>+  EXPECT_FALSE(p->CanReadDirectory(kRendererID, FilePath(TEST_PATH("/etc/")))); <newline>   p->Remove(kRendererID); <newline> } <newline> TEST_F(ChildProcessSecurityPolicyTest, FilePermissions) { <newline>-  FilePath granted_file = FilePath(FILE_PATH_LITERAL("/home/joe")); <newline>-  FilePath sibling_file = FilePath(FILE_PATH_LITERAL("/home/bob")); <newline>-  FilePath child_file = FilePath(FILE_PATH_LITERAL("/home/joe/file")); <newline>-  FilePath parent_file = FilePath(FILE_PATH_LITERAL("/home")); <newline>-  FilePath parent_slash_file = FilePath(FILE_PATH_LITERAL("/home/")); <newline>-  FilePath child_traversal1 = FilePath( <newline>-      FILE_PATH_LITERAL("/home/joe/././file")); <newline>+  FilePath granted_file = FilePath(TEST_PATH("/home/joe")); <newline>+  FilePath sibling_file = FilePath(TEST_PATH("/home/bob")); <newline>+  FilePath child_file = FilePath(TEST_PATH("/home/joe/file")); <newline>+  FilePath parent_file = FilePath(TEST_PATH("/home")); <newline>+  FilePath parent_slash_file = FilePath(TEST_PATH("/home/")); <newline>+  FilePath child_traversal1 = FilePath(TEST_PATH("/home/joe/././file")); <newline>   FilePath child_traversal2 = FilePath( <newline>-      FILE_PATH_LITERAL("/home/joe/file/../otherfile")); <newline>-  FilePath evil_traversal1 = FilePath( <newline>-      FILE_PATH_LITERAL("/home/joe/../../etc/passwd")); <newline>+      TEST_PATH("/home/joe/file/../otherfile")); <newline>+  FilePath evil_traversal1 = FilePath(TEST_PATH("/home/joe/../../etc/passwd")); <newline>   FilePath evil_traversal2 = FilePath( <newline>-      FILE_PATH_LITERAL("/home/joe/./.././../etc/passwd")); <newline>-  FilePath self_traversal = FilePath( <newline>-      FILE_PATH_LITERAL("/home/joe/../joe/file")); <newline>+      TEST_PATH("/home/joe/./.././../etc/passwd")); <newline>+  FilePath self_traversal = FilePath(TEST_PATH("/home/joe/../joe/file")); <newline>+  FilePath relative_file = FilePath(FILE_PATH_LITERAL("home/joe")); <newline>   ChildProcessSecurityPolicyImpl* p = <newline>       ChildProcessSecurityPolicyImpl::GetInstance(); <newline>@@ -386,6 +378,7 @@ TEST_F(ChildProcessSecurityPolicyTest, FilePermissions) { <newline>                                        base::PLATFORM_FILE_READ)); <newline>   EXPECT_FALSE(p->HasPermissionsForFile(kRendererID, granted_file, <newline>                                         base::PLATFORM_FILE_CREATE)); <newline>+  EXPECT_FALSE(p->HasPermissionsForFile(kRendererID, granted_file, 0)); <newline>   EXPECT_FALSE(p->HasPermissionsForFile(kRendererID, granted_file, <newline>                                         base::PLATFORM_FILE_CREATE | <newline>                                         base::PLATFORM_FILE_OPEN_TRUNCATED | <newline>@@ -486,6 +479,13 @@ TEST_F(ChildProcessSecurityPolicyTest, FilePermissions) { <newline>                                         base::PLATFORM_FILE_OPEN | <newline>                                         base::PLATFORM_FILE_READ)); <newline>   p->Remove(kWorkerRendererID); <newline>+ <newline>+  p->Add(kRendererID); <newline>+  p->GrantPermissionsForFile(kRendererID, relative_file, <newline>+                             base::PLATFORM_FILE_OPEN); <newline>+  EXPECT_FALSE(p->HasPermissionsForFile(kRendererID, relative_file, <newline>+                                        base::PLATFORM_FILE_OPEN)); <newline>+  p->Remove(kRendererID); <newline> } <newline> TEST_F(ChildProcessSecurityPolicyTest, CanServiceWebUIBindings) { <newline>@@ -510,7 +510,7 @@ TEST_F(ChildProcessSecurityPolicyTest, RemoveRace) { <newline>       ChildProcessSecurityPolicyImpl::GetInstance(); <newline>   GURL url("file:///etc/passwd"); <newline>-  FilePath file(FILE_PATH_LITERAL("/etc/passwd")); <newline>+  FilePath file(TEST_PATH("/etc/passwd")); <newline>   p->Add(kRendererID);																								
Chromium	5		4de0f651dc6cc7b22b7229a24fcc5295459f5d1	glotov@chromium.org <glotov@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Dec 13 21:30:19 2012 +0000	System security setting dialog fix after powerwash TEST=manual	chromium:163943		https://chromiumcodereview.appspot.com/11416374	svn://svn.chromium.org/chrome/trunk/src@172964 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/ui/webui/chromeos/login/eula_screen_handler.cc b/chrome/browser/ui/webui/chromeos/login/eula_screen_handler.cc <newline>index 6a9d1d9..a1528d6 100644 <newline>--- a/chrome/browser/ui/webui/chromeos/login/eula_screen_handler.cc <newline>+++ b/chrome/browser/ui/webui/chromeos/login/eula_screen_handler.cc <newline>@@ -66,6 +66,8 @@ void EulaScreenHandler::GetLocalizedStrings( <newline>       l10n_util::GetStringUTF16(IDS_EULA_TPM_DESCRIPTION)); <newline>   localized_strings->SetString("eulaTpmKeyDesc", <newline>       l10n_util::GetStringUTF16(IDS_EULA_TPM_KEY_DESCRIPTION)); <newline>+  localized_strings->SetString("eulaTpmDescPowerwash", <newline>+      l10n_util::GetStringUTF16(IDS_EULA_TPM_KEY_DESCRIPTION_POWERWASH)); <newline>   localized_strings->SetString("eulaTpmBusy", <newline>       l10n_util::GetStringUTF16(IDS_EULA_TPM_BUSY)); <newline> #if defined(ENABLE_RLZ)																								
Chromium	1	1	c56f0078b2f6936ada49807f09a21d74e7b8ef8	cevans@chromium.org <cevans@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Dec 12 00:32:05 2012 +0000	Update Java version metadata to current security baselines.	165540		https://codereview.chromium.org/11538013	svn://svn.chromium.org/chrome/trunk/src@172469 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/resources/plugin_metadata/plugins_win.json b/chrome/browser/resources/plugin_metadata/plugins_win.json <newline>index 9f0aa12..3df997c 100644 <newline>--- a/chrome/browser/resources/plugin_metadata/plugins_win.json <newline>+++ b/chrome/browser/resources/plugin_metadata/plugins_win.json <newline>@@ -53,18 +53,18 @@ <newline>     ], <newline>     "versions": [ <newline>       { <newline>-        "version": "6.0.350", <newline>+        "version": "6.0.370", <newline>         "status": "requires_authorization", <newline>-        "comment": "Java SE 6 Update 35. '350' is not a typo." <newline>+        "comment": "Java SE 6 Update 37. '370' is not a typo." <newline>       }, <newline>       { <newline>         "version": "7", <newline>         "status": "out_of_date" <newline>       }, <newline>       { <newline>-        "version": "10.7", <newline>+        "version": "10.9", <newline>         "status": "requires_authorization", <newline>-        "comment": "Java SE 7u7" <newline>+        "comment": "Java SE 7u9" <newline>       } <newline>     ], <newline>     "lang": "en-US",																								
Chromium	1	2	383fb7ccbdb2a9888031eb8a81b06403bb5d1a6	alexeypa@chromium.org <alexeypa@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Dec 11 07:17:19 2012 +0000	Launch the host under LocalService account at low integrity level with all privileges removed. It receives it's own window station and desktop only accessible by SYSTEM and logon SID the host process is running under. The security descriptor assigned to th eprocess gives access to SYSTEM and limited (query and terminate) access to built-in administrators group.	134694		https://chromiumcodereview.appspot.com/11428172	svn://svn.chromium.org/chrome/trunk/src@172268 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/remoting/remoting.gyp b/remoting/remoting.gyp <newline>index e4616d0..b0ccce9 100644 <newline>--- a/remoting/remoting.gyp <newline>+++ b/remoting/remoting.gyp <newline>@@ -442,10 +442,14 @@ <newline>             'host/win/omaha.h', <newline>             'host/win/scoped_thread_desktop.cc', <newline>             'host/win/scoped_thread_desktop.h', <newline>+            'host/win/security_descriptor.cc', <newline>+            'host/win/security_descriptor.h', <newline>             'host/win/session_desktop_environment_factory.cc', <newline>             'host/win/session_desktop_environment_factory.h', <newline>             'host/win/session_event_executor.cc', <newline>             'host/win/session_event_executor.h', <newline>+            'host/win/window_station_and_desktop.cc', <newline>+            'host/win/window_station_and_desktop.h', <newline>           ], <newline>           'conditions': [ <newline>             ['OS=="linux"', { <newline>@@ -492,6 +496,11 @@ <newline>                 ], <newline>               }, <newline>             }], <newline>+            ['OS=="win"', { <newline>+              'dependencies': [ <newline>+                '../sandbox/sandbox.gyp:sandbox', <newline>+              ], <newline>+            }], <newline>           ], <newline>         },  # end of target 'remoting_host' <newline>@@ -1881,6 +1890,7 @@ <newline>         'base/socket_reader.h', <newline>         'base/stoppable.cc', <newline>         'base/stoppable.h', <newline>+        'base/typed_buffer.h', <newline>         'base/util.cc', <newline>         'base/util.h', <newline>         'codec/audio_decoder.cc', <newline>@@ -2155,6 +2165,7 @@ <newline>         'base/compound_buffer_unittest.cc', <newline>         'base/resources_unittest.cc', <newline>         'base/shared_buffer_unittest.cc', <newline>+        'base/typed_buffer_unittest.cc', <newline>         'base/util_unittest.cc', <newline>         'client/audio_player_unittest.cc', <newline>         'client/key_event_mapper_unittest.cc', <newline>@@ -2212,8 +2223,6 @@ <newline>         'host/video_frame_capturer_mac_unittest.cc', <newline>         'host/video_frame_capturer_unittest.cc', <newline>         'host/video_scheduler_unittest.cc', <newline>-        'host/win/launch_process_with_token.cc', <newline>-        'host/win/launch_process_with_token.h', <newline>         'host/win/worker_process_launcher.cc', <newline>         'host/win/worker_process_launcher.h', <newline>         'host/win/worker_process_launcher_unittest.cc',																								
Chromium	5		8b5327b8c92167311012acb015b3a2c74c3712b	dbeam@chromium.org <dbeam@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Dec 6 07:55:46 2012 +0000	[autofill] Adding a flag to bypass SSL security restrictions for interactive autocomplete. R=isherman@chromium.org TEST=--allow-insecure-interactive-autocomplete and launch a HTTP page that asks for CC info.	162785		https://chromiumcodereview.appspot.com/11428155	svn://svn.chromium.org/chrome/trunk/src@171446 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/common/chrome_switches.h b/chrome/common/chrome_switches.h <newline>index bee3650..4decd95 100644 <newline>--- a/chrome/common/chrome_switches.h <newline>+++ b/chrome/common/chrome_switches.h <newline>@@ -27,6 +27,7 @@ extern const char kActionBox[]; <newline> extern const char kAllowCrossOriginAuthPrompt[]; <newline> extern const char kAllowFileAccess[]; <newline> extern const char kAllowHTTPBackgroundPage[]; <newline>+extern const char kAllowInsecureInteractiveAutocomplete[]; <newline> extern const char kAllowLegacyExtensionManifests[]; <newline> extern const char kAllowNaClSocketAPI[]; <newline> extern const char kAllowOutdatedPlugins[];																								
Chromium	1	4	8ce6c67a40398862de5f80b48b9b34fb579da7b	creis@chromium.org <creis@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Dec 3 22:09:03 2012 +0000	Experimental: Fix HasWrongProcessForURL in --site-per-process mode. The experimental --site-per-process and --enable-strict-site-isolation modes disable reuse of renderer processes to improve security. The previous approach of making IsSuitableHost return false was breaking HasWrongProcessForURL, so we now return false in ShouldTryToReuseExistingProcessHost instead. TEST=none	160671		https://chromiumcodereview.appspot.com/11421179	svn://svn.chromium.org/chrome/trunk/src@170821 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/public/common/content_switches.h b/content/public/common/content_switches.h <newline>index dd23dbd..fc9835f 100644 <newline>--- a/content/public/common/content_switches.h <newline>+++ b/content/public/common/content_switches.h <newline>@@ -181,7 +181,7 @@ extern const char kEnableAcceleratedCompositingForOverflowScroll[]; <newline> extern const char kShowPaintRects[]; <newline> CONTENT_EXPORT extern const char kSimulateTouchScreenWithMouse[]; <newline> CONTENT_EXPORT extern const char kSingleProcess[]; <newline>-extern const char kSitePerProcess[]; <newline>+CONTENT_EXPORT extern const char kSitePerProcess[]; <newline> CONTENT_EXPORT extern const char kSkipGpuDataLoading[]; <newline> extern const char kSkipGpuFullInfoCollection[]; <newline> extern const char kTapDownDeferralTimeMs[];																								
Chromium	5		24825de7018ee6947547490535f4edd28c54643	jochen@chromium.org <jochen@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Nov 30 12:37:15 2012 +0000	[content shell] add support for a testRunner.setXSSAuditorEnabled I wanted to wire up a WebPreferences modifying testRunner method, and XSSAuditorEnabled will make >100 tests pass TEST=most of http/tests/security/xssAuditor passes	111316		https://chromiumcodereview.appspot.com/11316244	svn://svn.chromium.org/chrome/trunk/src@170439 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/shell/webkit_test_runner_host.h b/content/shell/webkit_test_runner_host.h <newline>index ea09ec2..596a910 100644 <newline>--- a/content/shell/webkit_test_runner_host.h <newline>+++ b/content/shell/webkit_test_runner_host.h <newline>@@ -13,6 +13,7 @@ <newline> #include "base/threading/non_thread_safe.h" <newline> #include "content/public/browser/render_view_host_observer.h" <newline> #include "content/public/browser/web_contents_observer.h" <newline>+#include "content/shell/shell_webpreferences.h" <newline> class SkBitmap; <newline>@@ -84,6 +85,7 @@ class WebKitTestController : public base::NonThreadSafe, <newline>   void set_printer(WebKitTestResultPrinter* printer) { <newline>     printer_.reset(printer); <newline>   } <newline>+  const ShellWebPreferences& web_preferences() const { return prefs_; } <newline>   // Interface for WebKitTestRunnerHost. <newline>   void NotifyDone(); <newline>@@ -126,6 +128,7 @@ class WebKitTestController : public base::NonThreadSafe, <newline>   void OnImageDump(const std::string& actual_pixel_hash, const SkBitmap& image); <newline>   void OnTextDump(const std::string& dump); <newline>   void OnPrintMessage(const std::string& message); <newline>+  void OnOverridePreferences(const ShellWebPreferences& prefs); <newline>   scoped_ptr<WebKitTestResultPrinter> printer_; <newline>@@ -143,6 +146,7 @@ class WebKitTestController : public base::NonThreadSafe, <newline>   bool is_printing_; <newline>   bool should_stay_on_page_after_handling_before_unload_; <newline>   bool wait_until_done_; <newline>+  ShellWebPreferences prefs_; <newline>   base::CancelableClosure watchdog_;																								
Chromium	5		7de2f9b82e9dd71fc88c9b81a52bc204c6efb2f	pliard@chromium.org <pliard@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Nov 27 15:47:17 2012 +0000	Fix CrossProcessNotificationMultiProcessTest.Basic on Android. On Android the ashmem API is used to deal with shared memory. This API doesn't provide any way to open a memory region created by another process for security reasons. The only way to share memory on Android is to share the underlying file descriptor between processes. This can be accomplished by: - Creating a new shared memory region in a process. Note that this region can be anonymous (i.e. the string provided to ashmem_create_region() can be empty). - Forking and keeping open both in the parent and child processes the file descriptor corresponding to the previously created memory region. - Doing an mmap() in both processes (nothing special here). The unit test was deadlocking (stuck in the while loop in the child process) since the call to CreateNamed() wasn't opening the existing shared memory region (created by the parent process) but was actually creating a new shared memory region. This means that the two processes were actually seeing different memory regions. Since this also works on POSIX platforms, the unit test was modified to follow this strategy on all POSIX systems (including Android). On Windows the old strategy (using non-anonymous shared memory) is still used.	136720		https://chromiumcodereview.appspot.com/11299159	svn://svn.chromium.org/chrome/trunk/src@169662 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/media/audio/cross_process_notification_unittest.cc b/media/audio/cross_process_notification_unittest.cc <newline>index 2726cf8..d1fbead 100644 <newline>--- a/media/audio/cross_process_notification_unittest.cc <newline>+++ b/media/audio/cross_process_notification_unittest.cc <newline>@@ -12,9 +12,7 @@ <newline> #include "testing/gtest/include/gtest/gtest.h" <newline> #include "testing/multiprocess_func_list.h" <newline>-#if defined(OS_POSIX) <newline> #include <utility>  // NOLINT <newline>-#endif <newline> namespace { <newline>@@ -75,6 +73,7 @@ class SingleNotifierWorker : public base::PlatformThread::Delegate { <newline>   } <newline>   virtual ~SingleNotifierWorker() {} <newline>+  // base::PlatformThread::Delegate: <newline>   virtual void ThreadMain() OVERRIDE { <newline>     for (size_t i = 0; i < repeats_; ++i) { <newline>       notifier_->Wait(); <newline>@@ -102,6 +101,7 @@ class MultiNotifierWorker : public base::PlatformThread::Delegate { <newline>   } <newline>   virtual ~MultiNotifierWorker() {} <newline>+  // base::PlatformThread::Delegate: <newline>   virtual void ThreadMain() OVERRIDE { <newline>     CrossProcessNotification::WaitForMultiple waiter(notifiers_); <newline>     for (size_t i = 0; i < repeats_; ++i) { <newline>@@ -163,6 +163,7 @@ class MultiNotifierWorkerFlagArray : public base::PlatformThread::Delegate { <newline>   } <newline>   virtual ~MultiNotifierWorkerFlagArray() {} <newline>+  // base::PlatformThread::Delegate: <newline>   virtual void ThreadMain() OVERRIDE { <newline>     for (size_t i = 0; i < repeats_; ++i) { <newline>       notifier_->Wait(); <newline>@@ -362,25 +363,10 @@ TEST(CrossProcessNotification, DISABLED_MultipleWaits1000) { <newline> } <newline> class CrossProcessNotificationMultiProcessTest : public base::MultiProcessTest { <newline>- public: <newline>-  static const char kSharedMemName[]; <newline>-  static const size_t kSharedMemSize = 1024; <newline>- <newline>- protected: <newline>-  virtual void SetUp() OVERRIDE { <newline>-    base::MultiProcessTest::SetUp(); <newline>-  } <newline>- <newline>-  virtual void TearDown() OVERRIDE { <newline>-    base::MultiProcessTest::TearDown(); <newline>-  } <newline> }; <newline>-// static <newline>-const char CrossProcessNotificationMultiProcessTest::kSharedMemName[] = <newline>-    "CrossProcessNotificationMultiProcessTest"; <newline>- <newline> namespace { <newline>+ <newline> // A very crude IPC mechanism that we use to set up the spawned child process <newline> // and the parent process. <newline> struct CrudeIpc { <newline>@@ -388,24 +374,31 @@ struct CrudeIpc { <newline>   CrossProcessNotification::IPCHandle handle_1; <newline>   CrossProcessNotification::IPCHandle handle_2; <newline> }; <newline>-}  // end namespace <newline>+ <newline>+#if defined(OS_POSIX) <newline>+const int kPosixChildSharedMem = 30; <newline>+#else <newline>+const char kSharedMemName[] = "CrossProcessNotificationMultiProcessTest"; <newline>+#endif <newline>+ <newline>+const size_t kSharedMemSize = 1024; <newline>+ <newline>+}  // namespace <newline> // The main routine of the child process.  Waits for the parent process <newline> // to copy handles over to the child and then uses a CrossProcessNotification to <newline> // wait and signal to the parent process. <newline> MULTIPROCESS_TEST_MAIN(CrossProcessNotificationChildMain) { <newline>+#if defined(OS_POSIX) <newline>+  base::SharedMemory mem( <newline>+      base::SharedMemoryHandle(kPosixChildSharedMem, true /* auto close */), <newline>+      false); <newline>+#else <newline>   base::SharedMemory mem; <newline>-  bool ok = mem.CreateNamed( <newline>-      CrossProcessNotificationMultiProcessTest::kSharedMemName, <newline>-      true, <newline>-      CrossProcessNotificationMultiProcessTest::kSharedMemSize); <newline>-  DCHECK(ok); <newline>-  if (!ok) { <newline>-    LOG(ERROR) << "Failed to open shared memory segment."; <newline>-    return -1; <newline>-  } <newline>+  CHECK(mem.CreateNamed(kSharedMemName, true, kSharedMemSize)); <newline>+#endif <newline>-  mem.Map(CrossProcessNotificationMultiProcessTest::kSharedMemSize); <newline>+  CHECK(mem.Map(kSharedMemSize)); <newline>   CrudeIpc* ipc = reinterpret_cast<CrudeIpc*>(mem.memory()); <newline>   while (!ipc->ready) <newline>@@ -422,18 +415,21 @@ MULTIPROCESS_TEST_MAIN(CrossProcessNotificationChildMain) { <newline> // new process.  Once that's done, it waits for the child process to signal <newline> // it's end and quits. <newline> TEST_F(CrossProcessNotificationMultiProcessTest, Basic) { <newline>-  base::SharedMemory mem; <newline>-  mem.Delete(kSharedMemName);  // In case a previous run was unsuccessful. <newline>-  bool ok = mem.CreateNamed(kSharedMemName, false, kSharedMemSize); <newline>-  ASSERT_TRUE(ok); <newline>- <newline>-  ASSERT_TRUE(mem.Map(kSharedMemSize)); <newline>- <newline>   CrossProcessNotification a, b; <newline>   ASSERT_TRUE(CrossProcessNotification::InitializePair(&a, &b)); <newline>   EXPECT_TRUE(a.IsValid()); <newline>   EXPECT_TRUE(b.IsValid()); <newline>+  base::SharedMemory mem; <newline>+ <newline>+#if defined(OS_POSIX) <newline>+  ASSERT_TRUE(mem.CreateAndMapAnonymous(kSharedMemSize)); <newline>+#else <newline>+  mem.Delete(kSharedMemName);  // In case a previous run was unsuccessful. <newline>+  ASSERT_TRUE(mem.CreateNamed(kSharedMemName, false, kSharedMemSize)); <newline>+  ASSERT_TRUE(mem.Map(kSharedMemSize)); <newline>+#endif <newline>+ <newline>   CrudeIpc* ipc = reinterpret_cast<CrudeIpc*>(mem.memory()); <newline>   ipc->ready = false; <newline>@@ -442,8 +438,9 @@ TEST_F(CrossProcessNotificationMultiProcessTest, Basic) { <newline>   EXPECT_TRUE(b.ShareToProcess( <newline>         base::kNullProcessHandle, &ipc->handle_1, &ipc->handle_2)); <newline>   base::FileHandleMappingVector fd_mapping_vec; <newline>-  fd_mapping_vec.push_back(std::pair<int, int>(ipc->handle_1.fd, <newline>-                                               kPosixChildSocket)); <newline>+  fd_mapping_vec.push_back(std::make_pair(ipc->handle_1.fd, kPosixChildSocket)); <newline>+  fd_mapping_vec.push_back( <newline>+      std::make_pair(mem.handle().fd, kPosixChildSharedMem)); <newline>   ipc->handle_1.fd = kPosixChildSocket; <newline>   base::ProcessHandle process = SpawnChild("CrossProcessNotificationChildMain", <newline>                                            fd_mapping_vec, false);																								
Chromium	5		8a74e58af10651a4721ef9c1e357175f1c91d3d	tsepez@chromium.org <tsepez@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Nov 26 20:31:47 2012 +0000	Relax security review requirement for test-only content/shell messages.			https://codereview.chromium.org/11428009	svn://svn.chromium.org/chrome/trunk/src@169483 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/shell/OWNERS b/content/shell/OWNERS <newline>index 1582ce2..92bc6c5 100644 <newline>--- a/content/shell/OWNERS <newline>+++ b/content/shell/OWNERS <newline>@@ -1,11 +1,2 @@ <newline> jochen@chromium.org <newline> pfeldman@chromium.org <newline>- <newline>-# For security review of IPC message files. <newline>-per-file *_messages.h=set noparent <newline>-per-file *_messages.h=cdn@chromium.org <newline>-per-file *_messages.h=cevans@chromium.org <newline>-per-file *_messages.h=inferno@chromium.org <newline>-per-file *_messages.h=jschuh@chromium.org <newline>-per-file *_messages.h=palmer@chromium.org <newline>-per-file *_messages.h=tsepez@chromium.org																								
Chromium	5		149acf3704cb1aad4b8fca7dc530eefa995066b	markus@chromium.org <markus@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Nov 22 03:51:04 2012 +0000	SECCOMP-BPF: Added support for greylisting of system calls. In addition to a Sandbox::Trap() handler, we now have a Sandbox::UnsafeTrap() handler. This feature should only be used for debugging purposes as it subverts the security of the sandbox. But it is useful to track down problems with the sandboxing policy. Within an unsafe trap handler, all sandbox restrictions are lifted. This, for example, allows us to allow system calls that would normally be denied by the policy, but to log their arguments, return value, and call stack. N.B.: this is the second attempt at submitting this CL. See https://chromiumcodereview.appspot.com/11363212/ for previous code reviews TEST=sandbox_linux_unittests NOTRY=true	130662		https://chromiumcodereview.appspot.com/11419121	svn://svn.chromium.org/chrome/trunk/src@169213 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/sandbox/linux/seccomp-bpf/syscall_unittest.cc b/sandbox/linux/seccomp-bpf/syscall_unittest.cc <newline>new file mode 100644 <newline>index 0000000..374a0fb <newline>--- /dev/null <newline>+++ b/sandbox/linux/seccomp-bpf/syscall_unittest.cc <newline>@@ -0,0 +1,113 @@ <newline>+// Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline>+// Use of this source code is governed by a BSD-style license that can be <newline>+// found in the LICENSE file. <newline>+ <newline>+#include <asm/unistd.h> <newline>+#include <fcntl.h> <newline>+#include <sys/mman.h> <newline>+#include <unistd.h> <newline>+ <newline>+#include "base/posix/eintr_wrapper.h" <newline>+#include "sandbox/linux/seccomp-bpf/syscall.h" <newline>+#include "sandbox/linux/tests/unit_tests.h" <newline>+#include "testing/gtest/include/gtest/gtest.h" <newline>+ <newline>+using namespace playground2; <newline>+ <newline>+namespace { <newline>+ <newline>+// Different platforms use different symbols for the six-argument version <newline>+// of the mmap() system call. Test for the correct symbol at compile time. <newline>+#ifdef __NR_mmap2 <newline>+const int kMMapNr = __NR_mmap2; <newline>+#else <newline>+const int kMMapNr = __NR_mmap; <newline>+#endif <newline>+ <newline>+TEST(Syscall, WellKnownEntryPoint) { <newline>+  // Test that SandboxSyscall(-1) is handled specially. Don't do this on ARM, <newline>+  // where syscall(-1) crashes with SIGILL. Not running the test is fine, as we <newline>+  // are still testing ARM code in the next set of tests. <newline>+#if !defined(__arm__) <newline>+  EXPECT_NE(SandboxSyscall(-1), syscall(-1)); <newline>+#endif <newline>+ <newline>+  // If possible, test that SandboxSyscall(-1) returns the address right after <newline>+  // a kernel entry point. <newline>+#if defined(__i386__) <newline>+  EXPECT_EQ(0x80CDu, ((uint16_t *)SandboxSyscall(-1))[-1]);      // INT 0x80 <newline>+#elif defined(__x86_64__) <newline>+  EXPECT_EQ(0x050Fu, ((uint16_t *)SandboxSyscall(-1))[-1]);      // SYSCALL <newline>+#elif defined(__arm__) <newline>+#if defined(__thumb__) <newline>+  EXPECT_EQ(0xDF00u, ((uint16_t *)SandboxSyscall(-1))[-1]);      // SWI 0 <newline>+#else <newline>+  EXPECT_EQ(0xEF000000u, ((uint32_t *)SandboxSyscall(-1))[-1]);  // SVC 0 <newline>+#endif <newline>+#else <newline>+  #warning Incomplete test case; need port for target platform <newline>+#endif <newline>+} <newline>+ <newline>+TEST(Syscall, TrivialSyscallNoArgs) { <newline>+  // Test that we can do basic system calls <newline>+  EXPECT_EQ(SandboxSyscall(__NR_getpid), syscall(__NR_getpid)); <newline>+} <newline>+ <newline>+TEST(Syscall, ComplexSyscallSixArgs) { <newline>+  int fd; <newline>+  ASSERT_LE(0, fd = SandboxSyscall(__NR_open, "/dev/null", O_RDWR, 0L)); <newline>+ <newline>+  // Use mmap() to allocate some read-only memory <newline>+  char *addr0; <newline>+  ASSERT_NE((char *)NULL, <newline>+            addr0 = reinterpret_cast<char *>( <newline>+              SandboxSyscall(kMMapNr, (void *)NULL, 4096, PROT_READ, <newline>+                             MAP_PRIVATE|MAP_ANONYMOUS, fd, 0L))); <newline>+ <newline>+  // Try to replace the existing mapping with a read-write mapping <newline>+  char *addr1; <newline>+  ASSERT_EQ(addr0, <newline>+            addr1 = reinterpret_cast<char *>( <newline>+              SandboxSyscall(kMMapNr, addr0, 4096L, PROT_READ|PROT_WRITE, <newline>+                             MAP_PRIVATE|MAP_ANONYMOUS|MAP_FIXED, <newline>+                             fd, 0L))); <newline>+  ++*addr1; // This should not seg fault <newline>+ <newline>+  // Clean up <newline>+  EXPECT_EQ(0, SandboxSyscall(__NR_munmap, addr1, 4096L)); <newline>+  EXPECT_EQ(0, HANDLE_EINTR(SandboxSyscall(__NR_close, fd))); <newline>+ <newline>+  // Check that the offset argument (i.e. the sixth argument) is processed <newline>+  // correctly. <newline>+  ASSERT_GE(fd = SandboxSyscall(__NR_open, "/proc/self/exe", O_RDONLY, 0L), 0); <newline>+  char *addr2, *addr3; <newline>+  ASSERT_NE((char *)NULL, <newline>+            addr2 = reinterpret_cast<char *>( <newline>+              SandboxSyscall(kMMapNr, (void *)NULL, 8192L, PROT_READ, <newline>+                             MAP_PRIVATE, fd, 0L))); <newline>+  ASSERT_NE((char *)NULL, <newline>+            addr3 = reinterpret_cast<char *>( <newline>+              SandboxSyscall(kMMapNr, (void *)NULL, 4096L, PROT_READ, <newline>+                             MAP_PRIVATE, fd, <newline>+#if defined(__NR_mmap2) <newline>+                      1L <newline>+#else <newline>+                      4096L <newline>+#endif <newline>+                      ))); <newline>+  EXPECT_EQ(0, memcmp(addr2 + 4096, addr3, 4096)); <newline>+ <newline>+  // Just to be absolutely on the safe side, also verify that the file <newline>+  // contents matches what we are getting from a read() operation. <newline>+  char buf[8192]; <newline>+  EXPECT_EQ(8192, SandboxSyscall(__NR_read, fd, buf, 8192L)); <newline>+  EXPECT_EQ(0, memcmp(addr2, buf, 8192)); <newline>+ <newline>+  // Clean up <newline>+  EXPECT_EQ(0, SandboxSyscall(__NR_munmap, addr2, 8192L)); <newline>+  EXPECT_EQ(0, SandboxSyscall(__NR_munmap, addr3, 4096L)); <newline>+  EXPECT_EQ(0, HANDLE_EINTR(SandboxSyscall(__NR_close, fd))); <newline>+} <newline>+ <newline>+} // namespace																								
Chromium	1	2	a0bb718e2027f6205433ddd0d78783595b5c40a	hshi@chromium.org <hshi@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Nov 21 19:33:59 2012 +0000	Change zip::ZipFiles() function to take a file descriptor for the dest zip file. We want the browser process to validate the destination zip file path to make sure it is not asked to overwrite an existing file or to a directory that could cause security problems. By replacing the destination file path |dest_file| with a file descriptor |dest_fd|: this CL allows the dest file to be opened and owned by the browser process then passed via IPC to utility process. There is no need to have a duplicate function that takes destination file path. The new function will be used for CrOS only. TEST=builds, passes unit tests. See also https://codereview.chromium.org/11392005/ for relevant discussion.	138359	nzipFile(zip_file, false);	https://chromiumcodereview.appspot.com/11413100	svn://svn.chromium.org/chrome/trunk/src@169090 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/common/zip_unittest.cc b/chrome/common/zip_unittest.cc <newline>index 4d3d5d8..2496170 100644 <newline>--- a/chrome/common/zip_unittest.cc <newline>+++ b/chrome/common/zip_unittest.cc <newline>@@ -160,6 +160,7 @@ TEST_F(ZipTest, ZipIgnoreHidden) { <newline> } <newline>+#if defined(OS_POSIX) <newline> TEST_F(ZipTest, ZipFiles) { <newline>   FilePath src_dir; <newline>   ASSERT_TRUE(PathService::Get(chrome::DIR_TEST_DATA, &src_dir)); <newline>@@ -169,7 +170,12 @@ TEST_F(ZipTest, ZipFiles) { <newline>   ASSERT_TRUE(temp_dir.CreateUniqueTempDir()); <newline>   FilePath zip_file = temp_dir.path().AppendASCII("out.zip"); <newline>-  EXPECT_TRUE(zip::ZipFiles(src_dir, zip_file_list_, zip_file)); <newline>+  const int flags = base::PLATFORM_FILE_CREATE | base::PLATFORM_FILE_WRITE; <newline>+  const base::PlatformFile zip_fd = <newline>+      base::CreatePlatformFile(zip_file, flags, NULL, NULL); <newline>+  ASSERT_LE(0, zip_fd); <newline>+  EXPECT_TRUE(zip::ZipFiles(src_dir, zip_file_list_, zip_fd)); <newline>+  base::ClosePlatformFile(zip_fd); <newline>   zip::ZipReader reader; <newline>   EXPECT_TRUE(reader.Open(zip_file)); <newline>@@ -181,6 +187,7 @@ TEST_F(ZipTest, ZipFiles) { <newline>     EXPECT_EQ(entry_info->file_path(), zip_file_list_[i]); <newline>   } <newline> } <newline>+#endif  // defined(OS_POSIX) <newline> }  // namespace																								
Chromium	1	5	18e8348b6eb3b026bbafaafc615888c4f39c5ce	dalecurtis@chromium.org <dalecurtis@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Nov 20 04:36:55 2012 +0000	Roll FFMpeg DEPS to pick up security fixes. - Adds a test case for the issue. - Fixes ordering issues with EXPECT_EQ() - Notes a recent memory leak regression. - Fixes stale errors and hashes for unit test. Includes: 82ae69c Prevent stack buffer overflow during AAC decoding. TEST=unit test under asan/valgrind.	161639		https://chromiumcodereview.appspot.com/11414076	svn://svn.chromium.org/chrome/trunk/src@168731 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/media/filters/pipeline_integration_test_base.cc b/media/filters/pipeline_integration_test_base.cc <newline>index 6dc6a4d..4e78c2b 100644 <newline>--- a/media/filters/pipeline_integration_test_base.cc <newline>+++ b/media/filters/pipeline_integration_test_base.cc <newline>@@ -47,7 +47,7 @@ void PipelineIntegrationTestBase::OnStatusCallback( <newline> void PipelineIntegrationTestBase::OnStatusCallbackChecked( <newline>     PipelineStatus expected_status, <newline>     PipelineStatus status) { <newline>-  EXPECT_EQ(status, expected_status); <newline>+  EXPECT_EQ(expected_status, status); <newline>   OnStatusCallback(status); <newline> }																								
Chromium	5		bfa3967867eaec1b667a0bc453b0b5073494a21	dglazkov@chromium.org <dglazkov@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Nov 16 17:53:39 2012 +0000	Revert 168224 - Update V8 to version 3.15.4. Caused failures in WebKit layout tests: Regressions: Unexpected text-only failures (6) fast/dom/Window/replaceable.html [ Failure ] http/tests/security/cross-frame-access-object-prototype.html [ Failure ] inspector/console/command-line-api-inspect.html [ Failure ] inspector/console/console-format-collections.html [ Failure ] inspector/runtime/runtime-localStorage-getProperties.html [ Failure ] Regressions: Unexpected crashes (1) inspector/console/console-dir.html [ Crash ] TBR=yangguo@chromium.org			https://codereview.chromium.org/11411036	svn://svn.chromium.org/chrome/trunk/src@168240 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/DEPS b/DEPS <newline>index c03462a..9cb1105 100644 <newline>--- a/DEPS <newline>+++ b/DEPS <newline>@@ -34,7 +34,7 @@ vars = { <newline>   # Three lines of non-changing comments so that <newline>   # the commit queue can handle CLs rolling Skia <newline>   # and V8 without interference from each other. <newline>-  "v8_revision": "12994", <newline>+  "v8_revision": "12947", <newline>   # Three lines of non-changing comments so that <newline>   # the commit queue can handle CLs rolling WebRTC <newline>   # and V8 without interference from each other.																								
Chromium	5		a3436f4d886f64b850f7d58368e70c231ad1535	tsepez@chromium.org <tsepez@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Nov 9 19:39:19 2012 +0000	Chrome security team IPC message owners.			https://codereview.chromium.org/11188047	svn://svn.chromium.org/chrome/trunk/src@166956 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/android_webview/common/OWNERS b/android_webview/common/OWNERS <newline>new file mode 100644 <newline>index 0000000..0abb418 <newline>--- /dev/null <newline>+++ b/android_webview/common/OWNERS <newline>@@ -0,0 +1,8 @@ <newline>+# Changes to IPC messages require a security review to avoid introducing <newline>+# new sandbox escapes. <newline>+per-file *_messages.h=set noparent <newline>+per-file *_messages.h=cdn@chromium.org <newline>+per-file *_messages.h=jln@chromium.org <newline>+per-file *_messages.h=jschuh@chromium.org <newline>+per-file *_messages.h=palmer@chromium.org <newline>+per-file *_messages.h=tsepez@chromium.org																								
Chromium	5		440fc2d3a7d996078ac97fe95d6ef29f28ed0a5	tsepez@chromium.org <tsepez@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Nov 9 19:38:28 2012 +0000	Chrome security team IPC message owners.			https://codereview.chromium.org/11191041	svn://svn.chromium.org/chrome/trunk/src@166955 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/ui/metro_viewer/OWNERS b/ui/metro_viewer/OWNERS <newline>new file mode 100644 <newline>index 0000000..0abb418 <newline>--- /dev/null <newline>+++ b/ui/metro_viewer/OWNERS <newline>@@ -0,0 +1,8 @@ <newline>+# Changes to IPC messages require a security review to avoid introducing <newline>+# new sandbox escapes. <newline>+per-file *_messages.h=set noparent <newline>+per-file *_messages.h=cdn@chromium.org <newline>+per-file *_messages.h=jln@chromium.org <newline>+per-file *_messages.h=jschuh@chromium.org <newline>+per-file *_messages.h=palmer@chromium.org <newline>+per-file *_messages.h=tsepez@chromium.org																								
Chromium	5		5146d5b7621bc24d23e2e0c3e2b36d81588344f	tsepez@chromium.org <tsepez@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Nov 9 19:32:51 2012 +0000	Add security team as IPC message file owners. TBR=brettw@chromium.org			https://codereview.chromium.org/11186034	svn://svn.chromium.org/chrome/trunk/src@166953 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/ppapi/proxy/OWNERS b/ppapi/proxy/OWNERS <newline>index 86dac7d..1980838 100644 <newline>--- a/ppapi/proxy/OWNERS <newline>+++ b/ppapi/proxy/OWNERS <newline>@@ -1,2 +1,11 @@ <newline> piman@chromium.org <newline> viettrungluu@chromium.org <newline>+ <newline>+# Changes to IPC messages require a security review to avoid introducing <newline>+# new sandbox escapes. <newline>+per-file *_messages.h=set noparent <newline>+per-file *_messages.h=cdn@chromium.org <newline>+per-file *_messages.h=jln@chromium.org <newline>+per-file *_messages.h=jschuh@chromium.org <newline>+per-file *_messages.h=palmer@chromium.org <newline>+per-file *_messages.h=tsepez@chromium.org																								
Chromium	5		d5c72ca5bb1bb7bcb9a99a76505e9cfba48dec7	tsepez@chromium.org <tsepez@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Nov 9 19:26:28 2012 +0000	Add security team as IPC file reviewers. TBR=mirandac@chromium.org, kalman@chromium.org,			https://codereview.chromium.org/11191040	svn://svn.chromium.org/chrome/trunk/src@166950 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/common/safe_browsing/OWNERS b/chrome/common/safe_browsing/OWNERS <newline>new file mode 100644 <newline>index 0000000..881aaa5 <newline>--- /dev/null <newline>+++ b/chrome/common/safe_browsing/OWNERS <newline>@@ -0,0 +1,8 @@ <newline>+# For security review of IPC message files. <newline>+per-file *_messages.h=set noparent <newline>+per-file *_messages.h=cdn@chromium.org <newline>+per-file *_messages.h=cevans@chromium.org <newline>+per-file *_messages.h=inferno@chromium.org <newline>+per-file *_messages.h=jschuh@chromium.org <newline>+per-file *_messages.h=palmer@chromium.org <newline>+per-file *_messages.h=tsepez@chromium.org																								
Chromium	5		d62c144cc8e7276f0f384990d219698dadd01c0	tsepez@chromium.org <tsepez@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Nov 9 19:13:34 2012 +0000	Add security team as owners of IPC files. TBR=jam@chromium.org,piman@chromium.org,michaeln@chromium.org,scherkus@chromium.org,pfeldman@chromium.org			https://codereview.chromium.org/11184030	svn://svn.chromium.org/chrome/trunk/src@166946 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/shell/OWNERS b/content/shell/OWNERS <newline>index 92bc6c5..1582ce2 100644 <newline>--- a/content/shell/OWNERS <newline>+++ b/content/shell/OWNERS <newline>@@ -1,2 +1,11 @@ <newline> jochen@chromium.org <newline> pfeldman@chromium.org <newline>+ <newline>+# For security review of IPC message files. <newline>+per-file *_messages.h=set noparent <newline>+per-file *_messages.h=cdn@chromium.org <newline>+per-file *_messages.h=cevans@chromium.org <newline>+per-file *_messages.h=inferno@chromium.org <newline>+per-file *_messages.h=jschuh@chromium.org <newline>+per-file *_messages.h=palmer@chromium.org <newline>+per-file *_messages.h=tsepez@chromium.org																								
Chromium	5		950981b3d4fbd2a514558f667284c7b3d7abc48	tsepez@chromium.org <tsepez@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Oct 23 23:03:35 2012 +0000	Move IPCMessageStart enum into it own file with security team OWNERS, so that new message files can't be added to chromium without triggering a security review.			https://chromiumcodereview.appspot.com/11048038	svn://svn.chromium.org/chrome/trunk/src@163713 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/ipc/ipc_message_utils.h b/ipc/ipc_message_utils.h <newline>index 757bae4..0e4c68e 100644 <newline>--- a/ipc/ipc_message_utils.h <newline>+++ b/ipc/ipc_message_utils.h <newline>@@ -17,6 +17,7 @@ <newline> #include "base/stringprintf.h" <newline> #include "base/string_util.h" <newline> #include "base/tuple.h" <newline>+#include "ipc/ipc_message_start.h" <newline> #include "ipc/ipc_param_traits.h" <newline> #include "ipc/ipc_sync_message.h" <newline>@@ -43,75 +44,6 @@ <newline> #error "Please add the noinline property for your new compiler here." <newline> #endif <newline>-// Used by IPC_BEGIN_MESSAGES so that each message class starts from a unique <newline>-// base.  Messages have unique IDs across channels in order for the IPC logging <newline>-// code to figure out the message class from its ID. <newline>-enum IPCMessageStart { <newline>-  AutomationMsgStart = 0, <newline>-  ViewMsgStart, <newline>-  PluginMsgStart, <newline>-  ProfileImportMsgStart, <newline>-  TestMsgStart, <newline>-  DevToolsMsgStart, <newline>-  WorkerMsgStart, <newline>-  NaClMsgStart, <newline>-  UtilityMsgStart, <newline>-  GpuMsgStart, <newline>-  ServiceMsgStart, <newline>-  PpapiMsgStart, <newline>-  FirefoxImporterUnittestMsgStart, <newline>-  FileUtilitiesMsgStart, <newline>-  MimeRegistryMsgStart, <newline>-  DatabaseMsgStart, <newline>-  DOMStorageMsgStart, <newline>-  IndexedDBMsgStart, <newline>-  PepperFileMsgStart, <newline>-  SpeechRecognitionMsgStart, <newline>-  PepperMsgStart, <newline>-  AutofillMsgStart, <newline>-  SafeBrowsingMsgStart, <newline>-  P2PMsgStart, <newline>-  SocketStreamMsgStart, <newline>-  ResourceMsgStart, <newline>-  FileSystemMsgStart, <newline>-  ChildProcessMsgStart, <newline>-  ClipboardMsgStart, <newline>-  BlobMsgStart, <newline>-  AppCacheMsgStart, <newline>-  DeviceMotionMsgStart, <newline>-  DeviceOrientationMsgStart, <newline>-  DesktopNotificationMsgStart, <newline>-  GeolocationMsgStart, <newline>-  AudioMsgStart, <newline>-  ChromeMsgStart, <newline>-  DragMsgStart, <newline>-  PrintMsgStart, <newline>-  SpellCheckMsgStart, <newline>-  ExtensionMsgStart, <newline>-  VideoCaptureMsgStart, <newline>-  QuotaMsgStart, <newline>-  IconMsgStart, <newline>-  TextInputClientMsgStart, <newline>-  ChromeUtilityMsgStart, <newline>-  MediaStreamMsgStart, <newline>-  ChromeBenchmarkingMsgStart, <newline>-  IntentsMsgStart, <newline>-  JavaBridgeMsgStart, <newline>-  GamepadMsgStart, <newline>-  ShellMsgStart, <newline>-  AccessibilityMsgStart, <newline>-  PrerenderMsgStart, <newline>-  ChromotingMsgStart, <newline>-  OldBrowserPluginMsgStart, <newline>-  BrowserPluginMsgStart, <newline>-  HyphenatorMsgStart, <newline>-  AndroidWebViewMsgStart, <newline>-  MetroViewerMsgStart, <newline>-  CCMsgStart, <newline>-  MediaPlayerMsgStart, <newline>-  LastIPCMsgStart      // Must come last. <newline>-}; <newline>- <newline> class FilePath; <newline> class NullableString16;																								
Chromium	5		43d52e3d20fbd72d5fdb9cb0a57dccf10600742	dalecurtis@google.com <dalecurtis@google.com@0039d316-1c4b-4281-b951-d872f2087c98>	Sun Oct 21 22:20:04 2012 +0000	Using Ronald's libclang based converter, we're able to translate ffmpeg from C99 to C89 syntax and compile through MSVC++! This is awesome for many reasons: - Better performance! MSVC compiled code is as fast as some of the hand rolled assembly in certain cases (per rbultje). - Debugging symbols! (!!!) Crash dumps will now be symbolized with all symbols instead of the missing symbols traces we get in crash reports today. - No more hand rolling binaries every time ffmpeg needs a security fix or someone wants to make a change! - Greatly reduced binary size, the Chrome DLLs are ~3.2mb smaller and the Chromium DLLs ~2.3mb smaller: Chrome: 5205049 -> 1817600, Chromium: 3587185 -> 1147904. This change also cleans up the media library initialization code and gets rid of the old dll names in various places.  There is still one other locations which need to be updated separately: http://src.chromium.org/viewvc/chrome/trunk/tools/build/site_config/config.py The downside is this will add ~3minutes of compile time (on T3500) for non-GOMA users and ~30 seconds for GOMA users (-j 256). More information available here: https://gerrit.chromium.org/gerrit/#/c/34728/ TEST=Manual testing. Unit tests. It actually compiles!	39887		https://codereview.chromium.org/11036039	svn://svn.chromium.org/chrome/trunk/src@163213 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/media/base/media_win.cc b/media/base/media_win.cc <newline>index f0f78ab..616d370 100644 <newline>--- a/media/base/media_win.cc <newline>+++ b/media/base/media_win.cc <newline>@@ -13,7 +13,6 @@ <newline> #include "base/file_path.h" <newline> #include "base/logging.h" <newline>-#include "base/memory/scoped_ptr.h" <newline> #include "base/native_library.h" <newline> #include "base/path_service.h" <newline>@@ -21,97 +20,38 @@ <newline> namespace media { <newline>-enum FFmpegDLLKeys { <newline>-  FILE_LIBAVCODEC,   // full path to libavcodec media decoding library. <newline>-  FILE_LIBAVFORMAT,  // full path to libavformat media parsing library. <newline>-  FILE_LIBAVUTIL,    // full path to libavutil media utility library. <newline>-}; <newline>- <newline>-// Retrieves the DLLName for the given key. <newline>-static const char* GetDLLName(FFmpegDLLKeys dll_key) { <newline>-  // TODO(ajwong): Do we want to lock to a specific ffmpeg version? <newline>-  switch (dll_key) { <newline>-    case FILE_LIBAVCODEC: <newline>-      return "avcodec-54.dll"; <newline>-    case FILE_LIBAVFORMAT: <newline>-      return "avformat-54.dll"; <newline>-    case FILE_LIBAVUTIL: <newline>-      return "avutil-51.dll"; <newline>-    default: <newline>-      LOG(DFATAL) << "Invalid DLL key requested: " << dll_key; <newline>-      return ""; <newline>-  } <newline>-} <newline>+// FFmpeg library name. <newline>+static const char* kFFmpegDLL = "ffmpegsumo.dll"; <newline>+// Use a global to indicate whether the library has been initialized or not.  We <newline>+// rely on function level static initialization in InitializeMediaLibrary() to <newline>+// guarantee this is only set once in a thread safe manner. <newline> static bool g_media_library_is_initialized = false; <newline>-// Attempts to initialize the media library (loading DLLs, DSOs, etc.). <newline>-// Returns true if everything was successfully initialized, false otherwise. <newline>-bool InitializeMediaLibrary(const FilePath& base_path) { <newline>-  if (g_media_library_is_initialized) <newline>-    return true; <newline>+static bool InitializeMediaLibraryInternal(const FilePath& base_path) { <newline>+  DCHECK(!g_media_library_is_initialized); <newline>   // LoadLibraryEx(..., LOAD_WITH_ALTERED_SEARCH_PATH) cannot handle <newline>   // relative path. <newline>   if (!base_path.IsAbsolute()) <newline>     return false; <newline>-  FFmpegDLLKeys path_keys[] = { <newline>-    media::FILE_LIBAVCODEC, <newline>-    media::FILE_LIBAVFORMAT, <newline>-    media::FILE_LIBAVUTIL <newline>-  }; <newline>-  HMODULE libs[arraysize(path_keys)] = {NULL}; <newline>- <newline>-  for (size_t i = 0; i < arraysize(path_keys); ++i) { <newline>-    FilePath path = base_path.AppendASCII(GetDLLName(path_keys[i])); <newline>- <newline>-    // Use alternate DLL search path so we don't load dependencies from the <newline>-    // system path.  Refer to http://crbug.com/35857 <newline>-    const wchar_t* cpath = path.value().c_str(); <newline>-    libs[i] = ::LoadLibraryEx(cpath, NULL, LOAD_WITH_ALTERED_SEARCH_PATH); <newline>-    if (!libs[i]) <newline>-      break; <newline>-  } <newline>- <newline>-  // Check that we loaded all libraries successfully.  We only need to check the <newline>-  // last array element because the loop above will break without initializing <newline>-  // it on any prior error. <newline>-  bool media_library_is_initialized = (libs[arraysize(libs) - 1] != NULL); <newline>+  // Use alternate DLL search path so we don't load dependencies from the <newline>+  // system path.  Refer to http://crbug.com/35857 <newline>+  HMODULE lib = ::LoadLibraryEx( <newline>+      base_path.AppendASCII(kFFmpegDLL).value().c_str(), NULL, <newline>+      LOAD_WITH_ALTERED_SEARCH_PATH); <newline>-  if (!media_library_is_initialized) { <newline>-    // Free any loaded libraries if we weren't successful. <newline>-    for (size_t i = 0; i < arraysize(libs) && libs[i] != NULL; ++i) { <newline>-      FreeLibrary(libs[i]); <newline>-      libs[i] = NULL;  // Just to be safe. <newline>-    } <newline>-    return false; <newline>-  } <newline>- <newline>-  // Workaround for http://crbug.com/110983 <newline>-  // LoadLibrary() sometimes AV's when called by delay load helper when we <newline>-  // call function in ffmpeg for the first time, and we don't know why. <newline>-  // Force delay load helper to fix import table here instead. <newline>-  // Theoretically, there is no need to call LoadLibrary() before <newline>-  // __HrLoadAllImportsForDll(), it will call LoadLibrary() itself, but there <newline>-  // is no way to specify LOAD_WITH_ALTERED_SEARCH_PATH when calling <newline>-  // __HrLoadAllImportsForDll(). So we do everything in 2 steps -- first call <newline>-  // LoadLibraryEx(..., LOAD_WITH_ALTERED_SEARCH_PATH), then call <newline>-  // __HrLoadAllImportsForDll(). Overhead is negligible compared to disk <newline>-  // access time. <newline>-  // Note: in case of error we are not unloading DLL because unload requires <newline>-  //       extra resources and should not be necessary; if we ever decide to <newline>-  //       unload by calling __FUnloadDelayLoadedDLL() please add /DELAY:UNLOAD <newline>-  //       to the linker command line. <newline>-  // TODO(enal): remove that code when we find underlying issue. Delay load <newline>-  // should work if library is alreday in memory, regardless of permissions... <newline>-  for (size_t i = 0; i < arraysize(path_keys); ++i) { <newline>-    if (FAILED(::__HrLoadAllImportsForDll(GetDLLName(path_keys[i])))) <newline>-      media_library_is_initialized = false; <newline>-  } <newline>+  // Check that we loaded the library successfully. <newline>+  g_media_library_is_initialized = (lib != NULL); <newline>+  return g_media_library_is_initialized; <newline>+} <newline>-  g_media_library_is_initialized = media_library_is_initialized; <newline>-  return media_library_is_initialized; <newline>+bool InitializeMediaLibrary(const FilePath& base_path) { <newline>+  static const bool kMediaLibraryInitialized = <newline>+      InitializeMediaLibraryInternal(base_path); <newline>+  DCHECK_EQ(kMediaLibraryInitialized, g_media_library_is_initialized); <newline>+  return kMediaLibraryInitialized; <newline> } <newline> void InitializeMediaLibraryForTesting() {																								
Chromium	1	1	8a9475053cd223b33d8d943a26dda929a5b2195	lazyboy@chromium.org <lazyboy@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Oct 10 19:49:15 2012 +0000	<browser> Display a warning that "stability and security will suffer" when browser plugin is enabled for all view types via flags. We don't want to allow browser plugin to be enabled for regular pages since it breaks same origin policy, the flag to force it exists solely for debugging purposes. TEST=With the flag, I see the warning infobar. No change without the flag.	154361		https://chromiumcodereview.appspot.com/11013047	svn://svn.chromium.org/chrome/trunk/src@161160 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/ui/startup/bad_flags_prompt.cc b/chrome/browser/ui/startup/bad_flags_prompt.cc <newline>index b10e9cc..8057a60 100644 <newline>--- a/chrome/browser/ui/startup/bad_flags_prompt.cc <newline>+++ b/chrome/browser/ui/startup/bad_flags_prompt.cc <newline>@@ -26,6 +26,9 @@ void ShowBadFlagsPrompt(Browser* browser) { <newline>     switches::kNoSandbox, <newline>     switches::kInProcessWebGL, <newline>     switches::kDisableWebSecurity, <newline>+    // Browser plugin is dangerous on regular pages because it breaks the Same <newline>+    // Origin Policy. <newline>+    switches::kEnableBrowserPluginForAllViewTypes, <newline>     NULL <newline>   };																								
Chromium	1	2	bfa62a2df740e2dffd771604de821b003d4ba46	dalecurtis@google.com <dalecurtis@google.com@0039d316-1c4b-4281-b951-d872f2087c98>	Sat Oct 6 00:00:36 2012 +0000	Add support for windows def generation from sigs. Used to generate the export table for the MSVC build of ffmpeg.  Necessary since we don't want to decorate all the ffmpeg methods we use with __declspec(dllexport) a la MEDIA_EXPORT. Doing things this way allows us to keep the security of having an explicit whitelist for ffmpeg symbols. TEST=MSVC version of ffmpeg builds and runs.  Unittests.	39887		https://codereview.chromium.org/11027054	svn://svn.chromium.org/chrome/trunk/src@160524 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/tools/generate_stubs/generate_stubs.py b/tools/generate_stubs/generate_stubs.py <newline>index 424d24f..1c97c25 100755 <newline>--- a/tools/generate_stubs/generate_stubs.py <newline>+++ b/tools/generate_stubs/generate_stubs.py <newline>@@ -78,6 +78,7 @@ INVALID_C_IDENT_CHARS = re.compile('[^_a-zA-Z0-9]') <newline> # Constants defning the supported file types options. <newline> FILE_TYPE_WIN = 'windows_lib' <newline> FILE_TYPE_POSIX_STUB = 'posix_stubs' <newline>+FILE_TYPE_WIN_DEF = 'windows_def' <newline> # Template for generating a stub function definition.  Includes a forward <newline> # declaration marking the symbol as weak.  This template takes the following <newline>@@ -875,19 +876,21 @@ def CreateOptionParser(): <newline>                     '--intermediate_dir', <newline>                     dest='intermediate_dir', <newline>                     default=None, <newline>-                    help='Locaiton of intermediate files.') <newline>+                    help=('Location of intermediate files. Ignored for %s type' <newline>+                          % FILE_TYPE_WIN_DEF)) <newline>   parser.add_option('-t', <newline>                     '--type', <newline>                     dest='type', <newline>                     default=None, <newline>-                    help=('Type of file. Either "%s" or "%s"' % <newline>-                          (FILE_TYPE_POSIX_STUB, FILE_TYPE_WIN))) <newline>+                    help=('Type of file. Valid types are "%s" or "%s" or "%s"' % <newline>+                          (FILE_TYPE_POSIX_STUB, FILE_TYPE_WIN, <newline>+                           FILE_TYPE_WIN_DEF))) <newline>   parser.add_option('-s', <newline>                     '--stubfile_name', <newline>                     dest='stubfile_name', <newline>                     default=None, <newline>-                    help=('Name of posix_stubs output file. Ignored for ' <newline>-                          '%s type.' % FILE_TYPE_WIN)) <newline>+                    help=('Name of posix_stubs output file. Only valid with ' <newline>+                          '%s type.' % FILE_TYPE_POSIX_STUB)) <newline>   parser.add_option('-p', <newline>                     '--path_from_source', <newline>                     dest='path_from_source', <newline>@@ -906,6 +909,13 @@ def CreateOptionParser(): <newline>                     help=('File to insert after the system includes in the ' <newline>                           'generated stub implemenation file. Ignored for ' <newline>                           '%s type.' % FILE_TYPE_WIN)) <newline>+  parser.add_option('-m', <newline>+                    '--module_name', <newline>+                    dest='module_name', <newline>+                    default=None, <newline>+                    help=('Name of output DLL or LIB for DEF creation using ' <newline>+                          '%s type.' % FILE_TYPE_WIN_DEF)) <newline>+ <newline>   return parser <newline>@@ -925,15 +935,20 @@ def ParseOptions(): <newline>   if options.out_dir is None: <newline>     parser.error('Output location not specified') <newline>-  if options.type not in [FILE_TYPE_WIN, FILE_TYPE_POSIX_STUB]: <newline>-    parser.error('Invalid output file type') <newline>+  if (options.type not in <newline>+      [FILE_TYPE_WIN, FILE_TYPE_POSIX_STUB, FILE_TYPE_WIN_DEF]): <newline>+    parser.error('Invalid output file type: %s' % options.type) <newline>   if options.type == FILE_TYPE_POSIX_STUB: <newline>     if options.stubfile_name is None: <newline>-      parser.error('Output file name need for %s' % FILE_TYPE_POSIX_STUB) <newline>+      parser.error('Output file name needed for %s' % FILE_TYPE_POSIX_STUB) <newline>     if options.path_from_source is None: <newline>       parser.error('Path from source needed for %s' % FILE_TYPE_POSIX_STUB) <newline>+  if options.type == FILE_TYPE_WIN_DEF: <newline>+    if options.module_name is None: <newline>+      parser.error('Module name needed for %s' % FILE_TYPE_WIN_DEF) <newline>+ <newline>   return options, args <newline>@@ -977,7 +992,7 @@ def CreateWindowsLibForSigFiles(sig_files, out_dir, intermediate_dir): <newline>   """For each signature file, create a windows lib. <newline>   Args: <newline>-    sig_files: Array of Strings with the paths to each signature file. <newline>+    sig_files: Array of strings with the paths to each signature file. <newline>     out_dir: String holding path to directory where the generated libs go. <newline>     intermediate_dir: String holding path to directory generated intermdiate <newline>                       artifacts. <newline>@@ -992,13 +1007,39 @@ def CreateWindowsLibForSigFiles(sig_files, out_dir, intermediate_dir): <newline>       infile.close() <newline>+def CreateWindowsDefForSigFiles(sig_files, out_dir, module_name): <newline>+  """For all signature files, create a single windows def file. <newline>+ <newline>+  Args: <newline>+    sig_files: Array of strings with the paths to each signature file. <newline>+    out_dir: String holding path to directory where the generated def goes. <newline>+    module_name: Name of the output DLL or LIB which will link in the def file. <newline>+  """ <newline>+  signatures = [] <newline>+  for input_path in sig_files: <newline>+    infile = open(input_path, 'r') <newline>+    try: <newline>+      signatures += ParseSignatures(infile) <newline>+    finally: <newline>+      infile.close() <newline>+ <newline>+  def_file_path = os.path.join( <newline>+      out_dir, os.path.splitext(os.path.basename(module_name))[0] + '.def') <newline>+  outfile = open(def_file_path, 'w') <newline>+ <newline>+  try: <newline>+    WriteWindowsDefFile(module_name, signatures, outfile) <newline>+  finally: <newline>+    outfile.close() <newline>+ <newline>+ <newline> def CreatePosixStubsForSigFiles(sig_files, stub_name, out_dir, <newline>                                 intermediate_dir, path_from_source, <newline>                                 extra_stub_header): <newline>   """Create a posix stub library with a module for each signature file. <newline>   Args: <newline>-    sig_files: Array of Strings with the paths to each signature file. <newline>+    sig_files: Array of strings with the paths to each signature file. <newline>     stub_name: String with the basename of the generated stub file. <newline>     out_dir: String holding path to directory for the .h files. <newline>     intermediate_dir: String holding path to directory for the .cc files. <newline>@@ -1070,6 +1111,8 @@ def main(): <newline>     CreatePosixStubsForSigFiles(args, options.stubfile_name, out_dir, <newline>                                 intermediate_dir, options.path_from_source, <newline>                                 options.extra_stub_header) <newline>+  elif options.type == FILE_TYPE_WIN_DEF: <newline>+    CreateWindowsDefForSigFiles(args, out_dir, options.module_name) <newline> if __name__ == '__main__':																								
Chromium	1	5	90fbc342ca61055e58b8e549d0375105377af50	dcblack@chromium.org <dcblack@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Oct 5 01:19:45 2012 +0000	Tweak our javascript to not use array.length, as it might be a security vulnerability.			https://chromiumcodereview.appspot.com/11047010	svn://svn.chromium.org/chrome/trunk/src@160275 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/renderer/resources/extensions/searchbox/searchbox_api.js b/chrome/renderer/resources/extensions/searchbox/searchbox_api.js <newline>index 3e207e0..cb09831 100644 <newline>--- a/chrome/renderer/resources/extensions/searchbox/searchbox_api.js <newline>+++ b/chrome/renderer/resources/extensions/searchbox/searchbox_api.js <newline>@@ -60,8 +60,7 @@ if (!chrome.searchBox) { <newline>       var autocompleteResults = DedupeAutcompleteResults( <newline>           GetAutocompleteResults()); <newline>       var userInput = GetQuery(); <newline>-      for (var i = 0; i < autocompleteResults.length; ++i) { <newline>-        var result = autocompleteResults[i]; <newline>+      for (var i = 0, result; result = autocompleteResults[i]; ++i) { <newline>         var title = result.contents; <newline>         var url = CleanUrl(result.destination_url, userInput); <newline>         var combinedHtml = '<span class=chrome_url>' + url + '</span>'; <newline>@@ -78,6 +77,7 @@ if (!chrome.searchBox) { <newline>       return autocompleteResults; <newline>     } <newline>+    // TODO(dcblack): Do this in C++ instead of JS. <newline>     function CleanUrl(url, userInput) { <newline>       if (url.indexOf(userInput) == 0) { <newline>         return url; <newline>@@ -89,6 +89,7 @@ if (!chrome.searchBox) { <newline>       return url.replace(WWW_REGEX, ''); <newline>     } <newline>+    // TODO(dcblack): Do this in C++ instead of JS. <newline>     function CanonicalizeUrl(url) { <newline>       return url.replace(HTTP_REGEX, '').replace(WWW_REGEX, ''); <newline>     } <newline>@@ -97,8 +98,7 @@ if (!chrome.searchBox) { <newline>     // TODO(dcblack): Do this in C++ instead of JS. <newline>     function DedupeAutcompleteResults(autocompleteResults) { <newline>       var urlToResultMap = {}; <newline>-      for (var i = 0; i < autocompleteResults.length; ++i) { <newline>-        var result = autocompleteResults[i]; <newline>+      for (var i = 0, result; result = autocompleteResults[i]; ++i) { <newline>         var url = CanonicalizeUrl(result.destination_url); <newline>         if (url in urlToResultMap) { <newline>           var oldRelevance = urlToResultMap[url].rankingData.relevance; <newline>@@ -131,15 +131,15 @@ if (!chrome.searchBox) { <newline>       lastPrefixQueriedForDuplicates = userInput; <newline>       var autocompleteResults = GetAutocompleteResults(); <newline>       var nativeUrls = {}; <newline>-      for (var i = 0; i < autocompleteResults.length; ++i) { <newline>-        var nativeUrl = CanonicalizeUrl(autocompleteResults[i].destination_url); <newline>-        nativeUrls[nativeUrl] = autocompleteResults[i].rid; <newline>+      for (var i = 0, result; result = autocompleteResults[i]; ++i) { <newline>+        var nativeUrl = CanonicalizeUrl(result.destination_url); <newline>+        nativeUrls[nativeUrl] = result.rid; <newline>       } <newline>-      for (var i = 0; i < clientSuggestions.length && <newline>+      for (var i = 0, result; result = clientSuggestions[i] && <newline>            i < MAX_CLIENT_SUGGESTIONS_TO_DEDUPE; ++i) { <newline>-        var clientUrl = CanonicalizeUrl(clientSuggestions[i].url); <newline>+        var clientUrl = CanonicalizeUrl(result.url); <newline>         if (clientUrl in nativeUrls) { <newline>-          clientSuggestions[i].duplicateOf = nativeUrls[clientUrl]; <newline>+          result.duplicateOf = nativeUrls[clientUrl]; <newline>         } <newline>       } <newline>       return true;																								
Chromium	1	2	01203ed96d3e8b4d3f5b50328c047e88ff379b6	dalecurtis@google.com <dalecurtis@google.com@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Sep 28 22:28:18 2012 +0000	Roll FFmpeg DEPS + Fixup FFmpeg tests. Pulls in the security fix for issue 152691 and adds a test for the problematic file.  Additionally fixes a few issues which have led to rusting: - Updates hashes after AudioBus::ToInterleaved() changes. - Fixes a bunch of EXPECT_CALL failures and log spam since not all tests will satisfy these expectations due to invalid files. - Fixes a bug in the hashing code when NullAudioSink is never initialized. TEST=unit tests.	152691		https://codereview.chromium.org/10989089	svn://svn.chromium.org/chrome/trunk/src@159352 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/media/filters/pipeline_integration_test_base.cc b/media/filters/pipeline_integration_test_base.cc <newline>index 6aae526..7c1cc5d 100644 <newline>--- a/media/filters/pipeline_integration_test_base.cc <newline>+++ b/media/filters/pipeline_integration_test_base.cc <newline>@@ -14,6 +14,7 @@ <newline> #include "media/filters/file_data_source.h" <newline> using ::testing::AnyNumber; <newline>+using ::testing::AtMost; <newline> namespace media { <newline>@@ -88,8 +89,10 @@ void PipelineIntegrationTestBase::OnError(PipelineStatus status) { <newline> bool PipelineIntegrationTestBase::Start(const std::string& url, <newline>                                         PipelineStatus expected_status) { <newline>-  EXPECT_CALL(*this, OnBufferingState(Pipeline::kHaveMetadata)); <newline>-  EXPECT_CALL(*this, OnBufferingState(Pipeline::kPrerollCompleted)); <newline>+  EXPECT_CALL(*this, OnBufferingState(Pipeline::kHaveMetadata)) <newline>+      .Times(AtMost(1)); <newline>+  EXPECT_CALL(*this, OnBufferingState(Pipeline::kPrerollCompleted)) <newline>+      .Times(AtMost(1)); <newline>   pipeline_->Start( <newline>       CreateFilterCollection(url), <newline>       base::Bind(&PipelineIntegrationTestBase::OnEnded, base::Unretained(this)), <newline>@@ -109,8 +112,10 @@ bool PipelineIntegrationTestBase::Start(const std::string& url, <newline> } <newline> bool PipelineIntegrationTestBase::Start(const std::string& url) { <newline>-  EXPECT_CALL(*this, OnBufferingState(Pipeline::kHaveMetadata)); <newline>-  EXPECT_CALL(*this, OnBufferingState(Pipeline::kPrerollCompleted)); <newline>+  EXPECT_CALL(*this, OnBufferingState(Pipeline::kHaveMetadata)) <newline>+      .Times(AtMost(1)); <newline>+  EXPECT_CALL(*this, OnBufferingState(Pipeline::kPrerollCompleted)) <newline>+      .Times(AtMost(1)); <newline>   pipeline_->Start( <newline>       CreateFilterCollection(url), <newline>       base::Bind(&PipelineIntegrationTestBase::OnEnded, base::Unretained(this)),																								
Chromium	1	1	7b7502837a3a76166f2f9a1d3bfb2245d2ada8a	glotov@chromium.org <glotov@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Sep 25 17:44:22 2012 +0000	OOBE factory reset screen makes reboot if requested after sign in. This is because StartDeviceWipe() will not work after user sign in and sign out (without reboot). This is done so for security reasons. TEST=manual	122768		https://chromiumcodereview.appspot.com/10979017	svn://svn.chromium.org/chrome/trunk/src@158603 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/ui/webui/chromeos/login/reset_screen_handler.cc b/chrome/browser/ui/webui/chromeos/login/reset_screen_handler.cc <newline>index 3ff9f2a..bd0a5f6 100644 <newline>--- a/chrome/browser/ui/webui/chromeos/login/reset_screen_handler.cc <newline>+++ b/chrome/browser/ui/webui/chromeos/login/reset_screen_handler.cc <newline>@@ -7,8 +7,14 @@ <newline> #include <string> <newline> #include "base/bind.h" <newline>+#include "base/command_line.h" <newline> #include "base/values.h" <newline>+#include "chrome/browser/browser_process.h" <newline>+#include "chrome/browser/prefs/pref_service.h" <newline>+#include "chrome/common/chrome_switches.h" <newline>+#include "chrome/common/pref_names.h" <newline> #include "chromeos/dbus/dbus_thread_manager.h" <newline>+#include "chromeos/dbus/power_manager_client.h" <newline> #include "chromeos/dbus/session_manager_client.h" <newline> #include "grit/browser_resources.h" <newline> #include "grit/chromium_strings.h" <newline>@@ -63,12 +69,22 @@ void ResetScreenHandler::GetLocalizedStrings( <newline>           IDS_RESET_SCREEN_WARNING_MSG, <newline>           l10n_util::GetStringUTF16(IDS_SHORT_PRODUCT_NAME))); <newline>   localized_strings->SetString( <newline>-      "resetWarningDetails", <newline>-      l10n_util::GetStringUTF16(IDS_RESET_SCREEN_WARNING_DETAILS)); <newline>-  localized_strings->SetString( <newline>       "cancelButton", l10n_util::GetStringUTF16(IDS_CANCEL)); <newline>-  localized_strings->SetString( <newline>-      "resetButton", l10n_util::GetStringUTF16(IDS_RESET_SCREEN_RESET)); <newline>+  if (CommandLine::ForCurrentProcess()->HasSwitch(switches::kFirstBoot)) { <newline>+    localized_strings->SetString( <newline>+        "resetWarningDetails", <newline>+        l10n_util::GetStringUTF16(IDS_RESET_SCREEN_WARNING_DETAILS)); <newline>+    localized_strings->SetString( <newline>+        "resetButton", l10n_util::GetStringUTF16(IDS_RESET_SCREEN_RESET)); <newline>+  } else { <newline>+    localized_strings->SetString( <newline>+        "resetWarningDetails", <newline>+        l10n_util::GetStringFUTF16( <newline>+            IDS_OPTIONS_FACTORY_RESET_WARNING, <newline>+            l10n_util::GetStringUTF16(IDS_SHORT_PRODUCT_NAME))); <newline>+    localized_strings->SetString( <newline>+        "resetButton", l10n_util::GetStringUTF16(IDS_RELAUNCH_BUTTON)); <newline>+  } <newline> } <newline> void ResetScreenHandler::Initialize() { <newline>@@ -94,9 +110,17 @@ void ResetScreenHandler::HandleOnCancel(const base::ListValue* args) { <newline> } <newline> void ResetScreenHandler::HandleOnReset(const base::ListValue* args) { <newline>-  chromeos::SessionManagerClient* session_manager = <newline>-      chromeos::DBusThreadManager::Get()->GetSessionManagerClient(); <newline>-  session_manager->StartDeviceWipe(); <newline>+  if (CommandLine::ForCurrentProcess()->HasSwitch(switches::kFirstBoot)) { <newline>+    chromeos::DBusThreadManager::Get()->GetSessionManagerClient()-> <newline>+        StartDeviceWipe(); <newline>+  } else { <newline>+    PrefService* prefs = g_browser_process->local_state(); <newline>+    prefs->SetBoolean(prefs::kFactoryResetRequested, true); <newline>+    prefs->CommitPendingWrite(); <newline>+ <newline>+    chromeos::DBusThreadManager::Get()->GetPowerManagerClient()-> <newline>+        RequestRestart(); <newline>+  } <newline> } <newline> }  // namespace chromeos																								
Chromium	5		80fc824225e958594b4b0334f3d6d2dbc5ebf4e	qinmin@chromium.org <qinmin@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Sep 19 20:28:52 2012 +0000	Move android mediaplayer from render process to browser process. Due to UID isolation for security reasons, the render process can no longer have permissions to access internet. Since Android mediaplayer requires internet permission to work, it has to be moved to the browser process to resolve this. Here are the changes included in this patch: 1. Make WebMediaPlayerAndroid a common base class for WebMediaPlayerImplAndroid and WebMediaPlayerInProcessAndroid. WebMediaPlayerImplAndroid places the android mediaplayer in the brower process, this will be used for future chrome on android releases. WebMediaPlayerInProcessAndroid still places the android mediaplayer in the render process, this is being used for Layout tests. We will deprecate this later. 2.Added a commandline flag kMediaPlayerInRenderProcess to allow switching between these 2 modes 3.MediaPlayerBridge now takes over all the logics originally in WebMediaPlayerAndroid. This is to shield WMPA from knowing the internal state of the mediaplayer.			https://chromiumcodereview.appspot.com/10919075	svn://svn.chromium.org/chrome/trunk/src@157596 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/webkit/support/webkit_support.cc b/webkit/support/webkit_support.cc <newline>index de46cb0..435c0f4 100644 <newline>--- a/webkit/support/webkit_support.cc <newline>+++ b/webkit/support/webkit_support.cc <newline>@@ -57,7 +57,8 @@ <newline> #include "webkit/gpu/webgraphicscontext3d_in_process_command_buffer_impl.h" <newline> #include "webkit/gpu/webgraphicscontext3d_in_process_impl.h" <newline> #if defined(OS_ANDROID) <newline>-#include "webkit/media/android/webmediaplayer_android.h" <newline>+#include "webkit/media/android/media_player_bridge_manager_impl.h" <newline>+#include "webkit/media/android/webmediaplayer_in_process_android.h" <newline> #include "webkit/media/android/webmediaplayer_manager_android.h" <newline> #endif <newline> #include "webkit/media/webmediaplayer_impl.h" <newline>@@ -167,6 +168,10 @@ class TestEnvironment { <newline>                                       shadow_platform_delegate)); <newline> #if defined(OS_ANDROID) <newline>+    // Make sure we have enough decoding resources for layout tests. <newline>+    // The current maximum number of media elements in a layout test is 8. <newline>+    media_bridge_manager_.reset( <newline>+        new webkit_media::MediaPlayerBridgeManagerImpl(8)); <newline>     media_player_manager_.reset( <newline>         new webkit_media::WebMediaPlayerManagerAndroid()); <newline> #endif <newline>@@ -207,6 +212,10 @@ class TestEnvironment { <newline>   webkit_media::WebMediaPlayerManagerAndroid* media_player_manager() { <newline>     return media_player_manager_.get(); <newline>   } <newline>+ <newline>+  webkit_media::MediaPlayerBridgeManagerImpl* media_bridge_manager() { <newline>+    return media_bridge_manager_.get(); <newline>+  } <newline> #endif <newline>  private: <newline>@@ -219,6 +228,7 @@ class TestEnvironment { <newline> #if defined(OS_ANDROID) <newline>   FilePath mock_current_directory_; <newline>   scoped_ptr<webkit_media::WebMediaPlayerManagerAndroid> media_player_manager_; <newline>+  scoped_ptr<webkit_media::MediaPlayerBridgeManagerImpl> media_bridge_manager_; <newline> #endif <newline> }; <newline>@@ -388,12 +398,14 @@ WebKit::WebMediaPlayer* CreateMediaPlayer( <newline>     WebMediaPlayerClient* client, <newline>     webkit_media::MediaStreamClient* media_stream_client) { <newline> #if defined(OS_ANDROID) <newline>-  return new webkit_media::WebMediaPlayerAndroid( <newline>+  return new webkit_media::WebMediaPlayerInProcessAndroid( <newline>       frame, <newline>       client, <newline>       GetWebKitPlatformSupport()->cookieJar(), <newline>       test_environment->media_player_manager(), <newline>-      new webkit_support::TestStreamTextureFactory()); <newline>+      test_environment->media_bridge_manager(), <newline>+      new webkit_support::TestStreamTextureFactory(), <newline>+      true); <newline> #else <newline>   scoped_ptr<media::MessageLoopFactory> message_loop_factory( <newline>       new media::MessageLoopFactory());																								
Chromium	5		bc80280056bf0c21ddd6d63b34c785f83208599	ibraaaa@google.com <ibraaaa@google.com@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Sep 18 20:20:34 2012 +0000	Default security status for unknown plugins on non-linux platform to SECURITY_STATUS_UP_TO_DATE	148992		https://chromiumcodereview.appspot.com/10947007	svn://svn.chromium.org/chrome/trunk/src@157411 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/plugin_installer_unittest.cc b/chrome/browser/plugin_installer_unittest.cc <newline>index 3f043e0..fd90cec 100644 <newline>--- a/chrome/browser/plugin_installer_unittest.cc <newline>+++ b/chrome/browser/plugin_installer_unittest.cc <newline>@@ -34,7 +34,12 @@ TEST(PluginInstallerTest, SecurityStatus) { <newline>   PluginInstaller installer("claybrick-writer", <newline>                             ASCIIToUTF16("ClayBrick Writer"), <newline>                             true, GURL(), GURL(), ASCIIToUTF16("ClayBrick")); <newline>+ <newline>+#if defined(OS_LINUX) <newline>   EXPECT_EQ(kRequiresAuthorization, GetSecurityStatus(&installer, "1.2.3")); <newline>+#else <newline>+  EXPECT_EQ(kUpToDate, GetSecurityStatus(&installer, "1.2.3")); <newline>+#endif <newline>   installer.AddVersion(Version("9.4.1"), kRequiresAuthorization); <newline>   installer.AddVersion(Version("10"), kOutOfDate);																								
Chromium	1	1	5305b4c395b5fc710a9858c4d2325a2b78867ca	mseaborn@chromium.org <mseaborn@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Sep 14 21:06:18 2012 +0000	NaCl: Update revision in DEPS, r9728 -> r9742 This pulls in the following Native Client changes: r9729: (jvoung) Don't try to build the irt in run.py anymore, only irt_core. r9730: (dschuff) DEPS in updated pnacl toolchains r9731: (dschuff) Update pnacl translator hash from DEPS roll r9732: (dschuff) Remove use of download_toolchains.py from toolchain test bot script r9733: (kschimpf) Define the "not" and "in" operators for arm table expressions. r9734: (kschimpf) Add indexable local decoder definitions to decoder tables. r9735: (bradnelson) Switch osx to use ninja. r9736: (mseaborn) Remove unused NACL_ARCH_CPU_* #defines from portability.h r9737: (jfb) ARM validator: fix security issue in condition handling. r9738: (khim) Fix few more style issues in gen_dfa.cc r9740: (olonho) Build NaCl on Android. Relies on Android Chrome-based build setup. r9741: (shcherbina) Validator_ragel: rewrite comments and change rename enum items a little. r9742: (khim) Fix few more style issues in gen_dfa.cc TEST=nacl_integration	none		https://chromiumcodereview.appspot.com/10916320	svn://svn.chromium.org/chrome/trunk/src@156885 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/DEPS b/DEPS <newline>index 8082874..1040d69 100644 <newline>--- a/DEPS <newline>+++ b/DEPS <newline>@@ -12,7 +12,7 @@ vars = { <newline>   "chromium_git": "http://git.chromium.org/git", <newline>   "chromiumos_git": "http://git.chromium.org/chromiumos", <newline>   "swig_revision": "69281", <newline>-  "nacl_revision": "9728", <newline>+  "nacl_revision": "9742", <newline>   # After changing nacl_revision, run 'glient sync' and check native_client/DEPS <newline>   # to update other nacl_*_revision's. <newline>   "nacl_tools_revision": "9330",  # native_client/DEPS: tools_rev																								
Chromium	5		b5577b22f25767ad061009c3ceac3707ce143ab	acolwell@chromium.org <acolwell@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Sep 12 01:35:36 2012 +0000	Fix ChunkDemuxer signal an error instead of crash when a parser gives it invalid configs. TEST=Manual Media Source API test that appends uninitialize.webm from the chrome-internal/trunk/data/media/security/ repo.	148528		https://chromiumcodereview.appspot.com/10918183	svn://svn.chromium.org/chrome/trunk/src@156202 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/media/filters/chunk_demuxer.cc b/media/filters/chunk_demuxer.cc <newline>index d7c4b9a..e38c35d 100644 <newline>--- a/media/filters/chunk_demuxer.cc <newline>+++ b/media/filters/chunk_demuxer.cc <newline>@@ -1024,9 +1024,13 @@ bool ChunkDemuxer::OnNewConfigs(bool has_audio, bool has_video, <newline>   DVLOG(1) << "OnNewConfigs(" << has_audio << ", " << has_video <newline>            << ", " << audio_config.IsValidConfig() <newline>            << ", " << video_config.IsValidConfig() << ")"; <newline>-  CHECK(audio_config.IsValidConfig() || video_config.IsValidConfig()); <newline>   lock_.AssertAcquired(); <newline>+  if (!audio_config.IsValidConfig() && !video_config.IsValidConfig()) { <newline>+    DVLOG(1) << "OnNewConfigs() : Audio & video config are not valid!"; <newline>+    return false; <newline>+  } <newline>+ <newline>   // Signal an error if we get configuration info for stream types that weren't <newline>   // specified in AddId() or more configs after a stream is initialized. <newline>   // Only allow a single audio config for now.																								
Chromium	5		a510ac4bc948e8a14b4a15e982f016912375245	mkwst@chromium.org <mkwst@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Sep 6 02:23:08 2012 +0000	Ban the ',' character from 'content_security_policy' manifest attributes.	146492		https://chromiumcodereview.appspot.com/10927002	svn://svn.chromium.org/chrome/trunk/src@155102 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/common/extensions/csp_validator_unittest.cc b/chrome/common/extensions/csp_validator_unittest.cc <newline>index 7063761..0ed8d37 100644 <newline>--- a/chrome/common/extensions/csp_validator_unittest.cc <newline>+++ b/chrome/common/extensions/csp_validator_unittest.cc <newline>@@ -18,6 +18,8 @@ TEST(ExtensionCSPValidator, IsLegal) { <newline>       "default-src 'self';\nscript-src http://www.google.com")); <newline>   EXPECT_FALSE(ContentSecurityPolicyIsLegal( <newline>       "default-src 'self';\rscript-src http://www.google.com")); <newline>+  EXPECT_FALSE(ContentSecurityPolicyIsLegal( <newline>+      "default-src 'self';,script-src http://www.google.com")); <newline> } <newline> TEST(ExtensionCSPValidator, IsSecure) {																								
Chromium	5		728ff65e1c72ce6ff7685ed1d9c9a23b927cb1d	mkwst@chromium.org <mkwst@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Sep 3 17:07:31 2012 +0000	Improve error message for insecure 'content_security_policy' manifest entries. TBR=ben@chromium.org	143341		https://chromiumcodereview.appspot.com/10828363	svn://svn.chromium.org/chrome/trunk/src@154701 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/test/data/extensions/manifest_tests/insecure_contentsecuritypolicy_3.json b/chrome/test/data/extensions/manifest_tests/insecure_contentsecuritypolicy_3.json <newline>new file mode 100644 <newline>index 0000000..dc9b852 <newline>--- /dev/null <newline>+++ b/chrome/test/data/extensions/manifest_tests/insecure_contentsecuritypolicy_3.json <newline>@@ -0,0 +1,6 @@ <newline>+{ <newline>+  "name": "test", <newline>+  "version": "0.1", <newline>+  "manifest_version": 2, <newline>+  "content_security_policy": "script-src 'self'" <newline>+}																								
Chromium	5		4af12a4b86fd65581bc2e10caa53c67b42281e6	mkwst@chromium.org <mkwst@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Aug 28 04:06:48 2012 +0000	Adding 'blob:' and 'filesystem:' URLs as secure sources for extensions. Extensions currently enforce the requirement that Content Security Policy directives contain only secure sources. As 'blob:' and 'filesystem:' URLs are same-origin with the resource that created them, and never touch the network, we should allow them in extensions' 'content_security_policy' declarations.	144610		https://chromiumcodereview.appspot.com/10873060	svn://svn.chromium.org/chrome/trunk/src@153624 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/common/extensions/csp_validator_unittest.cc b/chrome/common/extensions/csp_validator_unittest.cc <newline>index 4caab6d..7063761 100644 <newline>--- a/chrome/common/extensions/csp_validator_unittest.cc <newline>+++ b/chrome/common/extensions/csp_validator_unittest.cc <newline>@@ -91,6 +91,15 @@ TEST(ExtensionCSPValidator, IsSecure) { <newline>       "default-src 'self' http://127.0.0.1.example.com")); <newline>   EXPECT_FALSE(ContentSecurityPolicyIsSecure( <newline>       "default-src 'self' http://localhost.example.com")); <newline>+ <newline>+  EXPECT_TRUE(ContentSecurityPolicyIsSecure( <newline>+      "default-src 'self' blob:")); <newline>+  EXPECT_FALSE(ContentSecurityPolicyIsSecure( <newline>+      "default-src 'self' blob:http://example.com/XXX")); <newline>+  EXPECT_TRUE(ContentSecurityPolicyIsSecure( <newline>+      "default-src 'self' filesystem:")); <newline>+  EXPECT_FALSE(ContentSecurityPolicyIsSecure( <newline>+      "default-src 'self' filesystem:http://example.com/XXX")); <newline> } <newline> TEST(ExtensionCSPValidator, IsSandboxed) {																								
Chromium	1	2	f1f91d46e72a949bf74a1cba1be43c5c21284cb	tsepez@chromium.org <tsepez@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Aug 27 19:31:50 2012 +0000	Apply frame-src content-security-policy to WebUI pages.	143003		https://chromiumcodereview.appspot.com/10829465	svn://svn.chromium.org/chrome/trunk/src@153520 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/ui/webui/chrome_url_data_manager_backend.cc b/chrome/browser/ui/webui/chrome_url_data_manager_backend.cc <newline>index aa1a7e0..013d53e 100644 <newline>--- a/chrome/browser/ui/webui/chrome_url_data_manager_backend.cc <newline>+++ b/chrome/browser/ui/webui/chrome_url_data_manager_backend.cc <newline>@@ -88,12 +88,25 @@ class ChromeURLContentSecurityPolicyExceptionSet <newline>   } <newline> }; <newline>-// It is OK to add URLs to this set which slightly reduces the CSP for them. <newline>-class ChromeURLContentSecurityPolicyObjectTagSet <newline>-    : public std::set<std::string> { <newline>+// It is OK to add URLs to these maps which map specific URLs to custom CSP <newline>+// directives thereby slightly reducing the protection applied to the page. <newline>+class ChromeURLObjectSrcExceptionMap <newline>+    : public std::map<std::string, std::string> { <newline>  public: <newline>-  ChromeURLContentSecurityPolicyObjectTagSet() : std::set<std::string>() { <newline>-    insert(chrome::kChromeUIPrintHost); <newline>+  ChromeURLObjectSrcExceptionMap() : std::map<std::string, std::string>() { <newline>+    insert(std::pair<std::string, std::string>( <newline>+        chrome::kChromeUIPrintHost, "object-src 'self';")); <newline>+  } <newline>+}; <newline>+ <newline>+class ChromeURLFrameSrcExceptionMap <newline>+    : public std::map<std::string, std::string> { <newline>+ public: <newline>+  ChromeURLFrameSrcExceptionMap() : std::map<std::string, std::string>() { <newline>+    insert(std::pair<std::string, std::string>( <newline>+        chrome::kChromeUIUberHost, "frame-src chrome:;")); <newline>+    insert(std::pair<std::string, std::string>( <newline>+        chrome::kChromeUIUberFrameHost, "frame-src chrome:;")); <newline>   } <newline> }; <newline>@@ -101,9 +114,11 @@ base::LazyInstance<ChromeURLContentSecurityPolicyExceptionSet> <newline>     g_chrome_url_content_security_policy_exception_set = <newline>         LAZY_INSTANCE_INITIALIZER; <newline>-base::LazyInstance<ChromeURLContentSecurityPolicyObjectTagSet> <newline>-    g_chrome_url_content_security_policy_object_tag_set = <newline>-        LAZY_INSTANCE_INITIALIZER; <newline>+base::LazyInstance<ChromeURLObjectSrcExceptionMap> <newline>+    g_chrome_url_object_src_exception_map = LAZY_INSTANCE_INITIALIZER; <newline>+ <newline>+base::LazyInstance<ChromeURLFrameSrcExceptionMap> <newline>+    g_chrome_url_frame_src_exception_map = LAZY_INSTANCE_INITIALIZER; <newline> // Determine the least-privileged content security policy header, if any, <newline> // that is compatible with a given WebUI URL, and append it to the existing <newline>@@ -115,12 +130,20 @@ void AddContentSecurityPolicyHeader( <newline>   if (exceptions->find(url.host()) == exceptions->end()) { <newline>     std::string base = kChromeURLContentSecurityPolicyHeaderBase; <newline>-    ChromeURLContentSecurityPolicyObjectTagSet* object_tag_set = <newline>-        g_chrome_url_content_security_policy_object_tag_set.Pointer(); <newline>-    base.append(object_tag_set->find(url.host()) == object_tag_set->end() ? <newline>-                "object-src 'none';" : <newline>-                "object-src 'self';"); <newline>+    ChromeURLObjectSrcExceptionMap* object_map = <newline>+        g_chrome_url_object_src_exception_map.Pointer(); <newline>+    ChromeURLObjectSrcExceptionMap::iterator object_iter = <newline>+        object_map->find(url.host()); <newline>+    base.append(object_iter == object_map->end() ? <newline>+                "object-src 'none';" : object_iter->second); <newline>+ <newline>+    ChromeURLFrameSrcExceptionMap* frame_map = <newline>+        g_chrome_url_frame_src_exception_map.Pointer(); <newline>+    ChromeURLFrameSrcExceptionMap::iterator frame_iter = <newline>+        frame_map->find(url.host()); <newline>+    base.append(frame_iter == frame_map->end() ? <newline>+                "frame-src 'none';" : frame_iter->second); <newline>     headers->AddHeader(base); <newline>   }																								
Chromium	5		a8e6194ab43a9a37c08423bfda2c0e461982978	adamk@chromium.org <adamk@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Aug 23 01:46:45 2012 +0000	Disable DOM MutationEvents for platform apps New apps should use MutationObservers instead, which provide similar (or better) capabilities without the performance and stability/security downsides of MutationEvents.	142648		https://chromiumcodereview.appspot.com/10870013	svn://svn.chromium.org/chrome/trunk/src@152914 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/test/data/extensions/platform_apps/mutation_events/test.js b/chrome/test/data/extensions/platform_apps/mutation_events/test.js <newline>new file mode 100644 <newline>index 0000000..3d6bffa <newline>--- /dev/null <newline>+++ b/chrome/test/data/extensions/platform_apps/mutation_events/test.js <newline>@@ -0,0 +1,7 @@ <newline>+// Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline>+// Use of this source code is governed by a BSD-style license that can be <newline>+// found in the LICENSE file. <newline>+ <newline>+chrome.app.runtime.onLaunched.addListener(function() { <newline>+  chrome.app.window.create('main.html', {}, function () {}); <newline>+});																								
Chromium	5		b8b5b4592c4461c896d1ad0284b9e9422d39559	mmenke@chromium.org <mmenke@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Aug 21 06:59:38 2012 +0000	about:net-internals: Enabling logging of all bytes now disables hiding cookies, as opposed to just unchecking the privacy check box. Also, "security stripping" is now "privacy stripping" to be more consistent and accurate. R=eroman@chromium.org	143459		https://chromiumcodereview.appspot.com/10823398	svn://svn.chromium.org/chrome/trunk/src@152522 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/test/data/webui/net_internals/log_view_painter.js b/chrome/test/data/webui/net_internals/log_view_painter.js <newline>index f9a5828..4ebbf58 100644 <newline>--- a/chrome/test/data/webui/net_internals/log_view_painter.js <newline>+++ b/chrome/test/data/webui/net_internals/log_view_painter.js <newline>@@ -101,7 +101,7 @@ TEST_F('NetInternalsTest', 'netInternalsLogViewPainterPrintAsText', function() { <newline>     div.innerHTML = ''; <newline>     timeutil.setTimeTickOffset(testCase.tickOffset); <newline>     printLogEntriesAsText(testCase.logEntries, div, <newline>-                          testCase.enableSecurityStripping, <newline>+                          testCase.privacyStripping, <newline>                           testCase.logCreationTime); <newline>     // Strip any trailing newlines, since the whitespace when using innerText <newline>@@ -1370,7 +1370,7 @@ function painterTestDontStripCookiesURLRequest() { <newline>  */ <newline> function painterTestStripCookiesURLRequest() { <newline>   var testCase = painterTestDontStripCookiesURLRequest(); <newline>-  testCase.enableSecurityStripping = true; <newline>+  testCase.privacyStripping = true; <newline>   testCase.expectedText = <newline>       testCase.expectedText.replace(/MyMagicPony/g, '[value was stripped]'); <newline>   return testCase; <newline>@@ -1468,7 +1468,7 @@ function painterTestDontStripCookiesSPDYSession() { <newline>  */ <newline> function painterTestStripCookiesSPDYSession() { <newline>   var testCase = painterTestDontStripCookiesSPDYSession(); <newline>-  testCase.enableSecurityStripping = true; <newline>+  testCase.privacyStripping = true; <newline>   testCase.expectedText = <newline>       testCase.expectedText.replace(/MyLittlePony/g, '[value was stripped]'); <newline>   return testCase;																								
Chromium	5		b37e47ac47b06714e98968b54f297e4b276b041	nsylvain@chromium.org <nsylvain@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Aug 15 23:16:13 2012 +0000	Add a new target to build the mac binaries used for asan security tests.			https://chromiumcodereview.appspot.com/10855184	svn://svn.chromium.org/chrome/trunk/src@151781 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/build/all.gyp b/build/all.gyp <newline>index d2d97a6..963c8f3 100644 <newline>--- a/build/all.gyp <newline>+++ b/build/all.gyp <newline>@@ -414,6 +414,15 @@ <newline>           ], <newline>         }, <newline>         { <newline>+          'target_name': 'chromium_builder_asan_mac', <newline>+          'type': 'none', <newline>+          'dependencies': [ <newline>+            '../chrome/chrome.gyp:chrome', <newline>+            '../net/net.gyp:dns_fuzz_stub', <newline>+            '../webkit/webkit.gyp:pull_in_DumpRenderTree', <newline>+          ], <newline>+        }, <newline>+        { <newline>           'target_name': 'chromium_builder_dbg_valgrind_mac', <newline>           'type': 'none', <newline>           'dependencies': [																								
Chromium	1	2	8a717ddd32ce52531ae4365632d337b7b7ba1f9	vitalybuka@chromium.org <vitalybuka@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Aug 15 04:25:54 2012 +0000	Removed default account for service. Added required options run-as-user and run-as-password. Added code to set security rights required to run service. File access and chrome binary checks changed from fatal error to just error message.	141243		https://chromiumcodereview.appspot.com/10824294	svn://svn.chromium.org/chrome/trunk/src@151652 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/cloud_print/service/win/local_security_policy.h b/cloud_print/service/win/local_security_policy.h <newline>new file mode 100644 <newline>index 0000000..712ab19 <newline>--- /dev/null <newline>+++ b/cloud_print/service/win/local_security_policy.h <newline>@@ -0,0 +1,34 @@ <newline>+// Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline>+// Use of this source code is governed by a BSD-style license that can be <newline>+// found in the LICENSE file. <newline>+ <newline>+#ifndef CLOUD_PRINT_SERVICE_WIN_LOCAL_SECURITY_POLICY_H_ <newline>+#define CLOUD_PRINT_SERVICE_WIN_LOCAL_SECURITY_POLICY_H_ <newline>+ <newline>+#include <wtypes.h>  // Has to be before ntsecapi.h <newline>+#include <ntsecapi.h> <newline>+ <newline>+#include "base/basictypes.h" <newline>+#include "base/string16.h" <newline>+ <newline>+extern const wchar_t kSeServiceLogonRight[]; <newline>+ <newline>+class LocalSecurityPolicy { <newline>+ public: <newline>+  LocalSecurityPolicy(); <newline>+  ~LocalSecurityPolicy(); <newline>+ <newline>+  bool Open(); <newline>+  void Close(); <newline>+ <newline>+  bool IsPrivilegeSet(const string16& username, <newline>+                      const string16& privilage) const; <newline>+  bool SetPrivilege(const string16& username, const string16& privilage); <newline>+ <newline>+ private: <newline>+  LSA_HANDLE policy_; <newline>+ <newline>+  DISALLOW_COPY_AND_ASSIGN(LocalSecurityPolicy); <newline>+}; <newline>+ <newline>+#endif  // CLOUD_PRINT_SERVICE_WIN_LOCAL_SECURITY_POLICY_H_																								
Chromium	5		ca83807909cb9ab68786a102ce5700903a84883	dalecurtis@google.com <dalecurtis@google.com@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Aug 8 23:58:24 2012 +0000	Don't count SLOW tests towards failure. Also adds 2 tests which weren't being counted: http/tests/security/video-cross-origin-readback.html http/tests/security/video-poster-cross-origin-crash.html TEST=Ran layout test analyzer.	140583		https://chromiumcodereview.appspot.com/10823238	svn://svn.chromium.org/chrome/trunk/src@150639 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/media/tools/layout_tests/testname/media.csv b/media/tools/layout_tests/testname/media.csv <newline>index 90da82b..264e7aa 100644 <newline>--- a/media/tools/layout_tests/testname/media.csv <newline>+++ b/media/tools/layout_tests/testname/media.csv <newline>@@ -19,8 +19,8 @@ fast/layers/video-layer.html, <newline> http/tests/appcache/video.html, <newline> http/tests/canvas/webgl/origin-clean-conformance.html, <newline> http/tests/media/, <newline>-http/tests/security/\S+video\S+.html, <newline>+http/tests/security/\S*video\S+.html, <newline> http/tests/security/contentSecurityPolicy/media-src-allowed.html, <newline> http/tests/security/contentSecurityPolicy/media-src-blocked.html, <newline> media/, <newline>-platform/chromium/media/, <newline>\ No newline at end of file <newline>+platform/chromium/media/,																								
Chromium	5		89266de8e05d61c7a17ecd48571a0279a69b588	satish@chromium.org <satish@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Aug 7 12:52:20 2012 +0000	Simplify devtools code on android and enable devtools for android content_shell. This CL removes the unnecessary RemoteDebuggingcontroller java class and associated c++ code. Also devtools_server.* is moved from content/ to chrome/ so that the code to access profiles, version etc. can be handled here to make DevToolsServer a self contained class in chrome/ layer handling devtools for android. The code making use of this class is not yet ready to be upstreamed due to dependencies and will land in future. Also added shell_devtools_delegate_android.cc to enable devtools for content_shell on android. This class and chrome/browser/android/devtools_server.cc need a common place to put the IsUserAllowedToConnect method that ensures only adb is allowed to access devtools on android (via the abstract unix socket, for security purposes) hence that method is placed in DevToolsHttpHandler in content/ TEST=manual. Run android content shell, execute "adb forward tcp:9222 localabstract:content_shell_devtools_remote" and open "localhost:9222" on the host machine to use devtools.	136682,136318		https://chromiumcodereview.appspot.com/10832112	svn://svn.chromium.org/chrome/trunk/src@150336 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/shell/shell_devtools_delegate_android.cc b/content/shell/shell_devtools_delegate_android.cc <newline>new file mode 100644 <newline>index 0000000..fd87fb3 <newline>--- /dev/null <newline>+++ b/content/shell/shell_devtools_delegate_android.cc <newline>@@ -0,0 +1,65 @@ <newline>+// Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline>+// Use of this source code is governed by a BSD-style license that can be <newline>+// found in the LICENSE file. <newline>+ <newline>+#include "content/shell/shell_devtools_delegate.h" <newline>+ <newline>+#include "base/stringprintf.h" <newline>+#include "content/public/browser/android/devtools_auth.h" <newline>+#include "content/public/browser/devtools_http_handler.h" <newline>+#include "grit/shell_resources.h" <newline>+#include "net/base/unix_domain_socket_posix.h" <newline>+#include "net/url_request/url_request_context_getter.h" <newline>+#include "ui/base/layout.h" <newline>+#include "ui/base/resource/resource_bundle.h" <newline>+ <newline>+namespace { <newline>+ <newline>+// TODO(mnaganov): This hardcoded version should be replaced with the webkit <newline>+// revision of this build of content shell. This requires a feature addition <newline>+// to the devtools frontend. <newline>+const char* kFrontendVersion = "21.0.1175.0"; <newline>+const char kSocketName[] = "content_shell_devtools_remote"; <newline>+const char kFrontEndURL[] = <newline>+    "http://chrome-devtools-frontend.appspot.com/static/%s/devtools.html"; <newline>+ <newline>+} <newline>+ <newline>+namespace content { <newline>+ <newline>+ShellDevToolsDelegate::ShellDevToolsDelegate( <newline>+    int port, <newline>+    net::URLRequestContextGetter* context_getter) <newline>+    : context_getter_(context_getter) { <newline>+  devtools_http_handler_ = DevToolsHttpHandler::Start( <newline>+      new net::UnixDomainSocketWithAbstractNamespaceFactory( <newline>+          kSocketName, <newline>+          base::Bind(&CanUserConnectToDevTools)), <newline>+      StringPrintf(kFrontEndURL, kFrontendVersion), <newline>+      context_getter, <newline>+      this); <newline>+} <newline>+ <newline>+ShellDevToolsDelegate::~ShellDevToolsDelegate() { <newline>+} <newline>+ <newline>+void ShellDevToolsDelegate::Stop() { <newline>+  // The call below destroys this. <newline>+  devtools_http_handler_->Stop(); <newline>+} <newline>+ <newline>+std::string ShellDevToolsDelegate::GetDiscoveryPageHTML() { <newline>+  return ResourceBundle::GetSharedInstance().GetRawDataResource( <newline>+      IDR_CONTENT_SHELL_DEVTOOLS_DISCOVERY_PAGE, <newline>+      ui::SCALE_FACTOR_NONE).as_string(); <newline>+} <newline>+ <newline>+bool ShellDevToolsDelegate::BundlesFrontendResources() { <newline>+  return false; <newline>+} <newline>+ <newline>+std::string ShellDevToolsDelegate::GetFrontendResourcesBaseURL() { <newline>+  return ""; <newline>+} <newline>+ <newline>+}  // namespace content																								
Chromium	5		b1fe99b063542657a7c6fa507ff225c00a3545b	dalecurtis@google.com <dalecurtis@google.com@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Aug 7 02:18:58 2012 +0000	Roll FFmpeg for security fixes. Pulls in the following fixes: 70e76e2 mpegprobe: fix misdetection of mp3 a9511ce dsputil: make add_hfyu_left_prediction_sse4() support unaligned src. 12ba355 matroskadec: check element size against stream limit in ebml_parse_elem() 9c06b7f oggdec: Initialize stream index to -1 in ogg_packet. fd73a17 oggdec: simplify start time calculation code. 6b063c8 oggdec: check stream index before using it in ogg_get_length() 7274a3f mov: dont clip timestamps at 0 Also adds the test case for 140165 which I forgot to add when fixing that issue.  Test case exposes an issue with a recent CHECK in the audio decoder when we recieve a buffer without timestamps.  I've changed this into an if check + decoder error. The AUDIO_GAMING* hashes have changed since acolwell landed a change which strips frames with negative timestamps. TEST=valgrind+ffmpeg_regression_tests	140647		https://chromiumcodereview.appspot.com/10829204	svn://svn.chromium.org/chrome/trunk/src@150239 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/media/filters/ffmpeg_audio_decoder.cc b/media/filters/ffmpeg_audio_decoder.cc <newline>index f8cc1d5..903edba 100644 <newline>--- a/media/filters/ffmpeg_audio_decoder.cc <newline>+++ b/media/filters/ffmpeg_audio_decoder.cc <newline>@@ -178,11 +178,14 @@ void FFmpegAudioDecoder::DoDecodeBuffer( <newline>     return; <newline>   } <newline>-  // Make sure we are notified if http://crbug.com/49709 returns. <newline>-  CHECK(input->GetTimestamp() != kNoTimestamp() || <newline>-        output_timestamp_base_ != kNoTimestamp() || <newline>-        input->IsEndOfStream()) <newline>-      << "First buffers received don't have timestamps!"; <newline>+  // Make sure we are notified if http://crbug.com/49709 returns.  Issue also <newline>+  // occurs with some damaged files. <newline>+  if (!input->IsEndOfStream() && input->GetTimestamp() == kNoTimestamp() && <newline>+      output_timestamp_base_ == kNoTimestamp()) { <newline>+    DVLOG(1) << "Received a buffer without timestamps!"; <newline>+    base::ResetAndReturn(&read_cb_).Run(kDecodeError, NULL); <newline>+    return; <newline>+  } <newline>   bool is_vorbis = codec_context_->codec_id == CODEC_ID_VORBIS; <newline>   if (!input->IsEndOfStream()) {																								
Chromium	5		3d9999f6a92d5d075f9c0ada81d66750edd01eb	akalin@chromium.org <akalin@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Aug 3 21:29:28 2012 +0000	[Sync] Set transport_security_state for sync_{client,listen_notifications} Currently, the DCHECK added by r148251 fires.			https://chromiumcodereview.appspot.com/10830164	svn://svn.chromium.org/chrome/trunk/src@149928 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/sync/tools/sync_listen_notifications.cc b/sync/tools/sync_listen_notifications.cc <newline>index 22b22d6..5eb05b6 100644 <newline>--- a/sync/tools/sync_listen_notifications.cc <newline>+++ b/sync/tools/sync_listen_notifications.cc <newline>@@ -20,6 +20,7 @@ <newline> #include "net/base/host_port_pair.h" <newline> #include "net/base/host_resolver.h" <newline> #include "net/base/network_change_notifier.h" <newline>+#include "net/base/transport_security_state.h" <newline> #include "net/url_request/url_request_test_util.h" <newline> #include "sync/internal_api/public/base/model_type.h" <newline> #include "sync/internal_api/public/base/model_type_payload_map.h" <newline>@@ -118,6 +119,8 @@ class MyTestURLRequestContext : public TestURLRequestContext { <newline>             net::HostResolver::kDefaultParallelism, <newline>             net::HostResolver::kDefaultRetryAttempts, <newline>             NULL)); <newline>+    context_storage_.set_transport_security_state( <newline>+        new net::TransportSecurityState()); <newline>     Init(); <newline>   }																								
Chromium	5		3088ef84669a8e7e09d5076516a6205829140ce	mkwst@chromium.org <mkwst@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Aug 2 15:00:22 2012 +0000	`chrome-extension` resources should bypass Content Security Policy. The Content Security Policy specification[1] notes that "Enforcing a CSP policy should not interfere with the operation of user-supplied scripts such as third-party user-agent add-ons and JavaScript bookmarklets." To that end, this CL allows `chrome-extension` resources to bypass their containing document's policy, meaning that (for example) `chrome-extension://[ID]/image.png` can be injected into a page, even if that page has an `img-src 'none';` CSP directive. [1]: https://dvcs.w3.org/hg/content-security-policy/raw-file/tip/csp-specification.dev.html#processing-model TBR=thakis@chromium.org	133223		https://chromiumcodereview.appspot.com/10792008	svn://svn.chromium.org/chrome/trunk/src@149627 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/test/data/extensions/api_test/extension_resource_request_policy/web_accessible/accessible_resource_with_csp.html b/chrome/test/data/extensions/api_test/extension_resource_request_policy/web_accessible/accessible_resource_with_csp.html <newline>new file mode 100644 <newline>index 0000000..25933fc <newline>--- /dev/null <newline>+++ b/chrome/test/data/extensions/api_test/extension_resource_request_policy/web_accessible/accessible_resource_with_csp.html <newline>@@ -0,0 +1,2 @@ <newline>+<meta http-equiv="X-WebKit-CSP" content="img-src 'none';"> <newline>+<img onload="document.title='Loaded'" onerror="document.title='Image failed to load'" src="chrome-extension://ggmldgjhdenlnjjjmehkomheglpmijnf/test.png">																								
Chromium	5		fb0c3fa351ea22371db00d3db97d02f3b399780	vandebo@chromium.org <vandebo@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Jul 31 20:38:18 2012 +0000	Revert 149261 - Support SHA-256 in public key pins for HTTPS. Broke the compile on CrOS.  Looks like const-ness problem: net/socket/ssl_client_socket_nss.cc: In member function 'int net::SSLClientSocketNSS::DoVerifyCertComplete(int)': net/socket/ssl_client_socket_nss.cc:3458:error: no matching function for call to 'net::TransportSecurityState::DomainState::IsChainOfPublicKeysPermitted(std::vector<std::vector<net::HashValue, std::allocator<net::HashValue> >, std::allocator<std::vector<net::HashValue, std::allocator<net::HashValue> > > >&)' ./net/base/transport_security_state.h:94: note: candidates are: bool net::TransportSecurityState::DomainState::IsChainOfPublicKeysPermitted(const net::HashValueVector&) const The HTTP-based Public Key Pinning Internet Draft (tools.ietf.org/html/draft-ietf-websec-key-pinning) requires this. Per wtc, give the *Fingeprint* types more meaningful *HashValue* names. Cleaning up lint along the way. TEST=net_unittests, unit_tests TransportSecurityPersisterTest TBR=palmer@chromium.org	117914	elegate d;	https://chromiumcodereview.appspot.com/10827104	svn://svn.chromium.org/chrome/trunk/src@149268 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/url_request/url_request_unittest.cc b/net/url_request/url_request_unittest.cc <newline>index 8cacd6b..1fdfc1d 100644 <newline>--- a/net/url_request/url_request_unittest.cc <newline>+++ b/net/url_request/url_request_unittest.cc <newline>@@ -146,7 +146,7 @@ void CheckSSLInfo(const SSLInfo& ssl_info) { <newline>   EXPECT_NE(0, cipher_suite); <newline> } <newline>-bool FingerprintsEqual(const HashValueVector& a, const HashValueVector& b) { <newline>+bool FingerprintsEqual(const FingerprintVector& a, const FingerprintVector& b) { <newline>   size_t size = a.size(); <newline>   if (size != b.size()) <newline>@@ -549,7 +549,7 @@ class URLRequestTestHTTP : public URLRequestTest { <newline>                         strlen(expected_data))); <newline>   } <newline>-  bool DoManyCookiesRequest(int num_cookies) { <newline>+  bool DoManyCookiesRequest(int num_cookies){ <newline>     URLRequest r(test_server_.GetURL("set-many-cookies?" + <newline>                                      base::IntToString(num_cookies)), <newline>@@ -563,7 +563,7 @@ class URLRequestTestHTTP : public URLRequestTest { <newline>     bool is_success = r.status().is_success(); <newline>-    if (!is_success) { <newline>+    if (!is_success){ <newline>       // Requests handled by ChromeFrame send a less precise error message, <newline>       // ERR_CONNECTION_ABORTED. <newline>       EXPECT_TRUE(r.status().error() == ERR_RESPONSE_HEADERS_TOO_BIG || <newline>@@ -1472,7 +1472,7 @@ class TestSSLConfigService : public SSLConfigService { <newline> // This the fingerprint of the "Testing CA" certificate used by the testserver. <newline> // See net/data/ssl/certificates/ocsp-test-root.pem. <newline>-static const SHA1HashValue kOCSPTestCertFingerprint = <newline>+static const SHA1Fingerprint kOCSPTestCertFingerprint = <newline>   { { 0xf1, 0xad, 0xf6, 0xce, 0x42, 0xac, 0xe7, 0xb4, 0xf4, 0x24, <newline>       0xdb, 0x1a, 0xf7, 0xa0, 0x9f, 0x09, 0xa1, 0xea, 0xf1, 0x5c } };																								
Chromium	5		1ef81d18a930dabb2759b301ac7487654aab2b3	mnaganov@chromium.org <mnaganov@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Jul 24 11:39:36 2012 +0000	Add an ability to call WebKit's WebFrame::loadData via NavigationController. WebFrame::loadData accepts HTML that is wrapped into a 'data:' scheme URL and two URLs: the base URL is used for resolving relative URLs in the HTML, the history URL is put into the navigation history. WebKit has all the required support for this method. What is required is to pass base and history URLs from RVH to WebKit's WebFrame. Also, as Chromium contains additional security checks when loading page resources, we need to add the base URL into the list of request URLs for the security policy. TEST=none	none		https://chromiumcodereview.appspot.com/10544175	svn://svn.chromium.org/chrome/trunk/src@148090 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/renderer/render_view_impl.cc b/content/renderer/render_view_impl.cc <newline>index a19474c..a9bda28 100644 <newline>--- a/content/renderer/render_view_impl.cc <newline>+++ b/content/renderer/render_view_impl.cc <newline>@@ -101,6 +101,7 @@ <newline> #include "media/base/message_loop_factory.h" <newline> #include "media/filters/audio_renderer_impl.h" <newline> #include "media/filters/gpu_video_decoder.h" <newline>+#include "net/base/data_url.h" <newline> #include "net/base/escape.h" <newline> #include "net/base/net_errors.h" <newline> #include "net/http/http_util.h" <newline>@@ -1053,6 +1054,21 @@ void RenderViewImpl::OnNavigate(const ViewMsg_Navigate_Params& params) { <newline>     DCHECK_NE(params.page_id, -1); <newline>     main_frame->loadHistoryItem( <newline>         webkit_glue::HistoryItemFromString(params.state)); <newline>+  } else if (!params.base_url_for_data_url.is_empty()) { <newline>+    // A loadData request with a specified base URL. <newline>+    std::string mime_type, charset, data; <newline>+    if (net::DataURL::Parse(params.url, &mime_type, &charset, &data)) { <newline>+      main_frame->loadData( <newline>+          WebData(data.c_str(), data.length()), <newline>+          WebString::fromUTF8(mime_type), <newline>+          WebString::fromUTF8(charset), <newline>+          params.base_url_for_data_url, <newline>+          params.history_url_for_data_url, <newline>+          false); <newline>+    } else { <newline>+      CHECK(false) << <newline>+          "Invalid URL passed: " << params.url.possibly_invalid_spec(); <newline>+    } <newline>   } else { <newline>     // Navigate to the given URL. <newline>     WebURLRequest request(params.url);																								
Chromium	5		f446d0e7e759e13297313c278266c48604bde2e	gdk@chromium.org <gdk@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Jun 26 01:39:25 2012 +0000	Disable the special behaviour of document.cookie in platform apps. Previously, if code within a platform app attempted to access (or override) the document.cookie field then a DOM security exception would have been raised. TEST=none	none		https://chromiumcodereview.appspot.com/10636039	svn://svn.chromium.org/chrome/trunk/src@144091 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/extensions/extension_webkit_preferences.cc b/chrome/browser/extensions/extension_webkit_preferences.cc <newline>index b15f3398..1b7c682 100644 <newline>--- a/chrome/browser/extensions/extension_webkit_preferences.cc <newline>+++ b/chrome/browser/extensions/extension_webkit_preferences.cc <newline>@@ -39,6 +39,7 @@ void SetPreferences(const extensions::Extension* extension, <newline>     webkit_prefs->databases_enabled = false; <newline>     webkit_prefs->local_storage_enabled = false; <newline>     webkit_prefs->sync_xhr_in_documents_enabled = false; <newline>+    webkit_prefs->cookie_enabled = false; <newline>   } <newline>   // Enable WebGL features that regular pages can't access, since they add																								
Chromium	5		afde5c8aaf0a8b0557c8627a1d633361be79190	xians@chromium.org <xians@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Jun 25 17:00:53 2012 +0000	Feature1: User goes to http://neave.com/webcam/html5/ The url displayed is the security origin, just like maps.google.com User needs to allow or deny access to his camera and microphone. Some sites will require only the mic or only the webcam. User can open an options drop down. The drop down needs to be clicked for every modification. A divide line separates microphones and webcams. User can also decide to Always allow. The decision will also remember the devices chosen. Details: The "Always allow" option will remember both the decision and the devices chosen. If "Always allow" is selected and Deny is pressed, access is denied. Upon the next visit, the infobar will be displayed again. If a a website is Allowed and "Always allowed": ...And devices disappears from the computer. It will show the infobar and ask the user to choose devices. Feature2: Settings => Privacy => Content Settings We want to add a new section called Media to cover the getUserMedia decisions. And we are able to see and remove the exception lists there. TEST=go to https://apprtc.appspot.com; click "always allow this site to use this device" option; go to content setting/privacy/media, try ask/block settings and remove exceptions.	132075,10532048		https://chromiumcodereview.appspot.com/10537099	svn://svn.chromium.org/chrome/trunk/src@143918 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/tools/chromeactions.txt b/chrome/tools/chromeactions.txt <newline>index 40966b5..705e2c9 100644 <newline>--- a/chrome/tools/chromeactions.txt <newline>+++ b/chrome/tools/chromeactions.txt <newline>@@ -943,6 +943,7 @@ <newline> 0x3f92cd6678d2f595	Options_DefaultHandlersSettingChanged <newline> 0x5dfe307474e6b526	Options_DefaultImagesSettingChanged <newline> 0x8ac0134529158dae	Options_DefaultJavaScriptSettingChanged <newline>+0x6a97ed68e3457d0e	Options_DefaultMediaStreamSettingChanged <newline> 0xfca02a749fa0f811	Options_DefaultMouseLockSettingChanged <newline> 0xbc49f9107e7c7c7c	Options_DefaultNotificationsSettingChanged <newline> 0x6b91203aa4b5fb3c	Options_DefaultPluginsSettingChanged																	
Chromium	5		db657557633f34651ecf6280e0836d826cebdbc	fischman@chromium.org <fischman@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Jun 18 21:34:00 2012 +0000	Request all response headers be exposed to BufferedResourceLoader since it needs them. TEST=http/tests/security/video-cross-origin-readback.html passes even after http/tests/media/resources/serve-video.php is fixed to actually return 206 responses (http://webk.it/89252)			https://chromiumcodereview.appspot.com/10554014	svn://svn.chromium.org/chrome/trunk/src@142821 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/webkit/media/buffered_resource_loader.cc b/webkit/media/buffered_resource_loader.cc <newline>index bd05239..1ce4091 100644 <newline>--- a/webkit/media/buffered_resource_loader.cc <newline>+++ b/webkit/media/buffered_resource_loader.cc <newline>@@ -191,6 +191,7 @@ void BufferedResourceLoader::Start( <newline>       options.crossOriginRequestPolicy = <newline>           WebURLLoaderOptions::CrossOriginRequestPolicyAllow; <newline>     } else { <newline>+      options.exposeAllResponseHeaders = true; <newline>       options.crossOriginRequestPolicy = <newline>           WebURLLoaderOptions::CrossOriginRequestPolicyUseAccessControl; <newline>       if (cors_mode_ == kUseCredentials)																								
Chromium	5		31a2597b90a0aaa0a22a963c85b6c3b84b84236	primiano@chromium.org <primiano@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Jun 15 16:07:54 2012 +0000	Moving tray icon and notification balloon for background speech recognition sessions to ChromeSpeechRecognitionManagerDelegate. (Speech CL1.13) The ChromeSpeechRecognitionManagerDelegate now keeps, within profile preferences, a flag that indicates whether a security notification has been shown for each speech recognition context. This applies only to speech recognition sessions initiated by extensions or JS. TEST=none	116954		https://chromiumcodereview.appspot.com/10407120	svn://svn.chromium.org/chrome/trunk/src@142399 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/renderer/speech_recognition_dispatcher.cc b/content/renderer/speech_recognition_dispatcher.cc <newline>index 90123dd..210a66f 100644 <newline>--- a/content/renderer/speech_recognition_dispatcher.cc <newline>+++ b/content/renderer/speech_recognition_dispatcher.cc <newline>@@ -69,7 +69,7 @@ void SpeechRecognitionDispatcher::start( <newline>   } <newline>   msg_params.language = UTF16ToUTF8(params.language()); <newline>   msg_params.is_one_shot = !params.continuous(); <newline>-  msg_params.origin_url = "";  // TODO(primiano) we need an origin from WebKit. <newline>+  msg_params.origin_url = params.origin().toString().utf8(); <newline>   msg_params.render_view_id = routing_id(); <newline>   msg_params.request_id = GetIDForHandle(handle); <newline>   Send(new SpeechRecognitionHostMsg_StartRequest(msg_params));																								
Chromium	1	5	0a9b5471ffdd02f36b6c788fab8dcd9fb13d451	dalecurtis@google.com <dalecurtis@google.com@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Jun 15 02:35:27 2012 +0000	Roll FFmpeg to pick up security fixes. Pulls in the following security fixes: 59c122b matroskadec: add assert on lack of overflow in pkt_size+offset 4b7c523 matroskadec: change size check in matroska_decode_buffer() to unsigned 08169fc matroskadec: move lace_size check up so it catches all code pathes 88a740a matroskadec: change assert to av_assert0() 71529bd Fix incorrect unsigned->signed conversion. Adds a new test for the issue. TEST=ffmpeg_regression_tests, video test matrix. TBR=scherkus	132779		https://chromiumcodereview.appspot.com/10546180	svn://svn.chromium.org/chrome/trunk/src@142328 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/media/ffmpeg/ffmpeg_regression_tests.cc b/media/ffmpeg/ffmpeg_regression_tests.cc <newline>index 6bdde35..6390eb7 100644 <newline>--- a/media/ffmpeg/ffmpeg_regression_tests.cc <newline>+++ b/media/ffmpeg/ffmpeg_regression_tests.cc <newline>@@ -131,9 +131,14 @@ FFMPEG_TEST_CASE(Cr112976, "security/112976.ogg", PIPELINE_OK, PIPELINE_OK, <newline>                  "d23bacec582c94b8a6dc53b0971bf67e"); <newline> FFMPEG_TEST_CASE(Cr116927, "security/116927.ogv", PIPELINE_ERROR_DECODE, <newline>                  PIPELINE_ERROR_DECODE, kNullHash, kNullHash); <newline>+FFMPEG_TEST_CASE(Cr117912, "security/117912.webm", DEMUXER_ERROR_COULD_NOT_OPEN, <newline>+                 DEMUXER_ERROR_COULD_NOT_OPEN, kNullHash, kNullHash); <newline> FFMPEG_TEST_CASE(Cr123481, "security/123481.ogv", PIPELINE_OK, <newline>                  PIPELINE_OK, "e6dd853fcbd746c8bb2ab2b8fc376fc7", <newline>                  "da909399f17e8f8ad7f1fcb3c4ccc33a"); <newline>+FFMPEG_TEST_CASE(Cr132779, "security/132779.webm", <newline>+                 DEMUXER_ERROR_COULD_NOT_PARSE, DEMUXER_ERROR_COULD_NOT_PARSE, <newline>+                 kNullHash, kNullHash); <newline> // General MKV test cases. <newline> FFMPEG_TEST_CASE(MKV_0, "security/nested_tags_lang.mka.627.628", PIPELINE_OK, <newline>@@ -234,8 +239,6 @@ FFMPEG_TEST_CASE(WEBM_4, "security/out.webm.68798.1929", <newline>                  kNullHash, kNullHash); <newline> FFMPEG_TEST_CASE(WEBM_5, "content/frame_size_change.webm", PIPELINE_OK, <newline>                  PIPELINE_OK, "d8fcf2896b7400a2261bac9e9ea930f8", kNullHash); <newline>-FFMPEG_TEST_CASE(WEBM_6, "security/117912.webm", DEMUXER_ERROR_COULD_NOT_OPEN, <newline>-                 DEMUXER_ERROR_COULD_NOT_OPEN, kNullHash, kNullHash); <newline> // Audio Functional Tests <newline> FFMPEG_TEST_CASE(AUDIO_GAMING_0, "content/gaming/a_220_00.mp3", PIPELINE_OK,																								
Chromium	5		9c4d66bba66d823dbf58552239170438ac3386b	jschuh@chromium.org <jschuh@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Jun 15 02:05:12 2012 +0000	Make --disable-web-security pop an infobar TEST=Run with --disable-web-security and check for the infobar.	132658		https://chromiumcodereview.appspot.com/10548055	svn://svn.chromium.org/chrome/trunk/src@142317 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/ui/startup/bad_flags_prompt.cc b/chrome/browser/ui/startup/bad_flags_prompt.cc <newline>index c0ec588..86f3c2f 100644 <newline>--- a/chrome/browser/ui/startup/bad_flags_prompt.cc <newline>+++ b/chrome/browser/ui/startup/bad_flags_prompt.cc <newline>@@ -24,6 +24,7 @@ void ShowBadFlagsPrompt(Browser* browser) { <newline>     switches::kSingleProcess, <newline>     switches::kNoSandbox, <newline>     switches::kInProcessWebGL, <newline>+    switches::kDisableWebSecurity, <newline>     NULL <newline>   };																								
Chromium	5		e8f719a266bd09b7a5a4d3c356f67b420f72729	nirnimesh@chromium.org <nirnimesh@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Jun 12 01:57:57 2012 +0000	Remove references to missing chromeos_security tests TBR=dennisjeffrey@chromium.org TEST=	chromium-os:31267		https://chromiumcodereview.appspot.com/10545130	svn://svn.chromium.org/chrome/trunk/src@141593 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/test/functional/PYAUTO_TESTS b/chrome/test/functional/PYAUTO_TESTS <newline>index f0c6acc..26b8b0c 100644 <newline>--- a/chrome/test/functional/PYAUTO_TESTS <newline>+++ b/chrome/test/functional/PYAUTO_TESTS <newline>@@ -333,10 +333,6 @@ <newline>       '-chromeos_file_browser.ChromeosFileBrowserTest.testOpenMediaFiles', <newline>       # crbug.com/129469 <newline>       '-chromeos_prefs.ChromeosPrefsTest.testCaptureUserPhoto', <newline>-      # crosbug.com/31267 <newline>-      '-chromeos_security.ChromeosSecurity.testBundledCrxPermissions', <newline>-      '-chromeos_security.ChromeosSecurity.testComponentExtensionPermissions', <newline>-      '-chromeos_security.ChromeosSecurity.testNoUnexpectedExtensions', <newline>       # Downloads panel stays even after declining a download. <newline>       # crosbug.com/14728 <newline>       '-downloads.DownloadsTest.testDeclineDangerousDownload', <newline>@@ -410,10 +406,6 @@ <newline>       # Permanently-disabled tests. <newline>       # =========================== <newline>       '-infobars.InfobarTest.testPluginCrashForMultiTabs', <newline>-      '-chromeos_security.ChromeosSecurity.testBundledCrxPermissions', <newline>-      '-chromeos_security.ChromeosSecurity.testCannotViewLocalFiles', <newline>-      '-chromeos_security.ChromeosSecurity.testComponentExtensionPermissions', <newline>-      '-chromeos_security.ChromeosSecurity.testNoUnexpectedExtensions', <newline>       '-flash.FlashTest.testCanLoadFlash', <newline>       '-flash.FlashTest.testFlashLoadsAfterKill', <newline>       '-flash.FlashTest.testFlashIncognitoMode',																								
Chromium	5		ae9c0d6716cb5720131dadb5114c7190e346695	nirnimesh@chromium.org <nirnimesh@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Jun 8 01:01:11 2012 +0000	Remove obsolete tests from chromeos_security.py These tests have been migrated to autotest. TEST=	chromium-os:22759		https://chromiumcodereview.appspot.com/10536063	svn://svn.chromium.org/chrome/trunk/src@141143 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/test/functional/chromeos_security.py b/chrome/test/functional/chromeos_security.py <newline>index 77c2527..b541451 100755 <newline>--- a/chrome/test/functional/chromeos_security.py <newline>+++ b/chrome/test/functional/chromeos_security.py <newline>@@ -14,21 +14,6 @@ class ChromeosSecurity(pyauto.PyUITest): <newline>   Requires ChromeOS to be logged in. <newline>   """ <newline>-  def setUp(self): <newline>-    pyauto.PyUITest.setUp(self) <newline>-    baseline_file = os.path.abspath(os.path.join( <newline>-        pyauto.PyUITest.DataDir(), 'pyauto_private', 'chromeos', <newline>-        'security', 'extension_permission_baseline.txt')) <newline>-    self.assertTrue(os.path.exists(baseline_file), <newline>-                    msg='Baseline info file does not exist.') <newline>-    baseline_info = self.EvalDataFrom(baseline_file) <newline>-    self._bundled_crx_directory = baseline_info['BUNDLED_CRX_DIRECTORY'] <newline>-    self._bundled_crx_baseline = baseline_info['BUNDLED_CRX_BASELINE'] <newline>-    self._component_extension_baseline = ( <newline>-        baseline_info['COMPONENT_EXTENSION_BASELINE']) <newline>-    if self.GetBrowserInfo()['properties']['is_official']: <newline>-      self._component_extension_baseline.extend( <newline>-          baseline_info['OFFICIAL_COMPONENT_EXTENSIONS']) <newline>   def ExtraChromeFlags(self): <newline>     """Override default list of extra flags typically used with automation. <newline>@@ -52,154 +37,6 @@ class ChromeosSecurity(pyauto.PyUITest): <newline>       self.assertNotEqual(title, self.GetActiveTabTitle(), <newline>           msg='Could access local file %s.' % url) <newline>-  def _AssertPermissionSetIsExpected(self, expected_set, actual_set, perm_type, <newline>-                                     full_expected_info, full_actual_info): <newline>-    """Asserts that the set of permissions for an extension is expected. <newline>- <newline>-    Args: <newline>-      expected_set: A set of permissions that are expected to be present. <newline>-      actual_set: A set of permissions that are actually present. <newline>-      perm_type: A string describing the type of permission involved. <newline>-      full_expected_info: A dictionary fully describing the expected information <newline>-                          associated with the given extension. <newline>-      full_actual_info: A dictionary fully describing the actual information <newline>-                        associated with the given extension. <newline>-    """ <newline>-    def _GetSetDifferenceMessage(expected_set, actual_set): <newline>-      strings = [] <newline>-      for missing_item in expected_set.difference(actual_set): <newline>-        strings.append('Missing item: "%s"' % missing_item) <newline>-      for extra_item in actual_set.difference(expected_set): <newline>-        strings.append('Unexpected (extra) item: "%s"' % extra_item) <newline>-      return '\n'.join(strings) <newline>- <newline>-    self.assertEqual( <newline>-        expected_set, actual_set, <newline>-        msg=('%s do not match for "%s".\n' <newline>-             '%s\n' <newline>-             'Expected extension info:\n%s' <newline>-             '\nActual extension info:\n%s' % <newline>-             (perm_type, full_expected_info['name'], <newline>-              _GetSetDifferenceMessage(expected_set, actual_set), <newline>-              self.pformat(full_expected_info), <newline>-              self.pformat(full_actual_info)))) <newline>- <newline>-  def _AssertExtensionNamesAreExpected(self, expected_set, actual_set, <newline>-                                       ext_type, full_expected_info, <newline>-                                       full_actual_info): <newline>-    """Asserts that a set of extensions is expected. <newline>- <newline>-    Args: <newline>-      expected_set: A set of extension names that are expected to be present. <newline>-      actual_set: A set of extension names that are actually present. <newline>-      ext_type: A string describing the type of extensions involved. <newline>-      full_expected_info: A list of dictionaries describing the expected <newline>-                          information for all extensions. <newline>-      full_actual_info: A list of dictionaries describing the actual information <newline>-                        for all extensions. <newline>-    """ <newline>-    # Skip the Web Store and Bookmark Manager; they are integral to Chrome and <newline>-    # are redundant to check on ChromeOS.  This can reduce the number of times <newline>-    # we have to update the baseline for this test. <newline>-    for extension_name in ['Chrome Web Store', 'Bookmark Manager']: <newline>-      actual_set.discard(extension_name) <newline>- <newline>-    def _GetSetDifferenceMessage(expected_set, actual_set): <newline>-      strings = [] <newline>-      for missing_item in expected_set.difference(actual_set): <newline>-        strings.append('Missing item: "%s"' % missing_item) <newline>-        located_ext_info = [info for info in full_expected_info if <newline>-                            info['name'] == missing_item][0] <newline>-        strings.append(self.pformat(located_ext_info)) <newline>-      for extra_item in actual_set.difference(expected_set): <newline>-        strings.append('Unexpected (extra) item: "%s"' % extra_item) <newline>-        located_ext_info = [info for info in full_actual_info if <newline>-                            info['name'] == extra_item][0] <newline>-        strings.append(self.pformat(located_ext_info)) <newline>-      return '\n'.join(strings) <newline>- <newline>-    self.assertEqual( <newline>-        expected_set, actual_set, <newline>-        msg='%s names do not match the baseline.\n' <newline>-            '%s\n' % <newline>-            (ext_type, _GetSetDifferenceMessage(expected_set, actual_set))) <newline>- <newline>-  def _VerifyExtensionPermissions(self, baseline): <newline>-    """Ensures extension permissions in the baseline match actual info. <newline>- <newline>-    This function will fail the current test if either (1) an extension named <newline>-    in the baseline is not currently installed in Chrome; or (2) the api <newline>-    permissions or effective host permissions of an extension in the baseline <newline>-    do not match the actual permissions associated with the extension in Chrome. <newline>- <newline>-    Args: <newline>-      baseline: A dictionary of expected extension information, containing <newline>-                extension names and api/effective host permission info. <newline>-    """ <newline>-    full_ext_actual_info = self.GetExtensionsInfo() <newline>-    for ext_expected_info in baseline: <newline>-      located_ext_info = [info for info in full_ext_actual_info if <newline>-                          info['name'] == ext_expected_info['name']] <newline>-      self.assertTrue( <newline>-          located_ext_info, <newline>-          msg=('Cannot locate extension info for "%s".\n' <newline>-               'Expected extension info:\n%s' % <newline>-               (ext_expected_info['name'], self.pformat(ext_expected_info)))) <newline>-      ext_actual_info = located_ext_info[0] <newline>-      self._AssertPermissionSetIsExpected( <newline>-          set(ext_expected_info['effective_host_permissions']), <newline>-          set(ext_actual_info['effective_host_permissions']), <newline>-          'Effective host permissions', ext_expected_info, ext_actual_info) <newline>-      self._AssertPermissionSetIsExpected( <newline>-          set(ext_expected_info['api_permissions']), <newline>-          set(ext_actual_info['api_permissions']), <newline>-          'API permissions', ext_expected_info, ext_actual_info) <newline>- <newline>-  def testComponentExtensionPermissions(self): <newline>-    """Ensures component extension permissions are as expected.""" <newline>-    expected_names = [ext['name'] for ext in self._component_extension_baseline] <newline>-    ext_actual_info = self.GetExtensionsInfo() <newline>-    actual_names = [ext['name'] for ext in ext_actual_info if <newline>-                    ext['is_component']] <newline>-    self._AssertExtensionNamesAreExpected( <newline>-        set(expected_names), set(actual_names), 'Component extension', <newline>-        self._component_extension_baseline, ext_actual_info) <newline>-    self._VerifyExtensionPermissions(self._component_extension_baseline) <newline>- <newline>-  def testBundledCrxPermissions(self): <newline>-    """Ensures bundled CRX permissions are as expected.""" <newline>-    # Verify that each bundled CRX on the device is expected, then install it. <newline>-    for file_name in os.listdir(self._bundled_crx_directory): <newline>-      if file_name.endswith('.crx'): <newline>-        self.assertTrue( <newline>-            file_name in [x['crx_file'] for x in self._bundled_crx_baseline], <newline>-            msg='Unexpected CRX file: ' + file_name) <newline>-        crx_file = os.path.join(self._bundled_crx_directory, file_name) <newline>-        self.InstallExtension(crx_file) <newline>- <newline>-    # Verify that the permissions information in the baseline matches the <newline>-    # permissions associated with the installed bundled CRX extensions. <newline>-    self._VerifyExtensionPermissions(self._bundled_crx_baseline) <newline>- <newline>-  def testNoUnexpectedExtensions(self): <newline>-    """Ensures there are no unexpected bundled or component extensions.""" <newline>-    # Install all bundled extensions on the device. <newline>-    for file_name in os.listdir(self._bundled_crx_directory): <newline>-      if file_name.endswith('.crx'): <newline>-        crx_file = os.path.join(self._bundled_crx_directory, file_name) <newline>-        self.InstallExtension(crx_file) <newline>- <newline>-    # Ensure that the set of installed extension names precisely matches the <newline>-    # baseline. <newline>-    expected_names = [ext['name'] for ext in self._component_extension_baseline] <newline>-    expected_names.extend([ext['name'] for ext in self._bundled_crx_baseline]) <newline>-    ext_actual_info = self.GetExtensionsInfo() <newline>-    installed_names = [ext['name'] for ext in ext_actual_info] <newline>-    self._AssertExtensionNamesAreExpected( <newline>-        set(expected_names), set(installed_names), 'Installed extension', <newline>-        self._component_extension_baseline + self._bundled_crx_baseline, <newline>-        ext_actual_info) <newline>- <newline> if __name__ == '__main__': <newline>   pyauto_functional.Main()																								
Chromium	5		50e957dbc0eb2cf7e602d5a5b145ac64661a03d	primiano@chromium.org <primiano@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Jun 6 15:21:24 2012 +0000	Refactored ChromeSpeechRecognitionPreferences according to new ProfileKeyedServiceFactory architecture. (Speech CL1.12) - Storage of speech recognition preferences within the Profile is now handled entirely by ChromeSpeechRecognitionPreferences class. - Added a preference (kSpeechRecognitionTrayNotificationShownList) item for keeping a list of contexts (extensions/websites) for which the security notification has been already shown. - Speech Input Extensions are temporarly still using the old boolean preference kSpeechInputTrayNotificationShown on their own. Will be fixed soon in another CL. - (Hopefully) Fixed bug 125691 happening when processing a recognition request after profile shutdown. TEST=none	116954,125691	ngProfile::GetSpeechRecognitionPreferences() {	https://chromiumcodereview.appspot.com/10416033	svn://svn.chromium.org/chrome/trunk/src@140764 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/shell/shell_browser_context.cc b/content/shell/shell_browser_context.cc <newline>index 92f618b..4deb540 100644 <newline>--- a/content/shell/shell_browser_context.cc <newline>+++ b/content/shell/shell_browser_context.cc <newline>@@ -75,8 +75,6 @@ class ShellSpeechRecognitionPreferences : public SpeechRecognitionPreferences { <newline>     return false; <newline>   } <newline>-  virtual void SetFilterProfanities(bool filter_profanities) OVERRIDE {} <newline>- <newline>  protected: <newline>   virtual ~ShellSpeechRecognitionPreferences() {}																								
Chromium	1	1	b61135340ddd15e31f8c8715ad4a05dc129d94d	tpayne@chromium.org <tpayne@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Jun 4 23:05:45 2012 +0000	applied upstream security patch TEST=None	b/6534265		https://chromiumcodereview.appspot.com/10515013	svn://svn.chromium.org/chrome/trunk/src@140415 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/third_party/qcms/src/transform_util.c b/third_party/qcms/src/transform_util.c <newline>index e8447e5..5443e9d 100644 <newline>--- a/third_party/qcms/src/transform_util.c <newline>+++ b/third_party/qcms/src/transform_util.c <newline>@@ -235,6 +235,21 @@ float u8Fixed8Number_to_float(uint16_t x) <newline> 	return x/256.; <newline> } <newline>+/* The SSE2 code uses min & max which let NaNs pass through. <newline>+   We want to try to prevent that here by ensuring that <newline>+   gamma table is within expected values. */ <newline>+void validate_gamma_table(float gamma_table[256]) <newline>+{ <newline>+	int i; <newline>+	for (i = 0; i < 256; i++) { <newline>+		// Note: we check that the gamma is not in range <newline>+		// instead of out of range so that we catch NaNs <newline>+		if (!(gamma_table[i] > 0.f && gamma_table[i] < 1.f)) { <newline>+			gamma_table[i] = 0.f; <newline>+		} <newline>+	} <newline>+} <newline>+ <newline> float *build_input_gamma_table(struct curveType *TRC) <newline> { <newline> 	float *gamma_table; <newline>@@ -254,7 +269,10 @@ float *build_input_gamma_table(struct curveType *TRC) <newline> 			} <newline> 		} <newline> 	} <newline>-        return gamma_table; <newline>+ <newline>+	validate_gamma_table(gamma_table); <newline>+ <newline>+	return gamma_table; <newline> } <newline> struct matrix build_colorant_matrix(qcms_profile *p)
Chromium	5		b0f973847635757eded91e2009320dda89561c0	satorux@chromium.org <satorux@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu May 31 06:12:11 2012 +0000	dbus: Include method names in error messages for method call failures To make it easier to investigate method call failures. TEST=run EndToEndAsyncTest.Timeout and confirm the error message is changed ("org.chromium.TestInterface.SlowEcho" is now included): BEFORE [ RUN      ] EndToEndAsyncTest.Timeout [24410:24410:0530/105557:701377078661:ERROR:object_proxy.cc(456)] Failed to call method: org.freedesktop.DBus.Error.NoReply: Did not receive a reply. Possible causes include: the remote application did not send a reply, the message bus security policy blocked the reply, the reply timeout expired, or the network connection was broken. AFTER [ RUN      ] EndToEndAsyncTest.Timeout [24959:24959:0530/110437:701896995336:ERROR:object_proxy.cc(462)] Failed to call method: org.chromium.TestInterface.SlowEcho: org.freedesktop.DBus.Error.NoReply: Did not receive a reply. Possible causes include: the remote application did not send a reply, the message bus security policy blocked the reply, the reply timeout expired, or the network connection was broken.	126217		https://chromiumcodereview.appspot.com/10456030	svn://svn.chromium.org/chrome/trunk/src@139745 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/dbus/object_proxy.h b/dbus/object_proxy.h <newline>index 620622f..0311854 100644 <newline>--- a/dbus/object_proxy.h <newline>+++ b/dbus/object_proxy.h <newline>@@ -226,11 +226,15 @@ class ObjectProxy : public base::RefCountedThreadSafe<ObjectProxy> { <newline>                                               void* user_data); <newline>   // Helper method for logging response errors appropriately. <newline>-  void LogMethodCallFailure(const base::StringPiece& error_name, <newline>+  void LogMethodCallFailure(const base::StringPiece& interface_name, <newline>+                            const base::StringPiece& method_name, <newline>+                            const base::StringPiece& error_name, <newline>                             const base::StringPiece& error_message) const; <newline>   // Used as ErrorCallback by CallMethod(). <newline>-  void OnCallMethodError(ResponseCallback response_callback, <newline>+  void OnCallMethodError(const std::string& interface_name, <newline>+                         const std::string& method_name, <newline>+                         ResponseCallback response_callback, <newline>                          ErrorResponse* error_response); <newline>   scoped_refptr<Bus> bus_;																								
Chromium	5		ea38a8008900b4a6504e7e4f8c47e38c94c9ec6	alexeypa@chromium.org <alexeypa@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Sat May 26 04:33:52 2012 +0000	Set a security descriptor allowing SYSTEM, built-in adminitrators and interactive users to call Chromoting Host Controller methods. This enables so-called "Over-The-Shoulder (OTS) Elevation". See http://msdn.microsoft.com/en-us/library/windows/desktop/ms679687(v=vs.85).aspx for details.	129477		https://chromiumcodereview.appspot.com/10451005	svn://svn.chromium.org/chrome/trunk/src@139180 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/remoting/host/installer/chromoting.wxs b/remoting/host/installer/chromoting.wxs <newline>index ef6b1b3..7f1ce86 100644 <newline>--- a/remoting/host/installer/chromoting.wxs <newline>+++ b/remoting/host/installer/chromoting.wxs <newline>@@ -25,6 +25,19 @@ <newline>     "ChromotingElevatedController.ElevatedController" ?> <newline>   <?define ControllerTypelib = "{9d9a5a2c-576e-4acd-9c75-aabff74b205d}" ?> <newline>+  <!-- <newline>+    The long hex value below is a security descriptor that allows SYSTEM, <newline>+    built-in administrators and interactive users to call methods of a COM <newline>+    object (COM_RIGHTS_EXECUTE and COM_RIGHTS_EXECUTE_LOCAL). The security <newline>+    descriptor was generated from SDDL definition using the PowerShell script <newline>+    below: <newline>+ <newline>+      $sddl = "O:BAG:BAD:(A;;0x3;;;IU)(A;;0x3;;;SY)(A;;0x3;;;BA)" <newline>+      $i = ([wmiclass]"Win32_SecurityDescriptorHelper").SDDLToBinarySD($sddl).BinarySD <newline>+      -join ($i | foreach {$_.ToString("X2")}) <newline>+  --> <newline>+  <?define ControllerSd = "010004805C0000006C00000000000000140000000200480003000000000014000300000001010000000000050400000000001400030000000101000000000005120000000000180003000000010200000000000520000000200200000102000000000005200000002002000001020000000000052000000020020000" ?> <newline>+ <newline>   <?ifndef FileSource ?> <newline>     <?error FileSource must be defined ?> <newline>   <?endif?> <newline>@@ -175,6 +188,9 @@ <newline>             <RegistryKey Key="$(var.ControllerAppid)" Action="create"> <newline>               <RegistryValue Type="string" <newline>                              Value="ChromotingElevatedController"/> <newline>+              <RegistryValue Name="AccessPermission" <newline>+                             Type="binary" <newline>+                             Value="$(var.ControllerSd)"/> <newline>             </RegistryKey> <newline>             <RegistryKey Key="$(var.ControllerBinary)" Action="create">																								
Chromium	5		e5a4394991e4d4a0a739d927fba9edac057f61f	yujie.mao@intel.com <yujie.mao@intel.com@0039d316-1c4b-4281-b951-d872f2087c98>	Fri May 25 14:43:36 2012 +0000	Cleanup: [WebRTC] Use GURL type to replace the std::string type of security origin TEST=content_unittests, html <video> local capture preview	None		https://chromiumcodereview.appspot.com/10442008	svn://svn.chromium.org/chrome/trunk/src@139034 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/renderer/pepper/pepper_plugin_delegate_impl.cc b/content/renderer/pepper/pepper_plugin_delegate_impl.cc <newline>index 9bfcfd1..d6a80c4 100644 <newline>--- a/content/renderer/pepper/pepper_plugin_delegate_impl.cc <newline>+++ b/content/renderer/pepper/pepper_plugin_delegate_impl.cc <newline>@@ -57,6 +57,7 @@ <newline> #include "content/renderer/renderer_clipboard_client.h" <newline> #include "content/renderer/renderer_restrict_dispatch_group.h" <newline> #include "content/renderer/webplugin_delegate_proxy.h" <newline>+#include "googleurl/src/gurl.h" <newline> #include "ipc/ipc_channel_handle.h" <newline> #include "media/video/capture/video_capture_proxy.h" <newline> #include "ppapi/c/dev/pp_video_dev.h" <newline>@@ -1420,7 +1421,8 @@ int PepperPluginDelegateImpl::EnumerateDevices( <newline> #if defined(ENABLE_WEBRTC) <newline>   render_view_->media_stream_dispatcher()->EnumerateDevices( <newline>       request_id, device_enumeration_event_handler_.get()->AsWeakPtr(), <newline>-      PepperDeviceEnumerationEventHandler::FromPepperDeviceType(type), ""); <newline>+      PepperDeviceEnumerationEventHandler::FromPepperDeviceType(type), <newline>+      GURL()); <newline> #else <newline>   MessageLoop::current()->PostTask( <newline>       FROM_HERE, <newline>@@ -1611,7 +1613,8 @@ int PepperPluginDelegateImpl::OpenDevice(PP_DeviceType_Dev type, <newline>       request_id, <newline>       device_enumeration_event_handler_.get()->AsWeakPtr(), <newline>       device_id, <newline>-      PepperDeviceEnumerationEventHandler::FromPepperDeviceType(type), ""); <newline>+      PepperDeviceEnumerationEventHandler::FromPepperDeviceType(type), <newline>+      GURL()); <newline> #else <newline>   MessageLoop::current()->PostTask( <newline>       FROM_HERE,																								
Chromium	5		83b1c68975e09ff0dfc6682439c62464a6008fb	nirnimesh@chromium.org <nirnimesh@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu May 24 22:19:40 2012 +0000	[chromeos] Disable 3 chromeos_security pyauto tests R=jimhebert@chromium.org TEST=	chromium-os:31267		https://chromiumcodereview.appspot.com/10440032	svn://svn.chromium.org/chrome/trunk/src@138913 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/test/functional/PYAUTO_TESTS b/chrome/test/functional/PYAUTO_TESTS <newline>index 65d2627..3ffdefc 100644 <newline>--- a/chrome/test/functional/PYAUTO_TESTS <newline>+++ b/chrome/test/functional/PYAUTO_TESTS <newline>@@ -324,6 +324,10 @@ <newline>       '-chromeos_file_browser.ChromeosFileBrowserTest.testOpenMediaFiles', <newline>       # crbug.com/129469 <newline>       '-chromeos_prefs.ChromeosPrefsTest.testCaptureUserPhoto', <newline>+      # crosbug.com/31267 <newline>+      '-chromeos_security.ChromeosSecurity.testBundledCrxPermissions', <newline>+      '-chromeos_security.ChromeosSecurity.testComponentExtensionPermissions', <newline>+      '-chromeos_security.ChromeosSecurity.testNoUnexpectedExtensions', <newline>       # Downloads panel stays even after declining a download. <newline>       # crosbug.com/14728 <newline>       '-downloads.DownloadsTest.testDeclineDangerousDownload',																								
Chromium	5		606df6950d9699c9ae45a53d1baf81c5fd6ecdb	xians@chromium.org <xians@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon May 14 11:33:38 2012 +0000	#1, Use chrome/chromium logo icon for the balloon. #2, If the tile of the web page is URL, use security origin as the displayed string. #3, Activate the tab when the user clicks on the icon menu. #4, Get rid of and/or, use and or no and.	127404		https://chromiumcodereview.appspot.com/10391029	svn://svn.chromium.org/chrome/trunk/src@136853 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/media/media_stream_capture_indicator.h b/chrome/browser/media/media_stream_capture_indicator.h <newline>index d904d6f..88efcda 100644 <newline>--- a/chrome/browser/media/media_stream_capture_indicator.h <newline>+++ b/chrome/browser/media/media_stream_capture_indicator.h <newline>@@ -6,7 +6,7 @@ <newline> #define CHROME_BROWSER_MEDIA_MEDIA_STREAM_CAPTURE_INDICATOR_H_ <newline> #pragma once <newline>-#include <list> <newline>+#include <vector> <newline> #include <string> <newline> #include "base/memory/ref_counted.h" <newline>@@ -47,32 +47,30 @@ class MediaStreamCaptureIndicator <newline>   // Struct to store the usage information of the capture devices for each tab. <newline>   struct CaptureDeviceTab { <newline>     CaptureDeviceTab(int render_process_id, <newline>-                     int render_view_id, <newline>-                     content::MediaStreamDeviceType type) <newline>+                     int render_view_id) <newline>         : render_process_id(render_process_id), <newline>           render_view_id(render_view_id), <newline>-          type(type) {} <newline>+          audio_ref_count(0), <newline>+          video_ref_count(0) {} <newline>     int render_process_id; <newline>     int render_view_id; <newline>-    content::MediaStreamDeviceType type; <newline>+    int audio_ref_count; <newline>+    int video_ref_count; <newline>   }; <newline>   // A private predicate used in std::find_if to find a |CaptureDeviceTab| <newline>   // which matches the information specified at construction. <newline>   class TabEquals { <newline>    public: <newline>-    TabEquals(int render_process_id, int render_view_id, <newline>-              content::MediaStreamDeviceType type); <newline>     TabEquals(int render_process_id, int render_view_id); <newline>     bool operator() ( <newline>         const MediaStreamCaptureIndicator::CaptureDeviceTab& tab); <newline>    private: <newline>-     int render_process_id_; <newline>-     int render_view_id_; <newline>-     content::MediaStreamDeviceType type_; <newline>+    int render_process_id_; <newline>+    int render_view_id_; <newline>   }; <newline>   friend class base::RefCountedThreadSafe<MediaStreamCaptureIndicator>; <newline>@@ -93,13 +91,6 @@ class MediaStreamCaptureIndicator <newline>   // Makes sure we have done one-time initialization of the |icon_image_|. <newline>   void EnsureStatusTrayIcon(); <newline>-  // Triggers a balloon in the corner telling capture devices are being used. <newline>-  void ShowBalloon(int render_process_id, int render_view_id, <newline>-                   const content::MediaStreamDevices& devices) const; <newline>- <newline>-  // Hides the status tray from the desktop. <newline>-  void Hide(); <newline>- <newline>   // Adds the new tab to the device usage list. <newline>   void AddCaptureDeviceTab(int render_process_id, <newline>                            int render_view_id, <newline>@@ -110,23 +101,42 @@ class MediaStreamCaptureIndicator <newline>                               int render_view_id, <newline>                               const content::MediaStreamDevices& devices); <newline>+  // Triggers a balloon in the corner telling capture devices are being used. <newline>+  // This function is called by AddCaptureDeviceTab(). <newline>+  void ShowBalloon(int render_process_id, int render_view_id, <newline>+                   bool audio, bool video) const; <newline>+ <newline>+  // Hides the status tray from the desktop. This function is called by <newline>+  // RemoveCaptureDeviceTab() when the device usage list becomes empty. <newline>+  void Hide(); <newline>+ <newline>   // Gets the title of the tab. <newline>   string16 GetTitle(int render_process_id, int render_view_id) const; <newline>+  // Gets the security originator of the tab. It returns a string with no '/' <newline>+  // at the end to display in the UI. <newline>+  string16 GetSecurityOrigin(int render_process_id, int render_view_id) const; <newline>+ <newline>   // Updates the status tray menu with the new device list. This call will be <newline>   // triggered by both AddCaptureDeviceTab() and RemoveCaptureDeviceTab(). <newline>   void UpdateStatusTrayIconContextMenu(); <newline>+  // Updates the status tray tooltip with the new device list. This function is <newline>+  // called by UpdateStatusTrayIconContextMenu(). <newline>+  void UpdateStatusTrayIconTooltip(bool audio, bool video); <newline>+ <newline>   // Reference to our status icon - owned by the StatusTray. If null, <newline>   // the platform doesn't support status icons. <newline>   StatusIcon* status_icon_; <newline>   // Icon to be displayed on the status tray. <newline>-  SkBitmap icon_image_; <newline>+  SkBitmap tray_image_; <newline>+ <newline>+  SkBitmap balloon_image_; <newline>   // A list that contains the usage information of the opened capture devices. <newline>-  typedef std::list<CaptureDeviceTab> CaptureDeviceTabList; <newline>-  CaptureDeviceTabList tabs_; <newline>+  typedef std::vector<CaptureDeviceTab> CaptureDeviceTabs; <newline>+  CaptureDeviceTabs tabs_; <newline> }; <newline> #endif  // CHROME_BROWSER_MEDIA_MEDIA_STREAM_CAPTURE_INDICATOR_H_																								
Chromium	5		3980c7b400dcbfdfbd5ac15bc87364719d6aa9a	thestig@chromium.org <thestig@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed May 9 17:57:23 2012 +0000	Move transport_security_persister to chrome/browser/net. Fix test file leak, tear down issues, and style issues in TransportSecurityPersisterTest. TEST=none	none		https://chromiumcodereview.appspot.com/10388041	svn://svn.chromium.org/chrome/trunk/src@136074 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/chrome_tests.gypi b/chrome/chrome_tests.gypi <newline>index 4c1bf50..ec51b3e 100644 <newline>--- a/chrome/chrome_tests.gypi <newline>+++ b/chrome/chrome_tests.gypi <newline>@@ -1370,6 +1370,7 @@ <newline>         'browser/net/sqlite_persistent_cookie_store_unittest.cc', <newline>         'browser/net/sqlite_server_bound_cert_store_unittest.cc', <newline>         'browser/net/ssl_config_service_manager_pref_unittest.cc', <newline>+        'browser/net/transport_security_persister_unittest.cc', <newline>         'browser/net/url_fixer_upper_unittest.cc', <newline>         'browser/net/url_info_unittest.cc', <newline>         'browser/notifications/desktop_notification_service_unittest.cc', <newline>@@ -1612,7 +1613,6 @@ <newline>         'browser/task_profiler/task_profiler_data_serializer_unittest.cc', <newline>         'browser/themes/browser_theme_pack_unittest.cc', <newline>         'browser/themes/theme_service_unittest.cc', <newline>-        'browser/transport_security_persister_unittest.cc', <newline>         'browser/ui/browser_list_unittest.cc', <newline>         'browser/ui/browser_unittest.cc', <newline>         # It is safe to list */cocoa/* files in the "common" file list																								
Chromium	1	2	f2f6b5a173c83c4b9b998dd3abcf04c74f7b1ce	mdm@chromium.org <mdm@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue May 8 23:02:22 2012 +0000	Per bug 121738, ignore old saved logins for http*://www.google.com which is no longer used for Google login forms. Google login forms are now always on https://accounts.google.com, so these saved logins should be unused. This is a security feature to help minimize the damage that can be done by XSS attacks.	121738		https://chromiumcodereview.appspot.com/10209036	svn://svn.chromium.org/chrome/trunk/src@135938 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/chrome_tests.gypi b/chrome/chrome_tests.gypi <newline>index ddfa75a..1f8d6ec 100644 <newline>--- a/chrome/chrome_tests.gypi <newline>+++ b/chrome/chrome_tests.gypi <newline>@@ -1387,6 +1387,7 @@ <newline>         'browser/password_manager/password_form_data.cc', <newline>         'browser/password_manager/password_form_manager_unittest.cc', <newline>         'browser/password_manager/password_manager_unittest.cc', <newline>+        'browser/password_manager/password_store_unittest.cc', <newline>         'browser/password_manager/password_store_default_unittest.cc', <newline>         'browser/password_manager/password_store_mac_unittest.cc', <newline>         'browser/password_manager/password_store_win_unittest.cc',																								
Chromium	1	2	ac091784670a4e1391053beae4bf50f0fb1612b	zelidrag@chromium.org <zelidrag@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri May 4 20:04:26 2012 +0000	Fixed security issues related to gdata: protocol handler by: a) changing URL from gdata://viewfiles/<file_id>/<file_path> to drive://<file_id>, and b) registering drive: schema as local and unique origin TEST=see bug for details	chromium-os:30244		http://codereview.chromium.org/10375006	svn://svn.chromium.org/chrome/trunk/src@135402 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/renderer/chrome_content_renderer_client.cc b/chrome/renderer/chrome_content_renderer_client.cc <newline>index 46473c3..2833769 100644 <newline>--- a/chrome/renderer/chrome_content_renderer_client.cc <newline>+++ b/chrome/renderer/chrome_content_renderer_client.cc <newline>@@ -206,6 +206,12 @@ void ChromeContentRendererClient::RenderThreadStarted() { <newline>   WebString internal_scheme(ASCIIToUTF16(chrome::kChromeInternalScheme)); <newline>   WebSecurityPolicy::registerURLSchemeAsDisplayIsolated(internal_scheme); <newline>+#if defined(OS_CHROMEOS) <newline>+  WebString drive_scheme(ASCIIToUTF16(chrome::kDriveScheme)); <newline>+  WebSecurityPolicy::registerURLSchemeAsLocal(drive_scheme); <newline>+  WebSecurityPolicy::registerURLSchemeAsNoAccess(drive_scheme); <newline>+#endif <newline>+ <newline>   // chrome: pages should not be accessible by bookmarklets or javascript: <newline>   // URLs typed in the omnibox. <newline>   WebSecurityPolicy::registerURLSchemeAsNotAllowingJavascriptURLs(																								
Chromium	1	2	f5176bd8dc50abbdbb2e1afbd7068a9b3ece888	kaznacheev@chromium.org <kaznacheev@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Apr 26 14:21:28 2012 +0000	[File Manager] Updated content security policy Added https://docs.google.com to image sources because this is where thumbnails for hosted documents are. TEST=			https://chromiumcodereview.appspot.com/10198025	svn://svn.chromium.org/chrome/trunk/src@134101 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/resources/file_manager/manifest.json b/chrome/browser/resources/file_manager/manifest.json <newline>index 37eb1e1..12e5f1d 100644 <newline>--- a/chrome/browser/resources/file_manager/manifest.json <newline>+++ b/chrome/browser/resources/file_manager/manifest.json <newline>@@ -22,7 +22,7 @@ <newline>     "clipboardRead", <newline>     "https://*.googleusercontent.com/" <newline>   ], <newline>-  "content_security_policy": "default-src 'none'; script-src 'self'; style-src 'self' 'unsafe-inline'; frame-src 'self' about:; img-src 'self' data: filesystem: https://*.googleusercontent.com chrome://extension-icon; media-src filesystem: https://*.googleusercontent.com;", <newline>+  "content_security_policy": "default-src 'none'; script-src 'self'; style-src 'self' 'unsafe-inline'; frame-src 'self' about:; img-src 'self' data: filesystem: https://docs.google.com https://*.googleusercontent.com chrome://extension-icon; media-src filesystem: https://*.googleusercontent.com;", <newline>   "app": { <newline>     "launch": { <newline>       "local_path": "main.html"																								
Chromium	1	2	612ee79e9dc48f0cb537eeb5a57c701b62061c7	kaznacheev@chromium.org <kaznacheev@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Apr 26 14:21:28 2012 +0000	[File Manager] Updated content security policy Added https://docs.google.com to image sources because this is where thumbnails for hosted documents are. TEST=			https://chromiumcodereview.appspot.com/10198025	svn://svn.chromium.org/chrome/trunk/src@134101 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/resources/file_manager/manifest.json b/chrome/browser/resources/file_manager/manifest.json <newline>index 37eb1e1..12e5f1d 100644 <newline>--- a/chrome/browser/resources/file_manager/manifest.json <newline>+++ b/chrome/browser/resources/file_manager/manifest.json <newline>@@ -22,7 +22,7 @@ <newline>     "clipboardRead", <newline>     "https://*.googleusercontent.com/" <newline>   ], <newline>-  "content_security_policy": "default-src 'none'; script-src 'self'; style-src 'self' 'unsafe-inline'; frame-src 'self' about:; img-src 'self' data: filesystem: https://*.googleusercontent.com chrome://extension-icon; media-src filesystem: https://*.googleusercontent.com;", <newline>+  "content_security_policy": "default-src 'none'; script-src 'self'; style-src 'self' 'unsafe-inline'; frame-src 'self' about:; img-src 'self' data: filesystem: https://docs.google.com https://*.googleusercontent.com chrome://extension-icon; media-src filesystem: https://*.googleusercontent.com;", <newline>   "app": { <newline>     "launch": { <newline>       "local_path": "main.html"																								
Chromium	1	1	c90e20513d53762058a19722e909c8a75c2045b	kuan@chromium.org <kuan@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Apr 19 18:03:32 2012 +0000	cros gdata: implement protocol handler for viewing gdata files - this re-implements the previous implementation of chrome://gdata - create new scheme gdata:// to view contents of gdata files - url has format gdata://viewfile/<gdata_resource_id>/<gdata_file_name> - add gdata protocol handler as a hostname filter for url requests during initialization of GDataFileSystem, and remove it in destructor - reading of file contents is done in streaming manner, without the need to store entire file contents in memory before responding to url request - this also mitigates (if not fixes) the security risk imposed by chrome:// scheme TEST=make sure google docs acct has a text file, open file manager, expand Google Docs, double-click on the txt file, new tab should open with file contents	chromium-os:28510,chromium-os:29238		https://chromiumcodereview.appspot.com/10038039	svn://svn.chromium.org/chrome/trunk/src@133014 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/common/url_constants.h b/chrome/common/url_constants.h <newline>index 4ee5682..ddb5dfc 100644 <newline>--- a/chrome/common/url_constants.h <newline>+++ b/chrome/common/url_constants.h <newline>@@ -195,7 +195,6 @@ extern const char kChromeUIActiveDownloadsHost[]; <newline> extern const char kChromeUIChooseMobileNetworkHost[]; <newline> extern const char kChromeUICryptohomeHost[]; <newline> extern const char kChromeUIDiscardsHost[]; <newline>-extern const char kChromeUIGDataHost[]; <newline> extern const char kChromeUIIdleLogoutDialogHost[]; <newline> extern const char kChromeUIImageBurnerHost[]; <newline> extern const char kChromeUIKeyboardOverlayHost[]; <newline>@@ -344,6 +343,9 @@ extern int kNumberOfChromeDebugURLs; <newline> // Canonical schemes you can use as input to GURL.SchemeIs(). <newline> extern const char kExtensionScheme[]; <newline>+#if defined(OS_CHROMEOS) <newline>+extern const char kGDataScheme[]; <newline>+#endif  // defined(OS_CHROMEOS) <newline> // Call near the beginning of startup to register Chrome's internal URLs that <newline> // should be parsed as "standard" with the googleurl library.																								
Chromium	1	1	b098e7bc04b2d72a563426eefefdaba210b60e7	kuan@chromium.org <kuan@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Apr 19 18:03:32 2012 +0000	cros gdata: implement protocol handler for viewing gdata files - this re-implements the previous implementation of chrome://gdata - create new scheme gdata:// to view contents of gdata files - url has format gdata://viewfile/<gdata_resource_id>/<gdata_file_name> - add gdata protocol handler as a hostname filter for url requests during initialization of GDataFileSystem, and remove it in destructor - reading of file contents is done in streaming manner, without the need to store entire file contents in memory before responding to url request - this also mitigates (if not fixes) the security risk imposed by chrome:// scheme TEST=make sure google docs acct has a text file, open file manager, expand Google Docs, double-click on the txt file, new tab should open with file contents	chromium-os:28510,chromium-os:29238		https://chromiumcodereview.appspot.com/10038039	svn://svn.chromium.org/chrome/trunk/src@133014 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/common/url_constants.h b/chrome/common/url_constants.h <newline>index 4ee5682..ddb5dfc 100644 <newline>--- a/chrome/common/url_constants.h <newline>+++ b/chrome/common/url_constants.h <newline>@@ -195,7 +195,6 @@ extern const char kChromeUIActiveDownloadsHost[]; <newline> extern const char kChromeUIChooseMobileNetworkHost[]; <newline> extern const char kChromeUICryptohomeHost[]; <newline> extern const char kChromeUIDiscardsHost[]; <newline>-extern const char kChromeUIGDataHost[]; <newline> extern const char kChromeUIIdleLogoutDialogHost[]; <newline> extern const char kChromeUIImageBurnerHost[]; <newline> extern const char kChromeUIKeyboardOverlayHost[]; <newline>@@ -344,6 +343,9 @@ extern int kNumberOfChromeDebugURLs; <newline> // Canonical schemes you can use as input to GURL.SchemeIs(). <newline> extern const char kExtensionScheme[]; <newline>+#if defined(OS_CHROMEOS) <newline>+extern const char kGDataScheme[]; <newline>+#endif  // defined(OS_CHROMEOS) <newline> // Call near the beginning of startup to register Chrome's internal URLs that <newline> // should be parsed as "standard" with the googleurl library.																								
Chromium	5		c7511c39fd03ac56928949e8c75d46da9e708c2	cevans@chromium.org <cevans@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Apr 16 17:39:06 2012 +0000	Add myself and Julien as OWNERS for security-sensitive Linux files. R=jam@chromium.org			https://chromiumcodereview.appspot.com/10097001	svn://svn.chromium.org/chrome/trunk/src@132421 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/common/OWNERS b/content/common/OWNERS <newline>new file mode 100644 <newline>index 0000000..ec64cb8 <newline>--- /dev/null <newline>+++ b/content/common/OWNERS <newline>@@ -0,0 +1,2 @@ <newline>+# For sandbox_init_linux.cc <newline>+cevans@chromium.org																								
Chromium	5		0d6d6256a9e6970ad477e428374f1fc89aa3ae8	cevans@chromium.org <cevans@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Apr 16 17:39:06 2012 +0000	Add myself and Julien as OWNERS for security-sensitive Linux files. R=jam@chromium.org			https://chromiumcodereview.appspot.com/10097001	svn://svn.chromium.org/chrome/trunk/src@132421 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/common/OWNERS b/content/common/OWNERS <newline>new file mode 100644 <newline>index 0000000..ec64cb8 <newline>--- /dev/null <newline>+++ b/content/common/OWNERS <newline>@@ -0,0 +1,2 @@ <newline>+# For sandbox_init_linux.cc <newline>+cevans@chromium.org																								
Chromium	3	2	02c345e0c2e42241fb7f3d6380955d9475a414c	agl@chromium.org <agl@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Apr 13 18:54:18 2012 +0000	net: move HSTS preloaded and pinning info out of code. (This is a reland of r132012, which was reverted in r132016 because it broke net_unittests on ChromeOS.) This change moves information about HSTS preloaded and public key pinning, that were previously written in code, into external files that can be consumed by other programs. Those files are converted by a program (that is not part of the build process) into hsts_preloaded.h. In order to make this change easier to review, hsts_preloaded.h was created by concatenating public_key_hashes.h and transport_security_state.cc. Therefore, the diffs will show where the new, generated file differs from the previous code. public_key_hashes.h and public_key_hashes_check.go are removed and subsumed by hsts_preloaded.h. TEST=net_unittests	none		https://chromiumcodereview.appspot.com/9863001	svn://svn.chromium.org/chrome/trunk/src@132228 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/net.gyp b/net/net.gyp <newline>index b1baccf..dd08354 100644 <newline>--- a/net/net.gyp <newline>+++ b/net/net.gyp <newline>@@ -253,6 +253,7 @@ <newline>         'base/test_root_certs_win.cc', <newline>         'base/transport_security_state.cc', <newline>         'base/transport_security_state.h', <newline>+        'base/transport_security_state_static.h', <newline>         'base/upload_data.cc', <newline>         'base/upload_data.h', <newline>         'base/upload_data_stream.cc',																								
Chromium	3	2	7874d13cf84789b35363fc10b6dc3498410fea4	agl@chromium.org <agl@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Apr 13 18:54:18 2012 +0000	net: move HSTS preloaded and pinning info out of code. (This is a reland of r132012, which was reverted in r132016 because it broke net_unittests on ChromeOS.) This change moves information about HSTS preloaded and public key pinning, that were previously written in code, into external files that can be consumed by other programs. Those files are converted by a program (that is not part of the build process) into hsts_preloaded.h. In order to make this change easier to review, hsts_preloaded.h was created by concatenating public_key_hashes.h and transport_security_state.cc. Therefore, the diffs will show where the new, generated file differs from the previous code. public_key_hashes.h and public_key_hashes_check.go are removed and subsumed by hsts_preloaded.h. TEST=net_unittests	none		https://chromiumcodereview.appspot.com/9863001	svn://svn.chromium.org/chrome/trunk/src@132228 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/net.gyp b/net/net.gyp <newline>index b1baccf..dd08354 100644 <newline>--- a/net/net.gyp <newline>+++ b/net/net.gyp <newline>@@ -253,6 +253,7 @@ <newline>         'base/test_root_certs_win.cc', <newline>         'base/transport_security_state.cc', <newline>         'base/transport_security_state.h', <newline>+        'base/transport_security_state_static.h', <newline>         'base/upload_data.cc', <newline>         'base/upload_data.h', <newline>         'base/upload_data_stream.cc',																								
Chromium	3	2	4ed43cabcc2fb7dca9124d870441bba56bd20a1	tim@chromium.org <tim@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Apr 12 18:12:02 2012 +0000	Revert 132012 - net: move HSTS preloaded and pinning info out of code. This change moves information about HSTS preloaded and public key pinning, that were previously written in code, into external files that can be consumed by other programs. Those files are converted by a program (that is not part of the build process) into hsts_preloaded.h. In order to make this change easier to review, hsts_preloaded.h was created by concatenating public_key_hashes.h and transport_security_state.cc. Therefore, the diffs will show where the new, generated file differs from the previous code. public_key_hashes.h and public_key_hashes_check.go are removed and subsumed by hsts_preloaded.h. TEST=net_unittests TBR=agl@chromium.org	none		https://chromiumcodereview.appspot.com/10003002	svn://svn.chromium.org/chrome/trunk/src@132016 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/net.gyp b/net/net.gyp <newline>index b6288de..d33fc22 100644 <newline>--- a/net/net.gyp <newline>+++ b/net/net.gyp <newline>@@ -253,7 +253,6 @@ <newline>         'base/test_root_certs_win.cc', <newline>         'base/transport_security_state.cc', <newline>         'base/transport_security_state.h', <newline>-        'base/transport_security_state_static.h', <newline>         'base/upload_data.cc', <newline>         'base/upload_data.h', <newline>         'base/upload_data_stream.cc',																								
Chromium	3	2	611ef324d97e1c327fd2e4e9681b73a48e97582	tim@chromium.org <tim@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Apr 12 18:12:02 2012 +0000	Revert 132012 - net: move HSTS preloaded and pinning info out of code. This change moves information about HSTS preloaded and public key pinning, that were previously written in code, into external files that can be consumed by other programs. Those files are converted by a program (that is not part of the build process) into hsts_preloaded.h. In order to make this change easier to review, hsts_preloaded.h was created by concatenating public_key_hashes.h and transport_security_state.cc. Therefore, the diffs will show where the new, generated file differs from the previous code. public_key_hashes.h and public_key_hashes_check.go are removed and subsumed by hsts_preloaded.h. TEST=net_unittests TBR=agl@chromium.org	none		https://chromiumcodereview.appspot.com/10003002	svn://svn.chromium.org/chrome/trunk/src@132016 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/net.gyp b/net/net.gyp <newline>index b6288de..d33fc22 100644 <newline>--- a/net/net.gyp <newline>+++ b/net/net.gyp <newline>@@ -253,7 +253,6 @@ <newline>         'base/test_root_certs_win.cc', <newline>         'base/transport_security_state.cc', <newline>         'base/transport_security_state.h', <newline>-        'base/transport_security_state_static.h', <newline>         'base/upload_data.cc', <newline>         'base/upload_data.h', <newline>         'base/upload_data_stream.cc',																								
Chromium	3	2	36ca9fbfa1cc341bb185a74a7c390912e51cb71	agl@chromium.org <agl@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Apr 12 17:40:14 2012 +0000	net: move HSTS preloaded and pinning info out of code. This change moves information about HSTS preloaded and public key pinning, that were previously written in code, into external files that can be consumed by other programs. Those files are converted by a program (that is not part of the build process) into hsts_preloaded.h. In order to make this change easier to review, hsts_preloaded.h was created by concatenating public_key_hashes.h and transport_security_state.cc. Therefore, the diffs will show where the new, generated file differs from the previous code. public_key_hashes.h and public_key_hashes_check.go are removed and subsumed by hsts_preloaded.h. TEST=net_unittests	none		https://chromiumcodereview.appspot.com/9863001	svn://svn.chromium.org/chrome/trunk/src@132012 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/net.gyp b/net/net.gyp <newline>index d33fc22..b6288de 100644 <newline>--- a/net/net.gyp <newline>+++ b/net/net.gyp <newline>@@ -253,6 +253,7 @@ <newline>         'base/test_root_certs_win.cc', <newline>         'base/transport_security_state.cc', <newline>         'base/transport_security_state.h', <newline>+        'base/transport_security_state_static.h', <newline>         'base/upload_data.cc', <newline>         'base/upload_data.h', <newline>         'base/upload_data_stream.cc',																								
Chromium	3	2	ffc2b31ceab8b4096cb442ca25ac68542f52268	agl@chromium.org <agl@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Apr 12 17:40:14 2012 +0000	net: move HSTS preloaded and pinning info out of code. This change moves information about HSTS preloaded and public key pinning, that were previously written in code, into external files that can be consumed by other programs. Those files are converted by a program (that is not part of the build process) into hsts_preloaded.h. In order to make this change easier to review, hsts_preloaded.h was created by concatenating public_key_hashes.h and transport_security_state.cc. Therefore, the diffs will show where the new, generated file differs from the previous code. public_key_hashes.h and public_key_hashes_check.go are removed and subsumed by hsts_preloaded.h. TEST=net_unittests	none		https://chromiumcodereview.appspot.com/9863001	svn://svn.chromium.org/chrome/trunk/src@132012 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/net.gyp b/net/net.gyp <newline>index d33fc22..b6288de 100644 <newline>--- a/net/net.gyp <newline>+++ b/net/net.gyp <newline>@@ -253,6 +253,7 @@ <newline>         'base/test_root_certs_win.cc', <newline>         'base/transport_security_state.cc', <newline>         'base/transport_security_state.h', <newline>+        'base/transport_security_state_static.h', <newline>         'base/upload_data.cc', <newline>         'base/upload_data.h', <newline>         'base/upload_data_stream.cc',																								
Chromium	5		6fce90f6367e1ea1ecc98ad229f0a74dabbea76	agl@chromium.org <agl@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Mar 28 15:33:40 2012 +0000	Rename hsts_preloaded.h to transport_security_state_static.h. This is a complete no-op as neither filename is actually used. This is just to make a future change easier to review. (Not reviewed.)				svn://svn.chromium.org/chrome/trunk/src@129413 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/base/transport_security_state_static.h b/net/base/transport_security_state_static.h <newline>new file mode 100644 <newline>index 0000000..ce2c713 <newline>--- /dev/null <newline>+++ b/net/base/transport_security_state_static.h <newline>@@ -0,0 +1,2836 @@ <newline>+// Copyright (c) 2011 The Chromium Authors. All rights reserved. <newline>+// Use of this source code is governed by a BSD-style license that can be <newline>+// found in the LICENSE file. <newline>+ <newline>+#ifndef NET_BASE_PUBLIC_KEY_HASHES_ <newline>+#define NET_BASE_PUBLIC_KEY_HASHES_ <newline>+#pragma once <newline>+ <newline>+// This file contains SubjectPublicKeyInfo hashes for public key pinning. The <newline>+// hashes are base64 encoded, SHA1 digests. <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIICPDCCAaUCEDyRMcsf9tAbDpq40ES/Er4wDQYJKoZIhvcNAQEFBQAwXzELMAkG <newline>+A1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFz <newline>+cyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTk2 <newline>+MDEyOTAwMDAwMFoXDTI4MDgwMjIzNTk1OVowXzELMAkGA1UEBhMCVVMxFzAVBgNV <newline>+BAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFzcyAzIFB1YmxpYyBQcmlt <newline>+YXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGfMA0GCSqGSIb3DQEBAQUAA4GN <newline>+ADCBiQKBgQDJXFme8huKARS0EN8EQNvjV69qRUCPhAwL0TPZ2RHP7gJYHyX3KqhE <newline>+BarsAx94f56TuZoAqiN91qyFomNFx3InzPRMxnVx0jnvT0Lwdd8KkMaOIG+YD/is <newline>+I19wKTakyYbnsZogy1Olhec9vn2a/iRFM9x2Fe0PonFkTGUugWhFpwIDAQABMA0G <newline>+CSqGSIb3DQEBBQUAA4GBABByUqkFFBkyCEHwxWsKzH4PIRnN5GfcX6kb5sroc50i <newline>+2JhucwNhkcV8sEVAbkSdjbCxlnRhLQ2pRdKkkirWmnWXbj9T/UWZYB2oK0z5XqcJ <newline>+2HUw19JlYD1n1khVdWk/kfVIC0dpImmClr7JyDiGSnoscxlIaU5rfGW/D/xwzoiQ <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass3[] = <newline>+    "sha1/4n972HfV354KP560yw4uqe/baXc="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEGjCCAwICEQCbfgZJoz5iudXukEhxKe9XMA0GCSqGSIb3DQEBBQUAMIHKMQsw <newline>+CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZl <newline>+cmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWdu <newline>+LCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT <newline>+aWduIENsYXNzIDMgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp <newline>+dHkgLSBHMzAeFw05OTEwMDEwMDAwMDBaFw0zNjA3MTYyMzU5NTlaMIHKMQswCQYD <newline>+VQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT <newline>+aWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJ <newline>+bmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWdu <newline>+IENsYXNzIDMgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg <newline>+LSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMu6nFL8eB8aHm8b <newline>+N3O9+MlrlBIwT/A2R/XQkQr1F8ilYcEWQE37imGQ5XYgwREGfassbqb1EUGO+i2t <newline>+KmFZpGcmTNDovFJbcCAEWNF6yaRpvIMXZK0Fi7zQWM6NjPXr8EJJC52XJ2cybuGu <newline>+kxUccLwgTS8Y3pKI6GyFVxEa6X7jJhFUokWWVYPKMIno3Nij7SqAP395ZVc+FSBm <newline>+CC+Vk7+qRy+oRpfwEuL+wgorUeZ25rdGt+INpsyow0xZVYnm6FNcHOqd8GIWC6fJ <newline>+Xwzw3sJ2zq/3avL6QaaiMxTJ5Xpj055iN9WFZZ4O5lMkdBteHRJTW8cs54NJOxWu <newline>+imi5V5cCAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAERSWwauSCPc/L8my/uRan2Te <newline>+2yFPhpk0djZX3dAVL8WtfxUfN2JzPtTnX84XA9s1+ivbrmAJXx5fj267Cz3qWhMe <newline>+DGBvtcC1IyIuBwvLqXTLR7sdwdela8wv0kL9Sd2nic9TutoAWii/gt/4uhMdUIaC <newline>+/Y4wjylGsB49Ndo4YhYYSq3mtlFs3q9i6wHQHiT+eo8SGhJouPtmmRQURVyu565p <newline>+F4ErWjfJXir0xuKhXFSbplQAz/DxwceYMBo7Nhbbo27q/a2ywtrvAkcTisDxszGt <newline>+TxzhT5yvDwyd93gN2PQ1VoDat20Xj50egWTh/sVFuq1ruQp6Tk9LhO5L8X3dEQ== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass3_G3[] = <newline>+    "sha1/IvGeLsbqzPxdI0b0wuj2xVTdXgc="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIICsDCCAhmgAwIBAgIDC2dxMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT <newline>+MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0 <newline>+aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDkwNjA4MjA0MzI3WhcNMTMwNjA3MTk0MzI3 <newline>+WjBGMQswCQYDVQQGEwJVUzETMBEGA1UEChMKR29vZ2xlIEluYzEiMCAGA1UEAxMZ <newline>+R29vZ2xlIEludGVybmV0IEF1dGhvcml0eTCBnzANBgkqhkiG9w0BAQEFAAOBjQAw <newline>+gYkCgYEAye23pIucV+eEPkB9hPSP0XFjU5nneXQUr0SZMyCSjXvlKAy6rWxJfoNf <newline>+NFlOCnowzdDXxFdF7dWq1nMmzq0yE7jXDx07393cCDaob1FEm8rWIFJztyaHNWrb <newline>+qeXUWaUr/GcZOfqTGBhs3t0lig4zFEfC7wFQeeT9adGnwKziV28CAwEAAaOBozCB <newline>+oDAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFL/AMOv1QxE+Z7qekfv8atrjaxIk <newline>+MB8GA1UdIwQYMBaAFEjmaPkr0rKV10fYIyAQTzOYkJ/UMBIGA1UdEwEB/wQIMAYB <newline>+Af8CAQAwOgYDVR0fBDMwMTAvoC2gK4YpaHR0cDovL2NybC5nZW90cnVzdC5jb20v <newline>+Y3Jscy9zZWN1cmVjYS5jcmwwDQYJKoZIhvcNAQEFBQADgYEAuIojxkiWsRF8YHde <newline>+BZqrocb6ghwYB8TrgbCoZutJqOkM0ymt9e8kTP3kS8p/XmOrmSfLnzYhLLkQYGfN <newline>+0rTw8Ktx5YtaiScRhKqOv5nwnQkhClIZmloJ0pC3+gz4fniisIWvXEyZ2VxVKfml <newline>+UUIuOss4jHg7y/j7lYe8vJD5UDI= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Google1024[] = <newline>+    "sha1/QMVAHW+MuvCLAO3vse6H0AWzuc0="; <newline>+ <newline>+// Not yet used publicly. <newline>+static const char kSPKIHash_Google2048[] = <newline>+    "sha1/AbkhxY0L343gKf+cki7NVWp+ozk="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDIDCCAomgAwIBAgIENd70zzANBgkqhkiG9w0BAQUFADBOMQswCQYDVQQGEwJV <newline>+UzEQMA4GA1UEChMHRXF1aWZheDEtMCsGA1UECxMkRXF1aWZheCBTZWN1cmUgQ2Vy <newline>+dGlmaWNhdGUgQXV0aG9yaXR5MB4XDTk4MDgyMjE2NDE1MVoXDTE4MDgyMjE2NDE1 <newline>+MVowTjELMAkGA1UEBhMCVVMxEDAOBgNVBAoTB0VxdWlmYXgxLTArBgNVBAsTJEVx <newline>+dWlmYXggU2VjdXJlIENlcnRpZmljYXRlIEF1dGhvcml0eTCBnzANBgkqhkiG9w0B <newline>+AQEFAAOBjQAwgYkCgYEAwV2xWGcIYu6gmi0fCG2RFGiYCh7+2gRvE4RiIcPRfM6f <newline>+BeC4AfBONOziipUEZKzxa1NfBbPLZ4C/QgKO/t0BCezhABRP/PvwDN1Dulsr4R+A <newline>+cJkVV5MW8Q+XarfCaCMczE1ZMKxRHjuvK9buY0V7xdlfUNLjUA86iOe/FP3gx7kC <newline>+AwEAAaOCAQkwggEFMHAGA1UdHwRpMGcwZaBjoGGkXzBdMQswCQYDVQQGEwJVUzEQ <newline>+MA4GA1UEChMHRXF1aWZheDEtMCsGA1UECxMkRXF1aWZheCBTZWN1cmUgQ2VydGlm <newline>+aWNhdGUgQXV0aG9yaXR5MQ0wCwYDVQQDEwRDUkwxMBoGA1UdEAQTMBGBDzIwMTgw <newline>+ODIyMTY0MTUxWjALBgNVHQ8EBAMCAQYwHwYDVR0jBBgwFoAUSOZo+SvSspXXR9gj <newline>+IBBPM5iQn9QwHQYDVR0OBBYEFEjmaPkr0rKV10fYIyAQTzOYkJ/UMAwGA1UdEwQF <newline>+MAMBAf8wGgYJKoZIhvZ9B0EABA0wCxsFVjMuMGMDAgbAMA0GCSqGSIb3DQEBBQUA <newline>+A4GBAFjOKer89961zgK5F7WF0bnj4JXMJTENAKaSbn+2kmOeUJXRmm/kEd5jhW6Y <newline>+7qj/WsjTVbJmcVfewCHrPSqnI0kBBIZCe/zuf6IWUrVnZ9NA2zsmWLIodz2uFHdh <newline>+1voqZiegDfqnc1zqcPGUIWVEX/r87yloqaKHee9570+sB3c4 <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_EquifaxSecureCA[] = <newline>+    "sha1/SOZo+SvSspXXR9gjIBBPM5iQn9Q="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIICsjCCAhugAwIBAgIDBe3YMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT <newline>+MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0 <newline>+aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDUwODMxMjA0MDM3WhcNMTIwODMxMjA0MDM3 <newline>+WjBIMQswCQYDVQQGEwJVUzETMBEGA1UEChMKQWV0bmEgSW5jLjEkMCIGA1UEAxMb <newline>+QWV0bmEgSW5jLiBTZWN1cmUgU2VydmVyIENBMIGfMA0GCSqGSIb3DQEBAQUAA4GN <newline>+ADCBiQKBgQCnB2yrm4i44DG5epPu0fbe/pOZDWOvAS7qCcy6YbSkPfOHfH9Blmf3 <newline>+8L6D5yY1pzmTXaU7cDQu4qmj21toEIGwBziMmW6NsiV8nHtmtfXfHP6xrmyPUdN2 <newline>+DdTj937fnrYOoyMhGgBYEjiemeHFQxZSpKZdolFEFXbUa2/yWQafrQIDAQABo4Gj <newline>+MIGgMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQU2S4/xnaeitmFkzoxLnZeo33n <newline>+H4owHwYDVR0jBBgwFoAUSOZo+SvSspXXR9gjIBBPM5iQn9QwEgYDVR0TAQH/BAgw <newline>+BgEB/wIBADA6BgNVHR8EMzAxMC+gLaArhilodHRwOi8vY3JsLmdlb3RydXN0LmNv <newline>+bS9jcmxzL3NlY3VyZWNhLmNybDANBgkqhkiG9w0BAQUFAAOBgQBMSoZHIrD1rq8v <newline>+UG3UYbN76xiF9FDRzWTs5Mvv4Psvf2kk426slzNO0ukFAsmwqN1mA/P9Nc4FlMMC <newline>+YtcnLNwC/syEYdQBOJjxfTVGTqh5q6jDs7S3rPJv8mrFk8ldC8PxU1ZJVfSlFCDn <newline>+6diMDgvOAJfUeJlIRLGu2k/ksI0Y1w== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Aetna[] = <newline>+    "sha1/klKqFN6/gK4wqtlOYDhwJKVDLxo="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDfTCCAuagAwIBAgIDErvmMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT <newline>+MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0 <newline>+aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDIwNTIxMDQwMDAwWhcNMTgwODIxMDQwMDAw <newline>+WjBCMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEbMBkGA1UE <newline>+AxMSR2VvVHJ1c3QgR2xvYmFsIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB <newline>+CgKCAQEA2swYYzD99BcjGlZ+W988bDjkcbd4kdS8odhM+KhDtgPpTSEHCIjaWC9m <newline>+OSm9BXiLnTjoBbdqfnGk5sRgprDvgOSJKA+eJdbtg/OtppHHmMlCGDUUna2YRpIu <newline>+T8rxh0PBFpVXLVDviS2Aelet8u5fa9IAjbkU+BQVNdnARqN7csiRv8lVK83Qlz6c <newline>+JmTM386DGXHKTubU1XupGc1V3sjs0l44U+VcT4wt/lAjNvxm5suOpDkZALeVAjmR <newline>+Cw7+OC7RHQWa9k0+bw8HHa8sHo9gOeL6NlMTOdReJivbPagUvTLrGAMoUgRx5asz <newline>+PeE4uwc2hGKceeoWMPRfwCvocWvk+QIDAQABo4HwMIHtMB8GA1UdIwQYMBaAFEjm <newline>+aPkr0rKV10fYIyAQTzOYkJ/UMB0GA1UdDgQWBBTAephojYn7qwVkDBF9qn1luMrM <newline>+TjAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjA6BgNVHR8EMzAxMC+g <newline>+LaArhilodHRwOi8vY3JsLmdlb3RydXN0LmNvbS9jcmxzL3NlY3VyZWNhLmNybDBO <newline>+BgNVHSAERzBFMEMGBFUdIAAwOzA5BggrBgEFBQcCARYtaHR0cHM6Ly93d3cuZ2Vv <newline>+dHJ1c3QuY29tL3Jlc291cmNlcy9yZXBvc2l0b3J5MA0GCSqGSIb3DQEBBQUAA4GB <newline>+AHbhEm5OSxYShjAGsoEIz/AIx8dxfmbuwu3UOx//8PDITtZDOLC5MH0Y0FWDomrL <newline>+NhGc6Ehmo21/uBPUR/6LWlxz/K7ZGzIZOKuXNBSqltLroxwUCEm2u+WR74M26x1W <newline>+b8ravHNjkOR/ez4iyz0H7V84dJzjA1BOoa+Y7mHyhD8S <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustGlobal[] = <newline>+    "sha1/wHqYaI2J+6sFZAwRfap9ZbjKzE4="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDizCCAvSgAwIBAgIDDW5iMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT <newline>+MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0 <newline>+aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDYxMTI3MDAwMDAwWhcNMTgwODIxMTYxNTAw <newline>+WjBYMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjExMC8GA1UE <newline>+AxMoR2VvVHJ1c3QgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCCASIw <newline>+DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL64FXv/1Hx9Z62DZHvIQlMt3/aE <newline>+CCBh1gFZapxEEa/vdv2Vfs5hMLt6g18CvQFmyu4VjW+hMJy9oYWelDrzVogAMc/Y <newline>+7mqWAtntA4z7dW3n6rhVFgUWmvTgXrGIwGSFXBVNiMe3uuB16a0FPZ3HiUjguyjI <newline>+A+Ewk2ReUsBZcCI1V4iK8ZUKg9e8MXMBNO3vRnHgawKoNXJrl5tm4MsceV/YGgRo <newline>+HkcC5p1g4jaXAd/ONZLfvmfHbXdZO4+d1pAVlLxCNBDBOfmxJz5+1op1xbKvltOi <newline>+3pvkmL594emBrbZv/NcO2uA0sA0ad+fjCJjvWPqchLc2r8LfrNL0EAZwcTUCAwEA <newline>+AaOB6DCB5TAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFCzVUEGXFYvwjzZhW0r7 <newline>+a9mZyTOSMB8GA1UdIwQYMBaAFEjmaPkr0rKV10fYIyAQTzOYkJ/UMA8GA1UdEwEB <newline>+/wQFMAMBAf8wOgYDVR0fBDMwMTAvoC2gK4YpaHR0cDovL2NybC5nZW90cnVzdC5j <newline>+b20vY3Jscy9zZWN1cmVjYS5jcmwwRgYDVR0gBD8wPTA7BgRVHSAAMDMwMQYIKwYB <newline>+BQUHAgEWJWh0dHA6Ly93d3cuZ2VvdHJ1c3QuY29tL3Jlc291cmNlcy9jcHMwDQYJ <newline>+KoZIhvcNAQEFBQADgYEAr/MO1nKrx6mXyiprhDneeanwgeUIZ6vXLyACAXEMBCLJ <newline>+HoiVA8lJOq9nCEmw1Qj1ID2AkaDFh6P7yaMXkfmoL67pD9+Wcg91F4BdeAFNnx9t <newline>+e9j1QjgjGpmT9IO+OzV05zcTNXqstLaQgmwnpODsnjW9v+UpoUefWzL86Zl9Kzk= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustPrimary[] = <newline>+    "sha1/sBmJ5+/7Sq/LFI9YRjl2IkFQ4bo="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIFijCCBHKgAwIBAgIKYSCKYgAAAAAACDANBgkqhkiG9w0BAQUFADBSMQswCQYD <newline>+VQQGEwJVUzEaMBgGA1UEChMRSW50ZWwgQ29ycG9yYXRpb24xJzAlBgNVBAMTHklu <newline>+dGVsIEV4dGVybmFsIEJhc2ljIFBvbGljeSBDQTAeFw0wOTA1MTUxOTI3MjZaFw0x <newline>+NTA1MTUxOTM3MjZaMFYxCzAJBgNVBAYTAlVTMRowGAYDVQQKExFJbnRlbCBDb3Jw <newline>+b3JhdGlvbjErMCkGA1UEAxMiSW50ZWwgRXh0ZXJuYWwgQmFzaWMgSXNzdWluZyBD <newline>+QSAzQjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKQEM1Wn9TU9vc9C <newline>++/Tc7KB+eiYElmrcEWE32WUdHvWG+IcQHVQsikTmMyKKojNLw2B5s6Iekc8ivDo/ <newline>+wCfjZzX9JyftMnc+AArc0la87Olybzm8K9jXEfTBvTnUSFSiI9ZYefITdiUgqlAF <newline>+uljFZEHYKYtLuhrRacpmQfP4mV63NKdc2bT804HRf6YptZFa4k6YN94zlrGNrBuQ <newline>+Q74WFzz/jLBusbUpEkro6Mu/ZYFOFWQrV9lBhF9Ruk8yN+3N6n9fUo/qBigiF2kE <newline>+n9xVh1ykl7SCGL2jBUkXx4qgV27a6Si8lRRdgrHGtN/HWnSWlLXTH5l575H4Lq++ <newline>+77OFv38CAwEAAaOCAlwwggJYMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFA7G <newline>+KvdZsggQkCVvw939imYxMCvFMAsGA1UdDwQEAwIBhjASBgkrBgEEAYI3FQEEBQID <newline>+AQABMCMGCSsGAQQBgjcVAgQWBBQ5oFY2ekKQ/5Ktim+VdMeSWb4QWTAZBgkrBgEE <newline>+AYI3FAIEDB4KAFMAdQBiAEMAQTAfBgNVHSMEGDAWgBQaxgxKxEdvqNutK/D0Vgaj <newline>+7TdUDDCBvQYDVR0fBIG1MIGyMIGvoIGsoIGphk5odHRwOi8vd3d3LmludGVsLmNv <newline>+bS9yZXBvc2l0b3J5L0NSTC9JbnRlbCUyMEV4dGVybmFsJTIwQmFzaWMlMjBQb2xp <newline>+Y3klMjBDQS5jcmyGV2h0dHA6Ly9jZXJ0aWZpY2F0ZXMuaW50ZWwuY29tL3JlcG9z <newline>+aXRvcnkvQ1JML0ludGVsJTIwRXh0ZXJuYWwlMjBCYXNpYyUyMFBvbGljeSUyMENB <newline>+LmNybDCB4wYIKwYBBQUHAQEEgdYwgdMwYwYIKwYBBQUHMAKGV2h0dHA6Ly93d3cu <newline>+aW50ZWwuY29tL3JlcG9zaXRvcnkvY2VydGlmaWNhdGVzL0ludGVsJTIwRXh0ZXJu <newline>+YWwlMjBCYXNpYyUyMFBvbGljeSUyMENBLmNydDBsBggrBgEFBQcwAoZgaHR0cDov <newline>+L2NlcnRpZmljYXRlcy5pbnRlbC5jb20vcmVwb3NpdG9yeS9jZXJ0aWZpY2F0ZXMv <newline>+SW50ZWwlMjBFeHRlcm5hbCUyMEJhc2ljJTIwUG9saWN5JTIwQ0EuY3J0MA0GCSqG <newline>+SIb3DQEBBQUAA4IBAQCxtQEHchVQhXyjEqtMVUMe6gkmPsIczHxSeqNbo9dsD+6x <newline>+bT65JT+oYgpIAtfEsYXeUJu1cChqpb22U5bMAz7eaQcW5bzefufWvA6lg2048B8o <newline>+czBj/q+5P5NpYrUO8jOmN4jTjfJq3ElZ7yFWpy7rB3Vm/aN6ATYqWfMbS/xfh+JC <newline>+xmH3droUmMJI0/aZJHsLtjbjFnNsHDNrJZX1vxlM78Lb1hjskTENPmhbVbfTj5i/ <newline>+ZGnhv4tmI8QZPCNtcegXJrfhRl2D9bWpdTOPrWiLDUqzy1Z6KL7TcOS/PCl8RHCJ <newline>+XkPau/thTQCpIoDa2+c+3XA++gRTfAQ4svTO260N <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Intel[] = <newline>+    "sha1/DsYq91myCBCQJW/D3f2KZjEwK8U="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDWzCCAsSgAwIBAgIDCaxIMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT <newline>+MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0 <newline>+aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDgwODE1MTY0NTE1WhcNMTMwMjE0MTc0NTE1 <newline>+WjBtMQswCQYDVQQGEwJERTEcMBoGA1UEChMTVEMgVHJ1c3RDZW50ZXIgR21iSDEe <newline>+MBwGA1UECxMVVEMgVHJ1c3RDZW50ZXIgU1NMIENBMSAwHgYDVQQDExdUQyBUcnVz <newline>+dENlbnRlciBTU0wgQ0EgSTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB <newline>+AOkCoJoNbJw33wSxNWbDdmIfDIedR8Zmr/mjOhMkXdxRYb6qrl/WfMEuo4PBcysJ <newline>+kF81LaDMkBH0zc7Hs1eYixrMVObkCmEUjxYylgOk4ExGwhmIWDJUWGslNBUIIhFf <newline>++ucDWuGZNfILQrwCWRHYBG0n/6lZPylCqopCMYhBK5sTI/PyuHEAzDL7+buep/Na <newline>+zn+oy/a6x1nobsuL9X2oFaWZb7Z6ty5kZ/U56JHa7vnsLrg4ePwiQb8jtyUdz0fD <newline>+uMHkNzK0gWxr4hm0v92otYFuOTZqNLEJneeiILxUCCMop2chr1obpq2zGVNxJ/rP <newline>+StWmcu75KBGMpT+mzFgIyf0CAwEAAaOBozCBoDAOBgNVHQ8BAf8EBAMCAQYwHQYD <newline>+VR0OBBYEFOe/bKlImXeG4tD/MKCQHQtk0IU6MB8GA1UdIwQYMBaAFEjmaPkr0rKV <newline>+10fYIyAQTzOYkJ/UMBIGA1UdEwEB/wQIMAYBAf8CAQAwOgYDVR0fBDMwMTAvoC2g <newline>+K4YpaHR0cDovL2NybC5nZW90cnVzdC5jb20vY3Jscy9zZWN1cmVjYS5jcmwwDQYJ <newline>+KoZIhvcNAQEFBQADgYEAVKyJLbJha83PggEit8+dzh50wIsKXpTV2K6K4HnUI1kh <newline>+xqocLVfQORluC+LS7L78D2EKTWLZ8WNujiP6DbbIPSTsMasuiBMQMBUlJMUqsp/M <newline>+XmQJgIGAbxsr19MY6mmB30oWuo4cjHnkMzSCfhcON6Rxvbjijk2qCWXkk2T2HAk= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_TCTrustCenter[] = <newline>+    "sha1/gzuEEAB/bkqdQS3EIjk2by7lW+k="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDJDCCAo2gAwIBAgIDBfw3MA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT <newline>+MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0 <newline>+aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDYwNzIxMTUwNTA2WhcNMTEwNzEyMTUwNTA2 <newline>+WjA5MQswCQYDVQQGEwJVSzEXMBUGA1UEChMOVm9kYWZvbmUgR3JvdXAxETAPBgNV <newline>+BAMTCFZvZGFmb25lMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAs61K <newline>+wbMcB+GGGbjyo1dYEiVNGRYKRsDXfeOgeq03Vebf7D5Xq6a0Qs4Rvp6CuRTSNDPi <newline>+M+0vuQRW5sib9UD8UB2x4znc6FriRV4FUpAyKNVqQ9NB0MOBpQekVlX9DzcXkn+p <newline>+zWRi6tt3CtPsaDyHo06oAwX5qu3tW3pjtf0vnQqJWwwA6Mp4YJ/acHD/vVtt67hz <newline>+a0Upz0O2DEJetb3OaqI5yaNZ91y6i7sK0KTvBQxZHeJs+y5UjluHv3ptMUZvmsf0 <newline>+SiKysXnkg5mtsZSFlfM+U7dADq1zNb764NV5sSlmbDLEkvohQyg1p9gh2HX9Jk4A <newline>+e9nnF4hjw2U33HLBXwIDAQABo4GgMIGdMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4E <newline>+FgQUR+YiAaq+68BPLD6l0UcvzlkcgvswHwYDVR0jBBgwFoAUSOZo+SvSspXXR9gj <newline>+IBBPM5iQn9QwDwYDVR0TAQH/BAUwAwEB/zA6BgNVHR8EMzAxMC+gLaArhilodHRw <newline>+Oi8vY3JsLmdlb3RydXN0LmNvbS9jcmxzL3NlY3VyZWNhLmNybDANBgkqhkiG9w0B <newline>+AQUFAAOBgQCs37zuSY/KkPigCvJevu+ewWy9GP2bFZi5EaxKuHGF+tYFZUNkyc06 <newline>+ACYMM3ADPM6dVUYeXIDZnPfV8BJFCpdoAHkSNlg341AVjabCOWtzOYolBn0ua8Wi <newline>+BM471XfzzXD7yMliek9J4fUn2vQU7MYgEkSAA53ZkMScGDkA/c1wMQ== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Vodafone[] = <newline>+    "sha1/DX/hXFUUNmiZ/EDWIgjvIuvRFRw="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIID1TCCAr2gAwIBAgIDAjbRMA0GCSqGSIb3DQEBBQUAMEIxCzAJBgNVBAYTAlVT <newline>+MRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMRswGQYDVQQDExJHZW9UcnVzdCBHbG9i <newline>+YWwgQ0EwHhcNMTAwMjE5MjI0NTA1WhcNMjAwMjE4MjI0NTA1WjA8MQswCQYDVQQG <newline>+EwJVUzEXMBUGA1UEChMOR2VvVHJ1c3QsIEluYy4xFDASBgNVBAMTC1JhcGlkU1NM <newline>+IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAx3H4Vsce2cy1rfa0 <newline>+l6P7oeYLUF9QqjraD/w9KSRDxhApwfxVQHLuverfn7ZB9EhLyG7+T1cSi1v6kt1e <newline>+6K3z8Buxe037z/3R5fjj3Of1c3/fAUnPjFbBvTfjW761T4uL8NpPx+PdVUdp3/Jb <newline>+ewdPPeWsIcHIHXro5/YPoar1b96oZU8QiZwD84l6pV4BcjPtqelaHnnzh8jfyMX8 <newline>+N8iamte4dsywPuf95lTq319SQXhZV63xEtZ/vNWfcNMFbPqjfWdY3SZiHTGSDHl5 <newline>+HI7PynvBZq+odEj7joLCniyZXHstXZu8W1eefDp6E63yoxhbK1kPzVw662gzxigd <newline>+gtFQiwIDAQABo4HZMIHWMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUa2k9ahhC <newline>+St2PAmU5/TUkhniRFjAwHwYDVR0jBBgwFoAUwHqYaI2J+6sFZAwRfap9ZbjKzE4w <newline>+EgYDVR0TAQH/BAgwBgEB/wIBADA6BgNVHR8EMzAxMC+gLaArhilodHRwOi8vY3Js <newline>+Lmdlb3RydXN0LmNvbS9jcmxzL2d0Z2xvYmFsLmNybDA0BggrBgEFBQcBAQQoMCYw <newline>+JAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmdlb3RydXN0LmNvbTANBgkqhkiG9w0B <newline>+AQUFAAOCAQEAq7y8Cl0YlOPBscOoTFXWvrSY8e48HM3P8yQkXJYDJ1j8Nq6iL4/x <newline>+/torAsMzvcjdSCIrYA+lAxD9d/jQ7ZZnT/3qRyBwVNypDFV+4ZYlitm12ldKvo2O <newline>+SUNjpWxOJ4cl61tt/qJ/OCjgNqutOaWlYsS3XFgsql0BYKZiZ6PAx2Ij9OdsRu61 <newline>+04BqIhPSLT90T+qvjF+0OJzbrs6vhB6m9jRRWXnT43XcvNfzc9+S7NIgWW+c+5X4 <newline>+knYYCnwPLKbK3opie9jzzl9ovY8+wXS7FXI6FoOpC+ZNmZzYV+yoAVHHb1c0XqtK <newline>+LEL2TxyJeN4mTvVvk0wVaydWTQBUbHq3tw== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_RapidSSL[] = <newline>+    "sha1/o5OZxATDsgmwgcIfIWIneMJ0jkw="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDxTCCAq2gAwIBAgIQAqxcJmoLQJuPC3nyrkYldzANBgkqhkiG9w0BAQUFADBs <newline>+MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3 <newline>+d3cuZGlnaWNlcnQuY29tMSswKQYDVQQDEyJEaWdpQ2VydCBIaWdoIEFzc3VyYW5j <newline>+ZSBFViBSb290IENBMB4XDTA2MTExMDAwMDAwMFoXDTMxMTExMDAwMDAwMFowbDEL <newline>+MAkGA1UEBhMCVVMxFTATBgNVBAoTDERpZ2lDZXJ0IEluYzEZMBcGA1UECxMQd3d3 <newline>+LmRpZ2ljZXJ0LmNvbTErMCkGA1UEAxMiRGlnaUNlcnQgSGlnaCBBc3N1cmFuY2Ug <newline>+RVYgUm9vdCBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMbM5XPm <newline>++9S75S0tMqbf5YE/yc0lSbZxKsPVlDRnogocsF9ppkCxxLeyj9CYpKlBWTrT3JTW <newline>+PNt0OKRKzE0lgvdKpVMSOO7zSW1xkX5jtqumX8OkhPhPYlG++MXs2ziS4wblCJEM <newline>+xChBVfvLWokVfnHoNb9Ncgk9vjo4UFt3MRuNs8ckRZqnrG0AFFoEt7oT61EKmEFB <newline>+Ik5lYYeBQVCmeVyJ3hlKV9Uu5l0cUyx+mM0aBhakaHPQNAQTXKFx01p8VdteZOE3 <newline>+hzBWBOURtCmAEvF5OYiiAhF8J2a3iLd48soKqDirCmTCv2ZdlYTBoSUeh10aUAsg <newline>+EsxBu24LUTi4S8sCAwEAAaNjMGEwDgYDVR0PAQH/BAQDAgGGMA8GA1UdEwEB/wQF <newline>+MAMBAf8wHQYDVR0OBBYEFLE+w2kD+L9HAdSYJhoIAu9jZCvDMB8GA1UdIwQYMBaA <newline>+FLE+w2kD+L9HAdSYJhoIAu9jZCvDMA0GCSqGSIb3DQEBBQUAA4IBAQAcGgaX3Nec <newline>+nzyIZgYIVyHbIUf4KmeqvxgydkAQV8GK83rZEWWONfqe/EW1ntlMMUu4kehDLI6z <newline>+eM7b41N5cdblIZQB2lWHmiRk9opmzN6cN82oNLFpmyPInngiK3BD41VHMWEZ71jF <newline>+hS9OMPagMRYjyOfiZRYzy78aG6A9+MpeizGLYAiJLQwGXFK3xPkKmNEVX58Svnw2 <newline>+Yzi9RKR/5CYrCsSXaQ3pjOLAEFe4yHYSkVXySGnYvCoCWw9E1CAx2/S6cCZdkGCe <newline>+vEsXCS+0yx5DaMkHJ8HSXPfqIbloEpw8nL+e/IBcm2PN7EeqJSdnoDfzAIJ9VNep <newline>++OkuE6N36B9K <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_DigiCertEVRoot[] = <newline>+    "sha1/gzF+YoVCU9bXeDGQ7JGQVumRueM="; <newline>+ <newline>+// Not public <newline>+static const char kSPKIHash_Tor1[] = <newline>+    "sha1/juNxSTv9UANmpC9kF5GKpmWNx3Y="; <newline>+static const char kSPKIHash_Tor2[] = <newline>+    "sha1/lia43lPolzSPVIq34Dw57uYcLD8="; <newline>+static const char kSPKIHash_Tor3[] = <newline>+    "sha1/rzEyQIKOh77j87n5bjWUNguXF8Y="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIICPTCCAaYCEQDNun9W8N/kvFT+IqyzcqpVMA0GCSqGSIb3DQEBAgUAMF8xCzAJ <newline>+BgNVBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE3MDUGA1UECxMuQ2xh <newline>+c3MgMSBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw05 <newline>+NjAxMjkwMDAwMDBaFw0yODA4MDEyMzU5NTlaMF8xCzAJBgNVBAYTAlVTMRcwFQYD <newline>+VQQKEw5WZXJpU2lnbiwgSW5jLjE3MDUGA1UECxMuQ2xhc3MgMSBQdWJsaWMgUHJp <newline>+bWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCBnzANBgkqhkiG9w0BAQEFAAOB <newline>+jQAwgYkCgYEA5Rm/baNWYS2ZSHH2Z965jeu3noaACpEO+jglr0aIguVzqKCbJF0N <newline>+H8xlbgyw0FaEGIeaBpsQoXPftFg5a27B9hXVqKg/qhIGjTGsf7A01480Z4gJzRQR <newline>+4k5FVmkfeAKA2txHkSm7NsljXMXg1y2He6G3MrB7MLoqLzGq7qNn2tsCAwEAATAN <newline>+BgkqhkiG9w0BAQIFAAOBgQBMP7iLxmjf7kMzDl3ppssHhE16M/+SG/Q2rdiVIjZo <newline>+EWx8QszznC7EBz8UsA9P/5CSdvnivErpj82ggAr3xSnxgiJduLHdgSOjeyUVRjB5 <newline>+FvjqBUuUfx3CHMjjt/QQQDwTw18fU+hI5Ia0e6E1sHslurjTjqs/OJ0ANACY89Fx <newline>+lA== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass1[] = <newline>+    "sha1/I0PRSKJViZuUfUYaeX7ATP7RcLc="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDhDCCAwqgAwIBAgIQL4D+I4wOIg9IZxIokYesszAKBggqhkjOPQQDAzCByjEL <newline>+MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZW <newline>+ZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNyBWZXJpU2ln <newline>+biwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJp <newline>+U2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9y <newline>+aXR5IC0gRzQwHhcNMDcxMTA1MDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCByjELMAkG <newline>+A1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp <newline>+U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNyBWZXJpU2lnbiwg <newline>+SW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2ln <newline>+biBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5 <newline>+IC0gRzQwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAASnVnp8Utpkmw4tXNherJI9/gHm <newline>+GUo9FANL+mAnINmDiWn6VMaaGF5VKmTeBvaNSjutEDxlPZCIBIngMGGzrl0Bp3ve <newline>+fLK+ymVhAIau2o970ImtTR1ZmkGxvEeA3J5iw/mjgbIwga8wDwYDVR0TAQH/BAUw <newline>+AwEB/zAOBgNVHQ8BAf8EBAMCAQYwbQYIKwYBBQUHAQwEYTBfoV2gWzBZMFcwVRYJ <newline>+aW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUj+XTGoasjY5rw8+AatRIGCx7GS4wJRYj <newline>+aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nby5naWYwHQYDVR0OBBYEFLMW <newline>+kf3upm7ktS5Jj4d4gYDs5bG1MAoGCCqGSM49BAMDA2gAMGUCMGYhDBgmYFo4e1ZC <newline>+4Kf8NoRRkSAsdk1DPcQdhCPQrNZ8NQbOzWm9kA3bbEhCHQ6qQgIxAJw9SDkjOVga <newline>+FRJZap7v1VmyHVIsmXHNxynfGyphe3HR3vPA5Q06Sqotp9iGKt0uEA== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass3_G4[] = <newline>+    "sha1/7WYxNdMb1OymFMQp4xkGn5TBJlA="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEGjCCAwICEQDsoKeLbnVqAc/EfMwvlF7XMA0GCSqGSIb3DQEBBQUAMIHKMQsw <newline>+CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZl <newline>+cmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWdu <newline>+LCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT <newline>+aWduIENsYXNzIDQgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp <newline>+dHkgLSBHMzAeFw05OTEwMDEwMDAwMDBaFw0zNjA3MTYyMzU5NTlaMIHKMQswCQYD <newline>+VQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT <newline>+aWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJ <newline>+bmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWdu <newline>+IENsYXNzIDQgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg <newline>+LSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAK3LpRFpxlmr8Y+1 <newline>+GQ9Wzsy1HyDkniYlS+BzZYlZ3tCD5PUPtbut8XzoIfzk6AzufEUiGXaStBO3IFsJ <newline>++mGuqPKljYXCKtbeZjbSmwL0qJJgfJxptI8kHtCGUvYynEFYHiK9zUVilQhu0Gbd <newline>+U6LM8BDcVHOLBKFGMzNcF0C5nk3T875Vg+ixiY5afJqWIpA7iCXy0lOIAgwLePLm <newline>+NxdLMEYH5IBtptiWLugs+BGzOA1mppvqySNb247i8xOOGlktqgLw7KSHZtzBP/XY <newline>+ufTsgsbSPZUd5cBPhMnZo0QoBmrXRazwa2rvTl/4EYIeOGM0ZlDUPpNz+jDDZq3/ <newline>+ky2X7wMCAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAj/ola09b5KROJ1WrIhVZPMq1 <newline>+CtRK26vdoV9TxaBXOcLORyu+OshWv8LZJxA6sQU8wHcxuzrTBXttmhwwjIDLk5Mq <newline>+g6sFUYICABFna/OIYUdfA5PVWw3g8dShMjWFsjrbsIKr0csKvE+MW8VLADsfKoKm <newline>+fjaF3H48ZwC15DtS4KjrXRX5xm3wrR0OhbepmnMUWluPQSjA1egtTaRezarZ7c7c <newline>+2NU8Qh0XwRJdRTjDOPP8hS6DRkiy1yBfkjaP53kPmF6Z6PDQpLv1U70qzlmwr25/ <newline>+bLvSHgCwIe34QWKCudiyxLtGUPMxxY8BqHTr9Xgn2uf3ZkPznoM+IKrDNWCRzg== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass4_G3[] = <newline>+    "sha1/PANDaGiVHPNpKri0Jtq6j+ki5b0="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEGjCCAwICEQCLW3VWhFSFCwDPrzhIzrGkMA0GCSqGSIb3DQEBBQUAMIHKMQsw <newline>+CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZl <newline>+cmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWdu <newline>+LCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT <newline>+aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp <newline>+dHkgLSBHMzAeFw05OTEwMDEwMDAwMDBaFw0zNjA3MTYyMzU5NTlaMIHKMQswCQYD <newline>+VQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT <newline>+aWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJ <newline>+bmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWdu <newline>+IENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg <newline>+LSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAN2E1Lm0+afY8wR4 <newline>+nN493GwTFtl63SRRZsDHJlkNrAYIwpTRMx/wgzUfbhvI3qpuFU5UJ+/EbRrsC+MO <newline>+8ESlV8dAWB6jRx9x7GD2bZTIGDnt/kIYVt/kTEkQeE4BdjVjEjbdZrwBBDajVWjV <newline>+ojYJrKshJlQGrT/KFOCsyq0GHZXi+J3x4GD/wn91K0zM2v6HmSHquv4+VNfSWXjb <newline>+PG7PoBMAGrgnoeS+Z5bKoMWznN3JdZ7rMJpfo83ZrngZPyPpXNspva1VyBtUjGP2 <newline>+6KbqxzcSXKMpHgLZ2x87tNcPVkeBFQRKr4Mn0cVYiMHd9qqnoxjaaKptEVHhv2Vr <newline>+n5Z20T0CAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAq2aN17O6x5q25lXQBfGfMY1a <newline>+qtmqRiYPce2lrVNWYgFHKkTp/j90CxObufRNG7LRX7K20ohcs5/Ny9Sn2WCVhDr4 <newline>+wTcdYcrnsMXlkdpUpqwxga6X3s0IrLjAl4B/bnKk52kTlWUfxJM8/XmPBNQ+T+r3 <newline>+ns7NZ3xPZQL/kYVUc8f/NveGLezQXk//EZ9yBta4GvFMDSZl4kSAHsef493oCtrs <newline>+pSCAaWihT37ha88HQfqDjrw43bAuEbFrskLMmrz5SCJ5ShkPshw+IHTZasO+8ih4 <newline>+E1Z5T21Q6huwtVexN2ZYI/PcD98Kh8TvhgXVOBRgmaNL3gaWcSzy27YfpO8/7g== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass1_G3[] = <newline>+    "sha1/VRmyeKyygdftp6vBg5nDu2kEJLU="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEGTCCAwECEGFwy0mMX5hFKeewptlQW3owDQYJKoZIhvcNAQEFBQAwgcoxCzAJ <newline>+BgNVBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVy <newline>+aVNpZ24gVHJ1c3QgTmV0d29yazE6MDgGA1UECxMxKGMpIDE5OTkgVmVyaVNpZ24s <newline>+IEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25seTFFMEMGA1UEAxM8VmVyaVNp <newline>+Z24gQ2xhc3MgMiBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0 <newline>+eSAtIEczMB4XDTk5MTAwMTAwMDAwMFoXDTM2MDcxNjIzNTk1OVowgcoxCzAJBgNV <newline>+BAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNp <newline>+Z24gVHJ1c3QgTmV0d29yazE6MDgGA1UECxMxKGMpIDE5OTkgVmVyaVNpZ24sIElu <newline>+Yy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25seTFFMEMGA1UEAxM8VmVyaVNpZ24g <newline>+Q2xhc3MgMiBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAt <newline>+IEczMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArwoNwtUs22e5LeWU <newline>+J92lvuCwTY+zYVY81nzD9M0+hsuiiOLh2KRpxbXiv8GmR1BeRjmL1Za6tW8UvxDO <newline>+JxOeBUebMXoT2B/Z0wI3i60sR/COgQanDTAM6/c8DyAd3HJG7qUCyFvDyVZpTMUY <newline>+wZF7C9UTAJu878NIPkZgIIUq1ZC2zYugzDLdt/1AVbJQHFauzI13TccgTacxdu9o <newline>+koqQHgiBVrKtaaNS0MscxCM9H5n+TOgWY47GCI72MfbS+uV23bUckqNJzc0BzWjN <newline>+qWm6o+sdDZykIKbBoMXRRkwXbdKsZj+WjOCE1Db/IlnF+RFgqF8EffIa9iVCYQ/E <newline>+Srg+iQIDAQABMA0GCSqGSIb3DQEBBQUAA4IBAQA0JhU8wI1NQ0kdvekhktdmnLfe <newline>+xbjQ5F1fdiLAJvmEOjr5jLX77GDx6M4EsMjdpwOPMPOY36TmpDHf0xwLRtxyID+u <newline>+7gU8pDM/CzmscHhzS5kr3zDCVLCoO1Wh/hYozUK9dG6A2ydEp85EXdQbkJgNHkKU <newline>+sQAsBNB0owIFImNjzYO1+8FtYmtpdf1dcEG59b98377BMnMiIYtYgXsVkXq642RI <newline>+sH/7NiXaldDxJBQX3RiAa0YjOVT1jmIJBB2UkKab5iXiQkWquJCtvgiPqQtCGJTP <newline>+cjnhsUPgKM+351psE2tJs//jGHyJizNdrDPXp/naOlXJWBD5qu9ats9LS98q <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass2_G3[] = <newline>+    "sha1/Wr7Fddyu87COJxlD/H8lDD32YeM="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDAjCCAmsCEH3Z/gfPqB63EHln+6eJNMYwDQYJKoZIhvcNAQEFBQAwgcExCzAJ <newline>+BgNVBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE8MDoGA1UECxMzQ2xh <newline>+c3MgMyBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEcy <newline>+MTowOAYDVQQLEzEoYykgMTk5OCBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp <newline>+emVkIHVzZSBvbmx5MR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMB4X <newline>+DTk4MDUxODAwMDAwMFoXDTI4MDgwMTIzNTk1OVowgcExCzAJBgNVBAYTAlVTMRcw <newline>+FQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE8MDoGA1UECxMzQ2xhc3MgMyBQdWJsaWMg <newline>+UHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEcyMTowOAYDVQQLEzEo <newline>+YykgMTk5OCBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5 <newline>+MR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMIGfMA0GCSqGSIb3DQEB <newline>+AQUAA4GNADCBiQKBgQDMXtERXVxp0KvTuWpMmR9ZmDCOFoUgRm1HP9SFIIThbbP4 <newline>+pO0M8RcPO/mn+SXXwc+EY/J8Y8+iR/LGWzOOZEAEaMGAuWQcRXfH2G71lSk8UOg0 <newline>+13gfqLptQ5GVj0VXXn7F+8qkBOvqlzdUMG+7AUcyM83cV5tkaWH4mx0ciU9cZwID <newline>+AQABMA0GCSqGSIb3DQEBBQUAA4GBAFFNzb5cy5gZnBWyATl4Lk0PZ3BwmcYQWpSk <newline>+U01UbSuvDV1Ai2TT1+7eVmGSX6bEHRBhNtMsJzzoKQm5EWR0zLVznxxIqbxhAe7i <newline>+F6YM40AIOw7n60RzKprxaZLvcRTDOaxxp5EJb+RxBrO6WVcmeQD2+A2iMzAo1KpY <newline>+oJ2daZH9 <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass3_G2[] = <newline>+    "sha1/GiG0lStik84Ys2XsnA6TTLOB5tQ="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDAzCCAmwCEQC5L2DMiJ+hekYJuFtwbIqvMA0GCSqGSIb3DQEBBQUAMIHBMQsw <newline>+CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xPDA6BgNVBAsTM0Ns <newline>+YXNzIDIgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBH <newline>+MjE6MDgGA1UECxMxKGMpIDE5OTggVmVyaVNpZ24sIEluYy4gLSBGb3IgYXV0aG9y <newline>+aXplZCB1c2Ugb25seTEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29yazAe <newline>+Fw05ODA1MTgwMDAwMDBaFw0yODA4MDEyMzU5NTlaMIHBMQswCQYDVQQGEwJVUzEX <newline>+MBUGA1UEChMOVmVyaVNpZ24sIEluYy4xPDA6BgNVBAsTM0NsYXNzIDIgUHVibGlj <newline>+IFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHMjE6MDgGA1UECxMx <newline>+KGMpIDE5OTggVmVyaVNpZ24sIEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25s <newline>+eTEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29yazCBnzANBgkqhkiG9w0B <newline>+AQEFAAOBjQAwgYkCgYEAp4gBIXQs5xoD8JjhlzwPIQjxnNuX6Zr8wgQGE75fUsjM <newline>+HiwSViy4AWkszJkfrbCWrnkE8hM5wXuYuggs6MKEEyyqaekJ9MepAqRCwiNPStjw <newline>+DqL7MWzJ5m+ZJwf15vRMeJ5t60aG+rmGyVTyssSv1EYcWskVMP8NbPUtDm3Of3cC <newline>+AwEAATANBgkqhkiG9w0BAQUFAAOBgQByLvl/0fFx+8Se9sVeUYpAmLho+Jscg9ji <newline>+nb3/7aHmZuovCfTK1+qlK5X2JGCGTUQug6XELaDTrnhpb3LabK4I8GOSN+a7xDAX <newline>+rXfMSTWqz9iP0b63GJZHc2pUIjRkLbYWm1lbtFFZOrMLFPQS32eg9K0yZF6xRnIn <newline>+jBJ7xUS0rg== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass2_G2[] = <newline>+    "sha1/Eje6RRfurSkm/cHN/r7t8t7ZFFw="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIE0zCCA7ugAwIBAgIQGNrRniZ96LtKIVjNzGs7SjANBgkqhkiG9w0BAQUFADCB <newline>+yjELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL <newline>+ExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJp <newline>+U2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxW <newline>+ZXJpU2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0 <newline>+aG9yaXR5IC0gRzUwHhcNMDYxMTA4MDAwMDAwWhcNMzYwNzE2MjM1OTU5WjCByjEL <newline>+MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZW <newline>+ZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJpU2ln <newline>+biwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJp <newline>+U2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9y <newline>+aXR5IC0gRzUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1 <newline>+nmAMqudLO07cfLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKzj/i5Vbex <newline>+t0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2IIPVQT60nKWVSFJuUrjxuf6/WhkcIz <newline>+SdhDY2pSS9KP6HBRTdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY5fQG <newline>+BO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9r911kTMZHRxAy3QkGSGT2RT+ <newline>+rCpSx4/VBEnkjWNHiDxpg8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/ <newline>+NIeWiu5T6CUVAgMBAAGjgbIwga8wDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8E <newline>+BAMCAQYwbQYIKwYBBQUHAQwEYTBfoV2gWzBZMFcwVRYJaW1hZ2UvZ2lmMCEwHzAH <newline>+BgUrDgMCGgQUj+XTGoasjY5rw8+AatRIGCx7GS4wJRYjaHR0cDovL2xvZ28udmVy <newline>+aXNpZ24uY29tL3ZzbG9nby5naWYwHQYDVR0OBBYEFH/TZafC3ey78DAJ80M5+gKv <newline>+MzEzMA0GCSqGSIb3DQEBBQUAA4IBAQCTJEowX2LP2BqYLz3q3JktvXf2pXkiOOzE <newline>+p6B4Eq1iDkVwZMXnl2YtmAl+X6/WzChl8gGqCBpH3vn5fJJaCGkgDdk+bW48DW7Y <newline>+5gaRQBi5+MHt39tBquCWIMnNZBU4gcmU7qKEKQsTb47bDN0lAtukixlE0kF6BWlK <newline>+WE9gyn6CagsCqiUXObXbf+eEZSqVir2G3l6BFoMtEMze/aiCKm0oHw0LxOXnGiYZ <newline>+4fQRbxC1lfznQgUy286dUV4otp6F01vvpX1FQHKOtw5rDgb7MzVIcbidJ4vEZV8N <newline>+hnacRHr2lVz2XTIIM6RUthg/aFzyQkqFOFSDX9HoLPKsEdao7WNq <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass3_G5[] = <newline>+    "sha1/sYEIGhmkwJQf+uiVKMEkyZs0rMc="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEuTCCA6GgAwIBAgIQQBrEZCGzEyEDDrvkEhrFHTANBgkqhkiG9w0BAQsFADCB <newline>+vTELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL <newline>+ExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwOCBWZXJp <newline>+U2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MTgwNgYDVQQDEy9W <newline>+ZXJpU2lnbiBVbml2ZXJzYWwgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAe <newline>+Fw0wODA0MDIwMDAwMDBaFw0zNzEyMDEyMzU5NTlaMIG9MQswCQYDVQQGEwJVUzEX <newline>+MBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0 <newline>+IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA4IFZlcmlTaWduLCBJbmMuIC0gRm9y <newline>+IGF1dGhvcml6ZWQgdXNlIG9ubHkxODA2BgNVBAMTL1ZlcmlTaWduIFVuaXZlcnNh <newline>+bCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEF <newline>+AAOCAQ8AMIIBCgKCAQEAx2E3XrEBNNti1xWb/1hajCMj1mCOkdeQmIN65lgZOIzF <newline>+9uVkhbSicfvtvbnazU0AtMgtc6XHaXGVHzk8skQHnOgO+k1KxCHfKWGPMiJhgsWH <newline>+H26MfF8WIFFE0XBPV+rjHOPMee5Y2A7Cs0WTwCznmhcrewA3ekEzeOEz4vMQGn+H <newline>+LL729fdC4uW/h2KJXwBL38Xd5HVEMkE6HnFuacsLdUYI0crSK5XQz/u5QGtkjFdN <newline>+/BMReYTtXlT2NJ8IAfMQJQYXStrxHXpma5hgZqTZ79IugvHw7wnqRMkVauIDbjPT <newline>+rJ9VAMf2CGqUuV/c4DPxhGD5WycRtPwW8rtWaoAljQIDAQABo4GyMIGvMA8GA1Ud <newline>+EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMG0GCCsGAQUFBwEMBGEwX6FdoFsw <newline>+WTBXMFUWCWltYWdlL2dpZjAhMB8wBwYFKw4DAhoEFI/l0xqGrI2Oa8PPgGrUSBgs <newline>+exkuMCUWI2h0dHA6Ly9sb2dvLnZlcmlzaWduLmNvbS92c2xvZ28uZ2lmMB0GA1Ud <newline>+DgQWBBS2d/ppSEefUxLVwuoHMnYH0ZcHGTANBgkqhkiG9w0BAQsFAAOCAQEASvj4 <newline>+sAPmLGd75JR3Y8xuTPl9Dg3cyLk1uXBPY/ok+myDjEedO2Pzmvl2MpWRsXe8rJq+ <newline>+seQxIcaBlVZaDrHC1LGmWazxY8u4TB1ZkErvkBYoH1quEPuBUDgMbMzxPcP1Y+Oz <newline>+4yHJJDnp/RVmRvQbEdBNc6N9Rvk97ahfYtTxP/jgdFcrGJ2BtMQo2pSXpXDrrB2+ <newline>+BxHw1dvd5Yzw1TKwg+ZX4o+/vqGqvz0dtdQ46tewXDpPaj+PwGZsY6rp2aQW9IHR <newline>+lRQOfc2VNNnSj3BzgXucfr2YYdhFh5iQxeuGMMY1v/D/w1WIg0vvBZIGcfK4mJO3 <newline>+7M2CYfE45k+XmCpajQ== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignUniversal[] = <newline>+    "sha1/u8I+KQuzKHcdrT6iTb30I70GsD0="; <newline>+ <newline>+// Not public <newline>+static const char kSPKIHash_Twitter1[] = <newline>+    "sha1/Vv7zwhR9TtOIN/29MFI4cgHld40="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDZjCCAk6gAwIBAgIBATANBgkqhkiG9w0BAQUFADBEMQswCQYDVQQGEwJVUzEW <newline>+MBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEdMBsGA1UEAxMUR2VvVHJ1c3QgR2xvYmFs <newline>+IENBIDIwHhcNMDQwMzA0MDUwMDAwWhcNMTkwMzA0MDUwMDAwWjBEMQswCQYDVQQG <newline>+EwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEdMBsGA1UEAxMUR2VvVHJ1c3Qg <newline>+R2xvYmFsIENBIDIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDvPE1A <newline>+PRDfO1MA4Wf+lGAVPoWI8YkNkMgoI5kF6CsgncbzYEbYwbLVjDHZ3CB5JIG/NTL8 <newline>+Y2nbsSpr7iFY8gjpeMtvy/wWUsiRxP89c96xPqfCfWbB9X5SJBri1WeR0IIQ13hL <newline>+TytCOb1kLUCgsBDTOEhGiKEMuzozKmKY+wCdE1l/bztyqu6mD4b5BWHqZ38MN5aL <newline>+5mkWRxHCJ1kDs6ZgwiFAVvqgx306E+PsV8ez1q6diYD3Aecs9pYrEw15LNnA5IZ7 <newline>+S4wMcoKK+xfNAGw6EzywhIdLFnopsk/bHdQL82Y3vdj2V7teJHq4PIu5+pIaGoSe <newline>+2HSPqht/XvT+RSIhAgMBAAGjYzBhMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYE <newline>+FHE4NvICMVNHK266ZUapEBVYIAUJMB8GA1UdIwQYMBaAFHE4NvICMVNHK266ZUap <newline>+EBVYIAUJMA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG9w0BAQUFAAOCAQEAA/e1K6td <newline>+EPx7srJerJsOflN4WT5CBP51o62sgU7XAotexC3IUnbHLB/8gTKY0UvGkpMzNTEv <newline>+/NgdRN3ggX+d6YvhZJFiCzkIjKx0nVnZellSlxG5FntvRdOW2TF9AjYPnDtuzywN <newline>+A0ZF66D0f0hExghAzN4bcLUprbqLOzRldRtxIR0sFAqwlpW41uryZfspuk/qkZN0 <newline>+abby/+Ea0AzRdoXLiiW9l14sbxWZJue2Kf8i7MkCx1YAzUm5s2x7UwQa4qjJqhIF <newline>+I8LO57sEAszAR6LkxCkvW0VXiVHuPOtSCP8HNR6fNWpHSlaY0VqFH4z1Ir+rzoPz <newline>+4iIprn2DQKi6bA== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustGlobal2[] = <newline>+    "sha1/cTg28gIxU0crbrplRqkQFVggBQk="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIFaDCCA1CgAwIBAgIBATANBgkqhkiG9w0BAQUFADBFMQswCQYDVQQGEwJVUzEW <newline>+MBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEeMBwGA1UEAxMVR2VvVHJ1c3QgVW5pdmVy <newline>+c2FsIENBMB4XDTA0MDMwNDA1MDAwMFoXDTI5MDMwNDA1MDAwMFowRTELMAkGA1UE <newline>+BhMCVVMxFjAUBgNVBAoTDUdlb1RydXN0IEluYy4xHjAcBgNVBAMTFUdlb1RydXN0 <newline>+IFVuaXZlcnNhbCBDQTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAKYV <newline>+VaCjxuAfjJ0hUNfBvitbtaSeodlyWL0AG0y/YckUHUWCq8YdgNY96xCcOq9tJPi8 <newline>+cQGeBvV8Xx7BDlXKg5pZMK4ZyzBIle0iN430SppyZj6tlcDgFgDgEB8rMQ7XlFTT <newline>+QjOgNB0eRXbdT8oYN+yFFXoZCPzVx5zw8qkuEKmS5j1YPakWaDwvdSEYfyh3peFh <newline>+F7em6fgemdtzbvQKoiFs7tqqhZJmr/Z6a4LauiIINQ/PQvE1+mrufislzDoR5G2v <newline>+c7J2Ha3QsnhnGqQ5HFELZ1aD/ThdDc7d8Lsrlh/eezJS/R27tQahsiFepdaVaH/w <newline>+mZ7cRQg+59IJDTWU3YBOU5fXtQlEIGQWFwMCTFMNaN7VqnJNk22CDtucvc+081xd <newline>+VHppCZbW2xHBjXWotM85yM48vCR85mLK4b19p71XZQvk/iXttmkQ3CgaRr0BHdCX <newline>+teGYO8A3ZNY9lO4L4fUorgtWv3GLIylBjobFS1J72HGrH4oVpjuDWtdYAVHGTEHZ <newline>+f9hBZ3KiKN9gg6meyHv8U3NyWfWTehd2Ds735VzZC1U0oqpbtWpU5xPKV+yXbfRe <newline>+Bi9Fi1jUIxaS5BZuKGNZMN9QAZxjiRqf2xeUgnA3wySemkfWWspOqGmJch+RbNt+ <newline>+nhutxx9z3SxPGWX9f5NAEC7S8O08ni4oPmkmM8V7AgMBAAGjYzBhMA8GA1UdEwEB <newline>+/wQFMAMBAf8wHQYDVR0OBBYEFNq7LqqwDLiIJlF0XG0D08DYj3rWMB8GA1UdIwQY <newline>+MBaAFNq7LqqwDLiIJlF0XG0D08DYj3rWMA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG <newline>+9w0BAQUFAAOCAgEAMXjmx7XfuJRAyXHEqDXsRh3ChfMoWIawC/yOsjmPRFWrZIRc <newline>+aanQmjg8+uUfNeVE44B5lGiku8SfPeE0zTBGi1QrlaXv9z+ZhP015s8xxtxqv6fX <newline>+IwjhmF7DWgh2qaavdy+3YL1ERmrvl/9zlcGO6JP7/TG37FcREUWbMPEaiDnBTzyn <newline>+ANXH/KttgCJwpQzgXQQpAvvLoJHRfNbDflDVnVi+QTjruXU8FdmbyUqDWcDaU/0z <newline>+uzYYm4UPFd3uLax2k7nZAY1IEKj79TiG8dsKxr2EoyNB3tZ3b4XUhRxQ4K5RirqN <newline>+Pnbiucon8l+f725ZDQbYKxek0nxru18UGkiPGkzns0ccjkxFKyDuSN/n3QmOGKja <newline>+QI2SJhFTYXNd673nxE0pN2HrrDktZy4W1vUAg4WhzH92xH3kt0tm7wNFYGm2DFKW <newline>+koRepqO1pD4r2czYG0eq8kTaT/kD6PAUyz/zg97QwVTjt+gKN02LIFkDMBmhLMi9 <newline>+ER/frslKxfMnZmaGrGiR/9nmUxwPi1xpZQomyB40w11Re9epnAahNt3ViZS82eQt <newline>+DF4JbAiXfKM9fJP/P6EUp8+1Xevb2xzEdt+Iub1FBZUbrvxGakyvSOPOrg/Sfuvm <newline>+bJxPgWp6ZKy7PtXny3YuxadIwVyQD8vIP/rmMuGNG2+k5o7Y+SlIis5z/iw= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustUniversal[] = <newline>+    "sha1/h+hbY1PGI6MSjLD/u/VR/lmADiI="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIFbDCCA1SgAwIBAgIBATANBgkqhkiG9w0BAQUFADBHMQswCQYDVQQGEwJVUzEW <newline>+MBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEgMB4GA1UEAxMXR2VvVHJ1c3QgVW5pdmVy <newline>+c2FsIENBIDIwHhcNMDQwMzA0MDUwMDAwWhcNMjkwMzA0MDUwMDAwWjBHMQswCQYD <newline>+VQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEgMB4GA1UEAxMXR2VvVHJ1 <newline>+c3QgVW5pdmVyc2FsIENBIDIwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC <newline>+AQCzVFLByT7y2dyxUxpZKeexw0Uo5dfR7cXFS6GqdHtXr0om/Nj1XqduGdt0DE81 <newline>+WzILAePb63p3NeqqWuDW6KFXlPCQo3RWlEQwAx5cTiuFJnSCegx2oG9NzkEtoBUG <newline>+FF+3Qs17j1hhNNwqCPkuwwGmIkQcTAeC5lvO0Ep8BNMZcyfwqph/Lq9O64ceJHdq <newline>+XbboW0W63MOhBW9Wjo8QJqVJwy7XQYci4E+GymC16qFjwAGXEHm9ADwSbSsVsaxL <newline>+se4YuU6W3Nx2/zu+z18DwPw76L5GG//aQMJS9/7jOvdqdzXQ2o3rXhhqMcceujwb <newline>+KNZrVMaqW9eiLBsZzKIC9ptZvTdrhrVtgrrY6slWvKk2WP0+GfPtDCapkzj4T8Fd <newline>+IgbQl+rhrcZV4IErKIM6+vR7IVEAvlI4zs1meaj0gVbi0IMJR1FbUGrP20gaXT73 <newline>+y/Zl92zxlfgCOzJWgjl6W70viRu/obTo/3+NjN8D8WBOWBFM66M/ECuDmgFz2ZRt <newline>+hAAnZqzwcEAJQpKtT5MNYQlRJNiS1QuUYbKHsu3/mjX/hVTK7URDrBs8FmtISgoc <newline>+QIgfksILAAX/8sgCSqSqqcyZlpwvWOB94b67B9xfBHJcMTTD7F8t4D1kkCLm0ey4 <newline>+Lt1ZrtmhN79UNdxzMk+MBB4zsslG8dhcyFVQyWi9qLo2CQIDAQABo2MwYTAPBgNV <newline>+HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR281Xh+qQ2+/CfXGJx7Tz0RzgQKzAfBgNV <newline>+HSMEGDAWgBR281Xh+qQ2+/CfXGJx7Tz0RzgQKzAOBgNVHQ8BAf8EBAMCAYYwDQYJ <newline>+KoZIhvcNAQEFBQADggIBAGbBxiPz2eAubl/oz66wsCVNK/g7WJtAJDday6sWSf+z <newline>+dXkzoS9tcBc0kf5nfo/sm+VegqlVHy/c1FEHEv6sFj4sNcZj/NwQ6w2jqtB8zNHQ <newline>+L1EuxBRa3ugZ4T7GzKQp5y6EqgYweHZUcyiYWTjgAA1i00J9IZ+uPTqM1fp3DRgr <newline>+Fg5fNuH8KrUwJM/gYwx7WBr+mbpCErGR9Hxo4sjoryzqyX6uuyo9DRXcNJW2GHSo <newline>+ag/HtPQTxORb7QrSpJdMKu0vbBKJPfEncKpqA1Ihn0CoZ1Dy81of398j9tx4TuaY <newline>+T1U6U+Pv8vSfx3zYWK8pIpe44L2RLrB27FcRz+8pRPPphXpgY+RdM4kX2TGq2tbz <newline>+GDVyz4crL2MjhF2EjD9XoIj8mZEoJmmZ1I+XRL6O1UixpCgp8RW04eWe3fiPpm8m <newline>+1wk8OhwRDqZsN/etRIcsKMfYdIKz0G9KV7s1KSegi+ghp4dkNl3M2Basx7InQJJV <newline>+OCiNUW7dFGdTbHFcJoRNdVq2fmBWqU2t+5sel/MN2dKXVHfaPRK34B7vCAas+YWH <newline>+6aLcr34YEoP9VhdBLtUpgn2Z9DH2canPLAEnpQW5qrJITirvn5NSUZU8UnOOVkwX <newline>+QMAJKOSLakhT2+zNVVXxxvjpoixMptEmX36vWkzaH6byHCx+rgIW0lbQL1dTR+iS <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustUniversal2[] = <newline>+    "sha1/Xk9ThoXdT57KX9wNRW99UbHcm3s="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIICrjCCAjWgAwIBAgIQPLL0SAoA4v7rJDteYD7DazAKBggqhkjOPQQDAzCBmDEL <newline>+MAkGA1UEBhMCVVMxFjAUBgNVBAoTDUdlb1RydXN0IEluYy4xOTA3BgNVBAsTMChj <newline>+KSAyMDA3IEdlb1RydXN0IEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25seTE2 <newline>+MDQGA1UEAxMtR2VvVHJ1c3QgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0 <newline>+eSAtIEcyMB4XDTA3MTEwNTAwMDAwMFoXDTM4MDExODIzNTk1OVowgZgxCzAJBgNV <newline>+BAYTAlVTMRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMTkwNwYDVQQLEzAoYykgMjAw <newline>+NyBHZW9UcnVzdCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxNjA0BgNV <newline>+BAMTLUdlb1RydXN0IFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBH <newline>+MjB2MBAGByqGSM49AgEGBSuBBAAiA2IABBWx6P0DFUPlrOuHNxFi79KDNlJ9RVcL <newline>+So17VDs6bl8VAsBQps8lL33KSLjHUGMcKiEIfJo22Av+0SbFWDEwKCXzXV2juLal <newline>+tJLtbCyf691DiaI8S0iRHVDsJt/WYC69IaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAO <newline>+BgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFBVfNVdRVfslsq0DafwBo/q+EVXVMAoG <newline>+CCqGSM49BAMDA2cAMGQCMGSWWaboCd6LuvpaiIjwH5HTRqjySkwCY/tsXzjbLkGT <newline>+qQ7mndwxHLKgpxgceeHHNgIwOlavmnRs9vuD4DPTCF+hnMJbn0bWtsuRBmOiBucz <newline>+rD6ogRLQy7rQkgu2npaqBA+K <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustPrimary_G2[] = <newline>+    "sha1/vb6nG6txV/nkddlU0rcngBqCJoI="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIID/jCCAuagAwIBAgIQFaxulBmyeUtB9iepwxgPHzANBgkqhkiG9w0BAQsFADCB <newline>+mDELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUdlb1RydXN0IEluYy4xOTA3BgNVBAsT <newline>+MChjKSAyMDA4IEdlb1RydXN0IEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25s <newline>+eTE2MDQGA1UEAxMtR2VvVHJ1c3QgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhv <newline>+cml0eSAtIEczMB4XDTA4MDQwMjAwMDAwMFoXDTM3MTIwMTIzNTk1OVowgZgxCzAJ <newline>+BgNVBAYTAlVTMRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMTkwNwYDVQQLEzAoYykg <newline>+MjAwOCBHZW9UcnVzdCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxNjA0 <newline>+BgNVBAMTLUdlb1RydXN0IFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg <newline>+LSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANziXmJYHTNXOTIz <newline>++uvLh4yn1ErdBojqZI4xmKU4kB6Yzy5jK/BGvESyiaHAKAxJcCGVn2TAppMSAmUm <newline>+hsalifD614SgcK9PGpc/BkTVyetyEH3kMSj7HGHmKAdEc5IiaacDiGydY8hS2pgn <newline>+5whMcD60yRLBxWeDXTPzAxHsatBT4tG6NmCUgLthY2xbF37fQJQeqw3CIShwiP/W <newline>+JmxsYAQlTlV+fe+/lEjetx3dcI0FX4ilm/LC7urRQEFtYjgdVgbFA0dRIBn8exAL <newline>+DmKudlW/X3e+PkkBUz2YJQN2JFodtNuJ6nnltrM7P7pMKEF/BqxqjsHQ9gUdfeZC <newline>+huOl1UcCAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYw <newline>+HQYDVR0OBBYEFMR5yo6hTgMdHNxr2zFblD4/MH8tMA0GCSqGSIb3DQEBCwUAA4IB <newline>+AQAtxRPPVoB7eni9n64smefv2t+UXglpp+duaIy9cr5HqQ6XErhK8WTTOd8lNNTB <newline>+zU6B8A8ExCSzNJbGpqow32hhc9f5joWJ7w5elShKKiePEI4ufIbEAp7aDHdlDkQN <newline>+kv39sxY2+hENHYwOB4lqKVb3cvTdFZx3NWZXqxNT2I7BQMXXExZacse3aQHEerGD <newline>+AWh9jUGhlBjBJVz88P6DAod8DQ3PLghcSkANPuyBYeYk28rgDi0Hsj5W3I31QYUH <newline>+SJsMC8tJP33st/3LjWeJGqvtux6jAAgIFyqCXDFdRootD4abdNlF+9RAsXqqaC2G <newline>+spki4cErx5z481+oghLrGREt <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustPrimary_G3[] = <newline>+    "sha1/nKmNAK90Dd2BgNITRaWLjy6UONY="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEKjCCAxKgAwIBAgIEOGPe+DANBgkqhkiG9w0BAQUFADCBtDEUMBIGA1UEChMLRW50cnVzdC5u <newline>+ZXQxQDA+BgNVBAsUN3d3dy5lbnRydXN0Lm5ldC9DUFNfMjA0OCBpbmNvcnAuIGJ5IHJlZi4gKGxp <newline>+bWl0cyBsaWFiLikxJTAjBgNVBAsTHChjKSAxOTk5IEVudHJ1c3QubmV0IExpbWl0ZWQxMzAxBgNV <newline>+BAMTKkVudHJ1c3QubmV0IENlcnRpZmljYXRpb24gQXV0aG9yaXR5ICgyMDQ4KTAeFw05OTEyMjQx <newline>+NzUwNTFaFw0yOTA3MjQxNDE1MTJaMIG0MRQwEgYDVQQKEwtFbnRydXN0Lm5ldDFAMD4GA1UECxQ3 <newline>+d3d3LmVudHJ1c3QubmV0L0NQU18yMDQ4IGluY29ycC4gYnkgcmVmLiAobGltaXRzIGxpYWIuKTEl <newline>+MCMGA1UECxMcKGMpIDE5OTkgRW50cnVzdC5uZXQgTGltaXRlZDEzMDEGA1UEAxMqRW50cnVzdC5u <newline>+ZXQgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgKDIwNDgpMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A <newline>+MIIBCgKCAQEArU1LqRKGsuqjIAcVFmQqK0vRvwtKTY7tgHalZ7d4QMBzQshowNtTK91euHaYNZOL <newline>+Gp18EzoOH1u3Hs/lJBQesYGpjX24zGtLA/ECDNyrpUAkAH90lKGdCCmziAv1h3edVc3kw37XamSr <newline>+hRSGlVuXMlBvPci6Zgzj/L24ScF2iUkZ/cCovYmjZy/Gn7xxGWC4LeksyZB2ZnuU4q941mVTXTzW <newline>+nLLPKQP5L6RQstRIzgUyVYr9smRMDuSYB3Xbf9+5CFVghTAp+XtIpGmG4zU/HoZdenoVve8AjhUi <newline>+VBcAkCaTvA5JaJG/+EfTnZVCwQ5N328mz8MYIWJmQ3DW1cAH4QIDAQABo0IwQDAOBgNVHQ8BAf8E <newline>+BAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUVeSB0RGAvtiJuQijMfmhJAkWuXAwDQYJ <newline>+KoZIhvcNAQEFBQADggEBADubj1abMOdTmXx6eadNl9cZlZD7Bh/KM3xGY4+WZiT6QBshJ8rmcnPy <newline>+T/4xmf3IDExoU8aAghOY+rat2l098c5u9hURlIIM7j+VrxGrD9cv3h8Dj1csHsm7mhpElesYT6Yf <newline>+zX1XEC+bBAlahLVu2B064dae0Wx5XnkcFMXj0EyTO2U87d89vqbllRrDtRnDvV5bu/8j72gZyxKT <newline>+J1wDLW8w0B62GqzeWvfRqqgnpv55gcR5mTNXuhKwqeBCbJPKVt7+bYQLCIt+jerXmCHG8+c8eS9e <newline>+nNFMFY3h7CI3zJpDC5fcgJCNs2ebb0gIFVbPv/ErfF6adulZkMV8gzURZVE= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Entrust_2048[] = <newline>+    "sha1/VeSB0RGAvtiJuQijMfmhJAkWuXA="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEkTCCA3mgAwIBAgIERWtQVDANBgkqhkiG9w0BAQUFADCBsDELMAkGA1UEBhMC <newline>+VVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xOTA3BgNVBAsTMHd3dy5lbnRydXN0 <newline>+Lm5ldC9DUFMgaXMgaW5jb3Jwb3JhdGVkIGJ5IHJlZmVyZW5jZTEfMB0GA1UECxMW <newline>+KGMpIDIwMDYgRW50cnVzdCwgSW5jLjEtMCsGA1UEAxMkRW50cnVzdCBSb290IENl <newline>+cnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTA2MTEyNzIwMjM0MloXDTI2MTEyNzIw <newline>+NTM0MlowgbAxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1FbnRydXN0LCBJbmMuMTkw <newline>+NwYDVQQLEzB3d3cuZW50cnVzdC5uZXQvQ1BTIGlzIGluY29ycG9yYXRlZCBieSBy <newline>+ZWZlcmVuY2UxHzAdBgNVBAsTFihjKSAyMDA2IEVudHJ1c3QsIEluYy4xLTArBgNV <newline>+BAMTJEVudHJ1c3QgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCCASIwDQYJ <newline>+KoZIhvcNAQEBBQADggEPADCCAQoCggEBALaVtkNC+sZtKm9I35RMOVcF7sN5EUFo <newline>+Nu3s/poBj6E4KPz3EEZmLk0eGrEaTsbRwJWIsMn/MYszA9u3g3s+IIRe7bJWKKf4 <newline>+4LlAcTfFy0cOlypowCKVYhXbR9n10Cv/gkvJrT7eTNuQgFA/CYqEAOwwCj0Yzfv9 <newline>+KlmaI5UXLEWeH25DeW0MXJj+SKfFI0dcXv1u5x609mhF0YaDW6KKjbHjKYD+JXGI <newline>+rb68j6xSlkuqUY3kEzEZ6E5Nn9uss2rVvDlUccp6en+Q3X0dgNmBu1kmwhH+5pPi <newline>+94DkZfs0Nw4pgHBNrziGLp5/V6+eF67rHMsoIV+2HNjnogQi+dPa2MsCAwEAAaOB <newline>+sDCBrTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zArBgNVHRAEJDAi <newline>+gA8yMDA2MTEyNzIwMjM0MlqBDzIwMjYxMTI3MjA1MzQyWjAfBgNVHSMEGDAWgBRo <newline>+kORnpKZTgMeGZqTx90tD+4S9bTAdBgNVHQ4EFgQUaJDkZ6SmU4DHhmak8fdLQ/uE <newline>+vW0wHQYJKoZIhvZ9B0EABBAwDhsIVjcuMTo0LjADAgSQMA0GCSqGSIb3DQEBBQUA <newline>+A4IBAQCT1DCw1wMgKtD5Y+iRDAUgqV8ZyntyTtSx29CW+1RaGSwMCPeyvIWonX9t <newline>+O1KzKtvn1ISMY/YPyyYBkVBs9F8U4pN0wBOeMDpQ47RgxRzwIkSNcUesyBrJ6Zua <newline>+AGAT/3B+XxFNSRuzFVJ7yVTav52Vr2ua2J7p8eRDjeIRRDq/r72DQnNSi6q7pynP <newline>+9WQcCk3RvKqsnyrQ/39/2n3qse0wJcGE2jTSW3iDVuycNsMm4hH2Z0kdkquM++v/ <newline>+eu6FSqdQgPCnXEqULl8FmTxSQeDNtGPPAUO6nIPcj2A781q0tHuu2guQOHXvgR1m <newline>+0vdXcDazv/wor3ElhVsT/h5/WrQ8 <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Entrust_EV[] = <newline>+    "sha1/ukKwgYhTiB2GY71MwF4I/upuu3c="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEPjCCAyagAwIBAgIESlOMKDANBgkqhkiG9w0BAQsFADCBvjELMAkGA1UEBhMC <newline>+VVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50 <newline>+cnVzdC5uZXQvbGVnYWwtdGVybXMxOTA3BgNVBAsTMChjKSAyMDA5IEVudHJ1c3Qs <newline>+IEluYy4gLSBmb3IgYXV0aG9yaXplZCB1c2Ugb25seTEyMDAGA1UEAxMpRW50cnVz <newline>+dCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5IC0gRzIwHhcNMDkwNzA3MTcy <newline>+NTU0WhcNMzAxMjA3MTc1NTU0WjCBvjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUVu <newline>+dHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50cnVzdC5uZXQvbGVnYWwt <newline>+dGVybXMxOTA3BgNVBAsTMChjKSAyMDA5IEVudHJ1c3QsIEluYy4gLSBmb3IgYXV0 <newline>+aG9yaXplZCB1c2Ugb25seTEyMDAGA1UEAxMpRW50cnVzdCBSb290IENlcnRpZmlj <newline>+YXRpb24gQXV0aG9yaXR5IC0gRzIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK <newline>+AoIBAQC6hLZy254Ma+KZ6TABp3bqMriVQRrJ2mFOWHLP/vaCeb9zYQYKpSfYs1/T <newline>+RU4cctZOMvJyig/3gxnQaoCAAEUesMfnmr8SVycco2gvCoe9amsOXmXzHHfV1IWN <newline>+cCG0szLni6LVhjkCsbjSR87kyUnEO6fe+1R9V77w6G7CebI6C1XiUJgWMhNcL3hW <newline>+wcKUs/Ja5CeanyTXxuzQmyWC48zCxEXFjJd6BmsqEZ+pCm5IO2/b1BEZQvePB7/1 <newline>+U1+cPvQXLOZprE4yTGJ36rfo5bs0vBmLrpxR57d+tVOxMyLlbc9wPBr64ptntoP0 <newline>+jaWvYkxN4FisZDQSA/i2jZRjJKRxAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAP <newline>+BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRqciZ60B7vfec7aVHUbI2fkBJmqzAN <newline>+BgkqhkiG9w0BAQsFAAOCAQEAeZ8dlsa2eT8ijYfThwMEYGprmi5ZiXMRrEPR9RP/ <newline>+jTkrwPK9T3CMqS/qF8QLVJ7UG5aYMzyorWKiAHarWWluBh1+xLlEjZivEtRh2woZ <newline>+Rkfz6/djwUAFQKXSt/S1mja/qYh2iARVBCuch38aNzx+LaUa2NSJXsq9rD1s2G2v <newline>+1fN2D807iDginWyTmsQ9v4IbZT+mD12q/OWyFcq1rca8PdCE6OoGcrBNOTJ4vz4R <newline>+nAuknZoh8/CbCzB428Hch0P+vGOaysXCHMnHjf87ElgI5rY97HosTvuDls4MPGmH <newline>+VHOkc8KT/1EQrBVUAdj8BbGJoX90g5pJ19xOe4pIb4tF9g== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Entrust_G2[] = <newline>+    "sha1/qzDTr0vY8WtYae5FaSnahLhzlIg="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIE2DCCBEGgAwIBAgIEN0rSQzANBgkqhkiG9w0BAQUFADCBwzELMAkGA1UEBhMC <newline>+VVMxFDASBgNVBAoTC0VudHJ1c3QubmV0MTswOQYDVQQLEzJ3d3cuZW50cnVzdC5u <newline>+ZXQvQ1BTIGluY29ycC4gYnkgcmVmLiAobGltaXRzIGxpYWIuKTElMCMGA1UECxMc <newline>+KGMpIDE5OTkgRW50cnVzdC5uZXQgTGltaXRlZDE6MDgGA1UEAxMxRW50cnVzdC5u <newline>+ZXQgU2VjdXJlIFNlcnZlciBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw05OTA1 <newline>+MjUxNjA5NDBaFw0xOTA1MjUxNjM5NDBaMIHDMQswCQYDVQQGEwJVUzEUMBIGA1UE <newline>+ChMLRW50cnVzdC5uZXQxOzA5BgNVBAsTMnd3dy5lbnRydXN0Lm5ldC9DUFMgaW5j <newline>+b3JwLiBieSByZWYuIChsaW1pdHMgbGlhYi4pMSUwIwYDVQQLExwoYykgMTk5OSBF <newline>+bnRydXN0Lm5ldCBMaW1pdGVkMTowOAYDVQQDEzFFbnRydXN0Lm5ldCBTZWN1cmUg <newline>+U2VydmVyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGdMA0GCSqGSIb3DQEBAQUA <newline>+A4GLADCBhwKBgQDNKIM0VBuJ8w+vN5Ex/68xYMmo6LIQaO2f55M28Qpku0f1BBc/ <newline>+I0dNxScZgSYMVHINiC3ZH5oSn7yzcdOAGT9HZnuMNSjSuQrfJNqc1lB5gXpa0zf3 <newline>+wkrYKZImZNHkmGw6AIr1NJtl+O3jEP/9uElY3KDegjlrgbEWGWG5VLbmQwIBA6OC <newline>+AdcwggHTMBEGCWCGSAGG+EIBAQQEAwIABzCCARkGA1UdHwSCARAwggEMMIHeoIHb <newline>+oIHYpIHVMIHSMQswCQYDVQQGEwJVUzEUMBIGA1UEChMLRW50cnVzdC5uZXQxOzA5 <newline>+BgNVBAsTMnd3dy5lbnRydXN0Lm5ldC9DUFMgaW5jb3JwLiBieSByZWYuIChsaW1p <newline>+dHMgbGlhYi4pMSUwIwYDVQQLExwoYykgMTk5OSBFbnRydXN0Lm5ldCBMaW1pdGVk <newline>+MTowOAYDVQQDEzFFbnRydXN0Lm5ldCBTZWN1cmUgU2VydmVyIENlcnRpZmljYXRp <newline>+b24gQXV0aG9yaXR5MQ0wCwYDVQQDEwRDUkwxMCmgJ6AlhiNodHRwOi8vd3d3LmVu <newline>+dHJ1c3QubmV0L0NSTC9uZXQxLmNybDArBgNVHRAEJDAigA8xOTk5MDUyNTE2MDk0 <newline>+MFqBDzIwMTkwNTI1MTYwOTQwWjALBgNVHQ8EBAMCAQYwHwYDVR0jBBgwFoAU8Bdi <newline>+E1U9s/8KAGv7UISX8+1i0BowHQYDVR0OBBYEFPAXYhNVPbP/CgBr+1CEl/PtYtAa <newline>+MAwGA1UdEwQFMAMBAf8wGQYJKoZIhvZ9B0EABAwwChsEVjQuMAMCBJAwDQYJKoZI <newline>+hvcNAQEFBQADgYEAkNwwAvpkdMKnCqV8IY00F6j7Rw7/JXyNEwr75Ji174z4xRAN <newline>+95K+8cPV1ZVqBLssziY2ZcgxxufuP+NXdYR6Ee9GTxj005i7qIcyunL2POI9n9cd <newline>+2cNgQ4xYDiKWL2KjLB+6rQXvqzJ4h6BUcxm1XAX5Uj5tLUUL9wqT6u0G+bI= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Entrust_SSL[] = <newline>+    "sha1/8BdiE1U9s/8KAGv7UISX8+1i0Bo="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEMjCCAxqgAwIBAgIBATANBgkqhkiG9w0BAQUFADB7MQswCQYDVQQGEwJHQjEb <newline>+MBkGA1UECAwSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHDAdTYWxmb3JkMRow <newline>+GAYDVQQKDBFDb21vZG8gQ0EgTGltaXRlZDEhMB8GA1UEAwwYQUFBIENlcnRpZmlj <newline>+YXRlIFNlcnZpY2VzMB4XDTA0MDEwMTAwMDAwMFoXDTI4MTIzMTIzNTk1OVowezEL <newline>+MAkGA1UEBhMCR0IxGzAZBgNVBAgMEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UE <newline>+BwwHU2FsZm9yZDEaMBgGA1UECgwRQ29tb2RvIENBIExpbWl0ZWQxITAfBgNVBAMM <newline>+GEFBQSBDZXJ0aWZpY2F0ZSBTZXJ2aWNlczCCASIwDQYJKoZIhvcNAQEBBQADggEP <newline>+ADCCAQoCggEBAL5AnfRu4ep2hxxNRUSOvkbIgwadwSr+GB+O5AL686tdUIoWMQua <newline>+BtDFcCLNSS1UY8y2bmhGC1Pqy0wkwLxyTurxFa70VJoSCsN6sjNg4tqJVfMiWPPe <newline>+3M/vg4aijJRPn2jymJBGhCfHdr/jzDUsi14HZGWCwEiwqJH5YZ92IFCokcdmtet4 <newline>+YgNW8IoaE+oxox6gmf049vYnMlhvB/VruPsUK6+3qszWY19zjNoFmag4qMsXeDZR <newline>+rOme9Hg6jc8P2ULimAyrL58OAd7vn5lJ8S3frHRNG5i1R8XlKdH5kBjHYpy+g8cm <newline>+ez6KJcfA3Z3mNWgQIJ2P2N7Sw4ScDV7oL8kCAwEAAaOBwDCBvTAdBgNVHQ4EFgQU <newline>+oBEKIz6W8Qfs4q8p74Klf9AwpLQwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQF <newline>+MAMBAf8wewYDVR0fBHQwcjA4oDagNIYyaHR0cDovL2NybC5jb21vZG9jYS5jb20v <newline>+QUFBQ2VydGlmaWNhdGVTZXJ2aWNlcy5jcmwwNqA0oDKGMGh0dHA6Ly9jcmwuY29t <newline>+b2RvLm5ldC9BQUFDZXJ0aWZpY2F0ZVNlcnZpY2VzLmNybDANBgkqhkiG9w0BAQUF <newline>+AAOCAQEACFb8AvCb6P+k+tZ7xkSAzk/ExfYAWMymtrwUSWgEdujm7l3sAg9g1o1Q <newline>+GE8mTgHj5rCl7r+8dFRBv/38ErjHT1r0iWAFf2C3BUrz9vHCv8S5dIa2LX1rzNLz <newline>+Rt0vxuBqw8M0Ayx9lt1awg6nCpnBBYurDC/zXDrPbDdVCYfeU0BsWO/8tqtlbgT2 <newline>+G9w84FoVxp7Z8VlIMCFlA2zs6SFz7JsDoeA3raAVGI/6ugLOpyypEBMs1OUIJqsi <newline>+l2D4kF501KKaU73yqWjgom7C12yxow+ev+to51byrvLjKzg6CYG1a4XXvi3tPxq3 <newline>+smPi9WIsgtRqAEFQ8TmDn5XpNpaYbg== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_AAACertificateServices[] = <newline>+    "sha1/xDAoxdPjCAwQRIssd7okU5dgu/k="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEGDCCAwCgAwIBAgIBATANBgkqhkiG9w0BAQUFADBlMQswCQYDVQQGEwJTRTEU <newline>+MBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3 <newline>+b3JrMSEwHwYDVQQDExhBZGRUcnVzdCBDbGFzcyAxIENBIFJvb3QwHhcNMDAwNTMw <newline>+MTAzODMxWhcNMjAwNTMwMTAzODMxWjBlMQswCQYDVQQGEwJTRTEUMBIGA1UEChML <newline>+QWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3b3JrMSEwHwYD <newline>+VQQDExhBZGRUcnVzdCBDbGFzcyAxIENBIFJvb3QwggEiMA0GCSqGSIb3DQEBAQUA <newline>+A4IBDwAwggEKAoIBAQCWltQhSWDia+hBBwzexODcEyPNwTXH+9ZOEQpnXvUGW2ul <newline>+CDtbKRY654eyNAbFvAWlA3yCyykQruGIgb3WntP+LVbBFc7jJp0VLhD7Bo8wBN6n <newline>+tGO0/7Gcrjyvd7ZWxbWroulpOj0OM3kyP3CCkplhbY0wCI9xP6ZIVxn4JdxLZlyl <newline>+dI+Yrsj5wAYi56xz36Uu+1LcsRVlIPo1Zmne3yzxbrww2ywkEtvrNTVokMsAsJch <newline>+PXQhI2U0K7t4WaPW4XY5mqRJjox0r26kmqPZm9I4XJuiGMx1I4S+6+JNM3GOGvDC <newline>++Mcdoq0Dlyz4zyXG9rgkMbFjXZJ/Y/AlyVMuH79NAgMBAAGjgdIwgc8wHQYDVR0O <newline>+BBYEFJWxtPCUtr3H2tERCSG+wa9J/RB7MAsGA1UdDwQEAwIBBjAPBgNVHRMBAf8E <newline>+BTADAQH/MIGPBgNVHSMEgYcwgYSAFJWxtPCUtr3H2tERCSG+wa9J/RB7oWmkZzBl <newline>+MQswCQYDVQQGEwJTRTEUMBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFk <newline>+ZFRydXN0IFRUUCBOZXR3b3JrMSEwHwYDVQQDExhBZGRUcnVzdCBDbGFzcyAxIENB <newline>+IFJvb3SCAQEwDQYJKoZIhvcNAQEFBQADggEBACxtZBsfzQ3duQH6lmM0MkhHma6X <newline>+7f1yFqZzR1r0693p9db7RcwpiURdv0Y5PejuvE1Uhh4dbOMXJ0PhiVYrqW9yTkkz <newline>+43J8KiOavD7/KCrto/8cI7pDVwlnTUtiBi34/2ydYB7YHEt9tTEv2dB8Xfjea4MY <newline>+eDdXL+gzB2ffHsdrKpV2ro9Xo/D0UrSpUwjP4E/TelOL/bscVjby/rK25Xa71SJl <newline>+pz/+0WatC7xrmYbvP33zGDLKe8bjq2RGlfgmadlVg3sslgf/WSxEo8bl6ancoWOA <newline>+WiFeIc9TVPC6b4nbqKqVz4vjccweGyBECMB6tkD9xOQ14R0WHNC8K47Wcdk= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_AddTrustClass1CARoot[] = <newline>+    "sha1/i9vXzKBoU0IW9MErJUT8Apyli0c="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIENjCCAx6gAwIBAgIBATANBgkqhkiG9w0BAQUFADBvMQswCQYDVQQGEwJTRTEU <newline>+MBIGA1UEChMLQWRkVHJ1c3QgQUIxJjAkBgNVBAsTHUFkZFRydXN0IEV4dGVybmFs <newline>+IFRUUCBOZXR3b3JrMSIwIAYDVQQDExlBZGRUcnVzdCBFeHRlcm5hbCBDQSBSb290 <newline>+MB4XDTAwMDUzMDEwNDgzOFoXDTIwMDUzMDEwNDgzOFowbzELMAkGA1UEBhMCU0Ux <newline>+FDASBgNVBAoTC0FkZFRydXN0IEFCMSYwJAYDVQQLEx1BZGRUcnVzdCBFeHRlcm5h <newline>+bCBUVFAgTmV0d29yazEiMCAGA1UEAxMZQWRkVHJ1c3QgRXh0ZXJuYWwgQ0EgUm9v <newline>+dDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALf3GjPm8gAELTngTlvt <newline>+H7xsD821+iO2zt6bETOXpClMfZOfvUq8k+0DGuOPz+VtUFrWlymUWoCwSXrbLpX9 <newline>+uMq/NzgtHj6RQa1wVsfwTz/oMp50ysiQVOnGXw94nZpAPA6sYapeFI+eh6FqUNzX <newline>+mk6vBbOmcZSccbNQYArHE504B4YCqOmoaSYYkKtMsE8jqzpPhNjfzp/haW+710LX <newline>+a0Tkx63ubUFfclpxCDezeWWkWaCUN/cALw3CknLa0Dhy2xSoRcRdKn23tNbE7qzN <newline>+E0S3ySvdQwAl+mG5aWpYIxG3pzOPVnVZ9c0p10a3CitlttNCbxWyuHv77+ldU9U0 <newline>+WicCAwEAAaOB3DCB2TAdBgNVHQ4EFgQUrb2YejS0Jvf6xCZU7wO94CTLVBowCwYD <newline>+VR0PBAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wgZkGA1UdIwSBkTCBjoAUrb2YejS0 <newline>+Jvf6xCZU7wO94CTLVBqhc6RxMG8xCzAJBgNVBAYTAlNFMRQwEgYDVQQKEwtBZGRU <newline>+cnVzdCBBQjEmMCQGA1UECxMdQWRkVHJ1c3QgRXh0ZXJuYWwgVFRQIE5ldHdvcmsx <newline>+IjAgBgNVBAMTGUFkZFRydXN0IEV4dGVybmFsIENBIFJvb3SCAQEwDQYJKoZIhvcN <newline>+AQEFBQADggEBALCb4IUlwtYj4g+WBpKdQZic2YR5gdkeWxQHIzZlj7DYd7usQWxH <newline>+YINRsPkyPef89iYTx4AWpb9a/IfPeHmJIZriTAcKhjW88t5RxNKWt9x+Tu5w/Rw5 <newline>+6wwCURQtjr0W4MHfRnXnJK3s9EK0hZNwEGe6nQY1ShjTK3rMUUKhemPR5ruhxSvC <newline>+Nr4TDea9Y355e6cJDUCrat2PisP29owaQgVR1EX1n6diIWgVIEM8med8vSTYqZEX <newline>+c4g/VhsxOBi0cQ+azcgOno4uG+GMmIPLHzHxREzGBHNJdmAPx/i9F4BrLunMTA5a <newline>+mnkPIAou1Z5jJh5VkpTYghdae9C8x49OhgQ= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_AddTrustExternalCARoot[] = <newline>+    "sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEFTCCAv2gAwIBAgIBATANBgkqhkiG9w0BAQUFADBkMQswCQYDVQQGEwJTRTEU <newline>+MBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3 <newline>+b3JrMSAwHgYDVQQDExdBZGRUcnVzdCBQdWJsaWMgQ0EgUm9vdDAeFw0wMDA1MzAx <newline>+MDQxNTBaFw0yMDA1MzAxMDQxNTBaMGQxCzAJBgNVBAYTAlNFMRQwEgYDVQQKEwtB <newline>+ZGRUcnVzdCBBQjEdMBsGA1UECxMUQWRkVHJ1c3QgVFRQIE5ldHdvcmsxIDAeBgNV <newline>+BAMTF0FkZFRydXN0IFB1YmxpYyBDQSBSb290MIIBIjANBgkqhkiG9w0BAQEFAAOC <newline>+AQ8AMIIBCgKCAQEA6Rowj4OIFMEg2Dybjxt+A3S72mnTRqX4jsIMEZBRpS9mVEBV <newline>+6tsfSlbunyNu9DnLoblv8n75XYcmYZ4c+OLspoH4IcUkzBEMP9smcnrHAZcHF/nX <newline>+GCwwfQ56HmIexkvA/X1id9NEHif2P0tEs7c42TkfYNVRknMDtABp4/MUTu7R3AnP <newline>+dzRGULD4EfL+OHn3Bzn+UZKXC1sIXzSGAa2Il+tmzV7R/9x98oTaunet3IAIx6eH <newline>+1lWfl2royBFkuucZKT8Rs3iQhCBSWxHveNCD9tVIkNAwHM+A+WD+eeSI8t0A65RF <newline>+62WUaUC6wNW0uLp9BBGo6zEFlpROWCGOn9Bg/QIDAQABo4HRMIHOMB0GA1UdDgQW <newline>+BBSBPjfYkrAfd59ctKtzquf2NGAv+jALBgNVHQ8EBAMCAQYwDwYDVR0TAQH/BAUw <newline>+AwEB/zCBjgYDVR0jBIGGMIGDgBSBPjfYkrAfd59ctKtzquf2NGAv+qFopGYwZDEL <newline>+MAkGA1UEBhMCU0UxFDASBgNVBAoTC0FkZFRydXN0IEFCMR0wGwYDVQQLExRBZGRU <newline>+cnVzdCBUVFAgTmV0d29yazEgMB4GA1UEAxMXQWRkVHJ1c3QgUHVibGljIENBIFJv <newline>+b3SCAQEwDQYJKoZIhvcNAQEFBQADggEBAAP3FUr4JNojVhaTdt02KLmuG7jD8WS6 <newline>+IBh4lSknVwW8fCr0uVFV2ocC3g8WFzH4qnkuCRO7r7IgGRLlk/lL+YPoRNWyQSW/ <newline>+iHVv/xD8SlTQX/D67zZzfRs2RcYhbbQVuE7PnFylPVoAjgbjPGsye/Kf8Lb93/Ao <newline>+GEjwxrzQvzSAlsJKsW2Ox5BF3i9nrEUEo3rcVZLJR2bYGozH7ZxOmuASu7VqTITh <newline>+4SINhwBk/ox9Yjllpu9CtoAlEmEBqCQTcAARJl/6NVDFSMwGR+gn2HCNX2TmoUQm <newline>+XiLsks3/QppEIW1cxeMiHV9HEufOX1362KqxMy3ZdvJOOjMMK7MtkAY= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_AddTrustPublicCARoot[] = <newline>+    "sha1/qFdl1ugyyMUZY3Namhd0OoHf7i4="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEHjCCAwagAwIBAgIBATANBgkqhkiG9w0BAQUFADBnMQswCQYDVQQGEwJTRTEU <newline>+MBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3 <newline>+b3JrMSMwIQYDVQQDExpBZGRUcnVzdCBRdWFsaWZpZWQgQ0EgUm9vdDAeFw0wMDA1 <newline>+MzAxMDQ0NTBaFw0yMDA1MzAxMDQ0NTBaMGcxCzAJBgNVBAYTAlNFMRQwEgYDVQQK <newline>+EwtBZGRUcnVzdCBBQjEdMBsGA1UECxMUQWRkVHJ1c3QgVFRQIE5ldHdvcmsxIzAh <newline>+BgNVBAMTGkFkZFRydXN0IFF1YWxpZmllZCBDQSBSb290MIIBIjANBgkqhkiG9w0B <newline>+AQEFAAOCAQ8AMIIBCgKCAQEA5B6a/twJWoekn0e+EV+vhDTbYjx5eLfpMLXsDBwq <newline>+xBb/4Oxx64r1EW7tTw2R0hIYLUkVAcKkIhPHEWT/IhKauY5cLwjPcWqzZwFZ8V1G <newline>+87B4pfYOQnrjfxvM0PC3KP0q6p6zsLkEqv32x7SxuCqg+1jxGaBvcCV+PmlKfw8i <newline>+2O+tCBGaKZnhqkRFmhJePp1tUvznoD1oL/BLcHwTOK28FSXx1s6rosAx1i+f4P8U <newline>+WfyEk9mHfExUE+uf0S0R+Bg6Ot4l2ffTQO2kBhLEO+GRwVY18BTcZTYJbqukB8c1 <newline>+0cIDMzZbdSZtQvESa0NvS3GU+jQd7RNuyoB/mC9suWXY6QIDAQABo4HUMIHRMB0G <newline>+A1UdDgQWBBQ5lYtii1zJ1IC6WA+XPxUIQ8yYpzALBgNVHQ8EBAMCAQYwDwYDVR0T <newline>+AQH/BAUwAwEB/zCBkQYDVR0jBIGJMIGGgBQ5lYtii1zJ1IC6WA+XPxUIQ8yYp6Fr <newline>+pGkwZzELMAkGA1UEBhMCU0UxFDASBgNVBAoTC0FkZFRydXN0IEFCMR0wGwYDVQQL <newline>+ExRBZGRUcnVzdCBUVFAgTmV0d29yazEjMCEGA1UEAxMaQWRkVHJ1c3QgUXVhbGlm <newline>+aWVkIENBIFJvb3SCAQEwDQYJKoZIhvcNAQEFBQADggEBABmrder4i2VhlRO6aQTv <newline>+hsoToMeqT2QbPxj2qC0sVY8FtzDqQmodwCVRLae/DLPt7wh/bDxGGuoYQ992zPlm <newline>+hpwsaPXpF/gxsxjE1kh9I0xowX67ARRvxdlu3rsEQmr49lx95dr6h+sNNVJn0J6X <newline>+dgWTP5XHAeZpVTh/EGGZyeNfpso+gmNIquIISD6q8rKFYqa0p9m9N5xotS1WfbC3 <newline>+P6CxB9bpT9zeRXEwMn8bLgn5v1Kh7sKAPgZcLlVAwRv1cEWw3F369nJad9Jjzc9Y <newline>+iQBCYz95OdBEsIJuQRno3eDBiFrRHnGTHyQwdOUeqN48Jzd/g66ed8/wMLH/S5no <newline>+xqE= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_AddTrustQualifiedCARoot[] = <newline>+    "sha1/vOS3IxJVmOVjQRkcUOS2R8J2Bdc="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEHTCCAwWgAwIBAgIQToEtioJl4AsC7j41AkblPTANBgkqhkiG9w0BAQUFADCB <newline>+gTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G <newline>+A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxJzAlBgNV <newline>+BAMTHkNPTU9ETyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0wNjEyMDEwMDAw <newline>+MDBaFw0yOTEyMzEyMzU5NTlaMIGBMQswCQYDVQQGEwJHQjEbMBkGA1UECBMSR3Jl <newline>+YXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHEwdTYWxmb3JkMRowGAYDVQQKExFDT01P <newline>+RE8gQ0EgTGltaXRlZDEnMCUGA1UEAxMeQ09NT0RPIENlcnRpZmljYXRpb24gQXV0 <newline>+aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0ECLi3LjkRv3 <newline>+UcEbVASY06m/weaKXTuH+7uIzg3jLz8GlvCiKVCZrts7oVewdFFxze1CkU1B/qnI <newline>+2GqGd0S7WWaXUF601CxwRM/aN5VCaTwwxHGzUvAhTaHYujl8HJ6jJJ3ygxaYqhZ8 <newline>+Q5sVW7euNJH+1GImGEaaP+vB+fGQV+useg2L23IwambV4EajcNxo2f8ESIl33rXp <newline>++2dtQem8Ob0y2WIC8bGoPW43nOIv4tOiJovGuFVDiOEjPqXSJDlqR6sA1KGzqSX+ <newline>+DT+nHbrTUcELpNqsOO9VUCQFZUaTNE8tja3G1CEZ0o7KBWFxB3NH5YoZEr0ETc5O <newline>+nKVIrLsm9wIDAQABo4GOMIGLMB0GA1UdDgQWBBQLWOWLxkwVN6RAqTCpIb5HNlpW <newline>+/zAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zBJBgNVHR8EQjBAMD6g <newline>+PKA6hjhodHRwOi8vY3JsLmNvbW9kb2NhLmNvbS9DT01PRE9DZXJ0aWZpY2F0aW9u <newline>+QXV0aG9yaXR5LmNybDANBgkqhkiG9w0BAQUFAAOCAQEAPpiem/Yb6dc5t3iuHXIY <newline>+SdOH5EOC6z/JqvWote9VfCFSZfnVDeFs9D6Mk3ORLgLETgdxb8CPOGEIqB6BCsAv <newline>+IC9Bi5HcSEW88cbeunZrM8gALTFGTO3nnc+IlP8zwFboJIYmuNg4ON8qa90SzMc/ <newline>+RxdMosIGlgnW2/4/PEZB31jiVg88O8EckzXZOFKs7sjsLjBOlDW0JB9LeGna8gI4 <newline>+zJVSk/BwJVmcIGfE7vmLV2H0knZ9P4SNVbfo5azV8fUZVqZa+5Acr5Pr5RzUZ5dd <newline>+BA6+C4OmF4O5MBKgxTMVBbkN+8cFduPYSo38NBejxiEovjBFMR7HeL5YYTisO+IB <newline>+ZQ== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_COMODOCertificationAuthority[] = <newline>+    "sha1/EeSR0cnkwOuazs9zVF3h8agwPsM="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEPzCCAyegAwIBAgIBATANBgkqhkiG9w0BAQUFADB+MQswCQYDVQ																								
Chromium	5		8d5cd44086799941bcd1c441a7a78ccb7e647f1	agl@chromium.org <agl@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Mar 28 15:33:40 2012 +0000	Rename hsts_preloaded.h to transport_security_state_static.h. This is a complete no-op as neither filename is actually used. This is just to make a future change easier to review. (Not reviewed.)				svn://svn.chromium.org/chrome/trunk/src@129413 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/base/transport_security_state_static.h b/net/base/transport_security_state_static.h <newline>new file mode 100644 <newline>index 0000000..ce2c713 <newline>--- /dev/null <newline>+++ b/net/base/transport_security_state_static.h <newline>@@ -0,0 +1,2836 @@ <newline>+// Copyright (c) 2011 The Chromium Authors. All rights reserved. <newline>+// Use of this source code is governed by a BSD-style license that can be <newline>+// found in the LICENSE file. <newline>+ <newline>+#ifndef NET_BASE_PUBLIC_KEY_HASHES_ <newline>+#define NET_BASE_PUBLIC_KEY_HASHES_ <newline>+#pragma once <newline>+ <newline>+// This file contains SubjectPublicKeyInfo hashes for public key pinning. The <newline>+// hashes are base64 encoded, SHA1 digests. <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIICPDCCAaUCEDyRMcsf9tAbDpq40ES/Er4wDQYJKoZIhvcNAQEFBQAwXzELMAkG <newline>+A1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFz <newline>+cyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTk2 <newline>+MDEyOTAwMDAwMFoXDTI4MDgwMjIzNTk1OVowXzELMAkGA1UEBhMCVVMxFzAVBgNV <newline>+BAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFzcyAzIFB1YmxpYyBQcmlt <newline>+YXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGfMA0GCSqGSIb3DQEBAQUAA4GN <newline>+ADCBiQKBgQDJXFme8huKARS0EN8EQNvjV69qRUCPhAwL0TPZ2RHP7gJYHyX3KqhE <newline>+BarsAx94f56TuZoAqiN91qyFomNFx3InzPRMxnVx0jnvT0Lwdd8KkMaOIG+YD/is <newline>+I19wKTakyYbnsZogy1Olhec9vn2a/iRFM9x2Fe0PonFkTGUugWhFpwIDAQABMA0G <newline>+CSqGSIb3DQEBBQUAA4GBABByUqkFFBkyCEHwxWsKzH4PIRnN5GfcX6kb5sroc50i <newline>+2JhucwNhkcV8sEVAbkSdjbCxlnRhLQ2pRdKkkirWmnWXbj9T/UWZYB2oK0z5XqcJ <newline>+2HUw19JlYD1n1khVdWk/kfVIC0dpImmClr7JyDiGSnoscxlIaU5rfGW/D/xwzoiQ <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass3[] = <newline>+    "sha1/4n972HfV354KP560yw4uqe/baXc="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEGjCCAwICEQCbfgZJoz5iudXukEhxKe9XMA0GCSqGSIb3DQEBBQUAMIHKMQsw <newline>+CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZl <newline>+cmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWdu <newline>+LCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT <newline>+aWduIENsYXNzIDMgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp <newline>+dHkgLSBHMzAeFw05OTEwMDEwMDAwMDBaFw0zNjA3MTYyMzU5NTlaMIHKMQswCQYD <newline>+VQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT <newline>+aWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJ <newline>+bmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWdu <newline>+IENsYXNzIDMgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg <newline>+LSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMu6nFL8eB8aHm8b <newline>+N3O9+MlrlBIwT/A2R/XQkQr1F8ilYcEWQE37imGQ5XYgwREGfassbqb1EUGO+i2t <newline>+KmFZpGcmTNDovFJbcCAEWNF6yaRpvIMXZK0Fi7zQWM6NjPXr8EJJC52XJ2cybuGu <newline>+kxUccLwgTS8Y3pKI6GyFVxEa6X7jJhFUokWWVYPKMIno3Nij7SqAP395ZVc+FSBm <newline>+CC+Vk7+qRy+oRpfwEuL+wgorUeZ25rdGt+INpsyow0xZVYnm6FNcHOqd8GIWC6fJ <newline>+Xwzw3sJ2zq/3avL6QaaiMxTJ5Xpj055iN9WFZZ4O5lMkdBteHRJTW8cs54NJOxWu <newline>+imi5V5cCAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAERSWwauSCPc/L8my/uRan2Te <newline>+2yFPhpk0djZX3dAVL8WtfxUfN2JzPtTnX84XA9s1+ivbrmAJXx5fj267Cz3qWhMe <newline>+DGBvtcC1IyIuBwvLqXTLR7sdwdela8wv0kL9Sd2nic9TutoAWii/gt/4uhMdUIaC <newline>+/Y4wjylGsB49Ndo4YhYYSq3mtlFs3q9i6wHQHiT+eo8SGhJouPtmmRQURVyu565p <newline>+F4ErWjfJXir0xuKhXFSbplQAz/DxwceYMBo7Nhbbo27q/a2ywtrvAkcTisDxszGt <newline>+TxzhT5yvDwyd93gN2PQ1VoDat20Xj50egWTh/sVFuq1ruQp6Tk9LhO5L8X3dEQ== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass3_G3[] = <newline>+    "sha1/IvGeLsbqzPxdI0b0wuj2xVTdXgc="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIICsDCCAhmgAwIBAgIDC2dxMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT <newline>+MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0 <newline>+aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDkwNjA4MjA0MzI3WhcNMTMwNjA3MTk0MzI3 <newline>+WjBGMQswCQYDVQQGEwJVUzETMBEGA1UEChMKR29vZ2xlIEluYzEiMCAGA1UEAxMZ <newline>+R29vZ2xlIEludGVybmV0IEF1dGhvcml0eTCBnzANBgkqhkiG9w0BAQEFAAOBjQAw <newline>+gYkCgYEAye23pIucV+eEPkB9hPSP0XFjU5nneXQUr0SZMyCSjXvlKAy6rWxJfoNf <newline>+NFlOCnowzdDXxFdF7dWq1nMmzq0yE7jXDx07393cCDaob1FEm8rWIFJztyaHNWrb <newline>+qeXUWaUr/GcZOfqTGBhs3t0lig4zFEfC7wFQeeT9adGnwKziV28CAwEAAaOBozCB <newline>+oDAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFL/AMOv1QxE+Z7qekfv8atrjaxIk <newline>+MB8GA1UdIwQYMBaAFEjmaPkr0rKV10fYIyAQTzOYkJ/UMBIGA1UdEwEB/wQIMAYB <newline>+Af8CAQAwOgYDVR0fBDMwMTAvoC2gK4YpaHR0cDovL2NybC5nZW90cnVzdC5jb20v <newline>+Y3Jscy9zZWN1cmVjYS5jcmwwDQYJKoZIhvcNAQEFBQADgYEAuIojxkiWsRF8YHde <newline>+BZqrocb6ghwYB8TrgbCoZutJqOkM0ymt9e8kTP3kS8p/XmOrmSfLnzYhLLkQYGfN <newline>+0rTw8Ktx5YtaiScRhKqOv5nwnQkhClIZmloJ0pC3+gz4fniisIWvXEyZ2VxVKfml <newline>+UUIuOss4jHg7y/j7lYe8vJD5UDI= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Google1024[] = <newline>+    "sha1/QMVAHW+MuvCLAO3vse6H0AWzuc0="; <newline>+ <newline>+// Not yet used publicly. <newline>+static const char kSPKIHash_Google2048[] = <newline>+    "sha1/AbkhxY0L343gKf+cki7NVWp+ozk="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDIDCCAomgAwIBAgIENd70zzANBgkqhkiG9w0BAQUFADBOMQswCQYDVQQGEwJV <newline>+UzEQMA4GA1UEChMHRXF1aWZheDEtMCsGA1UECxMkRXF1aWZheCBTZWN1cmUgQ2Vy <newline>+dGlmaWNhdGUgQXV0aG9yaXR5MB4XDTk4MDgyMjE2NDE1MVoXDTE4MDgyMjE2NDE1 <newline>+MVowTjELMAkGA1UEBhMCVVMxEDAOBgNVBAoTB0VxdWlmYXgxLTArBgNVBAsTJEVx <newline>+dWlmYXggU2VjdXJlIENlcnRpZmljYXRlIEF1dGhvcml0eTCBnzANBgkqhkiG9w0B <newline>+AQEFAAOBjQAwgYkCgYEAwV2xWGcIYu6gmi0fCG2RFGiYCh7+2gRvE4RiIcPRfM6f <newline>+BeC4AfBONOziipUEZKzxa1NfBbPLZ4C/QgKO/t0BCezhABRP/PvwDN1Dulsr4R+A <newline>+cJkVV5MW8Q+XarfCaCMczE1ZMKxRHjuvK9buY0V7xdlfUNLjUA86iOe/FP3gx7kC <newline>+AwEAAaOCAQkwggEFMHAGA1UdHwRpMGcwZaBjoGGkXzBdMQswCQYDVQQGEwJVUzEQ <newline>+MA4GA1UEChMHRXF1aWZheDEtMCsGA1UECxMkRXF1aWZheCBTZWN1cmUgQ2VydGlm <newline>+aWNhdGUgQXV0aG9yaXR5MQ0wCwYDVQQDEwRDUkwxMBoGA1UdEAQTMBGBDzIwMTgw <newline>+ODIyMTY0MTUxWjALBgNVHQ8EBAMCAQYwHwYDVR0jBBgwFoAUSOZo+SvSspXXR9gj <newline>+IBBPM5iQn9QwHQYDVR0OBBYEFEjmaPkr0rKV10fYIyAQTzOYkJ/UMAwGA1UdEwQF <newline>+MAMBAf8wGgYJKoZIhvZ9B0EABA0wCxsFVjMuMGMDAgbAMA0GCSqGSIb3DQEBBQUA <newline>+A4GBAFjOKer89961zgK5F7WF0bnj4JXMJTENAKaSbn+2kmOeUJXRmm/kEd5jhW6Y <newline>+7qj/WsjTVbJmcVfewCHrPSqnI0kBBIZCe/zuf6IWUrVnZ9NA2zsmWLIodz2uFHdh <newline>+1voqZiegDfqnc1zqcPGUIWVEX/r87yloqaKHee9570+sB3c4 <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_EquifaxSecureCA[] = <newline>+    "sha1/SOZo+SvSspXXR9gjIBBPM5iQn9Q="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIICsjCCAhugAwIBAgIDBe3YMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT <newline>+MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0 <newline>+aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDUwODMxMjA0MDM3WhcNMTIwODMxMjA0MDM3 <newline>+WjBIMQswCQYDVQQGEwJVUzETMBEGA1UEChMKQWV0bmEgSW5jLjEkMCIGA1UEAxMb <newline>+QWV0bmEgSW5jLiBTZWN1cmUgU2VydmVyIENBMIGfMA0GCSqGSIb3DQEBAQUAA4GN <newline>+ADCBiQKBgQCnB2yrm4i44DG5epPu0fbe/pOZDWOvAS7qCcy6YbSkPfOHfH9Blmf3 <newline>+8L6D5yY1pzmTXaU7cDQu4qmj21toEIGwBziMmW6NsiV8nHtmtfXfHP6xrmyPUdN2 <newline>+DdTj937fnrYOoyMhGgBYEjiemeHFQxZSpKZdolFEFXbUa2/yWQafrQIDAQABo4Gj <newline>+MIGgMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQU2S4/xnaeitmFkzoxLnZeo33n <newline>+H4owHwYDVR0jBBgwFoAUSOZo+SvSspXXR9gjIBBPM5iQn9QwEgYDVR0TAQH/BAgw <newline>+BgEB/wIBADA6BgNVHR8EMzAxMC+gLaArhilodHRwOi8vY3JsLmdlb3RydXN0LmNv <newline>+bS9jcmxzL3NlY3VyZWNhLmNybDANBgkqhkiG9w0BAQUFAAOBgQBMSoZHIrD1rq8v <newline>+UG3UYbN76xiF9FDRzWTs5Mvv4Psvf2kk426slzNO0ukFAsmwqN1mA/P9Nc4FlMMC <newline>+YtcnLNwC/syEYdQBOJjxfTVGTqh5q6jDs7S3rPJv8mrFk8ldC8PxU1ZJVfSlFCDn <newline>+6diMDgvOAJfUeJlIRLGu2k/ksI0Y1w== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Aetna[] = <newline>+    "sha1/klKqFN6/gK4wqtlOYDhwJKVDLxo="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDfTCCAuagAwIBAgIDErvmMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT <newline>+MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0 <newline>+aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDIwNTIxMDQwMDAwWhcNMTgwODIxMDQwMDAw <newline>+WjBCMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEbMBkGA1UE <newline>+AxMSR2VvVHJ1c3QgR2xvYmFsIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB <newline>+CgKCAQEA2swYYzD99BcjGlZ+W988bDjkcbd4kdS8odhM+KhDtgPpTSEHCIjaWC9m <newline>+OSm9BXiLnTjoBbdqfnGk5sRgprDvgOSJKA+eJdbtg/OtppHHmMlCGDUUna2YRpIu <newline>+T8rxh0PBFpVXLVDviS2Aelet8u5fa9IAjbkU+BQVNdnARqN7csiRv8lVK83Qlz6c <newline>+JmTM386DGXHKTubU1XupGc1V3sjs0l44U+VcT4wt/lAjNvxm5suOpDkZALeVAjmR <newline>+Cw7+OC7RHQWa9k0+bw8HHa8sHo9gOeL6NlMTOdReJivbPagUvTLrGAMoUgRx5asz <newline>+PeE4uwc2hGKceeoWMPRfwCvocWvk+QIDAQABo4HwMIHtMB8GA1UdIwQYMBaAFEjm <newline>+aPkr0rKV10fYIyAQTzOYkJ/UMB0GA1UdDgQWBBTAephojYn7qwVkDBF9qn1luMrM <newline>+TjAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjA6BgNVHR8EMzAxMC+g <newline>+LaArhilodHRwOi8vY3JsLmdlb3RydXN0LmNvbS9jcmxzL3NlY3VyZWNhLmNybDBO <newline>+BgNVHSAERzBFMEMGBFUdIAAwOzA5BggrBgEFBQcCARYtaHR0cHM6Ly93d3cuZ2Vv <newline>+dHJ1c3QuY29tL3Jlc291cmNlcy9yZXBvc2l0b3J5MA0GCSqGSIb3DQEBBQUAA4GB <newline>+AHbhEm5OSxYShjAGsoEIz/AIx8dxfmbuwu3UOx//8PDITtZDOLC5MH0Y0FWDomrL <newline>+NhGc6Ehmo21/uBPUR/6LWlxz/K7ZGzIZOKuXNBSqltLroxwUCEm2u+WR74M26x1W <newline>+b8ravHNjkOR/ez4iyz0H7V84dJzjA1BOoa+Y7mHyhD8S <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustGlobal[] = <newline>+    "sha1/wHqYaI2J+6sFZAwRfap9ZbjKzE4="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDizCCAvSgAwIBAgIDDW5iMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT <newline>+MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0 <newline>+aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDYxMTI3MDAwMDAwWhcNMTgwODIxMTYxNTAw <newline>+WjBYMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjExMC8GA1UE <newline>+AxMoR2VvVHJ1c3QgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCCASIw <newline>+DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL64FXv/1Hx9Z62DZHvIQlMt3/aE <newline>+CCBh1gFZapxEEa/vdv2Vfs5hMLt6g18CvQFmyu4VjW+hMJy9oYWelDrzVogAMc/Y <newline>+7mqWAtntA4z7dW3n6rhVFgUWmvTgXrGIwGSFXBVNiMe3uuB16a0FPZ3HiUjguyjI <newline>+A+Ewk2ReUsBZcCI1V4iK8ZUKg9e8MXMBNO3vRnHgawKoNXJrl5tm4MsceV/YGgRo <newline>+HkcC5p1g4jaXAd/ONZLfvmfHbXdZO4+d1pAVlLxCNBDBOfmxJz5+1op1xbKvltOi <newline>+3pvkmL594emBrbZv/NcO2uA0sA0ad+fjCJjvWPqchLc2r8LfrNL0EAZwcTUCAwEA <newline>+AaOB6DCB5TAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFCzVUEGXFYvwjzZhW0r7 <newline>+a9mZyTOSMB8GA1UdIwQYMBaAFEjmaPkr0rKV10fYIyAQTzOYkJ/UMA8GA1UdEwEB <newline>+/wQFMAMBAf8wOgYDVR0fBDMwMTAvoC2gK4YpaHR0cDovL2NybC5nZW90cnVzdC5j <newline>+b20vY3Jscy9zZWN1cmVjYS5jcmwwRgYDVR0gBD8wPTA7BgRVHSAAMDMwMQYIKwYB <newline>+BQUHAgEWJWh0dHA6Ly93d3cuZ2VvdHJ1c3QuY29tL3Jlc291cmNlcy9jcHMwDQYJ <newline>+KoZIhvcNAQEFBQADgYEAr/MO1nKrx6mXyiprhDneeanwgeUIZ6vXLyACAXEMBCLJ <newline>+HoiVA8lJOq9nCEmw1Qj1ID2AkaDFh6P7yaMXkfmoL67pD9+Wcg91F4BdeAFNnx9t <newline>+e9j1QjgjGpmT9IO+OzV05zcTNXqstLaQgmwnpODsnjW9v+UpoUefWzL86Zl9Kzk= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustPrimary[] = <newline>+    "sha1/sBmJ5+/7Sq/LFI9YRjl2IkFQ4bo="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIFijCCBHKgAwIBAgIKYSCKYgAAAAAACDANBgkqhkiG9w0BAQUFADBSMQswCQYD <newline>+VQQGEwJVUzEaMBgGA1UEChMRSW50ZWwgQ29ycG9yYXRpb24xJzAlBgNVBAMTHklu <newline>+dGVsIEV4dGVybmFsIEJhc2ljIFBvbGljeSBDQTAeFw0wOTA1MTUxOTI3MjZaFw0x <newline>+NTA1MTUxOTM3MjZaMFYxCzAJBgNVBAYTAlVTMRowGAYDVQQKExFJbnRlbCBDb3Jw <newline>+b3JhdGlvbjErMCkGA1UEAxMiSW50ZWwgRXh0ZXJuYWwgQmFzaWMgSXNzdWluZyBD <newline>+QSAzQjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKQEM1Wn9TU9vc9C <newline>++/Tc7KB+eiYElmrcEWE32WUdHvWG+IcQHVQsikTmMyKKojNLw2B5s6Iekc8ivDo/ <newline>+wCfjZzX9JyftMnc+AArc0la87Olybzm8K9jXEfTBvTnUSFSiI9ZYefITdiUgqlAF <newline>+uljFZEHYKYtLuhrRacpmQfP4mV63NKdc2bT804HRf6YptZFa4k6YN94zlrGNrBuQ <newline>+Q74WFzz/jLBusbUpEkro6Mu/ZYFOFWQrV9lBhF9Ruk8yN+3N6n9fUo/qBigiF2kE <newline>+n9xVh1ykl7SCGL2jBUkXx4qgV27a6Si8lRRdgrHGtN/HWnSWlLXTH5l575H4Lq++ <newline>+77OFv38CAwEAAaOCAlwwggJYMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFA7G <newline>+KvdZsggQkCVvw939imYxMCvFMAsGA1UdDwQEAwIBhjASBgkrBgEEAYI3FQEEBQID <newline>+AQABMCMGCSsGAQQBgjcVAgQWBBQ5oFY2ekKQ/5Ktim+VdMeSWb4QWTAZBgkrBgEE <newline>+AYI3FAIEDB4KAFMAdQBiAEMAQTAfBgNVHSMEGDAWgBQaxgxKxEdvqNutK/D0Vgaj <newline>+7TdUDDCBvQYDVR0fBIG1MIGyMIGvoIGsoIGphk5odHRwOi8vd3d3LmludGVsLmNv <newline>+bS9yZXBvc2l0b3J5L0NSTC9JbnRlbCUyMEV4dGVybmFsJTIwQmFzaWMlMjBQb2xp <newline>+Y3klMjBDQS5jcmyGV2h0dHA6Ly9jZXJ0aWZpY2F0ZXMuaW50ZWwuY29tL3JlcG9z <newline>+aXRvcnkvQ1JML0ludGVsJTIwRXh0ZXJuYWwlMjBCYXNpYyUyMFBvbGljeSUyMENB <newline>+LmNybDCB4wYIKwYBBQUHAQEEgdYwgdMwYwYIKwYBBQUHMAKGV2h0dHA6Ly93d3cu <newline>+aW50ZWwuY29tL3JlcG9zaXRvcnkvY2VydGlmaWNhdGVzL0ludGVsJTIwRXh0ZXJu <newline>+YWwlMjBCYXNpYyUyMFBvbGljeSUyMENBLmNydDBsBggrBgEFBQcwAoZgaHR0cDov <newline>+L2NlcnRpZmljYXRlcy5pbnRlbC5jb20vcmVwb3NpdG9yeS9jZXJ0aWZpY2F0ZXMv <newline>+SW50ZWwlMjBFeHRlcm5hbCUyMEJhc2ljJTIwUG9saWN5JTIwQ0EuY3J0MA0GCSqG <newline>+SIb3DQEBBQUAA4IBAQCxtQEHchVQhXyjEqtMVUMe6gkmPsIczHxSeqNbo9dsD+6x <newline>+bT65JT+oYgpIAtfEsYXeUJu1cChqpb22U5bMAz7eaQcW5bzefufWvA6lg2048B8o <newline>+czBj/q+5P5NpYrUO8jOmN4jTjfJq3ElZ7yFWpy7rB3Vm/aN6ATYqWfMbS/xfh+JC <newline>+xmH3droUmMJI0/aZJHsLtjbjFnNsHDNrJZX1vxlM78Lb1hjskTENPmhbVbfTj5i/ <newline>+ZGnhv4tmI8QZPCNtcegXJrfhRl2D9bWpdTOPrWiLDUqzy1Z6KL7TcOS/PCl8RHCJ <newline>+XkPau/thTQCpIoDa2+c+3XA++gRTfAQ4svTO260N <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Intel[] = <newline>+    "sha1/DsYq91myCBCQJW/D3f2KZjEwK8U="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDWzCCAsSgAwIBAgIDCaxIMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT <newline>+MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0 <newline>+aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDgwODE1MTY0NTE1WhcNMTMwMjE0MTc0NTE1 <newline>+WjBtMQswCQYDVQQGEwJERTEcMBoGA1UEChMTVEMgVHJ1c3RDZW50ZXIgR21iSDEe <newline>+MBwGA1UECxMVVEMgVHJ1c3RDZW50ZXIgU1NMIENBMSAwHgYDVQQDExdUQyBUcnVz <newline>+dENlbnRlciBTU0wgQ0EgSTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB <newline>+AOkCoJoNbJw33wSxNWbDdmIfDIedR8Zmr/mjOhMkXdxRYb6qrl/WfMEuo4PBcysJ <newline>+kF81LaDMkBH0zc7Hs1eYixrMVObkCmEUjxYylgOk4ExGwhmIWDJUWGslNBUIIhFf <newline>++ucDWuGZNfILQrwCWRHYBG0n/6lZPylCqopCMYhBK5sTI/PyuHEAzDL7+buep/Na <newline>+zn+oy/a6x1nobsuL9X2oFaWZb7Z6ty5kZ/U56JHa7vnsLrg4ePwiQb8jtyUdz0fD <newline>+uMHkNzK0gWxr4hm0v92otYFuOTZqNLEJneeiILxUCCMop2chr1obpq2zGVNxJ/rP <newline>+StWmcu75KBGMpT+mzFgIyf0CAwEAAaOBozCBoDAOBgNVHQ8BAf8EBAMCAQYwHQYD <newline>+VR0OBBYEFOe/bKlImXeG4tD/MKCQHQtk0IU6MB8GA1UdIwQYMBaAFEjmaPkr0rKV <newline>+10fYIyAQTzOYkJ/UMBIGA1UdEwEB/wQIMAYBAf8CAQAwOgYDVR0fBDMwMTAvoC2g <newline>+K4YpaHR0cDovL2NybC5nZW90cnVzdC5jb20vY3Jscy9zZWN1cmVjYS5jcmwwDQYJ <newline>+KoZIhvcNAQEFBQADgYEAVKyJLbJha83PggEit8+dzh50wIsKXpTV2K6K4HnUI1kh <newline>+xqocLVfQORluC+LS7L78D2EKTWLZ8WNujiP6DbbIPSTsMasuiBMQMBUlJMUqsp/M <newline>+XmQJgIGAbxsr19MY6mmB30oWuo4cjHnkMzSCfhcON6Rxvbjijk2qCWXkk2T2HAk= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_TCTrustCenter[] = <newline>+    "sha1/gzuEEAB/bkqdQS3EIjk2by7lW+k="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDJDCCAo2gAwIBAgIDBfw3MA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT <newline>+MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0 <newline>+aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDYwNzIxMTUwNTA2WhcNMTEwNzEyMTUwNTA2 <newline>+WjA5MQswCQYDVQQGEwJVSzEXMBUGA1UEChMOVm9kYWZvbmUgR3JvdXAxETAPBgNV <newline>+BAMTCFZvZGFmb25lMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAs61K <newline>+wbMcB+GGGbjyo1dYEiVNGRYKRsDXfeOgeq03Vebf7D5Xq6a0Qs4Rvp6CuRTSNDPi <newline>+M+0vuQRW5sib9UD8UB2x4znc6FriRV4FUpAyKNVqQ9NB0MOBpQekVlX9DzcXkn+p <newline>+zWRi6tt3CtPsaDyHo06oAwX5qu3tW3pjtf0vnQqJWwwA6Mp4YJ/acHD/vVtt67hz <newline>+a0Upz0O2DEJetb3OaqI5yaNZ91y6i7sK0KTvBQxZHeJs+y5UjluHv3ptMUZvmsf0 <newline>+SiKysXnkg5mtsZSFlfM+U7dADq1zNb764NV5sSlmbDLEkvohQyg1p9gh2HX9Jk4A <newline>+e9nnF4hjw2U33HLBXwIDAQABo4GgMIGdMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4E <newline>+FgQUR+YiAaq+68BPLD6l0UcvzlkcgvswHwYDVR0jBBgwFoAUSOZo+SvSspXXR9gj <newline>+IBBPM5iQn9QwDwYDVR0TAQH/BAUwAwEB/zA6BgNVHR8EMzAxMC+gLaArhilodHRw <newline>+Oi8vY3JsLmdlb3RydXN0LmNvbS9jcmxzL3NlY3VyZWNhLmNybDANBgkqhkiG9w0B <newline>+AQUFAAOBgQCs37zuSY/KkPigCvJevu+ewWy9GP2bFZi5EaxKuHGF+tYFZUNkyc06 <newline>+ACYMM3ADPM6dVUYeXIDZnPfV8BJFCpdoAHkSNlg341AVjabCOWtzOYolBn0ua8Wi <newline>+BM471XfzzXD7yMliek9J4fUn2vQU7MYgEkSAA53ZkMScGDkA/c1wMQ== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Vodafone[] = <newline>+    "sha1/DX/hXFUUNmiZ/EDWIgjvIuvRFRw="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIID1TCCAr2gAwIBAgIDAjbRMA0GCSqGSIb3DQEBBQUAMEIxCzAJBgNVBAYTAlVT <newline>+MRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMRswGQYDVQQDExJHZW9UcnVzdCBHbG9i <newline>+YWwgQ0EwHhcNMTAwMjE5MjI0NTA1WhcNMjAwMjE4MjI0NTA1WjA8MQswCQYDVQQG <newline>+EwJVUzEXMBUGA1UEChMOR2VvVHJ1c3QsIEluYy4xFDASBgNVBAMTC1JhcGlkU1NM <newline>+IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAx3H4Vsce2cy1rfa0 <newline>+l6P7oeYLUF9QqjraD/w9KSRDxhApwfxVQHLuverfn7ZB9EhLyG7+T1cSi1v6kt1e <newline>+6K3z8Buxe037z/3R5fjj3Of1c3/fAUnPjFbBvTfjW761T4uL8NpPx+PdVUdp3/Jb <newline>+ewdPPeWsIcHIHXro5/YPoar1b96oZU8QiZwD84l6pV4BcjPtqelaHnnzh8jfyMX8 <newline>+N8iamte4dsywPuf95lTq319SQXhZV63xEtZ/vNWfcNMFbPqjfWdY3SZiHTGSDHl5 <newline>+HI7PynvBZq+odEj7joLCniyZXHstXZu8W1eefDp6E63yoxhbK1kPzVw662gzxigd <newline>+gtFQiwIDAQABo4HZMIHWMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUa2k9ahhC <newline>+St2PAmU5/TUkhniRFjAwHwYDVR0jBBgwFoAUwHqYaI2J+6sFZAwRfap9ZbjKzE4w <newline>+EgYDVR0TAQH/BAgwBgEB/wIBADA6BgNVHR8EMzAxMC+gLaArhilodHRwOi8vY3Js <newline>+Lmdlb3RydXN0LmNvbS9jcmxzL2d0Z2xvYmFsLmNybDA0BggrBgEFBQcBAQQoMCYw <newline>+JAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmdlb3RydXN0LmNvbTANBgkqhkiG9w0B <newline>+AQUFAAOCAQEAq7y8Cl0YlOPBscOoTFXWvrSY8e48HM3P8yQkXJYDJ1j8Nq6iL4/x <newline>+/torAsMzvcjdSCIrYA+lAxD9d/jQ7ZZnT/3qRyBwVNypDFV+4ZYlitm12ldKvo2O <newline>+SUNjpWxOJ4cl61tt/qJ/OCjgNqutOaWlYsS3XFgsql0BYKZiZ6PAx2Ij9OdsRu61 <newline>+04BqIhPSLT90T+qvjF+0OJzbrs6vhB6m9jRRWXnT43XcvNfzc9+S7NIgWW+c+5X4 <newline>+knYYCnwPLKbK3opie9jzzl9ovY8+wXS7FXI6FoOpC+ZNmZzYV+yoAVHHb1c0XqtK <newline>+LEL2TxyJeN4mTvVvk0wVaydWTQBUbHq3tw== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_RapidSSL[] = <newline>+    "sha1/o5OZxATDsgmwgcIfIWIneMJ0jkw="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDxTCCAq2gAwIBAgIQAqxcJmoLQJuPC3nyrkYldzANBgkqhkiG9w0BAQUFADBs <newline>+MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3 <newline>+d3cuZGlnaWNlcnQuY29tMSswKQYDVQQDEyJEaWdpQ2VydCBIaWdoIEFzc3VyYW5j <newline>+ZSBFViBSb290IENBMB4XDTA2MTExMDAwMDAwMFoXDTMxMTExMDAwMDAwMFowbDEL <newline>+MAkGA1UEBhMCVVMxFTATBgNVBAoTDERpZ2lDZXJ0IEluYzEZMBcGA1UECxMQd3d3 <newline>+LmRpZ2ljZXJ0LmNvbTErMCkGA1UEAxMiRGlnaUNlcnQgSGlnaCBBc3N1cmFuY2Ug <newline>+RVYgUm9vdCBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMbM5XPm <newline>++9S75S0tMqbf5YE/yc0lSbZxKsPVlDRnogocsF9ppkCxxLeyj9CYpKlBWTrT3JTW <newline>+PNt0OKRKzE0lgvdKpVMSOO7zSW1xkX5jtqumX8OkhPhPYlG++MXs2ziS4wblCJEM <newline>+xChBVfvLWokVfnHoNb9Ncgk9vjo4UFt3MRuNs8ckRZqnrG0AFFoEt7oT61EKmEFB <newline>+Ik5lYYeBQVCmeVyJ3hlKV9Uu5l0cUyx+mM0aBhakaHPQNAQTXKFx01p8VdteZOE3 <newline>+hzBWBOURtCmAEvF5OYiiAhF8J2a3iLd48soKqDirCmTCv2ZdlYTBoSUeh10aUAsg <newline>+EsxBu24LUTi4S8sCAwEAAaNjMGEwDgYDVR0PAQH/BAQDAgGGMA8GA1UdEwEB/wQF <newline>+MAMBAf8wHQYDVR0OBBYEFLE+w2kD+L9HAdSYJhoIAu9jZCvDMB8GA1UdIwQYMBaA <newline>+FLE+w2kD+L9HAdSYJhoIAu9jZCvDMA0GCSqGSIb3DQEBBQUAA4IBAQAcGgaX3Nec <newline>+nzyIZgYIVyHbIUf4KmeqvxgydkAQV8GK83rZEWWONfqe/EW1ntlMMUu4kehDLI6z <newline>+eM7b41N5cdblIZQB2lWHmiRk9opmzN6cN82oNLFpmyPInngiK3BD41VHMWEZ71jF <newline>+hS9OMPagMRYjyOfiZRYzy78aG6A9+MpeizGLYAiJLQwGXFK3xPkKmNEVX58Svnw2 <newline>+Yzi9RKR/5CYrCsSXaQ3pjOLAEFe4yHYSkVXySGnYvCoCWw9E1CAx2/S6cCZdkGCe <newline>+vEsXCS+0yx5DaMkHJ8HSXPfqIbloEpw8nL+e/IBcm2PN7EeqJSdnoDfzAIJ9VNep <newline>++OkuE6N36B9K <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_DigiCertEVRoot[] = <newline>+    "sha1/gzF+YoVCU9bXeDGQ7JGQVumRueM="; <newline>+ <newline>+// Not public <newline>+static const char kSPKIHash_Tor1[] = <newline>+    "sha1/juNxSTv9UANmpC9kF5GKpmWNx3Y="; <newline>+static const char kSPKIHash_Tor2[] = <newline>+    "sha1/lia43lPolzSPVIq34Dw57uYcLD8="; <newline>+static const char kSPKIHash_Tor3[] = <newline>+    "sha1/rzEyQIKOh77j87n5bjWUNguXF8Y="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIICPTCCAaYCEQDNun9W8N/kvFT+IqyzcqpVMA0GCSqGSIb3DQEBAgUAMF8xCzAJ <newline>+BgNVBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE3MDUGA1UECxMuQ2xh <newline>+c3MgMSBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw05 <newline>+NjAxMjkwMDAwMDBaFw0yODA4MDEyMzU5NTlaMF8xCzAJBgNVBAYTAlVTMRcwFQYD <newline>+VQQKEw5WZXJpU2lnbiwgSW5jLjE3MDUGA1UECxMuQ2xhc3MgMSBQdWJsaWMgUHJp <newline>+bWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCBnzANBgkqhkiG9w0BAQEFAAOB <newline>+jQAwgYkCgYEA5Rm/baNWYS2ZSHH2Z965jeu3noaACpEO+jglr0aIguVzqKCbJF0N <newline>+H8xlbgyw0FaEGIeaBpsQoXPftFg5a27B9hXVqKg/qhIGjTGsf7A01480Z4gJzRQR <newline>+4k5FVmkfeAKA2txHkSm7NsljXMXg1y2He6G3MrB7MLoqLzGq7qNn2tsCAwEAATAN <newline>+BgkqhkiG9w0BAQIFAAOBgQBMP7iLxmjf7kMzDl3ppssHhE16M/+SG/Q2rdiVIjZo <newline>+EWx8QszznC7EBz8UsA9P/5CSdvnivErpj82ggAr3xSnxgiJduLHdgSOjeyUVRjB5 <newline>+FvjqBUuUfx3CHMjjt/QQQDwTw18fU+hI5Ia0e6E1sHslurjTjqs/OJ0ANACY89Fx <newline>+lA== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass1[] = <newline>+    "sha1/I0PRSKJViZuUfUYaeX7ATP7RcLc="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDhDCCAwqgAwIBAgIQL4D+I4wOIg9IZxIokYesszAKBggqhkjOPQQDAzCByjEL <newline>+MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZW <newline>+ZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNyBWZXJpU2ln <newline>+biwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJp <newline>+U2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9y <newline>+aXR5IC0gRzQwHhcNMDcxMTA1MDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCByjELMAkG <newline>+A1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp <newline>+U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNyBWZXJpU2lnbiwg <newline>+SW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2ln <newline>+biBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5 <newline>+IC0gRzQwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAASnVnp8Utpkmw4tXNherJI9/gHm <newline>+GUo9FANL+mAnINmDiWn6VMaaGF5VKmTeBvaNSjutEDxlPZCIBIngMGGzrl0Bp3ve <newline>+fLK+ymVhAIau2o970ImtTR1ZmkGxvEeA3J5iw/mjgbIwga8wDwYDVR0TAQH/BAUw <newline>+AwEB/zAOBgNVHQ8BAf8EBAMCAQYwbQYIKwYBBQUHAQwEYTBfoV2gWzBZMFcwVRYJ <newline>+aW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUj+XTGoasjY5rw8+AatRIGCx7GS4wJRYj <newline>+aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nby5naWYwHQYDVR0OBBYEFLMW <newline>+kf3upm7ktS5Jj4d4gYDs5bG1MAoGCCqGSM49BAMDA2gAMGUCMGYhDBgmYFo4e1ZC <newline>+4Kf8NoRRkSAsdk1DPcQdhCPQrNZ8NQbOzWm9kA3bbEhCHQ6qQgIxAJw9SDkjOVga <newline>+FRJZap7v1VmyHVIsmXHNxynfGyphe3HR3vPA5Q06Sqotp9iGKt0uEA== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass3_G4[] = <newline>+    "sha1/7WYxNdMb1OymFMQp4xkGn5TBJlA="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEGjCCAwICEQDsoKeLbnVqAc/EfMwvlF7XMA0GCSqGSIb3DQEBBQUAMIHKMQsw <newline>+CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZl <newline>+cmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWdu <newline>+LCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT <newline>+aWduIENsYXNzIDQgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp <newline>+dHkgLSBHMzAeFw05OTEwMDEwMDAwMDBaFw0zNjA3MTYyMzU5NTlaMIHKMQswCQYD <newline>+VQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT <newline>+aWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJ <newline>+bmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWdu <newline>+IENsYXNzIDQgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg <newline>+LSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAK3LpRFpxlmr8Y+1 <newline>+GQ9Wzsy1HyDkniYlS+BzZYlZ3tCD5PUPtbut8XzoIfzk6AzufEUiGXaStBO3IFsJ <newline>++mGuqPKljYXCKtbeZjbSmwL0qJJgfJxptI8kHtCGUvYynEFYHiK9zUVilQhu0Gbd <newline>+U6LM8BDcVHOLBKFGMzNcF0C5nk3T875Vg+ixiY5afJqWIpA7iCXy0lOIAgwLePLm <newline>+NxdLMEYH5IBtptiWLugs+BGzOA1mppvqySNb247i8xOOGlktqgLw7KSHZtzBP/XY <newline>+ufTsgsbSPZUd5cBPhMnZo0QoBmrXRazwa2rvTl/4EYIeOGM0ZlDUPpNz+jDDZq3/ <newline>+ky2X7wMCAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAj/ola09b5KROJ1WrIhVZPMq1 <newline>+CtRK26vdoV9TxaBXOcLORyu+OshWv8LZJxA6sQU8wHcxuzrTBXttmhwwjIDLk5Mq <newline>+g6sFUYICABFna/OIYUdfA5PVWw3g8dShMjWFsjrbsIKr0csKvE+MW8VLADsfKoKm <newline>+fjaF3H48ZwC15DtS4KjrXRX5xm3wrR0OhbepmnMUWluPQSjA1egtTaRezarZ7c7c <newline>+2NU8Qh0XwRJdRTjDOPP8hS6DRkiy1yBfkjaP53kPmF6Z6PDQpLv1U70qzlmwr25/ <newline>+bLvSHgCwIe34QWKCudiyxLtGUPMxxY8BqHTr9Xgn2uf3ZkPznoM+IKrDNWCRzg== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass4_G3[] = <newline>+    "sha1/PANDaGiVHPNpKri0Jtq6j+ki5b0="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEGjCCAwICEQCLW3VWhFSFCwDPrzhIzrGkMA0GCSqGSIb3DQEBBQUAMIHKMQsw <newline>+CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZl <newline>+cmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWdu <newline>+LCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT <newline>+aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp <newline>+dHkgLSBHMzAeFw05OTEwMDEwMDAwMDBaFw0zNjA3MTYyMzU5NTlaMIHKMQswCQYD <newline>+VQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT <newline>+aWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJ <newline>+bmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWdu <newline>+IENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg <newline>+LSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAN2E1Lm0+afY8wR4 <newline>+nN493GwTFtl63SRRZsDHJlkNrAYIwpTRMx/wgzUfbhvI3qpuFU5UJ+/EbRrsC+MO <newline>+8ESlV8dAWB6jRx9x7GD2bZTIGDnt/kIYVt/kTEkQeE4BdjVjEjbdZrwBBDajVWjV <newline>+ojYJrKshJlQGrT/KFOCsyq0GHZXi+J3x4GD/wn91K0zM2v6HmSHquv4+VNfSWXjb <newline>+PG7PoBMAGrgnoeS+Z5bKoMWznN3JdZ7rMJpfo83ZrngZPyPpXNspva1VyBtUjGP2 <newline>+6KbqxzcSXKMpHgLZ2x87tNcPVkeBFQRKr4Mn0cVYiMHd9qqnoxjaaKptEVHhv2Vr <newline>+n5Z20T0CAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAq2aN17O6x5q25lXQBfGfMY1a <newline>+qtmqRiYPce2lrVNWYgFHKkTp/j90CxObufRNG7LRX7K20ohcs5/Ny9Sn2WCVhDr4 <newline>+wTcdYcrnsMXlkdpUpqwxga6X3s0IrLjAl4B/bnKk52kTlWUfxJM8/XmPBNQ+T+r3 <newline>+ns7NZ3xPZQL/kYVUc8f/NveGLezQXk//EZ9yBta4GvFMDSZl4kSAHsef493oCtrs <newline>+pSCAaWihT37ha88HQfqDjrw43bAuEbFrskLMmrz5SCJ5ShkPshw+IHTZasO+8ih4 <newline>+E1Z5T21Q6huwtVexN2ZYI/PcD98Kh8TvhgXVOBRgmaNL3gaWcSzy27YfpO8/7g== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass1_G3[] = <newline>+    "sha1/VRmyeKyygdftp6vBg5nDu2kEJLU="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEGTCCAwECEGFwy0mMX5hFKeewptlQW3owDQYJKoZIhvcNAQEFBQAwgcoxCzAJ <newline>+BgNVBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVy <newline>+aVNpZ24gVHJ1c3QgTmV0d29yazE6MDgGA1UECxMxKGMpIDE5OTkgVmVyaVNpZ24s <newline>+IEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25seTFFMEMGA1UEAxM8VmVyaVNp <newline>+Z24gQ2xhc3MgMiBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0 <newline>+eSAtIEczMB4XDTk5MTAwMTAwMDAwMFoXDTM2MDcxNjIzNTk1OVowgcoxCzAJBgNV <newline>+BAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNp <newline>+Z24gVHJ1c3QgTmV0d29yazE6MDgGA1UECxMxKGMpIDE5OTkgVmVyaVNpZ24sIElu <newline>+Yy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25seTFFMEMGA1UEAxM8VmVyaVNpZ24g <newline>+Q2xhc3MgMiBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAt <newline>+IEczMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArwoNwtUs22e5LeWU <newline>+J92lvuCwTY+zYVY81nzD9M0+hsuiiOLh2KRpxbXiv8GmR1BeRjmL1Za6tW8UvxDO <newline>+JxOeBUebMXoT2B/Z0wI3i60sR/COgQanDTAM6/c8DyAd3HJG7qUCyFvDyVZpTMUY <newline>+wZF7C9UTAJu878NIPkZgIIUq1ZC2zYugzDLdt/1AVbJQHFauzI13TccgTacxdu9o <newline>+koqQHgiBVrKtaaNS0MscxCM9H5n+TOgWY47GCI72MfbS+uV23bUckqNJzc0BzWjN <newline>+qWm6o+sdDZykIKbBoMXRRkwXbdKsZj+WjOCE1Db/IlnF+RFgqF8EffIa9iVCYQ/E <newline>+Srg+iQIDAQABMA0GCSqGSIb3DQEBBQUAA4IBAQA0JhU8wI1NQ0kdvekhktdmnLfe <newline>+xbjQ5F1fdiLAJvmEOjr5jLX77GDx6M4EsMjdpwOPMPOY36TmpDHf0xwLRtxyID+u <newline>+7gU8pDM/CzmscHhzS5kr3zDCVLCoO1Wh/hYozUK9dG6A2ydEp85EXdQbkJgNHkKU <newline>+sQAsBNB0owIFImNjzYO1+8FtYmtpdf1dcEG59b98377BMnMiIYtYgXsVkXq642RI <newline>+sH/7NiXaldDxJBQX3RiAa0YjOVT1jmIJBB2UkKab5iXiQkWquJCtvgiPqQtCGJTP <newline>+cjnhsUPgKM+351psE2tJs//jGHyJizNdrDPXp/naOlXJWBD5qu9ats9LS98q <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass2_G3[] = <newline>+    "sha1/Wr7Fddyu87COJxlD/H8lDD32YeM="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDAjCCAmsCEH3Z/gfPqB63EHln+6eJNMYwDQYJKoZIhvcNAQEFBQAwgcExCzAJ <newline>+BgNVBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE8MDoGA1UECxMzQ2xh <newline>+c3MgMyBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEcy <newline>+MTowOAYDVQQLEzEoYykgMTk5OCBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp <newline>+emVkIHVzZSBvbmx5MR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMB4X <newline>+DTk4MDUxODAwMDAwMFoXDTI4MDgwMTIzNTk1OVowgcExCzAJBgNVBAYTAlVTMRcw <newline>+FQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE8MDoGA1UECxMzQ2xhc3MgMyBQdWJsaWMg <newline>+UHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEcyMTowOAYDVQQLEzEo <newline>+YykgMTk5OCBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5 <newline>+MR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMIGfMA0GCSqGSIb3DQEB <newline>+AQUAA4GNADCBiQKBgQDMXtERXVxp0KvTuWpMmR9ZmDCOFoUgRm1HP9SFIIThbbP4 <newline>+pO0M8RcPO/mn+SXXwc+EY/J8Y8+iR/LGWzOOZEAEaMGAuWQcRXfH2G71lSk8UOg0 <newline>+13gfqLptQ5GVj0VXXn7F+8qkBOvqlzdUMG+7AUcyM83cV5tkaWH4mx0ciU9cZwID <newline>+AQABMA0GCSqGSIb3DQEBBQUAA4GBAFFNzb5cy5gZnBWyATl4Lk0PZ3BwmcYQWpSk <newline>+U01UbSuvDV1Ai2TT1+7eVmGSX6bEHRBhNtMsJzzoKQm5EWR0zLVznxxIqbxhAe7i <newline>+F6YM40AIOw7n60RzKprxaZLvcRTDOaxxp5EJb+RxBrO6WVcmeQD2+A2iMzAo1KpY <newline>+oJ2daZH9 <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass3_G2[] = <newline>+    "sha1/GiG0lStik84Ys2XsnA6TTLOB5tQ="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDAzCCAmwCEQC5L2DMiJ+hekYJuFtwbIqvMA0GCSqGSIb3DQEBBQUAMIHBMQsw <newline>+CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xPDA6BgNVBAsTM0Ns <newline>+YXNzIDIgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBH <newline>+MjE6MDgGA1UECxMxKGMpIDE5OTggVmVyaVNpZ24sIEluYy4gLSBGb3IgYXV0aG9y <newline>+aXplZCB1c2Ugb25seTEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29yazAe <newline>+Fw05ODA1MTgwMDAwMDBaFw0yODA4MDEyMzU5NTlaMIHBMQswCQYDVQQGEwJVUzEX <newline>+MBUGA1UEChMOVmVyaVNpZ24sIEluYy4xPDA6BgNVBAsTM0NsYXNzIDIgUHVibGlj <newline>+IFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHMjE6MDgGA1UECxMx <newline>+KGMpIDE5OTggVmVyaVNpZ24sIEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25s <newline>+eTEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29yazCBnzANBgkqhkiG9w0B <newline>+AQEFAAOBjQAwgYkCgYEAp4gBIXQs5xoD8JjhlzwPIQjxnNuX6Zr8wgQGE75fUsjM <newline>+HiwSViy4AWkszJkfrbCWrnkE8hM5wXuYuggs6MKEEyyqaekJ9MepAqRCwiNPStjw <newline>+DqL7MWzJ5m+ZJwf15vRMeJ5t60aG+rmGyVTyssSv1EYcWskVMP8NbPUtDm3Of3cC <newline>+AwEAATANBgkqhkiG9w0BAQUFAAOBgQByLvl/0fFx+8Se9sVeUYpAmLho+Jscg9ji <newline>+nb3/7aHmZuovCfTK1+qlK5X2JGCGTUQug6XELaDTrnhpb3LabK4I8GOSN+a7xDAX <newline>+rXfMSTWqz9iP0b63GJZHc2pUIjRkLbYWm1lbtFFZOrMLFPQS32eg9K0yZF6xRnIn <newline>+jBJ7xUS0rg== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass2_G2[] = <newline>+    "sha1/Eje6RRfurSkm/cHN/r7t8t7ZFFw="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIE0zCCA7ugAwIBAgIQGNrRniZ96LtKIVjNzGs7SjANBgkqhkiG9w0BAQUFADCB <newline>+yjELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL <newline>+ExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJp <newline>+U2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxW <newline>+ZXJpU2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0 <newline>+aG9yaXR5IC0gRzUwHhcNMDYxMTA4MDAwMDAwWhcNMzYwNzE2MjM1OTU5WjCByjEL <newline>+MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZW <newline>+ZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJpU2ln <newline>+biwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJp <newline>+U2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9y <newline>+aXR5IC0gRzUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1 <newline>+nmAMqudLO07cfLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKzj/i5Vbex <newline>+t0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2IIPVQT60nKWVSFJuUrjxuf6/WhkcIz <newline>+SdhDY2pSS9KP6HBRTdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY5fQG <newline>+BO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9r911kTMZHRxAy3QkGSGT2RT+ <newline>+rCpSx4/VBEnkjWNHiDxpg8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/ <newline>+NIeWiu5T6CUVAgMBAAGjgbIwga8wDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8E <newline>+BAMCAQYwbQYIKwYBBQUHAQwEYTBfoV2gWzBZMFcwVRYJaW1hZ2UvZ2lmMCEwHzAH <newline>+BgUrDgMCGgQUj+XTGoasjY5rw8+AatRIGCx7GS4wJRYjaHR0cDovL2xvZ28udmVy <newline>+aXNpZ24uY29tL3ZzbG9nby5naWYwHQYDVR0OBBYEFH/TZafC3ey78DAJ80M5+gKv <newline>+MzEzMA0GCSqGSIb3DQEBBQUAA4IBAQCTJEowX2LP2BqYLz3q3JktvXf2pXkiOOzE <newline>+p6B4Eq1iDkVwZMXnl2YtmAl+X6/WzChl8gGqCBpH3vn5fJJaCGkgDdk+bW48DW7Y <newline>+5gaRQBi5+MHt39tBquCWIMnNZBU4gcmU7qKEKQsTb47bDN0lAtukixlE0kF6BWlK <newline>+WE9gyn6CagsCqiUXObXbf+eEZSqVir2G3l6BFoMtEMze/aiCKm0oHw0LxOXnGiYZ <newline>+4fQRbxC1lfznQgUy286dUV4otp6F01vvpX1FQHKOtw5rDgb7MzVIcbidJ4vEZV8N <newline>+hnacRHr2lVz2XTIIM6RUthg/aFzyQkqFOFSDX9HoLPKsEdao7WNq <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass3_G5[] = <newline>+    "sha1/sYEIGhmkwJQf+uiVKMEkyZs0rMc="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEuTCCA6GgAwIBAgIQQBrEZCGzEyEDDrvkEhrFHTANBgkqhkiG9w0BAQsFADCB <newline>+vTELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL <newline>+ExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwOCBWZXJp <newline>+U2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MTgwNgYDVQQDEy9W <newline>+ZXJpU2lnbiBVbml2ZXJzYWwgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAe <newline>+Fw0wODA0MDIwMDAwMDBaFw0zNzEyMDEyMzU5NTlaMIG9MQswCQYDVQQGEwJVUzEX <newline>+MBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0 <newline>+IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA4IFZlcmlTaWduLCBJbmMuIC0gRm9y <newline>+IGF1dGhvcml6ZWQgdXNlIG9ubHkxODA2BgNVBAMTL1ZlcmlTaWduIFVuaXZlcnNh <newline>+bCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEF <newline>+AAOCAQ8AMIIBCgKCAQEAx2E3XrEBNNti1xWb/1hajCMj1mCOkdeQmIN65lgZOIzF <newline>+9uVkhbSicfvtvbnazU0AtMgtc6XHaXGVHzk8skQHnOgO+k1KxCHfKWGPMiJhgsWH <newline>+H26MfF8WIFFE0XBPV+rjHOPMee5Y2A7Cs0WTwCznmhcrewA3ekEzeOEz4vMQGn+H <newline>+LL729fdC4uW/h2KJXwBL38Xd5HVEMkE6HnFuacsLdUYI0crSK5XQz/u5QGtkjFdN <newline>+/BMReYTtXlT2NJ8IAfMQJQYXStrxHXpma5hgZqTZ79IugvHw7wnqRMkVauIDbjPT <newline>+rJ9VAMf2CGqUuV/c4DPxhGD5WycRtPwW8rtWaoAljQIDAQABo4GyMIGvMA8GA1Ud <newline>+EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMG0GCCsGAQUFBwEMBGEwX6FdoFsw <newline>+WTBXMFUWCWltYWdlL2dpZjAhMB8wBwYFKw4DAhoEFI/l0xqGrI2Oa8PPgGrUSBgs <newline>+exkuMCUWI2h0dHA6Ly9sb2dvLnZlcmlzaWduLmNvbS92c2xvZ28uZ2lmMB0GA1Ud <newline>+DgQWBBS2d/ppSEefUxLVwuoHMnYH0ZcHGTANBgkqhkiG9w0BAQsFAAOCAQEASvj4 <newline>+sAPmLGd75JR3Y8xuTPl9Dg3cyLk1uXBPY/ok+myDjEedO2Pzmvl2MpWRsXe8rJq+ <newline>+seQxIcaBlVZaDrHC1LGmWazxY8u4TB1ZkErvkBYoH1quEPuBUDgMbMzxPcP1Y+Oz <newline>+4yHJJDnp/RVmRvQbEdBNc6N9Rvk97ahfYtTxP/jgdFcrGJ2BtMQo2pSXpXDrrB2+ <newline>+BxHw1dvd5Yzw1TKwg+ZX4o+/vqGqvz0dtdQ46tewXDpPaj+PwGZsY6rp2aQW9IHR <newline>+lRQOfc2VNNnSj3BzgXucfr2YYdhFh5iQxeuGMMY1v/D/w1WIg0vvBZIGcfK4mJO3 <newline>+7M2CYfE45k+XmCpajQ== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignUniversal[] = <newline>+    "sha1/u8I+KQuzKHcdrT6iTb30I70GsD0="; <newline>+ <newline>+// Not public <newline>+static const char kSPKIHash_Twitter1[] = <newline>+    "sha1/Vv7zwhR9TtOIN/29MFI4cgHld40="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDZjCCAk6gAwIBAgIBATANBgkqhkiG9w0BAQUFADBEMQswCQYDVQQGEwJVUzEW <newline>+MBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEdMBsGA1UEAxMUR2VvVHJ1c3QgR2xvYmFs <newline>+IENBIDIwHhcNMDQwMzA0MDUwMDAwWhcNMTkwMzA0MDUwMDAwWjBEMQswCQYDVQQG <newline>+EwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEdMBsGA1UEAxMUR2VvVHJ1c3Qg <newline>+R2xvYmFsIENBIDIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDvPE1A <newline>+PRDfO1MA4Wf+lGAVPoWI8YkNkMgoI5kF6CsgncbzYEbYwbLVjDHZ3CB5JIG/NTL8 <newline>+Y2nbsSpr7iFY8gjpeMtvy/wWUsiRxP89c96xPqfCfWbB9X5SJBri1WeR0IIQ13hL <newline>+TytCOb1kLUCgsBDTOEhGiKEMuzozKmKY+wCdE1l/bztyqu6mD4b5BWHqZ38MN5aL <newline>+5mkWRxHCJ1kDs6ZgwiFAVvqgx306E+PsV8ez1q6diYD3Aecs9pYrEw15LNnA5IZ7 <newline>+S4wMcoKK+xfNAGw6EzywhIdLFnopsk/bHdQL82Y3vdj2V7teJHq4PIu5+pIaGoSe <newline>+2HSPqht/XvT+RSIhAgMBAAGjYzBhMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYE <newline>+FHE4NvICMVNHK266ZUapEBVYIAUJMB8GA1UdIwQYMBaAFHE4NvICMVNHK266ZUap <newline>+EBVYIAUJMA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG9w0BAQUFAAOCAQEAA/e1K6td <newline>+EPx7srJerJsOflN4WT5CBP51o62sgU7XAotexC3IUnbHLB/8gTKY0UvGkpMzNTEv <newline>+/NgdRN3ggX+d6YvhZJFiCzkIjKx0nVnZellSlxG5FntvRdOW2TF9AjYPnDtuzywN <newline>+A0ZF66D0f0hExghAzN4bcLUprbqLOzRldRtxIR0sFAqwlpW41uryZfspuk/qkZN0 <newline>+abby/+Ea0AzRdoXLiiW9l14sbxWZJue2Kf8i7MkCx1YAzUm5s2x7UwQa4qjJqhIF <newline>+I8LO57sEAszAR6LkxCkvW0VXiVHuPOtSCP8HNR6fNWpHSlaY0VqFH4z1Ir+rzoPz <newline>+4iIprn2DQKi6bA== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustGlobal2[] = <newline>+    "sha1/cTg28gIxU0crbrplRqkQFVggBQk="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIFaDCCA1CgAwIBAgIBATANBgkqhkiG9w0BAQUFADBFMQswCQYDVQQGEwJVUzEW <newline>+MBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEeMBwGA1UEAxMVR2VvVHJ1c3QgVW5pdmVy <newline>+c2FsIENBMB4XDTA0MDMwNDA1MDAwMFoXDTI5MDMwNDA1MDAwMFowRTELMAkGA1UE <newline>+BhMCVVMxFjAUBgNVBAoTDUdlb1RydXN0IEluYy4xHjAcBgNVBAMTFUdlb1RydXN0 <newline>+IFVuaXZlcnNhbCBDQTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAKYV <newline>+VaCjxuAfjJ0hUNfBvitbtaSeodlyWL0AG0y/YckUHUWCq8YdgNY96xCcOq9tJPi8 <newline>+cQGeBvV8Xx7BDlXKg5pZMK4ZyzBIle0iN430SppyZj6tlcDgFgDgEB8rMQ7XlFTT <newline>+QjOgNB0eRXbdT8oYN+yFFXoZCPzVx5zw8qkuEKmS5j1YPakWaDwvdSEYfyh3peFh <newline>+F7em6fgemdtzbvQKoiFs7tqqhZJmr/Z6a4LauiIINQ/PQvE1+mrufislzDoR5G2v <newline>+c7J2Ha3QsnhnGqQ5HFELZ1aD/ThdDc7d8Lsrlh/eezJS/R27tQahsiFepdaVaH/w <newline>+mZ7cRQg+59IJDTWU3YBOU5fXtQlEIGQWFwMCTFMNaN7VqnJNk22CDtucvc+081xd <newline>+VHppCZbW2xHBjXWotM85yM48vCR85mLK4b19p71XZQvk/iXttmkQ3CgaRr0BHdCX <newline>+teGYO8A3ZNY9lO4L4fUorgtWv3GLIylBjobFS1J72HGrH4oVpjuDWtdYAVHGTEHZ <newline>+f9hBZ3KiKN9gg6meyHv8U3NyWfWTehd2Ds735VzZC1U0oqpbtWpU5xPKV+yXbfRe <newline>+Bi9Fi1jUIxaS5BZuKGNZMN9QAZxjiRqf2xeUgnA3wySemkfWWspOqGmJch+RbNt+ <newline>+nhutxx9z3SxPGWX9f5NAEC7S8O08ni4oPmkmM8V7AgMBAAGjYzBhMA8GA1UdEwEB <newline>+/wQFMAMBAf8wHQYDVR0OBBYEFNq7LqqwDLiIJlF0XG0D08DYj3rWMB8GA1UdIwQY <newline>+MBaAFNq7LqqwDLiIJlF0XG0D08DYj3rWMA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG <newline>+9w0BAQUFAAOCAgEAMXjmx7XfuJRAyXHEqDXsRh3ChfMoWIawC/yOsjmPRFWrZIRc <newline>+aanQmjg8+uUfNeVE44B5lGiku8SfPeE0zTBGi1QrlaXv9z+ZhP015s8xxtxqv6fX <newline>+IwjhmF7DWgh2qaavdy+3YL1ERmrvl/9zlcGO6JP7/TG37FcREUWbMPEaiDnBTzyn <newline>+ANXH/KttgCJwpQzgXQQpAvvLoJHRfNbDflDVnVi+QTjruXU8FdmbyUqDWcDaU/0z <newline>+uzYYm4UPFd3uLax2k7nZAY1IEKj79TiG8dsKxr2EoyNB3tZ3b4XUhRxQ4K5RirqN <newline>+Pnbiucon8l+f725ZDQbYKxek0nxru18UGkiPGkzns0ccjkxFKyDuSN/n3QmOGKja <newline>+QI2SJhFTYXNd673nxE0pN2HrrDktZy4W1vUAg4WhzH92xH3kt0tm7wNFYGm2DFKW <newline>+koRepqO1pD4r2czYG0eq8kTaT/kD6PAUyz/zg97QwVTjt+gKN02LIFkDMBmhLMi9 <newline>+ER/frslKxfMnZmaGrGiR/9nmUxwPi1xpZQomyB40w11Re9epnAahNt3ViZS82eQt <newline>+DF4JbAiXfKM9fJP/P6EUp8+1Xevb2xzEdt+Iub1FBZUbrvxGakyvSOPOrg/Sfuvm <newline>+bJxPgWp6ZKy7PtXny3YuxadIwVyQD8vIP/rmMuGNG2+k5o7Y+SlIis5z/iw= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustUniversal[] = <newline>+    "sha1/h+hbY1PGI6MSjLD/u/VR/lmADiI="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIFbDCCA1SgAwIBAgIBATANBgkqhkiG9w0BAQUFADBHMQswCQYDVQQGEwJVUzEW <newline>+MBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEgMB4GA1UEAxMXR2VvVHJ1c3QgVW5pdmVy <newline>+c2FsIENBIDIwHhcNMDQwMzA0MDUwMDAwWhcNMjkwMzA0MDUwMDAwWjBHMQswCQYD <newline>+VQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEgMB4GA1UEAxMXR2VvVHJ1 <newline>+c3QgVW5pdmVyc2FsIENBIDIwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC <newline>+AQCzVFLByT7y2dyxUxpZKeexw0Uo5dfR7cXFS6GqdHtXr0om/Nj1XqduGdt0DE81 <newline>+WzILAePb63p3NeqqWuDW6KFXlPCQo3RWlEQwAx5cTiuFJnSCegx2oG9NzkEtoBUG <newline>+FF+3Qs17j1hhNNwqCPkuwwGmIkQcTAeC5lvO0Ep8BNMZcyfwqph/Lq9O64ceJHdq <newline>+XbboW0W63MOhBW9Wjo8QJqVJwy7XQYci4E+GymC16qFjwAGXEHm9ADwSbSsVsaxL <newline>+se4YuU6W3Nx2/zu+z18DwPw76L5GG//aQMJS9/7jOvdqdzXQ2o3rXhhqMcceujwb <newline>+KNZrVMaqW9eiLBsZzKIC9ptZvTdrhrVtgrrY6slWvKk2WP0+GfPtDCapkzj4T8Fd <newline>+IgbQl+rhrcZV4IErKIM6+vR7IVEAvlI4zs1meaj0gVbi0IMJR1FbUGrP20gaXT73 <newline>+y/Zl92zxlfgCOzJWgjl6W70viRu/obTo/3+NjN8D8WBOWBFM66M/ECuDmgFz2ZRt <newline>+hAAnZqzwcEAJQpKtT5MNYQlRJNiS1QuUYbKHsu3/mjX/hVTK7URDrBs8FmtISgoc <newline>+QIgfksILAAX/8sgCSqSqqcyZlpwvWOB94b67B9xfBHJcMTTD7F8t4D1kkCLm0ey4 <newline>+Lt1ZrtmhN79UNdxzMk+MBB4zsslG8dhcyFVQyWi9qLo2CQIDAQABo2MwYTAPBgNV <newline>+HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR281Xh+qQ2+/CfXGJx7Tz0RzgQKzAfBgNV <newline>+HSMEGDAWgBR281Xh+qQ2+/CfXGJx7Tz0RzgQKzAOBgNVHQ8BAf8EBAMCAYYwDQYJ <newline>+KoZIhvcNAQEFBQADggIBAGbBxiPz2eAubl/oz66wsCVNK/g7WJtAJDday6sWSf+z <newline>+dXkzoS9tcBc0kf5nfo/sm+VegqlVHy/c1FEHEv6sFj4sNcZj/NwQ6w2jqtB8zNHQ <newline>+L1EuxBRa3ugZ4T7GzKQp5y6EqgYweHZUcyiYWTjgAA1i00J9IZ+uPTqM1fp3DRgr <newline>+Fg5fNuH8KrUwJM/gYwx7WBr+mbpCErGR9Hxo4sjoryzqyX6uuyo9DRXcNJW2GHSo <newline>+ag/HtPQTxORb7QrSpJdMKu0vbBKJPfEncKpqA1Ihn0CoZ1Dy81of398j9tx4TuaY <newline>+T1U6U+Pv8vSfx3zYWK8pIpe44L2RLrB27FcRz+8pRPPphXpgY+RdM4kX2TGq2tbz <newline>+GDVyz4crL2MjhF2EjD9XoIj8mZEoJmmZ1I+XRL6O1UixpCgp8RW04eWe3fiPpm8m <newline>+1wk8OhwRDqZsN/etRIcsKMfYdIKz0G9KV7s1KSegi+ghp4dkNl3M2Basx7InQJJV <newline>+OCiNUW7dFGdTbHFcJoRNdVq2fmBWqU2t+5sel/MN2dKXVHfaPRK34B7vCAas+YWH <newline>+6aLcr34YEoP9VhdBLtUpgn2Z9DH2canPLAEnpQW5qrJITirvn5NSUZU8UnOOVkwX <newline>+QMAJKOSLakhT2+zNVVXxxvjpoixMptEmX36vWkzaH6byHCx+rgIW0lbQL1dTR+iS <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustUniversal2[] = <newline>+    "sha1/Xk9ThoXdT57KX9wNRW99UbHcm3s="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIICrjCCAjWgAwIBAgIQPLL0SAoA4v7rJDteYD7DazAKBggqhkjOPQQDAzCBmDEL <newline>+MAkGA1UEBhMCVVMxFjAUBgNVBAoTDUdlb1RydXN0IEluYy4xOTA3BgNVBAsTMChj <newline>+KSAyMDA3IEdlb1RydXN0IEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25seTE2 <newline>+MDQGA1UEAxMtR2VvVHJ1c3QgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0 <newline>+eSAtIEcyMB4XDTA3MTEwNTAwMDAwMFoXDTM4MDExODIzNTk1OVowgZgxCzAJBgNV <newline>+BAYTAlVTMRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMTkwNwYDVQQLEzAoYykgMjAw <newline>+NyBHZW9UcnVzdCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxNjA0BgNV <newline>+BAMTLUdlb1RydXN0IFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBH <newline>+MjB2MBAGByqGSM49AgEGBSuBBAAiA2IABBWx6P0DFUPlrOuHNxFi79KDNlJ9RVcL <newline>+So17VDs6bl8VAsBQps8lL33KSLjHUGMcKiEIfJo22Av+0SbFWDEwKCXzXV2juLal <newline>+tJLtbCyf691DiaI8S0iRHVDsJt/WYC69IaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAO <newline>+BgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFBVfNVdRVfslsq0DafwBo/q+EVXVMAoG <newline>+CCqGSM49BAMDA2cAMGQCMGSWWaboCd6LuvpaiIjwH5HTRqjySkwCY/tsXzjbLkGT <newline>+qQ7mndwxHLKgpxgceeHHNgIwOlavmnRs9vuD4DPTCF+hnMJbn0bWtsuRBmOiBucz <newline>+rD6ogRLQy7rQkgu2npaqBA+K <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustPrimary_G2[] = <newline>+    "sha1/vb6nG6txV/nkddlU0rcngBqCJoI="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIID/jCCAuagAwIBAgIQFaxulBmyeUtB9iepwxgPHzANBgkqhkiG9w0BAQsFADCB <newline>+mDELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUdlb1RydXN0IEluYy4xOTA3BgNVBAsT <newline>+MChjKSAyMDA4IEdlb1RydXN0IEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25s <newline>+eTE2MDQGA1UEAxMtR2VvVHJ1c3QgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhv <newline>+cml0eSAtIEczMB4XDTA4MDQwMjAwMDAwMFoXDTM3MTIwMTIzNTk1OVowgZgxCzAJ <newline>+BgNVBAYTAlVTMRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMTkwNwYDVQQLEzAoYykg <newline>+MjAwOCBHZW9UcnVzdCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxNjA0 <newline>+BgNVBAMTLUdlb1RydXN0IFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg <newline>+LSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANziXmJYHTNXOTIz <newline>++uvLh4yn1ErdBojqZI4xmKU4kB6Yzy5jK/BGvESyiaHAKAxJcCGVn2TAppMSAmUm <newline>+hsalifD614SgcK9PGpc/BkTVyetyEH3kMSj7HGHmKAdEc5IiaacDiGydY8hS2pgn <newline>+5whMcD60yRLBxWeDXTPzAxHsatBT4tG6NmCUgLthY2xbF37fQJQeqw3CIShwiP/W <newline>+JmxsYAQlTlV+fe+/lEjetx3dcI0FX4ilm/LC7urRQEFtYjgdVgbFA0dRIBn8exAL <newline>+DmKudlW/X3e+PkkBUz2YJQN2JFodtNuJ6nnltrM7P7pMKEF/BqxqjsHQ9gUdfeZC <newline>+huOl1UcCAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYw <newline>+HQYDVR0OBBYEFMR5yo6hTgMdHNxr2zFblD4/MH8tMA0GCSqGSIb3DQEBCwUAA4IB <newline>+AQAtxRPPVoB7eni9n64smefv2t+UXglpp+duaIy9cr5HqQ6XErhK8WTTOd8lNNTB <newline>+zU6B8A8ExCSzNJbGpqow32hhc9f5joWJ7w5elShKKiePEI4ufIbEAp7aDHdlDkQN <newline>+kv39sxY2+hENHYwOB4lqKVb3cvTdFZx3NWZXqxNT2I7BQMXXExZacse3aQHEerGD <newline>+AWh9jUGhlBjBJVz88P6DAod8DQ3PLghcSkANPuyBYeYk28rgDi0Hsj5W3I31QYUH <newline>+SJsMC8tJP33st/3LjWeJGqvtux6jAAgIFyqCXDFdRootD4abdNlF+9RAsXqqaC2G <newline>+spki4cErx5z481+oghLrGREt <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustPrimary_G3[] = <newline>+    "sha1/nKmNAK90Dd2BgNITRaWLjy6UONY="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEKjCCAxKgAwIBAgIEOGPe+DANBgkqhkiG9w0BAQUFADCBtDEUMBIGA1UEChMLRW50cnVzdC5u <newline>+ZXQxQDA+BgNVBAsUN3d3dy5lbnRydXN0Lm5ldC9DUFNfMjA0OCBpbmNvcnAuIGJ5IHJlZi4gKGxp <newline>+bWl0cyBsaWFiLikxJTAjBgNVBAsTHChjKSAxOTk5IEVudHJ1c3QubmV0IExpbWl0ZWQxMzAxBgNV <newline>+BAMTKkVudHJ1c3QubmV0IENlcnRpZmljYXRpb24gQXV0aG9yaXR5ICgyMDQ4KTAeFw05OTEyMjQx <newline>+NzUwNTFaFw0yOTA3MjQxNDE1MTJaMIG0MRQwEgYDVQQKEwtFbnRydXN0Lm5ldDFAMD4GA1UECxQ3 <newline>+d3d3LmVudHJ1c3QubmV0L0NQU18yMDQ4IGluY29ycC4gYnkgcmVmLiAobGltaXRzIGxpYWIuKTEl <newline>+MCMGA1UECxMcKGMpIDE5OTkgRW50cnVzdC5uZXQgTGltaXRlZDEzMDEGA1UEAxMqRW50cnVzdC5u <newline>+ZXQgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgKDIwNDgpMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A <newline>+MIIBCgKCAQEArU1LqRKGsuqjIAcVFmQqK0vRvwtKTY7tgHalZ7d4QMBzQshowNtTK91euHaYNZOL <newline>+Gp18EzoOH1u3Hs/lJBQesYGpjX24zGtLA/ECDNyrpUAkAH90lKGdCCmziAv1h3edVc3kw37XamSr <newline>+hRSGlVuXMlBvPci6Zgzj/L24ScF2iUkZ/cCovYmjZy/Gn7xxGWC4LeksyZB2ZnuU4q941mVTXTzW <newline>+nLLPKQP5L6RQstRIzgUyVYr9smRMDuSYB3Xbf9+5CFVghTAp+XtIpGmG4zU/HoZdenoVve8AjhUi <newline>+VBcAkCaTvA5JaJG/+EfTnZVCwQ5N328mz8MYIWJmQ3DW1cAH4QIDAQABo0IwQDAOBgNVHQ8BAf8E <newline>+BAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUVeSB0RGAvtiJuQijMfmhJAkWuXAwDQYJ <newline>+KoZIhvcNAQEFBQADggEBADubj1abMOdTmXx6eadNl9cZlZD7Bh/KM3xGY4+WZiT6QBshJ8rmcnPy <newline>+T/4xmf3IDExoU8aAghOY+rat2l098c5u9hURlIIM7j+VrxGrD9cv3h8Dj1csHsm7mhpElesYT6Yf <newline>+zX1XEC+bBAlahLVu2B064dae0Wx5XnkcFMXj0EyTO2U87d89vqbllRrDtRnDvV5bu/8j72gZyxKT <newline>+J1wDLW8w0B62GqzeWvfRqqgnpv55gcR5mTNXuhKwqeBCbJPKVt7+bYQLCIt+jerXmCHG8+c8eS9e <newline>+nNFMFY3h7CI3zJpDC5fcgJCNs2ebb0gIFVbPv/ErfF6adulZkMV8gzURZVE= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Entrust_2048[] = <newline>+    "sha1/VeSB0RGAvtiJuQijMfmhJAkWuXA="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEkTCCA3mgAwIBAgIERWtQVDANBgkqhkiG9w0BAQUFADCBsDELMAkGA1UEBhMC <newline>+VVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xOTA3BgNVBAsTMHd3dy5lbnRydXN0 <newline>+Lm5ldC9DUFMgaXMgaW5jb3Jwb3JhdGVkIGJ5IHJlZmVyZW5jZTEfMB0GA1UECxMW <newline>+KGMpIDIwMDYgRW50cnVzdCwgSW5jLjEtMCsGA1UEAxMkRW50cnVzdCBSb290IENl <newline>+cnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTA2MTEyNzIwMjM0MloXDTI2MTEyNzIw <newline>+NTM0MlowgbAxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1FbnRydXN0LCBJbmMuMTkw <newline>+NwYDVQQLEzB3d3cuZW50cnVzdC5uZXQvQ1BTIGlzIGluY29ycG9yYXRlZCBieSBy <newline>+ZWZlcmVuY2UxHzAdBgNVBAsTFihjKSAyMDA2IEVudHJ1c3QsIEluYy4xLTArBgNV <newline>+BAMTJEVudHJ1c3QgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCCASIwDQYJ <newline>+KoZIhvcNAQEBBQADggEPADCCAQoCggEBALaVtkNC+sZtKm9I35RMOVcF7sN5EUFo <newline>+Nu3s/poBj6E4KPz3EEZmLk0eGrEaTsbRwJWIsMn/MYszA9u3g3s+IIRe7bJWKKf4 <newline>+4LlAcTfFy0cOlypowCKVYhXbR9n10Cv/gkvJrT7eTNuQgFA/CYqEAOwwCj0Yzfv9 <newline>+KlmaI5UXLEWeH25DeW0MXJj+SKfFI0dcXv1u5x609mhF0YaDW6KKjbHjKYD+JXGI <newline>+rb68j6xSlkuqUY3kEzEZ6E5Nn9uss2rVvDlUccp6en+Q3X0dgNmBu1kmwhH+5pPi <newline>+94DkZfs0Nw4pgHBNrziGLp5/V6+eF67rHMsoIV+2HNjnogQi+dPa2MsCAwEAAaOB <newline>+sDCBrTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zArBgNVHRAEJDAi <newline>+gA8yMDA2MTEyNzIwMjM0MlqBDzIwMjYxMTI3MjA1MzQyWjAfBgNVHSMEGDAWgBRo <newline>+kORnpKZTgMeGZqTx90tD+4S9bTAdBgNVHQ4EFgQUaJDkZ6SmU4DHhmak8fdLQ/uE <newline>+vW0wHQYJKoZIhvZ9B0EABBAwDhsIVjcuMTo0LjADAgSQMA0GCSqGSIb3DQEBBQUA <newline>+A4IBAQCT1DCw1wMgKtD5Y+iRDAUgqV8ZyntyTtSx29CW+1RaGSwMCPeyvIWonX9t <newline>+O1KzKtvn1ISMY/YPyyYBkVBs9F8U4pN0wBOeMDpQ47RgxRzwIkSNcUesyBrJ6Zua <newline>+AGAT/3B+XxFNSRuzFVJ7yVTav52Vr2ua2J7p8eRDjeIRRDq/r72DQnNSi6q7pynP <newline>+9WQcCk3RvKqsnyrQ/39/2n3qse0wJcGE2jTSW3iDVuycNsMm4hH2Z0kdkquM++v/ <newline>+eu6FSqdQgPCnXEqULl8FmTxSQeDNtGPPAUO6nIPcj2A781q0tHuu2guQOHXvgR1m <newline>+0vdXcDazv/wor3ElhVsT/h5/WrQ8 <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Entrust_EV[] = <newline>+    "sha1/ukKwgYhTiB2GY71MwF4I/upuu3c="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEPjCCAyagAwIBAgIESlOMKDANBgkqhkiG9w0BAQsFADCBvjELMAkGA1UEBhMC <newline>+VVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50 <newline>+cnVzdC5uZXQvbGVnYWwtdGVybXMxOTA3BgNVBAsTMChjKSAyMDA5IEVudHJ1c3Qs <newline>+IEluYy4gLSBmb3IgYXV0aG9yaXplZCB1c2Ugb25seTEyMDAGA1UEAxMpRW50cnVz <newline>+dCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5IC0gRzIwHhcNMDkwNzA3MTcy <newline>+NTU0WhcNMzAxMjA3MTc1NTU0WjCBvjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUVu <newline>+dHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50cnVzdC5uZXQvbGVnYWwt <newline>+dGVybXMxOTA3BgNVBAsTMChjKSAyMDA5IEVudHJ1c3QsIEluYy4gLSBmb3IgYXV0 <newline>+aG9yaXplZCB1c2Ugb25seTEyMDAGA1UEAxMpRW50cnVzdCBSb290IENlcnRpZmlj <newline>+YXRpb24gQXV0aG9yaXR5IC0gRzIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK <newline>+AoIBAQC6hLZy254Ma+KZ6TABp3bqMriVQRrJ2mFOWHLP/vaCeb9zYQYKpSfYs1/T <newline>+RU4cctZOMvJyig/3gxnQaoCAAEUesMfnmr8SVycco2gvCoe9amsOXmXzHHfV1IWN <newline>+cCG0szLni6LVhjkCsbjSR87kyUnEO6fe+1R9V77w6G7CebI6C1XiUJgWMhNcL3hW <newline>+wcKUs/Ja5CeanyTXxuzQmyWC48zCxEXFjJd6BmsqEZ+pCm5IO2/b1BEZQvePB7/1 <newline>+U1+cPvQXLOZprE4yTGJ36rfo5bs0vBmLrpxR57d+tVOxMyLlbc9wPBr64ptntoP0 <newline>+jaWvYkxN4FisZDQSA/i2jZRjJKRxAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAP <newline>+BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRqciZ60B7vfec7aVHUbI2fkBJmqzAN <newline>+BgkqhkiG9w0BAQsFAAOCAQEAeZ8dlsa2eT8ijYfThwMEYGprmi5ZiXMRrEPR9RP/ <newline>+jTkrwPK9T3CMqS/qF8QLVJ7UG5aYMzyorWKiAHarWWluBh1+xLlEjZivEtRh2woZ <newline>+Rkfz6/djwUAFQKXSt/S1mja/qYh2iARVBCuch38aNzx+LaUa2NSJXsq9rD1s2G2v <newline>+1fN2D807iDginWyTmsQ9v4IbZT+mD12q/OWyFcq1rca8PdCE6OoGcrBNOTJ4vz4R <newline>+nAuknZoh8/CbCzB428Hch0P+vGOaysXCHMnHjf87ElgI5rY97HosTvuDls4MPGmH <newline>+VHOkc8KT/1EQrBVUAdj8BbGJoX90g5pJ19xOe4pIb4tF9g== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Entrust_G2[] = <newline>+    "sha1/qzDTr0vY8WtYae5FaSnahLhzlIg="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIE2DCCBEGgAwIBAgIEN0rSQzANBgkqhkiG9w0BAQUFADCBwzELMAkGA1UEBhMC <newline>+VVMxFDASBgNVBAoTC0VudHJ1c3QubmV0MTswOQYDVQQLEzJ3d3cuZW50cnVzdC5u <newline>+ZXQvQ1BTIGluY29ycC4gYnkgcmVmLiAobGltaXRzIGxpYWIuKTElMCMGA1UECxMc <newline>+KGMpIDE5OTkgRW50cnVzdC5uZXQgTGltaXRlZDE6MDgGA1UEAxMxRW50cnVzdC5u <newline>+ZXQgU2VjdXJlIFNlcnZlciBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw05OTA1 <newline>+MjUxNjA5NDBaFw0xOTA1MjUxNjM5NDBaMIHDMQswCQYDVQQGEwJVUzEUMBIGA1UE <newline>+ChMLRW50cnVzdC5uZXQxOzA5BgNVBAsTMnd3dy5lbnRydXN0Lm5ldC9DUFMgaW5j <newline>+b3JwLiBieSByZWYuIChsaW1pdHMgbGlhYi4pMSUwIwYDVQQLExwoYykgMTk5OSBF <newline>+bnRydXN0Lm5ldCBMaW1pdGVkMTowOAYDVQQDEzFFbnRydXN0Lm5ldCBTZWN1cmUg <newline>+U2VydmVyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGdMA0GCSqGSIb3DQEBAQUA <newline>+A4GLADCBhwKBgQDNKIM0VBuJ8w+vN5Ex/68xYMmo6LIQaO2f55M28Qpku0f1BBc/ <newline>+I0dNxScZgSYMVHINiC3ZH5oSn7yzcdOAGT9HZnuMNSjSuQrfJNqc1lB5gXpa0zf3 <newline>+wkrYKZImZNHkmGw6AIr1NJtl+O3jEP/9uElY3KDegjlrgbEWGWG5VLbmQwIBA6OC <newline>+AdcwggHTMBEGCWCGSAGG+EIBAQQEAwIABzCCARkGA1UdHwSCARAwggEMMIHeoIHb <newline>+oIHYpIHVMIHSMQswCQYDVQQGEwJVUzEUMBIGA1UEChMLRW50cnVzdC5uZXQxOzA5 <newline>+BgNVBAsTMnd3dy5lbnRydXN0Lm5ldC9DUFMgaW5jb3JwLiBieSByZWYuIChsaW1p <newline>+dHMgbGlhYi4pMSUwIwYDVQQLExwoYykgMTk5OSBFbnRydXN0Lm5ldCBMaW1pdGVk <newline>+MTowOAYDVQQDEzFFbnRydXN0Lm5ldCBTZWN1cmUgU2VydmVyIENlcnRpZmljYXRp <newline>+b24gQXV0aG9yaXR5MQ0wCwYDVQQDEwRDUkwxMCmgJ6AlhiNodHRwOi8vd3d3LmVu <newline>+dHJ1c3QubmV0L0NSTC9uZXQxLmNybDArBgNVHRAEJDAigA8xOTk5MDUyNTE2MDk0 <newline>+MFqBDzIwMTkwNTI1MTYwOTQwWjALBgNVHQ8EBAMCAQYwHwYDVR0jBBgwFoAU8Bdi <newline>+E1U9s/8KAGv7UISX8+1i0BowHQYDVR0OBBYEFPAXYhNVPbP/CgBr+1CEl/PtYtAa <newline>+MAwGA1UdEwQFMAMBAf8wGQYJKoZIhvZ9B0EABAwwChsEVjQuMAMCBJAwDQYJKoZI <newline>+hvcNAQEFBQADgYEAkNwwAvpkdMKnCqV8IY00F6j7Rw7/JXyNEwr75Ji174z4xRAN <newline>+95K+8cPV1ZVqBLssziY2ZcgxxufuP+NXdYR6Ee9GTxj005i7qIcyunL2POI9n9cd <newline>+2cNgQ4xYDiKWL2KjLB+6rQXvqzJ4h6BUcxm1XAX5Uj5tLUUL9wqT6u0G+bI= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Entrust_SSL[] = <newline>+    "sha1/8BdiE1U9s/8KAGv7UISX8+1i0Bo="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEMjCCAxqgAwIBAgIBATANBgkqhkiG9w0BAQUFADB7MQswCQYDVQQGEwJHQjEb <newline>+MBkGA1UECAwSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHDAdTYWxmb3JkMRow <newline>+GAYDVQQKDBFDb21vZG8gQ0EgTGltaXRlZDEhMB8GA1UEAwwYQUFBIENlcnRpZmlj <newline>+YXRlIFNlcnZpY2VzMB4XDTA0MDEwMTAwMDAwMFoXDTI4MTIzMTIzNTk1OVowezEL <newline>+MAkGA1UEBhMCR0IxGzAZBgNVBAgMEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UE <newline>+BwwHU2FsZm9yZDEaMBgGA1UECgwRQ29tb2RvIENBIExpbWl0ZWQxITAfBgNVBAMM <newline>+GEFBQSBDZXJ0aWZpY2F0ZSBTZXJ2aWNlczCCASIwDQYJKoZIhvcNAQEBBQADggEP <newline>+ADCCAQoCggEBAL5AnfRu4ep2hxxNRUSOvkbIgwadwSr+GB+O5AL686tdUIoWMQua <newline>+BtDFcCLNSS1UY8y2bmhGC1Pqy0wkwLxyTurxFa70VJoSCsN6sjNg4tqJVfMiWPPe <newline>+3M/vg4aijJRPn2jymJBGhCfHdr/jzDUsi14HZGWCwEiwqJH5YZ92IFCokcdmtet4 <newline>+YgNW8IoaE+oxox6gmf049vYnMlhvB/VruPsUK6+3qszWY19zjNoFmag4qMsXeDZR <newline>+rOme9Hg6jc8P2ULimAyrL58OAd7vn5lJ8S3frHRNG5i1R8XlKdH5kBjHYpy+g8cm <newline>+ez6KJcfA3Z3mNWgQIJ2P2N7Sw4ScDV7oL8kCAwEAAaOBwDCBvTAdBgNVHQ4EFgQU <newline>+oBEKIz6W8Qfs4q8p74Klf9AwpLQwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQF <newline>+MAMBAf8wewYDVR0fBHQwcjA4oDagNIYyaHR0cDovL2NybC5jb21vZG9jYS5jb20v <newline>+QUFBQ2VydGlmaWNhdGVTZXJ2aWNlcy5jcmwwNqA0oDKGMGh0dHA6Ly9jcmwuY29t <newline>+b2RvLm5ldC9BQUFDZXJ0aWZpY2F0ZVNlcnZpY2VzLmNybDANBgkqhkiG9w0BAQUF <newline>+AAOCAQEACFb8AvCb6P+k+tZ7xkSAzk/ExfYAWMymtrwUSWgEdujm7l3sAg9g1o1Q <newline>+GE8mTgHj5rCl7r+8dFRBv/38ErjHT1r0iWAFf2C3BUrz9vHCv8S5dIa2LX1rzNLz <newline>+Rt0vxuBqw8M0Ayx9lt1awg6nCpnBBYurDC/zXDrPbDdVCYfeU0BsWO/8tqtlbgT2 <newline>+G9w84FoVxp7Z8VlIMCFlA2zs6SFz7JsDoeA3raAVGI/6ugLOpyypEBMs1OUIJqsi <newline>+l2D4kF501KKaU73yqWjgom7C12yxow+ev+to51byrvLjKzg6CYG1a4XXvi3tPxq3 <newline>+smPi9WIsgtRqAEFQ8TmDn5XpNpaYbg== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_AAACertificateServices[] = <newline>+    "sha1/xDAoxdPjCAwQRIssd7okU5dgu/k="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEGDCCAwCgAwIBAgIBATANBgkqhkiG9w0BAQUFADBlMQswCQYDVQQGEwJTRTEU <newline>+MBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3 <newline>+b3JrMSEwHwYDVQQDExhBZGRUcnVzdCBDbGFzcyAxIENBIFJvb3QwHhcNMDAwNTMw <newline>+MTAzODMxWhcNMjAwNTMwMTAzODMxWjBlMQswCQYDVQQGEwJTRTEUMBIGA1UEChML <newline>+QWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3b3JrMSEwHwYD <newline>+VQQDExhBZGRUcnVzdCBDbGFzcyAxIENBIFJvb3QwggEiMA0GCSqGSIb3DQEBAQUA <newline>+A4IBDwAwggEKAoIBAQCWltQhSWDia+hBBwzexODcEyPNwTXH+9ZOEQpnXvUGW2ul <newline>+CDtbKRY654eyNAbFvAWlA3yCyykQruGIgb3WntP+LVbBFc7jJp0VLhD7Bo8wBN6n <newline>+tGO0/7Gcrjyvd7ZWxbWroulpOj0OM3kyP3CCkplhbY0wCI9xP6ZIVxn4JdxLZlyl <newline>+dI+Yrsj5wAYi56xz36Uu+1LcsRVlIPo1Zmne3yzxbrww2ywkEtvrNTVokMsAsJch <newline>+PXQhI2U0K7t4WaPW4XY5mqRJjox0r26kmqPZm9I4XJuiGMx1I4S+6+JNM3GOGvDC <newline>++Mcdoq0Dlyz4zyXG9rgkMbFjXZJ/Y/AlyVMuH79NAgMBAAGjgdIwgc8wHQYDVR0O <newline>+BBYEFJWxtPCUtr3H2tERCSG+wa9J/RB7MAsGA1UdDwQEAwIBBjAPBgNVHRMBAf8E <newline>+BTADAQH/MIGPBgNVHSMEgYcwgYSAFJWxtPCUtr3H2tERCSG+wa9J/RB7oWmkZzBl <newline>+MQswCQYDVQQGEwJTRTEUMBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFk <newline>+ZFRydXN0IFRUUCBOZXR3b3JrMSEwHwYDVQQDExhBZGRUcnVzdCBDbGFzcyAxIENB <newline>+IFJvb3SCAQEwDQYJKoZIhvcNAQEFBQADggEBACxtZBsfzQ3duQH6lmM0MkhHma6X <newline>+7f1yFqZzR1r0693p9db7RcwpiURdv0Y5PejuvE1Uhh4dbOMXJ0PhiVYrqW9yTkkz <newline>+43J8KiOavD7/KCrto/8cI7pDVwlnTUtiBi34/2ydYB7YHEt9tTEv2dB8Xfjea4MY <newline>+eDdXL+gzB2ffHsdrKpV2ro9Xo/D0UrSpUwjP4E/TelOL/bscVjby/rK25Xa71SJl <newline>+pz/+0WatC7xrmYbvP33zGDLKe8bjq2RGlfgmadlVg3sslgf/WSxEo8bl6ancoWOA <newline>+WiFeIc9TVPC6b4nbqKqVz4vjccweGyBECMB6tkD9xOQ14R0WHNC8K47Wcdk= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_AddTrustClass1CARoot[] = <newline>+    "sha1/i9vXzKBoU0IW9MErJUT8Apyli0c="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIENjCCAx6gAwIBAgIBATANBgkqhkiG9w0BAQUFADBvMQswCQYDVQQGEwJTRTEU <newline>+MBIGA1UEChMLQWRkVHJ1c3QgQUIxJjAkBgNVBAsTHUFkZFRydXN0IEV4dGVybmFs <newline>+IFRUUCBOZXR3b3JrMSIwIAYDVQQDExlBZGRUcnVzdCBFeHRlcm5hbCBDQSBSb290 <newline>+MB4XDTAwMDUzMDEwNDgzOFoXDTIwMDUzMDEwNDgzOFowbzELMAkGA1UEBhMCU0Ux <newline>+FDASBgNVBAoTC0FkZFRydXN0IEFCMSYwJAYDVQQLEx1BZGRUcnVzdCBFeHRlcm5h <newline>+bCBUVFAgTmV0d29yazEiMCAGA1UEAxMZQWRkVHJ1c3QgRXh0ZXJuYWwgQ0EgUm9v <newline>+dDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALf3GjPm8gAELTngTlvt <newline>+H7xsD821+iO2zt6bETOXpClMfZOfvUq8k+0DGuOPz+VtUFrWlymUWoCwSXrbLpX9 <newline>+uMq/NzgtHj6RQa1wVsfwTz/oMp50ysiQVOnGXw94nZpAPA6sYapeFI+eh6FqUNzX <newline>+mk6vBbOmcZSccbNQYArHE504B4YCqOmoaSYYkKtMsE8jqzpPhNjfzp/haW+710LX <newline>+a0Tkx63ubUFfclpxCDezeWWkWaCUN/cALw3CknLa0Dhy2xSoRcRdKn23tNbE7qzN <newline>+E0S3ySvdQwAl+mG5aWpYIxG3pzOPVnVZ9c0p10a3CitlttNCbxWyuHv77+ldU9U0 <newline>+WicCAwEAAaOB3DCB2TAdBgNVHQ4EFgQUrb2YejS0Jvf6xCZU7wO94CTLVBowCwYD <newline>+VR0PBAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wgZkGA1UdIwSBkTCBjoAUrb2YejS0 <newline>+Jvf6xCZU7wO94CTLVBqhc6RxMG8xCzAJBgNVBAYTAlNFMRQwEgYDVQQKEwtBZGRU <newline>+cnVzdCBBQjEmMCQGA1UECxMdQWRkVHJ1c3QgRXh0ZXJuYWwgVFRQIE5ldHdvcmsx <newline>+IjAgBgNVBAMTGUFkZFRydXN0IEV4dGVybmFsIENBIFJvb3SCAQEwDQYJKoZIhvcN <newline>+AQEFBQADggEBALCb4IUlwtYj4g+WBpKdQZic2YR5gdkeWxQHIzZlj7DYd7usQWxH <newline>+YINRsPkyPef89iYTx4AWpb9a/IfPeHmJIZriTAcKhjW88t5RxNKWt9x+Tu5w/Rw5 <newline>+6wwCURQtjr0W4MHfRnXnJK3s9EK0hZNwEGe6nQY1ShjTK3rMUUKhemPR5ruhxSvC <newline>+Nr4TDea9Y355e6cJDUCrat2PisP29owaQgVR1EX1n6diIWgVIEM8med8vSTYqZEX <newline>+c4g/VhsxOBi0cQ+azcgOno4uG+GMmIPLHzHxREzGBHNJdmAPx/i9F4BrLunMTA5a <newline>+mnkPIAou1Z5jJh5VkpTYghdae9C8x49OhgQ= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_AddTrustExternalCARoot[] = <newline>+    "sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEFTCCAv2gAwIBAgIBATANBgkqhkiG9w0BAQUFADBkMQswCQYDVQQGEwJTRTEU <newline>+MBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3 <newline>+b3JrMSAwHgYDVQQDExdBZGRUcnVzdCBQdWJsaWMgQ0EgUm9vdDAeFw0wMDA1MzAx <newline>+MDQxNTBaFw0yMDA1MzAxMDQxNTBaMGQxCzAJBgNVBAYTAlNFMRQwEgYDVQQKEwtB <newline>+ZGRUcnVzdCBBQjEdMBsGA1UECxMUQWRkVHJ1c3QgVFRQIE5ldHdvcmsxIDAeBgNV <newline>+BAMTF0FkZFRydXN0IFB1YmxpYyBDQSBSb290MIIBIjANBgkqhkiG9w0BAQEFAAOC <newline>+AQ8AMIIBCgKCAQEA6Rowj4OIFMEg2Dybjxt+A3S72mnTRqX4jsIMEZBRpS9mVEBV <newline>+6tsfSlbunyNu9DnLoblv8n75XYcmYZ4c+OLspoH4IcUkzBEMP9smcnrHAZcHF/nX <newline>+GCwwfQ56HmIexkvA/X1id9NEHif2P0tEs7c42TkfYNVRknMDtABp4/MUTu7R3AnP <newline>+dzRGULD4EfL+OHn3Bzn+UZKXC1sIXzSGAa2Il+tmzV7R/9x98oTaunet3IAIx6eH <newline>+1lWfl2royBFkuucZKT8Rs3iQhCBSWxHveNCD9tVIkNAwHM+A+WD+eeSI8t0A65RF <newline>+62WUaUC6wNW0uLp9BBGo6zEFlpROWCGOn9Bg/QIDAQABo4HRMIHOMB0GA1UdDgQW <newline>+BBSBPjfYkrAfd59ctKtzquf2NGAv+jALBgNVHQ8EBAMCAQYwDwYDVR0TAQH/BAUw <newline>+AwEB/zCBjgYDVR0jBIGGMIGDgBSBPjfYkrAfd59ctKtzquf2NGAv+qFopGYwZDEL <newline>+MAkGA1UEBhMCU0UxFDASBgNVBAoTC0FkZFRydXN0IEFCMR0wGwYDVQQLExRBZGRU <newline>+cnVzdCBUVFAgTmV0d29yazEgMB4GA1UEAxMXQWRkVHJ1c3QgUHVibGljIENBIFJv <newline>+b3SCAQEwDQYJKoZIhvcNAQEFBQADggEBAAP3FUr4JNojVhaTdt02KLmuG7jD8WS6 <newline>+IBh4lSknVwW8fCr0uVFV2ocC3g8WFzH4qnkuCRO7r7IgGRLlk/lL+YPoRNWyQSW/ <newline>+iHVv/xD8SlTQX/D67zZzfRs2RcYhbbQVuE7PnFylPVoAjgbjPGsye/Kf8Lb93/Ao <newline>+GEjwxrzQvzSAlsJKsW2Ox5BF3i9nrEUEo3rcVZLJR2bYGozH7ZxOmuASu7VqTITh <newline>+4SINhwBk/ox9Yjllpu9CtoAlEmEBqCQTcAARJl/6NVDFSMwGR+gn2HCNX2TmoUQm <newline>+XiLsks3/QppEIW1cxeMiHV9HEufOX1362KqxMy3ZdvJOOjMMK7MtkAY= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_AddTrustPublicCARoot[] = <newline>+    "sha1/qFdl1ugyyMUZY3Namhd0OoHf7i4="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEHjCCAwagAwIBAgIBATANBgkqhkiG9w0BAQUFADBnMQswCQYDVQQGEwJTRTEU <newline>+MBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3 <newline>+b3JrMSMwIQYDVQQDExpBZGRUcnVzdCBRdWFsaWZpZWQgQ0EgUm9vdDAeFw0wMDA1 <newline>+MzAxMDQ0NTBaFw0yMDA1MzAxMDQ0NTBaMGcxCzAJBgNVBAYTAlNFMRQwEgYDVQQK <newline>+EwtBZGRUcnVzdCBBQjEdMBsGA1UECxMUQWRkVHJ1c3QgVFRQIE5ldHdvcmsxIzAh <newline>+BgNVBAMTGkFkZFRydXN0IFF1YWxpZmllZCBDQSBSb290MIIBIjANBgkqhkiG9w0B <newline>+AQEFAAOCAQ8AMIIBCgKCAQEA5B6a/twJWoekn0e+EV+vhDTbYjx5eLfpMLXsDBwq <newline>+xBb/4Oxx64r1EW7tTw2R0hIYLUkVAcKkIhPHEWT/IhKauY5cLwjPcWqzZwFZ8V1G <newline>+87B4pfYOQnrjfxvM0PC3KP0q6p6zsLkEqv32x7SxuCqg+1jxGaBvcCV+PmlKfw8i <newline>+2O+tCBGaKZnhqkRFmhJePp1tUvznoD1oL/BLcHwTOK28FSXx1s6rosAx1i+f4P8U <newline>+WfyEk9mHfExUE+uf0S0R+Bg6Ot4l2ffTQO2kBhLEO+GRwVY18BTcZTYJbqukB8c1 <newline>+0cIDMzZbdSZtQvESa0NvS3GU+jQd7RNuyoB/mC9suWXY6QIDAQABo4HUMIHRMB0G <newline>+A1UdDgQWBBQ5lYtii1zJ1IC6WA+XPxUIQ8yYpzALBgNVHQ8EBAMCAQYwDwYDVR0T <newline>+AQH/BAUwAwEB/zCBkQYDVR0jBIGJMIGGgBQ5lYtii1zJ1IC6WA+XPxUIQ8yYp6Fr <newline>+pGkwZzELMAkGA1UEBhMCU0UxFDASBgNVBAoTC0FkZFRydXN0IEFCMR0wGwYDVQQL <newline>+ExRBZGRUcnVzdCBUVFAgTmV0d29yazEjMCEGA1UEAxMaQWRkVHJ1c3QgUXVhbGlm <newline>+aWVkIENBIFJvb3SCAQEwDQYJKoZIhvcNAQEFBQADggEBABmrder4i2VhlRO6aQTv <newline>+hsoToMeqT2QbPxj2qC0sVY8FtzDqQmodwCVRLae/DLPt7wh/bDxGGuoYQ992zPlm <newline>+hpwsaPXpF/gxsxjE1kh9I0xowX67ARRvxdlu3rsEQmr49lx95dr6h+sNNVJn0J6X <newline>+dgWTP5XHAeZpVTh/EGGZyeNfpso+gmNIquIISD6q8rKFYqa0p9m9N5xotS1WfbC3 <newline>+P6CxB9bpT9zeRXEwMn8bLgn5v1Kh7sKAPgZcLlVAwRv1cEWw3F369nJad9Jjzc9Y <newline>+iQBCYz95OdBEsIJuQRno3eDBiFrRHnGTHyQwdOUeqN48Jzd/g66ed8/wMLH/S5no <newline>+xqE= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_AddTrustQualifiedCARoot[] = <newline>+    "sha1/vOS3IxJVmOVjQRkcUOS2R8J2Bdc="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEHTCCAwWgAwIBAgIQToEtioJl4AsC7j41AkblPTANBgkqhkiG9w0BAQUFADCB <newline>+gTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G <newline>+A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxJzAlBgNV <newline>+BAMTHkNPTU9ETyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0wNjEyMDEwMDAw <newline>+MDBaFw0yOTEyMzEyMzU5NTlaMIGBMQswCQYDVQQGEwJHQjEbMBkGA1UECBMSR3Jl <newline>+YXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHEwdTYWxmb3JkMRowGAYDVQQKExFDT01P <newline>+RE8gQ0EgTGltaXRlZDEnMCUGA1UEAxMeQ09NT0RPIENlcnRpZmljYXRpb24gQXV0 <newline>+aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0ECLi3LjkRv3 <newline>+UcEbVASY06m/weaKXTuH+7uIzg3jLz8GlvCiKVCZrts7oVewdFFxze1CkU1B/qnI <newline>+2GqGd0S7WWaXUF601CxwRM/aN5VCaTwwxHGzUvAhTaHYujl8HJ6jJJ3ygxaYqhZ8 <newline>+Q5sVW7euNJH+1GImGEaaP+vB+fGQV+useg2L23IwambV4EajcNxo2f8ESIl33rXp <newline>++2dtQem8Ob0y2WIC8bGoPW43nOIv4tOiJovGuFVDiOEjPqXSJDlqR6sA1KGzqSX+ <newline>+DT+nHbrTUcELpNqsOO9VUCQFZUaTNE8tja3G1CEZ0o7KBWFxB3NH5YoZEr0ETc5O <newline>+nKVIrLsm9wIDAQABo4GOMIGLMB0GA1UdDgQWBBQLWOWLxkwVN6RAqTCpIb5HNlpW <newline>+/zAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zBJBgNVHR8EQjBAMD6g <newline>+PKA6hjhodHRwOi8vY3JsLmNvbW9kb2NhLmNvbS9DT01PRE9DZXJ0aWZpY2F0aW9u <newline>+QXV0aG9yaXR5LmNybDANBgkqhkiG9w0BAQUFAAOCAQEAPpiem/Yb6dc5t3iuHXIY <newline>+SdOH5EOC6z/JqvWote9VfCFSZfnVDeFs9D6Mk3ORLgLETgdxb8CPOGEIqB6BCsAv <newline>+IC9Bi5HcSEW88cbeunZrM8gALTFGTO3nnc+IlP8zwFboJIYmuNg4ON8qa90SzMc/ <newline>+RxdMosIGlgnW2/4/PEZB31jiVg88O8EckzXZOFKs7sjsLjBOlDW0JB9LeGna8gI4 <newline>+zJVSk/BwJVmcIGfE7vmLV2H0knZ9P4SNVbfo5azV8fUZVqZa+5Acr5Pr5RzUZ5dd <newline>+BA6+C4OmF4O5MBKgxTMVBbkN+8cFduPYSo38NBejxiEovjBFMR7HeL5YYTisO+IB <newline>+ZQ== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_COMODOCertificationAuthority[] = <newline>+    "sha1/EeSR0cnkwOuazs9zVF3h8agwPsM="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEPzCCAyegAwIBAgIBATANBgkqhkiG9w0BAQUFADB+MQswCQYDVQ																								
Chromium	1	5	f21998d5620ed2b999e7bf5f0beebdd54f908bc	scottmg@chromium.org <scottmg@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Mar 27 05:41:23 2012 +0000	gyp r1246 -> r1282 The majority of these are test-only additions that don't affect existing build system functionality. r1247 Explicit paths to tools for ninja, rather than relying on environment r1248 Unbreak Windows build r1249 Unbreak Mac and vs2005 - Don't run tests on OS where they're not applicable. r1250 Fallback behaviour was broken for forcing express version r1251 MSBuild: TargetPath should match Lib.OutputFile or Link.OutputFile to avoid the MSB8012 warning. r1252 ninja windows: test for additional link dependencies r1253 ninja windows: test for runtime library settings r1254 ninja windows: test RTTI flag r1255 ninja windows: test for function level linking r1256 ninja windows: test ASLR (aka DYNAMICBASE) flag r1257 ninja windows: test for additional linker options r1258 ninja windows: test exception handling flags r1259 ninja windows: test for additional compiler options r1260 ninja windows: test linker subsystem flag r1261 Add run_dumpbin as test function for VS-based testers r1262 ninja windows: test for warning level r1263 ninja windows: add test for delayload dlls r1264 ninja windows: test for warning as error flag r1265 Fix exception handling test on vs2010 r1266 Don't try to find devenv on non-Windows. r1267 ninja windows: test for compiler optimization settings r1268 Correct topological sort. r1269 ninja windows: test that default libraries are correctly linked against r1270 ninja windows: test for opt:ref/noref r1271 ninja windows: test for opt:icf/noicf r1272 ninja windows: test for buffer security setting r1273 ninja windows: test for nxcompat linker flag r1274 ninja windows: test for linker debug information flag r1275 ninja windows: add test for RTC flag r1276 ninja windows: test for debug format setting r1277 ninja windows: test for incremental linking flag r1278 ninja windows: test for linker additional library directories r1279 ninja windows: test for linker fixed base address flag r1280 ninja windows: Fixes for recently added tests r1281 ninja windows: Various style fixes for recently added tests r1282 Change build commands to use @rsp files R=thakis@chromium.org			http://codereview.chromium.org/9863020	svn://svn.chromium.org/chrome/trunk/src@129146 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/DEPS b/DEPS <newline>index 6d49d67..219b532 100644 <newline>--- a/DEPS <newline>+++ b/DEPS <newline>@@ -119,7 +119,7 @@ deps = { <newline>     (Var("googlecode_url") % "grit-i18n") + "/trunk@18", <newline>   "src/tools/gyp": <newline>-    (Var("googlecode_url") % "gyp") + "/trunk@1246", <newline>+    (Var("googlecode_url") % "gyp") + "/trunk@1282", <newline>   "src/v8": <newline>     (Var("googlecode_url") % "v8") + "/trunk@" + Var("v8_revision"),																								
Chromium	1	5	50832ed8fef1c38c2bbc85414734f98669fe495	scottmg@chromium.org <scottmg@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Mar 27 05:41:23 2012 +0000	gyp r1246 -> r1282 The majority of these are test-only additions that don't affect existing build system functionality. r1247 Explicit paths to tools for ninja, rather than relying on environment r1248 Unbreak Windows build r1249 Unbreak Mac and vs2005 - Don't run tests on OS where they're not applicable. r1250 Fallback behaviour was broken for forcing express version r1251 MSBuild: TargetPath should match Lib.OutputFile or Link.OutputFile to avoid the MSB8012 warning. r1252 ninja windows: test for additional link dependencies r1253 ninja windows: test for runtime library settings r1254 ninja windows: test RTTI flag r1255 ninja windows: test for function level linking r1256 ninja windows: test ASLR (aka DYNAMICBASE) flag r1257 ninja windows: test for additional linker options r1258 ninja windows: test exception handling flags r1259 ninja windows: test for additional compiler options r1260 ninja windows: test linker subsystem flag r1261 Add run_dumpbin as test function for VS-based testers r1262 ninja windows: test for warning level r1263 ninja windows: add test for delayload dlls r1264 ninja windows: test for warning as error flag r1265 Fix exception handling test on vs2010 r1266 Don't try to find devenv on non-Windows. r1267 ninja windows: test for compiler optimization settings r1268 Correct topological sort. r1269 ninja windows: test that default libraries are correctly linked against r1270 ninja windows: test for opt:ref/noref r1271 ninja windows: test for opt:icf/noicf r1272 ninja windows: test for buffer security setting r1273 ninja windows: test for nxcompat linker flag r1274 ninja windows: test for linker debug information flag r1275 ninja windows: add test for RTC flag r1276 ninja windows: test for debug format setting r1277 ninja windows: test for incremental linking flag r1278 ninja windows: test for linker additional library directories r1279 ninja windows: test for linker fixed base address flag r1280 ninja windows: Fixes for recently added tests r1281 ninja windows: Various style fixes for recently added tests r1282 Change build commands to use @rsp files R=thakis@chromium.org			http://codereview.chromium.org/9863020	svn://svn.chromium.org/chrome/trunk/src@129146 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/DEPS b/DEPS <newline>index 6d49d67..219b532 100644 <newline>--- a/DEPS <newline>+++ b/DEPS <newline>@@ -119,7 +119,7 @@ deps = { <newline>     (Var("googlecode_url") % "grit-i18n") + "/trunk@18", <newline>   "src/tools/gyp": <newline>-    (Var("googlecode_url") % "gyp") + "/trunk@1246", <newline>+    (Var("googlecode_url") % "gyp") + "/trunk@1282", <newline>   "src/v8": <newline>     (Var("googlecode_url") % "v8") + "/trunk@" + Var("v8_revision"),																								
Chromium	5		7af6c47bffdbd7345b360677f70215ce8449770	agl@chromium.org <agl@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Mar 26 20:06:05 2012 +0000	Add hsts_preloaded.h This CL is the result of: % cat public_key_hashes.h transport_security_state.cc > hsts_preloaded.h This is purely to make a future CL easier to review. (Not reviewed)				svn://svn.chromium.org/chrome/trunk/src@128984 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/base/hsts_preloaded.h b/net/base/hsts_preloaded.h <newline>new file mode 100644 <newline>index 0000000..342c435 <newline>--- /dev/null <newline>+++ b/net/base/hsts_preloaded.h <newline>@@ -0,0 +1,2904 @@ <newline>+// Copyright (c) 2011 The Chromium Authors. All rights reserved. <newline>+// Use of this source code is governed by a BSD-style license that can be <newline>+// found in the LICENSE file. <newline>+ <newline>+#ifndef NET_BASE_PUBLIC_KEY_HASHES_ <newline>+#define NET_BASE_PUBLIC_KEY_HASHES_ <newline>+#pragma once <newline>+ <newline>+// This file contains SubjectPublicKeyInfo hashes for public key pinning. The <newline>+// hashes are base64 encoded, SHA1 digests. <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIICPDCCAaUCEDyRMcsf9tAbDpq40ES/Er4wDQYJKoZIhvcNAQEFBQAwXzELMAkG <newline>+A1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFz <newline>+cyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTk2 <newline>+MDEyOTAwMDAwMFoXDTI4MDgwMjIzNTk1OVowXzELMAkGA1UEBhMCVVMxFzAVBgNV <newline>+BAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFzcyAzIFB1YmxpYyBQcmlt <newline>+YXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGfMA0GCSqGSIb3DQEBAQUAA4GN <newline>+ADCBiQKBgQDJXFme8huKARS0EN8EQNvjV69qRUCPhAwL0TPZ2RHP7gJYHyX3KqhE <newline>+BarsAx94f56TuZoAqiN91qyFomNFx3InzPRMxnVx0jnvT0Lwdd8KkMaOIG+YD/is <newline>+I19wKTakyYbnsZogy1Olhec9vn2a/iRFM9x2Fe0PonFkTGUugWhFpwIDAQABMA0G <newline>+CSqGSIb3DQEBBQUAA4GBABByUqkFFBkyCEHwxWsKzH4PIRnN5GfcX6kb5sroc50i <newline>+2JhucwNhkcV8sEVAbkSdjbCxlnRhLQ2pRdKkkirWmnWXbj9T/UWZYB2oK0z5XqcJ <newline>+2HUw19JlYD1n1khVdWk/kfVIC0dpImmClr7JyDiGSnoscxlIaU5rfGW/D/xwzoiQ <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass3[] = <newline>+    "sha1/4n972HfV354KP560yw4uqe/baXc="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEGjCCAwICEQCbfgZJoz5iudXukEhxKe9XMA0GCSqGSIb3DQEBBQUAMIHKMQsw <newline>+CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZl <newline>+cmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWdu <newline>+LCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT <newline>+aWduIENsYXNzIDMgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp <newline>+dHkgLSBHMzAeFw05OTEwMDEwMDAwMDBaFw0zNjA3MTYyMzU5NTlaMIHKMQswCQYD <newline>+VQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT <newline>+aWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJ <newline>+bmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWdu <newline>+IENsYXNzIDMgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg <newline>+LSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMu6nFL8eB8aHm8b <newline>+N3O9+MlrlBIwT/A2R/XQkQr1F8ilYcEWQE37imGQ5XYgwREGfassbqb1EUGO+i2t <newline>+KmFZpGcmTNDovFJbcCAEWNF6yaRpvIMXZK0Fi7zQWM6NjPXr8EJJC52XJ2cybuGu <newline>+kxUccLwgTS8Y3pKI6GyFVxEa6X7jJhFUokWWVYPKMIno3Nij7SqAP395ZVc+FSBm <newline>+CC+Vk7+qRy+oRpfwEuL+wgorUeZ25rdGt+INpsyow0xZVYnm6FNcHOqd8GIWC6fJ <newline>+Xwzw3sJ2zq/3avL6QaaiMxTJ5Xpj055iN9WFZZ4O5lMkdBteHRJTW8cs54NJOxWu <newline>+imi5V5cCAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAERSWwauSCPc/L8my/uRan2Te <newline>+2yFPhpk0djZX3dAVL8WtfxUfN2JzPtTnX84XA9s1+ivbrmAJXx5fj267Cz3qWhMe <newline>+DGBvtcC1IyIuBwvLqXTLR7sdwdela8wv0kL9Sd2nic9TutoAWii/gt/4uhMdUIaC <newline>+/Y4wjylGsB49Ndo4YhYYSq3mtlFs3q9i6wHQHiT+eo8SGhJouPtmmRQURVyu565p <newline>+F4ErWjfJXir0xuKhXFSbplQAz/DxwceYMBo7Nhbbo27q/a2ywtrvAkcTisDxszGt <newline>+TxzhT5yvDwyd93gN2PQ1VoDat20Xj50egWTh/sVFuq1ruQp6Tk9LhO5L8X3dEQ== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass3_G3[] = <newline>+    "sha1/IvGeLsbqzPxdI0b0wuj2xVTdXgc="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIICsDCCAhmgAwIBAgIDC2dxMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT <newline>+MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0 <newline>+aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDkwNjA4MjA0MzI3WhcNMTMwNjA3MTk0MzI3 <newline>+WjBGMQswCQYDVQQGEwJVUzETMBEGA1UEChMKR29vZ2xlIEluYzEiMCAGA1UEAxMZ <newline>+R29vZ2xlIEludGVybmV0IEF1dGhvcml0eTCBnzANBgkqhkiG9w0BAQEFAAOBjQAw <newline>+gYkCgYEAye23pIucV+eEPkB9hPSP0XFjU5nneXQUr0SZMyCSjXvlKAy6rWxJfoNf <newline>+NFlOCnowzdDXxFdF7dWq1nMmzq0yE7jXDx07393cCDaob1FEm8rWIFJztyaHNWrb <newline>+qeXUWaUr/GcZOfqTGBhs3t0lig4zFEfC7wFQeeT9adGnwKziV28CAwEAAaOBozCB <newline>+oDAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFL/AMOv1QxE+Z7qekfv8atrjaxIk <newline>+MB8GA1UdIwQYMBaAFEjmaPkr0rKV10fYIyAQTzOYkJ/UMBIGA1UdEwEB/wQIMAYB <newline>+Af8CAQAwOgYDVR0fBDMwMTAvoC2gK4YpaHR0cDovL2NybC5nZW90cnVzdC5jb20v <newline>+Y3Jscy9zZWN1cmVjYS5jcmwwDQYJKoZIhvcNAQEFBQADgYEAuIojxkiWsRF8YHde <newline>+BZqrocb6ghwYB8TrgbCoZutJqOkM0ymt9e8kTP3kS8p/XmOrmSfLnzYhLLkQYGfN <newline>+0rTw8Ktx5YtaiScRhKqOv5nwnQkhClIZmloJ0pC3+gz4fniisIWvXEyZ2VxVKfml <newline>+UUIuOss4jHg7y/j7lYe8vJD5UDI= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Google1024[] = <newline>+    "sha1/QMVAHW+MuvCLAO3vse6H0AWzuc0="; <newline>+ <newline>+// Not yet used publicly. <newline>+static const char kSPKIHash_Google2048[] = <newline>+    "sha1/AbkhxY0L343gKf+cki7NVWp+ozk="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDIDCCAomgAwIBAgIENd70zzANBgkqhkiG9w0BAQUFADBOMQswCQYDVQQGEwJV <newline>+UzEQMA4GA1UEChMHRXF1aWZheDEtMCsGA1UECxMkRXF1aWZheCBTZWN1cmUgQ2Vy <newline>+dGlmaWNhdGUgQXV0aG9yaXR5MB4XDTk4MDgyMjE2NDE1MVoXDTE4MDgyMjE2NDE1 <newline>+MVowTjELMAkGA1UEBhMCVVMxEDAOBgNVBAoTB0VxdWlmYXgxLTArBgNVBAsTJEVx <newline>+dWlmYXggU2VjdXJlIENlcnRpZmljYXRlIEF1dGhvcml0eTCBnzANBgkqhkiG9w0B <newline>+AQEFAAOBjQAwgYkCgYEAwV2xWGcIYu6gmi0fCG2RFGiYCh7+2gRvE4RiIcPRfM6f <newline>+BeC4AfBONOziipUEZKzxa1NfBbPLZ4C/QgKO/t0BCezhABRP/PvwDN1Dulsr4R+A <newline>+cJkVV5MW8Q+XarfCaCMczE1ZMKxRHjuvK9buY0V7xdlfUNLjUA86iOe/FP3gx7kC <newline>+AwEAAaOCAQkwggEFMHAGA1UdHwRpMGcwZaBjoGGkXzBdMQswCQYDVQQGEwJVUzEQ <newline>+MA4GA1UEChMHRXF1aWZheDEtMCsGA1UECxMkRXF1aWZheCBTZWN1cmUgQ2VydGlm <newline>+aWNhdGUgQXV0aG9yaXR5MQ0wCwYDVQQDEwRDUkwxMBoGA1UdEAQTMBGBDzIwMTgw <newline>+ODIyMTY0MTUxWjALBgNVHQ8EBAMCAQYwHwYDVR0jBBgwFoAUSOZo+SvSspXXR9gj <newline>+IBBPM5iQn9QwHQYDVR0OBBYEFEjmaPkr0rKV10fYIyAQTzOYkJ/UMAwGA1UdEwQF <newline>+MAMBAf8wGgYJKoZIhvZ9B0EABA0wCxsFVjMuMGMDAgbAMA0GCSqGSIb3DQEBBQUA <newline>+A4GBAFjOKer89961zgK5F7WF0bnj4JXMJTENAKaSbn+2kmOeUJXRmm/kEd5jhW6Y <newline>+7qj/WsjTVbJmcVfewCHrPSqnI0kBBIZCe/zuf6IWUrVnZ9NA2zsmWLIodz2uFHdh <newline>+1voqZiegDfqnc1zqcPGUIWVEX/r87yloqaKHee9570+sB3c4 <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_EquifaxSecureCA[] = <newline>+    "sha1/SOZo+SvSspXXR9gjIBBPM5iQn9Q="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIICsjCCAhugAwIBAgIDBe3YMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT <newline>+MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0 <newline>+aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDUwODMxMjA0MDM3WhcNMTIwODMxMjA0MDM3 <newline>+WjBIMQswCQYDVQQGEwJVUzETMBEGA1UEChMKQWV0bmEgSW5jLjEkMCIGA1UEAxMb <newline>+QWV0bmEgSW5jLiBTZWN1cmUgU2VydmVyIENBMIGfMA0GCSqGSIb3DQEBAQUAA4GN <newline>+ADCBiQKBgQCnB2yrm4i44DG5epPu0fbe/pOZDWOvAS7qCcy6YbSkPfOHfH9Blmf3 <newline>+8L6D5yY1pzmTXaU7cDQu4qmj21toEIGwBziMmW6NsiV8nHtmtfXfHP6xrmyPUdN2 <newline>+DdTj937fnrYOoyMhGgBYEjiemeHFQxZSpKZdolFEFXbUa2/yWQafrQIDAQABo4Gj <newline>+MIGgMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQU2S4/xnaeitmFkzoxLnZeo33n <newline>+H4owHwYDVR0jBBgwFoAUSOZo+SvSspXXR9gjIBBPM5iQn9QwEgYDVR0TAQH/BAgw <newline>+BgEB/wIBADA6BgNVHR8EMzAxMC+gLaArhilodHRwOi8vY3JsLmdlb3RydXN0LmNv <newline>+bS9jcmxzL3NlY3VyZWNhLmNybDANBgkqhkiG9w0BAQUFAAOBgQBMSoZHIrD1rq8v <newline>+UG3UYbN76xiF9FDRzWTs5Mvv4Psvf2kk426slzNO0ukFAsmwqN1mA/P9Nc4FlMMC <newline>+YtcnLNwC/syEYdQBOJjxfTVGTqh5q6jDs7S3rPJv8mrFk8ldC8PxU1ZJVfSlFCDn <newline>+6diMDgvOAJfUeJlIRLGu2k/ksI0Y1w== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Aetna[] = <newline>+    "sha1/klKqFN6/gK4wqtlOYDhwJKVDLxo="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDfTCCAuagAwIBAgIDErvmMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT <newline>+MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0 <newline>+aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDIwNTIxMDQwMDAwWhcNMTgwODIxMDQwMDAw <newline>+WjBCMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEbMBkGA1UE <newline>+AxMSR2VvVHJ1c3QgR2xvYmFsIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB <newline>+CgKCAQEA2swYYzD99BcjGlZ+W988bDjkcbd4kdS8odhM+KhDtgPpTSEHCIjaWC9m <newline>+OSm9BXiLnTjoBbdqfnGk5sRgprDvgOSJKA+eJdbtg/OtppHHmMlCGDUUna2YRpIu <newline>+T8rxh0PBFpVXLVDviS2Aelet8u5fa9IAjbkU+BQVNdnARqN7csiRv8lVK83Qlz6c <newline>+JmTM386DGXHKTubU1XupGc1V3sjs0l44U+VcT4wt/lAjNvxm5suOpDkZALeVAjmR <newline>+Cw7+OC7RHQWa9k0+bw8HHa8sHo9gOeL6NlMTOdReJivbPagUvTLrGAMoUgRx5asz <newline>+PeE4uwc2hGKceeoWMPRfwCvocWvk+QIDAQABo4HwMIHtMB8GA1UdIwQYMBaAFEjm <newline>+aPkr0rKV10fYIyAQTzOYkJ/UMB0GA1UdDgQWBBTAephojYn7qwVkDBF9qn1luMrM <newline>+TjAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjA6BgNVHR8EMzAxMC+g <newline>+LaArhilodHRwOi8vY3JsLmdlb3RydXN0LmNvbS9jcmxzL3NlY3VyZWNhLmNybDBO <newline>+BgNVHSAERzBFMEMGBFUdIAAwOzA5BggrBgEFBQcCARYtaHR0cHM6Ly93d3cuZ2Vv <newline>+dHJ1c3QuY29tL3Jlc291cmNlcy9yZXBvc2l0b3J5MA0GCSqGSIb3DQEBBQUAA4GB <newline>+AHbhEm5OSxYShjAGsoEIz/AIx8dxfmbuwu3UOx//8PDITtZDOLC5MH0Y0FWDomrL <newline>+NhGc6Ehmo21/uBPUR/6LWlxz/K7ZGzIZOKuXNBSqltLroxwUCEm2u+WR74M26x1W <newline>+b8ravHNjkOR/ez4iyz0H7V84dJzjA1BOoa+Y7mHyhD8S <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustGlobal[] = <newline>+    "sha1/wHqYaI2J+6sFZAwRfap9ZbjKzE4="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDizCCAvSgAwIBAgIDDW5iMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT <newline>+MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0 <newline>+aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDYxMTI3MDAwMDAwWhcNMTgwODIxMTYxNTAw <newline>+WjBYMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjExMC8GA1UE <newline>+AxMoR2VvVHJ1c3QgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCCASIw <newline>+DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL64FXv/1Hx9Z62DZHvIQlMt3/aE <newline>+CCBh1gFZapxEEa/vdv2Vfs5hMLt6g18CvQFmyu4VjW+hMJy9oYWelDrzVogAMc/Y <newline>+7mqWAtntA4z7dW3n6rhVFgUWmvTgXrGIwGSFXBVNiMe3uuB16a0FPZ3HiUjguyjI <newline>+A+Ewk2ReUsBZcCI1V4iK8ZUKg9e8MXMBNO3vRnHgawKoNXJrl5tm4MsceV/YGgRo <newline>+HkcC5p1g4jaXAd/ONZLfvmfHbXdZO4+d1pAVlLxCNBDBOfmxJz5+1op1xbKvltOi <newline>+3pvkmL594emBrbZv/NcO2uA0sA0ad+fjCJjvWPqchLc2r8LfrNL0EAZwcTUCAwEA <newline>+AaOB6DCB5TAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFCzVUEGXFYvwjzZhW0r7 <newline>+a9mZyTOSMB8GA1UdIwQYMBaAFEjmaPkr0rKV10fYIyAQTzOYkJ/UMA8GA1UdEwEB <newline>+/wQFMAMBAf8wOgYDVR0fBDMwMTAvoC2gK4YpaHR0cDovL2NybC5nZW90cnVzdC5j <newline>+b20vY3Jscy9zZWN1cmVjYS5jcmwwRgYDVR0gBD8wPTA7BgRVHSAAMDMwMQYIKwYB <newline>+BQUHAgEWJWh0dHA6Ly93d3cuZ2VvdHJ1c3QuY29tL3Jlc291cmNlcy9jcHMwDQYJ <newline>+KoZIhvcNAQEFBQADgYEAr/MO1nKrx6mXyiprhDneeanwgeUIZ6vXLyACAXEMBCLJ <newline>+HoiVA8lJOq9nCEmw1Qj1ID2AkaDFh6P7yaMXkfmoL67pD9+Wcg91F4BdeAFNnx9t <newline>+e9j1QjgjGpmT9IO+OzV05zcTNXqstLaQgmwnpODsnjW9v+UpoUefWzL86Zl9Kzk= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustPrimary[] = <newline>+    "sha1/sBmJ5+/7Sq/LFI9YRjl2IkFQ4bo="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIFijCCBHKgAwIBAgIKYSCKYgAAAAAACDANBgkqhkiG9w0BAQUFADBSMQswCQYD <newline>+VQQGEwJVUzEaMBgGA1UEChMRSW50ZWwgQ29ycG9yYXRpb24xJzAlBgNVBAMTHklu <newline>+dGVsIEV4dGVybmFsIEJhc2ljIFBvbGljeSBDQTAeFw0wOTA1MTUxOTI3MjZaFw0x <newline>+NTA1MTUxOTM3MjZaMFYxCzAJBgNVBAYTAlVTMRowGAYDVQQKExFJbnRlbCBDb3Jw <newline>+b3JhdGlvbjErMCkGA1UEAxMiSW50ZWwgRXh0ZXJuYWwgQmFzaWMgSXNzdWluZyBD <newline>+QSAzQjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKQEM1Wn9TU9vc9C <newline>++/Tc7KB+eiYElmrcEWE32WUdHvWG+IcQHVQsikTmMyKKojNLw2B5s6Iekc8ivDo/ <newline>+wCfjZzX9JyftMnc+AArc0la87Olybzm8K9jXEfTBvTnUSFSiI9ZYefITdiUgqlAF <newline>+uljFZEHYKYtLuhrRacpmQfP4mV63NKdc2bT804HRf6YptZFa4k6YN94zlrGNrBuQ <newline>+Q74WFzz/jLBusbUpEkro6Mu/ZYFOFWQrV9lBhF9Ruk8yN+3N6n9fUo/qBigiF2kE <newline>+n9xVh1ykl7SCGL2jBUkXx4qgV27a6Si8lRRdgrHGtN/HWnSWlLXTH5l575H4Lq++ <newline>+77OFv38CAwEAAaOCAlwwggJYMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFA7G <newline>+KvdZsggQkCVvw939imYxMCvFMAsGA1UdDwQEAwIBhjASBgkrBgEEAYI3FQEEBQID <newline>+AQABMCMGCSsGAQQBgjcVAgQWBBQ5oFY2ekKQ/5Ktim+VdMeSWb4QWTAZBgkrBgEE <newline>+AYI3FAIEDB4KAFMAdQBiAEMAQTAfBgNVHSMEGDAWgBQaxgxKxEdvqNutK/D0Vgaj <newline>+7TdUDDCBvQYDVR0fBIG1MIGyMIGvoIGsoIGphk5odHRwOi8vd3d3LmludGVsLmNv <newline>+bS9yZXBvc2l0b3J5L0NSTC9JbnRlbCUyMEV4dGVybmFsJTIwQmFzaWMlMjBQb2xp <newline>+Y3klMjBDQS5jcmyGV2h0dHA6Ly9jZXJ0aWZpY2F0ZXMuaW50ZWwuY29tL3JlcG9z <newline>+aXRvcnkvQ1JML0ludGVsJTIwRXh0ZXJuYWwlMjBCYXNpYyUyMFBvbGljeSUyMENB <newline>+LmNybDCB4wYIKwYBBQUHAQEEgdYwgdMwYwYIKwYBBQUHMAKGV2h0dHA6Ly93d3cu <newline>+aW50ZWwuY29tL3JlcG9zaXRvcnkvY2VydGlmaWNhdGVzL0ludGVsJTIwRXh0ZXJu <newline>+YWwlMjBCYXNpYyUyMFBvbGljeSUyMENBLmNydDBsBggrBgEFBQcwAoZgaHR0cDov <newline>+L2NlcnRpZmljYXRlcy5pbnRlbC5jb20vcmVwb3NpdG9yeS9jZXJ0aWZpY2F0ZXMv <newline>+SW50ZWwlMjBFeHRlcm5hbCUyMEJhc2ljJTIwUG9saWN5JTIwQ0EuY3J0MA0GCSqG <newline>+SIb3DQEBBQUAA4IBAQCxtQEHchVQhXyjEqtMVUMe6gkmPsIczHxSeqNbo9dsD+6x <newline>+bT65JT+oYgpIAtfEsYXeUJu1cChqpb22U5bMAz7eaQcW5bzefufWvA6lg2048B8o <newline>+czBj/q+5P5NpYrUO8jOmN4jTjfJq3ElZ7yFWpy7rB3Vm/aN6ATYqWfMbS/xfh+JC <newline>+xmH3droUmMJI0/aZJHsLtjbjFnNsHDNrJZX1vxlM78Lb1hjskTENPmhbVbfTj5i/ <newline>+ZGnhv4tmI8QZPCNtcegXJrfhRl2D9bWpdTOPrWiLDUqzy1Z6KL7TcOS/PCl8RHCJ <newline>+XkPau/thTQCpIoDa2+c+3XA++gRTfAQ4svTO260N <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Intel[] = <newline>+    "sha1/DsYq91myCBCQJW/D3f2KZjEwK8U="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDWzCCAsSgAwIBAgIDCaxIMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT <newline>+MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0 <newline>+aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDgwODE1MTY0NTE1WhcNMTMwMjE0MTc0NTE1 <newline>+WjBtMQswCQYDVQQGEwJERTEcMBoGA1UEChMTVEMgVHJ1c3RDZW50ZXIgR21iSDEe <newline>+MBwGA1UECxMVVEMgVHJ1c3RDZW50ZXIgU1NMIENBMSAwHgYDVQQDExdUQyBUcnVz <newline>+dENlbnRlciBTU0wgQ0EgSTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB <newline>+AOkCoJoNbJw33wSxNWbDdmIfDIedR8Zmr/mjOhMkXdxRYb6qrl/WfMEuo4PBcysJ <newline>+kF81LaDMkBH0zc7Hs1eYixrMVObkCmEUjxYylgOk4ExGwhmIWDJUWGslNBUIIhFf <newline>++ucDWuGZNfILQrwCWRHYBG0n/6lZPylCqopCMYhBK5sTI/PyuHEAzDL7+buep/Na <newline>+zn+oy/a6x1nobsuL9X2oFaWZb7Z6ty5kZ/U56JHa7vnsLrg4ePwiQb8jtyUdz0fD <newline>+uMHkNzK0gWxr4hm0v92otYFuOTZqNLEJneeiILxUCCMop2chr1obpq2zGVNxJ/rP <newline>+StWmcu75KBGMpT+mzFgIyf0CAwEAAaOBozCBoDAOBgNVHQ8BAf8EBAMCAQYwHQYD <newline>+VR0OBBYEFOe/bKlImXeG4tD/MKCQHQtk0IU6MB8GA1UdIwQYMBaAFEjmaPkr0rKV <newline>+10fYIyAQTzOYkJ/UMBIGA1UdEwEB/wQIMAYBAf8CAQAwOgYDVR0fBDMwMTAvoC2g <newline>+K4YpaHR0cDovL2NybC5nZW90cnVzdC5jb20vY3Jscy9zZWN1cmVjYS5jcmwwDQYJ <newline>+KoZIhvcNAQEFBQADgYEAVKyJLbJha83PggEit8+dzh50wIsKXpTV2K6K4HnUI1kh <newline>+xqocLVfQORluC+LS7L78D2EKTWLZ8WNujiP6DbbIPSTsMasuiBMQMBUlJMUqsp/M <newline>+XmQJgIGAbxsr19MY6mmB30oWuo4cjHnkMzSCfhcON6Rxvbjijk2qCWXkk2T2HAk= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_TCTrustCenter[] = <newline>+    "sha1/gzuEEAB/bkqdQS3EIjk2by7lW+k="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDJDCCAo2gAwIBAgIDBfw3MA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT <newline>+MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0 <newline>+aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDYwNzIxMTUwNTA2WhcNMTEwNzEyMTUwNTA2 <newline>+WjA5MQswCQYDVQQGEwJVSzEXMBUGA1UEChMOVm9kYWZvbmUgR3JvdXAxETAPBgNV <newline>+BAMTCFZvZGFmb25lMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAs61K <newline>+wbMcB+GGGbjyo1dYEiVNGRYKRsDXfeOgeq03Vebf7D5Xq6a0Qs4Rvp6CuRTSNDPi <newline>+M+0vuQRW5sib9UD8UB2x4znc6FriRV4FUpAyKNVqQ9NB0MOBpQekVlX9DzcXkn+p <newline>+zWRi6tt3CtPsaDyHo06oAwX5qu3tW3pjtf0vnQqJWwwA6Mp4YJ/acHD/vVtt67hz <newline>+a0Upz0O2DEJetb3OaqI5yaNZ91y6i7sK0KTvBQxZHeJs+y5UjluHv3ptMUZvmsf0 <newline>+SiKysXnkg5mtsZSFlfM+U7dADq1zNb764NV5sSlmbDLEkvohQyg1p9gh2HX9Jk4A <newline>+e9nnF4hjw2U33HLBXwIDAQABo4GgMIGdMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4E <newline>+FgQUR+YiAaq+68BPLD6l0UcvzlkcgvswHwYDVR0jBBgwFoAUSOZo+SvSspXXR9gj <newline>+IBBPM5iQn9QwDwYDVR0TAQH/BAUwAwEB/zA6BgNVHR8EMzAxMC+gLaArhilodHRw <newline>+Oi8vY3JsLmdlb3RydXN0LmNvbS9jcmxzL3NlY3VyZWNhLmNybDANBgkqhkiG9w0B <newline>+AQUFAAOBgQCs37zuSY/KkPigCvJevu+ewWy9GP2bFZi5EaxKuHGF+tYFZUNkyc06 <newline>+ACYMM3ADPM6dVUYeXIDZnPfV8BJFCpdoAHkSNlg341AVjabCOWtzOYolBn0ua8Wi <newline>+BM471XfzzXD7yMliek9J4fUn2vQU7MYgEkSAA53ZkMScGDkA/c1wMQ== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Vodafone[] = <newline>+    "sha1/DX/hXFUUNmiZ/EDWIgjvIuvRFRw="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIID1TCCAr2gAwIBAgIDAjbRMA0GCSqGSIb3DQEBBQUAMEIxCzAJBgNVBAYTAlVT <newline>+MRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMRswGQYDVQQDExJHZW9UcnVzdCBHbG9i <newline>+YWwgQ0EwHhcNMTAwMjE5MjI0NTA1WhcNMjAwMjE4MjI0NTA1WjA8MQswCQYDVQQG <newline>+EwJVUzEXMBUGA1UEChMOR2VvVHJ1c3QsIEluYy4xFDASBgNVBAMTC1JhcGlkU1NM <newline>+IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAx3H4Vsce2cy1rfa0 <newline>+l6P7oeYLUF9QqjraD/w9KSRDxhApwfxVQHLuverfn7ZB9EhLyG7+T1cSi1v6kt1e <newline>+6K3z8Buxe037z/3R5fjj3Of1c3/fAUnPjFbBvTfjW761T4uL8NpPx+PdVUdp3/Jb <newline>+ewdPPeWsIcHIHXro5/YPoar1b96oZU8QiZwD84l6pV4BcjPtqelaHnnzh8jfyMX8 <newline>+N8iamte4dsywPuf95lTq319SQXhZV63xEtZ/vNWfcNMFbPqjfWdY3SZiHTGSDHl5 <newline>+HI7PynvBZq+odEj7joLCniyZXHstXZu8W1eefDp6E63yoxhbK1kPzVw662gzxigd <newline>+gtFQiwIDAQABo4HZMIHWMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUa2k9ahhC <newline>+St2PAmU5/TUkhniRFjAwHwYDVR0jBBgwFoAUwHqYaI2J+6sFZAwRfap9ZbjKzE4w <newline>+EgYDVR0TAQH/BAgwBgEB/wIBADA6BgNVHR8EMzAxMC+gLaArhilodHRwOi8vY3Js <newline>+Lmdlb3RydXN0LmNvbS9jcmxzL2d0Z2xvYmFsLmNybDA0BggrBgEFBQcBAQQoMCYw <newline>+JAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmdlb3RydXN0LmNvbTANBgkqhkiG9w0B <newline>+AQUFAAOCAQEAq7y8Cl0YlOPBscOoTFXWvrSY8e48HM3P8yQkXJYDJ1j8Nq6iL4/x <newline>+/torAsMzvcjdSCIrYA+lAxD9d/jQ7ZZnT/3qRyBwVNypDFV+4ZYlitm12ldKvo2O <newline>+SUNjpWxOJ4cl61tt/qJ/OCjgNqutOaWlYsS3XFgsql0BYKZiZ6PAx2Ij9OdsRu61 <newline>+04BqIhPSLT90T+qvjF+0OJzbrs6vhB6m9jRRWXnT43XcvNfzc9+S7NIgWW+c+5X4 <newline>+knYYCnwPLKbK3opie9jzzl9ovY8+wXS7FXI6FoOpC+ZNmZzYV+yoAVHHb1c0XqtK <newline>+LEL2TxyJeN4mTvVvk0wVaydWTQBUbHq3tw== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_RapidSSL[] = <newline>+    "sha1/o5OZxATDsgmwgcIfIWIneMJ0jkw="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDxTCCAq2gAwIBAgIQAqxcJmoLQJuPC3nyrkYldzANBgkqhkiG9w0BAQUFADBs <newline>+MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3 <newline>+d3cuZGlnaWNlcnQuY29tMSswKQYDVQQDEyJEaWdpQ2VydCBIaWdoIEFzc3VyYW5j <newline>+ZSBFViBSb290IENBMB4XDTA2MTExMDAwMDAwMFoXDTMxMTExMDAwMDAwMFowbDEL <newline>+MAkGA1UEBhMCVVMxFTATBgNVBAoTDERpZ2lDZXJ0IEluYzEZMBcGA1UECxMQd3d3 <newline>+LmRpZ2ljZXJ0LmNvbTErMCkGA1UEAxMiRGlnaUNlcnQgSGlnaCBBc3N1cmFuY2Ug <newline>+RVYgUm9vdCBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMbM5XPm <newline>++9S75S0tMqbf5YE/yc0lSbZxKsPVlDRnogocsF9ppkCxxLeyj9CYpKlBWTrT3JTW <newline>+PNt0OKRKzE0lgvdKpVMSOO7zSW1xkX5jtqumX8OkhPhPYlG++MXs2ziS4wblCJEM <newline>+xChBVfvLWokVfnHoNb9Ncgk9vjo4UFt3MRuNs8ckRZqnrG0AFFoEt7oT61EKmEFB <newline>+Ik5lYYeBQVCmeVyJ3hlKV9Uu5l0cUyx+mM0aBhakaHPQNAQTXKFx01p8VdteZOE3 <newline>+hzBWBOURtCmAEvF5OYiiAhF8J2a3iLd48soKqDirCmTCv2ZdlYTBoSUeh10aUAsg <newline>+EsxBu24LUTi4S8sCAwEAAaNjMGEwDgYDVR0PAQH/BAQDAgGGMA8GA1UdEwEB/wQF <newline>+MAMBAf8wHQYDVR0OBBYEFLE+w2kD+L9HAdSYJhoIAu9jZCvDMB8GA1UdIwQYMBaA <newline>+FLE+w2kD+L9HAdSYJhoIAu9jZCvDMA0GCSqGSIb3DQEBBQUAA4IBAQAcGgaX3Nec <newline>+nzyIZgYIVyHbIUf4KmeqvxgydkAQV8GK83rZEWWONfqe/EW1ntlMMUu4kehDLI6z <newline>+eM7b41N5cdblIZQB2lWHmiRk9opmzN6cN82oNLFpmyPInngiK3BD41VHMWEZ71jF <newline>+hS9OMPagMRYjyOfiZRYzy78aG6A9+MpeizGLYAiJLQwGXFK3xPkKmNEVX58Svnw2 <newline>+Yzi9RKR/5CYrCsSXaQ3pjOLAEFe4yHYSkVXySGnYvCoCWw9E1CAx2/S6cCZdkGCe <newline>+vEsXCS+0yx5DaMkHJ8HSXPfqIbloEpw8nL+e/IBcm2PN7EeqJSdnoDfzAIJ9VNep <newline>++OkuE6N36B9K <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_DigiCertEVRoot[] = <newline>+    "sha1/gzF+YoVCU9bXeDGQ7JGQVumRueM="; <newline>+ <newline>+// Not public <newline>+static const char kSPKIHash_Tor1[] = <newline>+    "sha1/juNxSTv9UANmpC9kF5GKpmWNx3Y="; <newline>+static const char kSPKIHash_Tor2[] = <newline>+    "sha1/lia43lPolzSPVIq34Dw57uYcLD8="; <newline>+static const char kSPKIHash_Tor3[] = <newline>+    "sha1/rzEyQIKOh77j87n5bjWUNguXF8Y="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIICPTCCAaYCEQDNun9W8N/kvFT+IqyzcqpVMA0GCSqGSIb3DQEBAgUAMF8xCzAJ <newline>+BgNVBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE3MDUGA1UECxMuQ2xh <newline>+c3MgMSBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw05 <newline>+NjAxMjkwMDAwMDBaFw0yODA4MDEyMzU5NTlaMF8xCzAJBgNVBAYTAlVTMRcwFQYD <newline>+VQQKEw5WZXJpU2lnbiwgSW5jLjE3MDUGA1UECxMuQ2xhc3MgMSBQdWJsaWMgUHJp <newline>+bWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCBnzANBgkqhkiG9w0BAQEFAAOB <newline>+jQAwgYkCgYEA5Rm/baNWYS2ZSHH2Z965jeu3noaACpEO+jglr0aIguVzqKCbJF0N <newline>+H8xlbgyw0FaEGIeaBpsQoXPftFg5a27B9hXVqKg/qhIGjTGsf7A01480Z4gJzRQR <newline>+4k5FVmkfeAKA2txHkSm7NsljXMXg1y2He6G3MrB7MLoqLzGq7qNn2tsCAwEAATAN <newline>+BgkqhkiG9w0BAQIFAAOBgQBMP7iLxmjf7kMzDl3ppssHhE16M/+SG/Q2rdiVIjZo <newline>+EWx8QszznC7EBz8UsA9P/5CSdvnivErpj82ggAr3xSnxgiJduLHdgSOjeyUVRjB5 <newline>+FvjqBUuUfx3CHMjjt/QQQDwTw18fU+hI5Ia0e6E1sHslurjTjqs/OJ0ANACY89Fx <newline>+lA== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass1[] = <newline>+    "sha1/I0PRSKJViZuUfUYaeX7ATP7RcLc="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDhDCCAwqgAwIBAgIQL4D+I4wOIg9IZxIokYesszAKBggqhkjOPQQDAzCByjEL <newline>+MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZW <newline>+ZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNyBWZXJpU2ln <newline>+biwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJp <newline>+U2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9y <newline>+aXR5IC0gRzQwHhcNMDcxMTA1MDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCByjELMAkG <newline>+A1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp <newline>+U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNyBWZXJpU2lnbiwg <newline>+SW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2ln <newline>+biBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5 <newline>+IC0gRzQwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAASnVnp8Utpkmw4tXNherJI9/gHm <newline>+GUo9FANL+mAnINmDiWn6VMaaGF5VKmTeBvaNSjutEDxlPZCIBIngMGGzrl0Bp3ve <newline>+fLK+ymVhAIau2o970ImtTR1ZmkGxvEeA3J5iw/mjgbIwga8wDwYDVR0TAQH/BAUw <newline>+AwEB/zAOBgNVHQ8BAf8EBAMCAQYwbQYIKwYBBQUHAQwEYTBfoV2gWzBZMFcwVRYJ <newline>+aW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUj+XTGoasjY5rw8+AatRIGCx7GS4wJRYj <newline>+aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nby5naWYwHQYDVR0OBBYEFLMW <newline>+kf3upm7ktS5Jj4d4gYDs5bG1MAoGCCqGSM49BAMDA2gAMGUCMGYhDBgmYFo4e1ZC <newline>+4Kf8NoRRkSAsdk1DPcQdhCPQrNZ8NQbOzWm9kA3bbEhCHQ6qQgIxAJw9SDkjOVga <newline>+FRJZap7v1VmyHVIsmXHNxynfGyphe3HR3vPA5Q06Sqotp9iGKt0uEA== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass3_G4[] = <newline>+    "sha1/7WYxNdMb1OymFMQp4xkGn5TBJlA="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEGjCCAwICEQDsoKeLbnVqAc/EfMwvlF7XMA0GCSqGSIb3DQEBBQUAMIHKMQsw <newline>+CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZl <newline>+cmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWdu <newline>+LCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT <newline>+aWduIENsYXNzIDQgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp <newline>+dHkgLSBHMzAeFw05OTEwMDEwMDAwMDBaFw0zNjA3MTYyMzU5NTlaMIHKMQswCQYD <newline>+VQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT <newline>+aWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJ <newline>+bmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWdu <newline>+IENsYXNzIDQgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg <newline>+LSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAK3LpRFpxlmr8Y+1 <newline>+GQ9Wzsy1HyDkniYlS+BzZYlZ3tCD5PUPtbut8XzoIfzk6AzufEUiGXaStBO3IFsJ <newline>++mGuqPKljYXCKtbeZjbSmwL0qJJgfJxptI8kHtCGUvYynEFYHiK9zUVilQhu0Gbd <newline>+U6LM8BDcVHOLBKFGMzNcF0C5nk3T875Vg+ixiY5afJqWIpA7iCXy0lOIAgwLePLm <newline>+NxdLMEYH5IBtptiWLugs+BGzOA1mppvqySNb247i8xOOGlktqgLw7KSHZtzBP/XY <newline>+ufTsgsbSPZUd5cBPhMnZo0QoBmrXRazwa2rvTl/4EYIeOGM0ZlDUPpNz+jDDZq3/ <newline>+ky2X7wMCAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAj/ola09b5KROJ1WrIhVZPMq1 <newline>+CtRK26vdoV9TxaBXOcLORyu+OshWv8LZJxA6sQU8wHcxuzrTBXttmhwwjIDLk5Mq <newline>+g6sFUYICABFna/OIYUdfA5PVWw3g8dShMjWFsjrbsIKr0csKvE+MW8VLADsfKoKm <newline>+fjaF3H48ZwC15DtS4KjrXRX5xm3wrR0OhbepmnMUWluPQSjA1egtTaRezarZ7c7c <newline>+2NU8Qh0XwRJdRTjDOPP8hS6DRkiy1yBfkjaP53kPmF6Z6PDQpLv1U70qzlmwr25/ <newline>+bLvSHgCwIe34QWKCudiyxLtGUPMxxY8BqHTr9Xgn2uf3ZkPznoM+IKrDNWCRzg== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass4_G3[] = <newline>+    "sha1/PANDaGiVHPNpKri0Jtq6j+ki5b0="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEGjCCAwICEQCLW3VWhFSFCwDPrzhIzrGkMA0GCSqGSIb3DQEBBQUAMIHKMQsw <newline>+CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZl <newline>+cmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWdu <newline>+LCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT <newline>+aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp <newline>+dHkgLSBHMzAeFw05OTEwMDEwMDAwMDBaFw0zNjA3MTYyMzU5NTlaMIHKMQswCQYD <newline>+VQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT <newline>+aWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJ <newline>+bmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWdu <newline>+IENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg <newline>+LSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAN2E1Lm0+afY8wR4 <newline>+nN493GwTFtl63SRRZsDHJlkNrAYIwpTRMx/wgzUfbhvI3qpuFU5UJ+/EbRrsC+MO <newline>+8ESlV8dAWB6jRx9x7GD2bZTIGDnt/kIYVt/kTEkQeE4BdjVjEjbdZrwBBDajVWjV <newline>+ojYJrKshJlQGrT/KFOCsyq0GHZXi+J3x4GD/wn91K0zM2v6HmSHquv4+VNfSWXjb <newline>+PG7PoBMAGrgnoeS+Z5bKoMWznN3JdZ7rMJpfo83ZrngZPyPpXNspva1VyBtUjGP2 <newline>+6KbqxzcSXKMpHgLZ2x87tNcPVkeBFQRKr4Mn0cVYiMHd9qqnoxjaaKptEVHhv2Vr <newline>+n5Z20T0CAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAq2aN17O6x5q25lXQBfGfMY1a <newline>+qtmqRiYPce2lrVNWYgFHKkTp/j90CxObufRNG7LRX7K20ohcs5/Ny9Sn2WCVhDr4 <newline>+wTcdYcrnsMXlkdpUpqwxga6X3s0IrLjAl4B/bnKk52kTlWUfxJM8/XmPBNQ+T+r3 <newline>+ns7NZ3xPZQL/kYVUc8f/NveGLezQXk//EZ9yBta4GvFMDSZl4kSAHsef493oCtrs <newline>+pSCAaWihT37ha88HQfqDjrw43bAuEbFrskLMmrz5SCJ5ShkPshw+IHTZasO+8ih4 <newline>+E1Z5T21Q6huwtVexN2ZYI/PcD98Kh8TvhgXVOBRgmaNL3gaWcSzy27YfpO8/7g== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass1_G3[] = <newline>+    "sha1/VRmyeKyygdftp6vBg5nDu2kEJLU="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEGTCCAwECEGFwy0mMX5hFKeewptlQW3owDQYJKoZIhvcNAQEFBQAwgcoxCzAJ <newline>+BgNVBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVy <newline>+aVNpZ24gVHJ1c3QgTmV0d29yazE6MDgGA1UECxMxKGMpIDE5OTkgVmVyaVNpZ24s <newline>+IEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25seTFFMEMGA1UEAxM8VmVyaVNp <newline>+Z24gQ2xhc3MgMiBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0 <newline>+eSAtIEczMB4XDTk5MTAwMTAwMDAwMFoXDTM2MDcxNjIzNTk1OVowgcoxCzAJBgNV <newline>+BAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNp <newline>+Z24gVHJ1c3QgTmV0d29yazE6MDgGA1UECxMxKGMpIDE5OTkgVmVyaVNpZ24sIElu <newline>+Yy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25seTFFMEMGA1UEAxM8VmVyaVNpZ24g <newline>+Q2xhc3MgMiBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAt <newline>+IEczMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArwoNwtUs22e5LeWU <newline>+J92lvuCwTY+zYVY81nzD9M0+hsuiiOLh2KRpxbXiv8GmR1BeRjmL1Za6tW8UvxDO <newline>+JxOeBUebMXoT2B/Z0wI3i60sR/COgQanDTAM6/c8DyAd3HJG7qUCyFvDyVZpTMUY <newline>+wZF7C9UTAJu878NIPkZgIIUq1ZC2zYugzDLdt/1AVbJQHFauzI13TccgTacxdu9o <newline>+koqQHgiBVrKtaaNS0MscxCM9H5n+TOgWY47GCI72MfbS+uV23bUckqNJzc0BzWjN <newline>+qWm6o+sdDZykIKbBoMXRRkwXbdKsZj+WjOCE1Db/IlnF+RFgqF8EffIa9iVCYQ/E <newline>+Srg+iQIDAQABMA0GCSqGSIb3DQEBBQUAA4IBAQA0JhU8wI1NQ0kdvekhktdmnLfe <newline>+xbjQ5F1fdiLAJvmEOjr5jLX77GDx6M4EsMjdpwOPMPOY36TmpDHf0xwLRtxyID+u <newline>+7gU8pDM/CzmscHhzS5kr3zDCVLCoO1Wh/hYozUK9dG6A2ydEp85EXdQbkJgNHkKU <newline>+sQAsBNB0owIFImNjzYO1+8FtYmtpdf1dcEG59b98377BMnMiIYtYgXsVkXq642RI <newline>+sH/7NiXaldDxJBQX3RiAa0YjOVT1jmIJBB2UkKab5iXiQkWquJCtvgiPqQtCGJTP <newline>+cjnhsUPgKM+351psE2tJs//jGHyJizNdrDPXp/naOlXJWBD5qu9ats9LS98q <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass2_G3[] = <newline>+    "sha1/Wr7Fddyu87COJxlD/H8lDD32YeM="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDAjCCAmsCEH3Z/gfPqB63EHln+6eJNMYwDQYJKoZIhvcNAQEFBQAwgcExCzAJ <newline>+BgNVBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE8MDoGA1UECxMzQ2xh <newline>+c3MgMyBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEcy <newline>+MTowOAYDVQQLEzEoYykgMTk5OCBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp <newline>+emVkIHVzZSBvbmx5MR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMB4X <newline>+DTk4MDUxODAwMDAwMFoXDTI4MDgwMTIzNTk1OVowgcExCzAJBgNVBAYTAlVTMRcw <newline>+FQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE8MDoGA1UECxMzQ2xhc3MgMyBQdWJsaWMg <newline>+UHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEcyMTowOAYDVQQLEzEo <newline>+YykgMTk5OCBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5 <newline>+MR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMIGfMA0GCSqGSIb3DQEB <newline>+AQUAA4GNADCBiQKBgQDMXtERXVxp0KvTuWpMmR9ZmDCOFoUgRm1HP9SFIIThbbP4 <newline>+pO0M8RcPO/mn+SXXwc+EY/J8Y8+iR/LGWzOOZEAEaMGAuWQcRXfH2G71lSk8UOg0 <newline>+13gfqLptQ5GVj0VXXn7F+8qkBOvqlzdUMG+7AUcyM83cV5tkaWH4mx0ciU9cZwID <newline>+AQABMA0GCSqGSIb3DQEBBQUAA4GBAFFNzb5cy5gZnBWyATl4Lk0PZ3BwmcYQWpSk <newline>+U01UbSuvDV1Ai2TT1+7eVmGSX6bEHRBhNtMsJzzoKQm5EWR0zLVznxxIqbxhAe7i <newline>+F6YM40AIOw7n60RzKprxaZLvcRTDOaxxp5EJb+RxBrO6WVcmeQD2+A2iMzAo1KpY <newline>+oJ2daZH9 <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass3_G2[] = <newline>+    "sha1/GiG0lStik84Ys2XsnA6TTLOB5tQ="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDAzCCAmwCEQC5L2DMiJ+hekYJuFtwbIqvMA0GCSqGSIb3DQEBBQUAMIHBMQsw <newline>+CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xPDA6BgNVBAsTM0Ns <newline>+YXNzIDIgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBH <newline>+MjE6MDgGA1UECxMxKGMpIDE5OTggVmVyaVNpZ24sIEluYy4gLSBGb3IgYXV0aG9y <newline>+aXplZCB1c2Ugb25seTEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29yazAe <newline>+Fw05ODA1MTgwMDAwMDBaFw0yODA4MDEyMzU5NTlaMIHBMQswCQYDVQQGEwJVUzEX <newline>+MBUGA1UEChMOVmVyaVNpZ24sIEluYy4xPDA6BgNVBAsTM0NsYXNzIDIgUHVibGlj <newline>+IFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHMjE6MDgGA1UECxMx <newline>+KGMpIDE5OTggVmVyaVNpZ24sIEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25s <newline>+eTEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29yazCBnzANBgkqhkiG9w0B <newline>+AQEFAAOBjQAwgYkCgYEAp4gBIXQs5xoD8JjhlzwPIQjxnNuX6Zr8wgQGE75fUsjM <newline>+HiwSViy4AWkszJkfrbCWrnkE8hM5wXuYuggs6MKEEyyqaekJ9MepAqRCwiNPStjw <newline>+DqL7MWzJ5m+ZJwf15vRMeJ5t60aG+rmGyVTyssSv1EYcWskVMP8NbPUtDm3Of3cC <newline>+AwEAATANBgkqhkiG9w0BAQUFAAOBgQByLvl/0fFx+8Se9sVeUYpAmLho+Jscg9ji <newline>+nb3/7aHmZuovCfTK1+qlK5X2JGCGTUQug6XELaDTrnhpb3LabK4I8GOSN+a7xDAX <newline>+rXfMSTWqz9iP0b63GJZHc2pUIjRkLbYWm1lbtFFZOrMLFPQS32eg9K0yZF6xRnIn <newline>+jBJ7xUS0rg== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass2_G2[] = <newline>+    "sha1/Eje6RRfurSkm/cHN/r7t8t7ZFFw="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIE0zCCA7ugAwIBAgIQGNrRniZ96LtKIVjNzGs7SjANBgkqhkiG9w0BAQUFADCB <newline>+yjELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL <newline>+ExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJp <newline>+U2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxW <newline>+ZXJpU2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0 <newline>+aG9yaXR5IC0gRzUwHhcNMDYxMTA4MDAwMDAwWhcNMzYwNzE2MjM1OTU5WjCByjEL <newline>+MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZW <newline>+ZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJpU2ln <newline>+biwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJp <newline>+U2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9y <newline>+aXR5IC0gRzUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1 <newline>+nmAMqudLO07cfLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKzj/i5Vbex <newline>+t0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2IIPVQT60nKWVSFJuUrjxuf6/WhkcIz <newline>+SdhDY2pSS9KP6HBRTdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY5fQG <newline>+BO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9r911kTMZHRxAy3QkGSGT2RT+ <newline>+rCpSx4/VBEnkjWNHiDxpg8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/ <newline>+NIeWiu5T6CUVAgMBAAGjgbIwga8wDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8E <newline>+BAMCAQYwbQYIKwYBBQUHAQwEYTBfoV2gWzBZMFcwVRYJaW1hZ2UvZ2lmMCEwHzAH <newline>+BgUrDgMCGgQUj+XTGoasjY5rw8+AatRIGCx7GS4wJRYjaHR0cDovL2xvZ28udmVy <newline>+aXNpZ24uY29tL3ZzbG9nby5naWYwHQYDVR0OBBYEFH/TZafC3ey78DAJ80M5+gKv <newline>+MzEzMA0GCSqGSIb3DQEBBQUAA4IBAQCTJEowX2LP2BqYLz3q3JktvXf2pXkiOOzE <newline>+p6B4Eq1iDkVwZMXnl2YtmAl+X6/WzChl8gGqCBpH3vn5fJJaCGkgDdk+bW48DW7Y <newline>+5gaRQBi5+MHt39tBquCWIMnNZBU4gcmU7qKEKQsTb47bDN0lAtukixlE0kF6BWlK <newline>+WE9gyn6CagsCqiUXObXbf+eEZSqVir2G3l6BFoMtEMze/aiCKm0oHw0LxOXnGiYZ <newline>+4fQRbxC1lfznQgUy286dUV4otp6F01vvpX1FQHKOtw5rDgb7MzVIcbidJ4vEZV8N <newline>+hnacRHr2lVz2XTIIM6RUthg/aFzyQkqFOFSDX9HoLPKsEdao7WNq <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass3_G5[] = <newline>+    "sha1/sYEIGhmkwJQf+uiVKMEkyZs0rMc="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEuTCCA6GgAwIBAgIQQBrEZCGzEyEDDrvkEhrFHTANBgkqhkiG9w0BAQsFADCB <newline>+vTELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL <newline>+ExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwOCBWZXJp <newline>+U2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MTgwNgYDVQQDEy9W <newline>+ZXJpU2lnbiBVbml2ZXJzYWwgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAe <newline>+Fw0wODA0MDIwMDAwMDBaFw0zNzEyMDEyMzU5NTlaMIG9MQswCQYDVQQGEwJVUzEX <newline>+MBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0 <newline>+IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA4IFZlcmlTaWduLCBJbmMuIC0gRm9y <newline>+IGF1dGhvcml6ZWQgdXNlIG9ubHkxODA2BgNVBAMTL1ZlcmlTaWduIFVuaXZlcnNh <newline>+bCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEF <newline>+AAOCAQ8AMIIBCgKCAQEAx2E3XrEBNNti1xWb/1hajCMj1mCOkdeQmIN65lgZOIzF <newline>+9uVkhbSicfvtvbnazU0AtMgtc6XHaXGVHzk8skQHnOgO+k1KxCHfKWGPMiJhgsWH <newline>+H26MfF8WIFFE0XBPV+rjHOPMee5Y2A7Cs0WTwCznmhcrewA3ekEzeOEz4vMQGn+H <newline>+LL729fdC4uW/h2KJXwBL38Xd5HVEMkE6HnFuacsLdUYI0crSK5XQz/u5QGtkjFdN <newline>+/BMReYTtXlT2NJ8IAfMQJQYXStrxHXpma5hgZqTZ79IugvHw7wnqRMkVauIDbjPT <newline>+rJ9VAMf2CGqUuV/c4DPxhGD5WycRtPwW8rtWaoAljQIDAQABo4GyMIGvMA8GA1Ud <newline>+EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMG0GCCsGAQUFBwEMBGEwX6FdoFsw <newline>+WTBXMFUWCWltYWdlL2dpZjAhMB8wBwYFKw4DAhoEFI/l0xqGrI2Oa8PPgGrUSBgs <newline>+exkuMCUWI2h0dHA6Ly9sb2dvLnZlcmlzaWduLmNvbS92c2xvZ28uZ2lmMB0GA1Ud <newline>+DgQWBBS2d/ppSEefUxLVwuoHMnYH0ZcHGTANBgkqhkiG9w0BAQsFAAOCAQEASvj4 <newline>+sAPmLGd75JR3Y8xuTPl9Dg3cyLk1uXBPY/ok+myDjEedO2Pzmvl2MpWRsXe8rJq+ <newline>+seQxIcaBlVZaDrHC1LGmWazxY8u4TB1ZkErvkBYoH1quEPuBUDgMbMzxPcP1Y+Oz <newline>+4yHJJDnp/RVmRvQbEdBNc6N9Rvk97ahfYtTxP/jgdFcrGJ2BtMQo2pSXpXDrrB2+ <newline>+BxHw1dvd5Yzw1TKwg+ZX4o+/vqGqvz0dtdQ46tewXDpPaj+PwGZsY6rp2aQW9IHR <newline>+lRQOfc2VNNnSj3BzgXucfr2YYdhFh5iQxeuGMMY1v/D/w1WIg0vvBZIGcfK4mJO3 <newline>+7M2CYfE45k+XmCpajQ== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignUniversal[] = <newline>+    "sha1/u8I+KQuzKHcdrT6iTb30I70GsD0="; <newline>+ <newline>+// Not public <newline>+static const char kSPKIHash_Twitter1[] = <newline>+    "sha1/Vv7zwhR9TtOIN/29MFI4cgHld40="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDZjCCAk6gAwIBAgIBATANBgkqhkiG9w0BAQUFADBEMQswCQYDVQQGEwJVUzEW <newline>+MBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEdMBsGA1UEAxMUR2VvVHJ1c3QgR2xvYmFs <newline>+IENBIDIwHhcNMDQwMzA0MDUwMDAwWhcNMTkwMzA0MDUwMDAwWjBEMQswCQYDVQQG <newline>+EwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEdMBsGA1UEAxMUR2VvVHJ1c3Qg <newline>+R2xvYmFsIENBIDIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDvPE1A <newline>+PRDfO1MA4Wf+lGAVPoWI8YkNkMgoI5kF6CsgncbzYEbYwbLVjDHZ3CB5JIG/NTL8 <newline>+Y2nbsSpr7iFY8gjpeMtvy/wWUsiRxP89c96xPqfCfWbB9X5SJBri1WeR0IIQ13hL <newline>+TytCOb1kLUCgsBDTOEhGiKEMuzozKmKY+wCdE1l/bztyqu6mD4b5BWHqZ38MN5aL <newline>+5mkWRxHCJ1kDs6ZgwiFAVvqgx306E+PsV8ez1q6diYD3Aecs9pYrEw15LNnA5IZ7 <newline>+S4wMcoKK+xfNAGw6EzywhIdLFnopsk/bHdQL82Y3vdj2V7teJHq4PIu5+pIaGoSe <newline>+2HSPqht/XvT+RSIhAgMBAAGjYzBhMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYE <newline>+FHE4NvICMVNHK266ZUapEBVYIAUJMB8GA1UdIwQYMBaAFHE4NvICMVNHK266ZUap <newline>+EBVYIAUJMA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG9w0BAQUFAAOCAQEAA/e1K6td <newline>+EPx7srJerJsOflN4WT5CBP51o62sgU7XAotexC3IUnbHLB/8gTKY0UvGkpMzNTEv <newline>+/NgdRN3ggX+d6YvhZJFiCzkIjKx0nVnZellSlxG5FntvRdOW2TF9AjYPnDtuzywN <newline>+A0ZF66D0f0hExghAzN4bcLUprbqLOzRldRtxIR0sFAqwlpW41uryZfspuk/qkZN0 <newline>+abby/+Ea0AzRdoXLiiW9l14sbxWZJue2Kf8i7MkCx1YAzUm5s2x7UwQa4qjJqhIF <newline>+I8LO57sEAszAR6LkxCkvW0VXiVHuPOtSCP8HNR6fNWpHSlaY0VqFH4z1Ir+rzoPz <newline>+4iIprn2DQKi6bA== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustGlobal2[] = <newline>+    "sha1/cTg28gIxU0crbrplRqkQFVggBQk="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIFaDCCA1CgAwIBAgIBATANBgkqhkiG9w0BAQUFADBFMQswCQYDVQQGEwJVUzEW <newline>+MBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEeMBwGA1UEAxMVR2VvVHJ1c3QgVW5pdmVy <newline>+c2FsIENBMB4XDTA0MDMwNDA1MDAwMFoXDTI5MDMwNDA1MDAwMFowRTELMAkGA1UE <newline>+BhMCVVMxFjAUBgNVBAoTDUdlb1RydXN0IEluYy4xHjAcBgNVBAMTFUdlb1RydXN0 <newline>+IFVuaXZlcnNhbCBDQTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAKYV <newline>+VaCjxuAfjJ0hUNfBvitbtaSeodlyWL0AG0y/YckUHUWCq8YdgNY96xCcOq9tJPi8 <newline>+cQGeBvV8Xx7BDlXKg5pZMK4ZyzBIle0iN430SppyZj6tlcDgFgDgEB8rMQ7XlFTT <newline>+QjOgNB0eRXbdT8oYN+yFFXoZCPzVx5zw8qkuEKmS5j1YPakWaDwvdSEYfyh3peFh <newline>+F7em6fgemdtzbvQKoiFs7tqqhZJmr/Z6a4LauiIINQ/PQvE1+mrufislzDoR5G2v <newline>+c7J2Ha3QsnhnGqQ5HFELZ1aD/ThdDc7d8Lsrlh/eezJS/R27tQahsiFepdaVaH/w <newline>+mZ7cRQg+59IJDTWU3YBOU5fXtQlEIGQWFwMCTFMNaN7VqnJNk22CDtucvc+081xd <newline>+VHppCZbW2xHBjXWotM85yM48vCR85mLK4b19p71XZQvk/iXttmkQ3CgaRr0BHdCX <newline>+teGYO8A3ZNY9lO4L4fUorgtWv3GLIylBjobFS1J72HGrH4oVpjuDWtdYAVHGTEHZ <newline>+f9hBZ3KiKN9gg6meyHv8U3NyWfWTehd2Ds735VzZC1U0oqpbtWpU5xPKV+yXbfRe <newline>+Bi9Fi1jUIxaS5BZuKGNZMN9QAZxjiRqf2xeUgnA3wySemkfWWspOqGmJch+RbNt+ <newline>+nhutxx9z3SxPGWX9f5NAEC7S8O08ni4oPmkmM8V7AgMBAAGjYzBhMA8GA1UdEwEB <newline>+/wQFMAMBAf8wHQYDVR0OBBYEFNq7LqqwDLiIJlF0XG0D08DYj3rWMB8GA1UdIwQY <newline>+MBaAFNq7LqqwDLiIJlF0XG0D08DYj3rWMA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG <newline>+9w0BAQUFAAOCAgEAMXjmx7XfuJRAyXHEqDXsRh3ChfMoWIawC/yOsjmPRFWrZIRc <newline>+aanQmjg8+uUfNeVE44B5lGiku8SfPeE0zTBGi1QrlaXv9z+ZhP015s8xxtxqv6fX <newline>+IwjhmF7DWgh2qaavdy+3YL1ERmrvl/9zlcGO6JP7/TG37FcREUWbMPEaiDnBTzyn <newline>+ANXH/KttgCJwpQzgXQQpAvvLoJHRfNbDflDVnVi+QTjruXU8FdmbyUqDWcDaU/0z <newline>+uzYYm4UPFd3uLax2k7nZAY1IEKj79TiG8dsKxr2EoyNB3tZ3b4XUhRxQ4K5RirqN <newline>+Pnbiucon8l+f725ZDQbYKxek0nxru18UGkiPGkzns0ccjkxFKyDuSN/n3QmOGKja <newline>+QI2SJhFTYXNd673nxE0pN2HrrDktZy4W1vUAg4WhzH92xH3kt0tm7wNFYGm2DFKW <newline>+koRepqO1pD4r2czYG0eq8kTaT/kD6PAUyz/zg97QwVTjt+gKN02LIFkDMBmhLMi9 <newline>+ER/frslKxfMnZmaGrGiR/9nmUxwPi1xpZQomyB40w11Re9epnAahNt3ViZS82eQt <newline>+DF4JbAiXfKM9fJP/P6EUp8+1Xevb2xzEdt+Iub1FBZUbrvxGakyvSOPOrg/Sfuvm <newline>+bJxPgWp6ZKy7PtXny3YuxadIwVyQD8vIP/rmMuGNG2+k5o7Y+SlIis5z/iw= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustUniversal[] = <newline>+    "sha1/h+hbY1PGI6MSjLD/u/VR/lmADiI="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIFbDCCA1SgAwIBAgIBATANBgkqhkiG9w0BAQUFADBHMQswCQYDVQQGEwJVUzEW <newline>+MBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEgMB4GA1UEAxMXR2VvVHJ1c3QgVW5pdmVy <newline>+c2FsIENBIDIwHhcNMDQwMzA0MDUwMDAwWhcNMjkwMzA0MDUwMDAwWjBHMQswCQYD <newline>+VQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEgMB4GA1UEAxMXR2VvVHJ1 <newline>+c3QgVW5pdmVyc2FsIENBIDIwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC <newline>+AQCzVFLByT7y2dyxUxpZKeexw0Uo5dfR7cXFS6GqdHtXr0om/Nj1XqduGdt0DE81 <newline>+WzILAePb63p3NeqqWuDW6KFXlPCQo3RWlEQwAx5cTiuFJnSCegx2oG9NzkEtoBUG <newline>+FF+3Qs17j1hhNNwqCPkuwwGmIkQcTAeC5lvO0Ep8BNMZcyfwqph/Lq9O64ceJHdq <newline>+XbboW0W63MOhBW9Wjo8QJqVJwy7XQYci4E+GymC16qFjwAGXEHm9ADwSbSsVsaxL <newline>+se4YuU6W3Nx2/zu+z18DwPw76L5GG//aQMJS9/7jOvdqdzXQ2o3rXhhqMcceujwb <newline>+KNZrVMaqW9eiLBsZzKIC9ptZvTdrhrVtgrrY6slWvKk2WP0+GfPtDCapkzj4T8Fd <newline>+IgbQl+rhrcZV4IErKIM6+vR7IVEAvlI4zs1meaj0gVbi0IMJR1FbUGrP20gaXT73 <newline>+y/Zl92zxlfgCOzJWgjl6W70viRu/obTo/3+NjN8D8WBOWBFM66M/ECuDmgFz2ZRt <newline>+hAAnZqzwcEAJQpKtT5MNYQlRJNiS1QuUYbKHsu3/mjX/hVTK7URDrBs8FmtISgoc <newline>+QIgfksILAAX/8sgCSqSqqcyZlpwvWOB94b67B9xfBHJcMTTD7F8t4D1kkCLm0ey4 <newline>+Lt1ZrtmhN79UNdxzMk+MBB4zsslG8dhcyFVQyWi9qLo2CQIDAQABo2MwYTAPBgNV <newline>+HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR281Xh+qQ2+/CfXGJx7Tz0RzgQKzAfBgNV <newline>+HSMEGDAWgBR281Xh+qQ2+/CfXGJx7Tz0RzgQKzAOBgNVHQ8BAf8EBAMCAYYwDQYJ <newline>+KoZIhvcNAQEFBQADggIBAGbBxiPz2eAubl/oz66wsCVNK/g7WJtAJDday6sWSf+z <newline>+dXkzoS9tcBc0kf5nfo/sm+VegqlVHy/c1FEHEv6sFj4sNcZj/NwQ6w2jqtB8zNHQ <newline>+L1EuxBRa3ugZ4T7GzKQp5y6EqgYweHZUcyiYWTjgAA1i00J9IZ+uPTqM1fp3DRgr <newline>+Fg5fNuH8KrUwJM/gYwx7WBr+mbpCErGR9Hxo4sjoryzqyX6uuyo9DRXcNJW2GHSo <newline>+ag/HtPQTxORb7QrSpJdMKu0vbBKJPfEncKpqA1Ihn0CoZ1Dy81of398j9tx4TuaY <newline>+T1U6U+Pv8vSfx3zYWK8pIpe44L2RLrB27FcRz+8pRPPphXpgY+RdM4kX2TGq2tbz <newline>+GDVyz4crL2MjhF2EjD9XoIj8mZEoJmmZ1I+XRL6O1UixpCgp8RW04eWe3fiPpm8m <newline>+1wk8OhwRDqZsN/etRIcsKMfYdIKz0G9KV7s1KSegi+ghp4dkNl3M2Basx7InQJJV <newline>+OCiNUW7dFGdTbHFcJoRNdVq2fmBWqU2t+5sel/MN2dKXVHfaPRK34B7vCAas+YWH <newline>+6aLcr34YEoP9VhdBLtUpgn2Z9DH2canPLAEnpQW5qrJITirvn5NSUZU8UnOOVkwX <newline>+QMAJKOSLakhT2+zNVVXxxvjpoixMptEmX36vWkzaH6byHCx+rgIW0lbQL1dTR+iS <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustUniversal2[] = <newline>+    "sha1/Xk9ThoXdT57KX9wNRW99UbHcm3s="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIICrjCCAjWgAwIBAgIQPLL0SAoA4v7rJDteYD7DazAKBggqhkjOPQQDAzCBmDEL <newline>+MAkGA1UEBhMCVVMxFjAUBgNVBAoTDUdlb1RydXN0IEluYy4xOTA3BgNVBAsTMChj <newline>+KSAyMDA3IEdlb1RydXN0IEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25seTE2 <newline>+MDQGA1UEAxMtR2VvVHJ1c3QgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0 <newline>+eSAtIEcyMB4XDTA3MTEwNTAwMDAwMFoXDTM4MDExODIzNTk1OVowgZgxCzAJBgNV <newline>+BAYTAlVTMRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMTkwNwYDVQQLEzAoYykgMjAw <newline>+NyBHZW9UcnVzdCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxNjA0BgNV <newline>+BAMTLUdlb1RydXN0IFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBH <newline>+MjB2MBAGByqGSM49AgEGBSuBBAAiA2IABBWx6P0DFUPlrOuHNxFi79KDNlJ9RVcL <newline>+So17VDs6bl8VAsBQps8lL33KSLjHUGMcKiEIfJo22Av+0SbFWDEwKCXzXV2juLal <newline>+tJLtbCyf691DiaI8S0iRHVDsJt/WYC69IaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAO <newline>+BgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFBVfNVdRVfslsq0DafwBo/q+EVXVMAoG <newline>+CCqGSM49BAMDA2cAMGQCMGSWWaboCd6LuvpaiIjwH5HTRqjySkwCY/tsXzjbLkGT <newline>+qQ7mndwxHLKgpxgceeHHNgIwOlavmnRs9vuD4DPTCF+hnMJbn0bWtsuRBmOiBucz <newline>+rD6ogRLQy7rQkgu2npaqBA+K <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustPrimary_G2[] = <newline>+    "sha1/vb6nG6txV/nkddlU0rcngBqCJoI="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIID/jCCAuagAwIBAgIQFaxulBmyeUtB9iepwxgPHzANBgkqhkiG9w0BAQsFADCB <newline>+mDELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUdlb1RydXN0IEluYy4xOTA3BgNVBAsT <newline>+MChjKSAyMDA4IEdlb1RydXN0IEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25s <newline>+eTE2MDQGA1UEAxMtR2VvVHJ1c3QgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhv <newline>+cml0eSAtIEczMB4XDTA4MDQwMjAwMDAwMFoXDTM3MTIwMTIzNTk1OVowgZgxCzAJ <newline>+BgNVBAYTAlVTMRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMTkwNwYDVQQLEzAoYykg <newline>+MjAwOCBHZW9UcnVzdCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxNjA0 <newline>+BgNVBAMTLUdlb1RydXN0IFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg <newline>+LSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANziXmJYHTNXOTIz <newline>++uvLh4yn1ErdBojqZI4xmKU4kB6Yzy5jK/BGvESyiaHAKAxJcCGVn2TAppMSAmUm <newline>+hsalifD614SgcK9PGpc/BkTVyetyEH3kMSj7HGHmKAdEc5IiaacDiGydY8hS2pgn <newline>+5whMcD60yRLBxWeDXTPzAxHsatBT4tG6NmCUgLthY2xbF37fQJQeqw3CIShwiP/W <newline>+JmxsYAQlTlV+fe+/lEjetx3dcI0FX4ilm/LC7urRQEFtYjgdVgbFA0dRIBn8exAL <newline>+DmKudlW/X3e+PkkBUz2YJQN2JFodtNuJ6nnltrM7P7pMKEF/BqxqjsHQ9gUdfeZC <newline>+huOl1UcCAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYw <newline>+HQYDVR0OBBYEFMR5yo6hTgMdHNxr2zFblD4/MH8tMA0GCSqGSIb3DQEBCwUAA4IB <newline>+AQAtxRPPVoB7eni9n64smefv2t+UXglpp+duaIy9cr5HqQ6XErhK8WTTOd8lNNTB <newline>+zU6B8A8ExCSzNJbGpqow32hhc9f5joWJ7w5elShKKiePEI4ufIbEAp7aDHdlDkQN <newline>+kv39sxY2+hENHYwOB4lqKVb3cvTdFZx3NWZXqxNT2I7BQMXXExZacse3aQHEerGD <newline>+AWh9jUGhlBjBJVz88P6DAod8DQ3PLghcSkANPuyBYeYk28rgDi0Hsj5W3I31QYUH <newline>+SJsMC8tJP33st/3LjWeJGqvtux6jAAgIFyqCXDFdRootD4abdNlF+9RAsXqqaC2G <newline>+spki4cErx5z481+oghLrGREt <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustPrimary_G3[] = <newline>+    "sha1/nKmNAK90Dd2BgNITRaWLjy6UONY="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEKjCCAxKgAwIBAgIEOGPe+DANBgkqhkiG9w0BAQUFADCBtDEUMBIGA1UEChMLRW50cnVzdC5u <newline>+ZXQxQDA+BgNVBAsUN3d3dy5lbnRydXN0Lm5ldC9DUFNfMjA0OCBpbmNvcnAuIGJ5IHJlZi4gKGxp <newline>+bWl0cyBsaWFiLikxJTAjBgNVBAsTHChjKSAxOTk5IEVudHJ1c3QubmV0IExpbWl0ZWQxMzAxBgNV <newline>+BAMTKkVudHJ1c3QubmV0IENlcnRpZmljYXRpb24gQXV0aG9yaXR5ICgyMDQ4KTAeFw05OTEyMjQx <newline>+NzUwNTFaFw0yOTA3MjQxNDE1MTJaMIG0MRQwEgYDVQQKEwtFbnRydXN0Lm5ldDFAMD4GA1UECxQ3 <newline>+d3d3LmVudHJ1c3QubmV0L0NQU18yMDQ4IGluY29ycC4gYnkgcmVmLiAobGltaXRzIGxpYWIuKTEl <newline>+MCMGA1UECxMcKGMpIDE5OTkgRW50cnVzdC5uZXQgTGltaXRlZDEzMDEGA1UEAxMqRW50cnVzdC5u <newline>+ZXQgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgKDIwNDgpMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A <newline>+MIIBCgKCAQEArU1LqRKGsuqjIAcVFmQqK0vRvwtKTY7tgHalZ7d4QMBzQshowNtTK91euHaYNZOL <newline>+Gp18EzoOH1u3Hs/lJBQesYGpjX24zGtLA/ECDNyrpUAkAH90lKGdCCmziAv1h3edVc3kw37XamSr <newline>+hRSGlVuXMlBvPci6Zgzj/L24ScF2iUkZ/cCovYmjZy/Gn7xxGWC4LeksyZB2ZnuU4q941mVTXTzW <newline>+nLLPKQP5L6RQstRIzgUyVYr9smRMDuSYB3Xbf9+5CFVghTAp+XtIpGmG4zU/HoZdenoVve8AjhUi <newline>+VBcAkCaTvA5JaJG/+EfTnZVCwQ5N328mz8MYIWJmQ3DW1cAH4QIDAQABo0IwQDAOBgNVHQ8BAf8E <newline>+BAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUVeSB0RGAvtiJuQijMfmhJAkWuXAwDQYJ <newline>+KoZIhvcNAQEFBQADggEBADubj1abMOdTmXx6eadNl9cZlZD7Bh/KM3xGY4+WZiT6QBshJ8rmcnPy <newline>+T/4xmf3IDExoU8aAghOY+rat2l098c5u9hURlIIM7j+VrxGrD9cv3h8Dj1csHsm7mhpElesYT6Yf <newline>+zX1XEC+bBAlahLVu2B064dae0Wx5XnkcFMXj0EyTO2U87d89vqbllRrDtRnDvV5bu/8j72gZyxKT <newline>+J1wDLW8w0B62GqzeWvfRqqgnpv55gcR5mTNXuhKwqeBCbJPKVt7+bYQLCIt+jerXmCHG8+c8eS9e <newline>+nNFMFY3h7CI3zJpDC5fcgJCNs2ebb0gIFVbPv/ErfF6adulZkMV8gzURZVE= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Entrust_2048[] = <newline>+    "sha1/VeSB0RGAvtiJuQijMfmhJAkWuXA="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEkTCCA3mgAwIBAgIERWtQVDANBgkqhkiG9w0BAQUFADCBsDELMAkGA1UEBhMC <newline>+VVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xOTA3BgNVBAsTMHd3dy5lbnRydXN0 <newline>+Lm5ldC9DUFMgaXMgaW5jb3Jwb3JhdGVkIGJ5IHJlZmVyZW5jZTEfMB0GA1UECxMW <newline>+KGMpIDIwMDYgRW50cnVzdCwgSW5jLjEtMCsGA1UEAxMkRW50cnVzdCBSb290IENl <newline>+cnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTA2MTEyNzIwMjM0MloXDTI2MTEyNzIw <newline>+NTM0MlowgbAxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1FbnRydXN0LCBJbmMuMTkw <newline>+NwYDVQQLEzB3d3cuZW50cnVzdC5uZXQvQ1BTIGlzIGluY29ycG9yYXRlZCBieSBy <newline>+ZWZlcmVuY2UxHzAdBgNVBAsTFihjKSAyMDA2IEVudHJ1c3QsIEluYy4xLTArBgNV <newline>+BAMTJEVudHJ1c3QgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCCASIwDQYJ <newline>+KoZIhvcNAQEBBQADggEPADCCAQoCggEBALaVtkNC+sZtKm9I35RMOVcF7sN5EUFo <newline>+Nu3s/poBj6E4KPz3EEZmLk0eGrEaTsbRwJWIsMn/MYszA9u3g3s+IIRe7bJWKKf4 <newline>+4LlAcTfFy0cOlypowCKVYhXbR9n10Cv/gkvJrT7eTNuQgFA/CYqEAOwwCj0Yzfv9 <newline>+KlmaI5UXLEWeH25DeW0MXJj+SKfFI0dcXv1u5x609mhF0YaDW6KKjbHjKYD+JXGI <newline>+rb68j6xSlkuqUY3kEzEZ6E5Nn9uss2rVvDlUccp6en+Q3X0dgNmBu1kmwhH+5pPi <newline>+94DkZfs0Nw4pgHBNrziGLp5/V6+eF67rHMsoIV+2HNjnogQi+dPa2MsCAwEAAaOB <newline>+sDCBrTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zArBgNVHRAEJDAi <newline>+gA8yMDA2MTEyNzIwMjM0MlqBDzIwMjYxMTI3MjA1MzQyWjAfBgNVHSMEGDAWgBRo <newline>+kORnpKZTgMeGZqTx90tD+4S9bTAdBgNVHQ4EFgQUaJDkZ6SmU4DHhmak8fdLQ/uE <newline>+vW0wHQYJKoZIhvZ9B0EABBAwDhsIVjcuMTo0LjADAgSQMA0GCSqGSIb3DQEBBQUA <newline>+A4IBAQCT1DCw1wMgKtD5Y+iRDAUgqV8ZyntyTtSx29CW+1RaGSwMCPeyvIWonX9t <newline>+O1KzKtvn1ISMY/YPyyYBkVBs9F8U4pN0wBOeMDpQ47RgxRzwIkSNcUesyBrJ6Zua <newline>+AGAT/3B+XxFNSRuzFVJ7yVTav52Vr2ua2J7p8eRDjeIRRDq/r72DQnNSi6q7pynP <newline>+9WQcCk3RvKqsnyrQ/39/2n3qse0wJcGE2jTSW3iDVuycNsMm4hH2Z0kdkquM++v/ <newline>+eu6FSqdQgPCnXEqULl8FmTxSQeDNtGPPAUO6nIPcj2A781q0tHuu2guQOHXvgR1m <newline>+0vdXcDazv/wor3ElhVsT/h5/WrQ8 <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Entrust_EV[] = <newline>+    "sha1/ukKwgYhTiB2GY71MwF4I/upuu3c="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEPjCCAyagAwIBAgIESlOMKDANBgkqhkiG9w0BAQsFADCBvjELMAkGA1UEBhMC <newline>+VVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50 <newline>+cnVzdC5uZXQvbGVnYWwtdGVybXMxOTA3BgNVBAsTMChjKSAyMDA5IEVudHJ1c3Qs <newline>+IEluYy4gLSBmb3IgYXV0aG9yaXplZCB1c2Ugb25seTEyMDAGA1UEAxMpRW50cnVz <newline>+dCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5IC0gRzIwHhcNMDkwNzA3MTcy <newline>+NTU0WhcNMzAxMjA3MTc1NTU0WjCBvjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUVu <newline>+dHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50cnVzdC5uZXQvbGVnYWwt <newline>+dGVybXMxOTA3BgNVBAsTMChjKSAyMDA5IEVudHJ1c3QsIEluYy4gLSBmb3IgYXV0 <newline>+aG9yaXplZCB1c2Ugb25seTEyMDAGA1UEAxMpRW50cnVzdCBSb290IENlcnRpZmlj <newline>+YXRpb24gQXV0aG9yaXR5IC0gRzIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK <newline>+AoIBAQC6hLZy254Ma+KZ6TABp3bqMriVQRrJ2mFOWHLP/vaCeb9zYQYKpSfYs1/T <newline>+RU4cctZOMvJyig/3gxnQaoCAAEUesMfnmr8SVycco2gvCoe9amsOXmXzHHfV1IWN <newline>+cCG0szLni6LVhjkCsbjSR87kyUnEO6fe+1R9V77w6G7CebI6C1XiUJgWMhNcL3hW <newline>+wcKUs/Ja5CeanyTXxuzQmyWC48zCxEXFjJd6BmsqEZ+pCm5IO2/b1BEZQvePB7/1 <newline>+U1+cPvQXLOZprE4yTGJ36rfo5bs0vBmLrpxR57d+tVOxMyLlbc9wPBr64ptntoP0 <newline>+jaWvYkxN4FisZDQSA/i2jZRjJKRxAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAP <newline>+BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRqciZ60B7vfec7aVHUbI2fkBJmqzAN <newline>+BgkqhkiG9w0BAQsFAAOCAQEAeZ8dlsa2eT8ijYfThwMEYGprmi5ZiXMRrEPR9RP/ <newline>+jTkrwPK9T3CMqS/qF8QLVJ7UG5aYMzyorWKiAHarWWluBh1+xLlEjZivEtRh2woZ <newline>+Rkfz6/djwUAFQKXSt/S1mja/qYh2iARVBCuch38aNzx+LaUa2NSJXsq9rD1s2G2v <newline>+1fN2D807iDginWyTmsQ9v4IbZT+mD12q/OWyFcq1rca8PdCE6OoGcrBNOTJ4vz4R <newline>+nAuknZoh8/CbCzB428Hch0P+vGOaysXCHMnHjf87ElgI5rY97HosTvuDls4MPGmH <newline>+VHOkc8KT/1EQrBVUAdj8BbGJoX90g5pJ19xOe4pIb4tF9g== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Entrust_G2[] = <newline>+    "sha1/qzDTr0vY8WtYae5FaSnahLhzlIg="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIE2DCCBEGgAwIBAgIEN0rSQzANBgkqhkiG9w0BAQUFADCBwzELMAkGA1UEBhMC <newline>+VVMxFDASBgNVBAoTC0VudHJ1c3QubmV0MTswOQYDVQQLEzJ3d3cuZW50cnVzdC5u <newline>+ZXQvQ1BTIGluY29ycC4gYnkgcmVmLiAobGltaXRzIGxpYWIuKTElMCMGA1UECxMc <newline>+KGMpIDE5OTkgRW50cnVzdC5uZXQgTGltaXRlZDE6MDgGA1UEAxMxRW50cnVzdC5u <newline>+ZXQgU2VjdXJlIFNlcnZlciBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw05OTA1 <newline>+MjUxNjA5NDBaFw0xOTA1MjUxNjM5NDBaMIHDMQswCQYDVQQGEwJVUzEUMBIGA1UE <newline>+ChMLRW50cnVzdC5uZXQxOzA5BgNVBAsTMnd3dy5lbnRydXN0Lm5ldC9DUFMgaW5j <newline>+b3JwLiBieSByZWYuIChsaW1pdHMgbGlhYi4pMSUwIwYDVQQLExwoYykgMTk5OSBF <newline>+bnRydXN0Lm5ldCBMaW1pdGVkMTowOAYDVQQDEzFFbnRydXN0Lm5ldCBTZWN1cmUg <newline>+U2VydmVyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGdMA0GCSqGSIb3DQEBAQUA <newline>+A4GLADCBhwKBgQDNKIM0VBuJ8w+vN5Ex/68xYMmo6LIQaO2f55M28Qpku0f1BBc/ <newline>+I0dNxScZgSYMVHINiC3ZH5oSn7yzcdOAGT9HZnuMNSjSuQrfJNqc1lB5gXpa0zf3 <newline>+wkrYKZImZNHkmGw6AIr1NJtl+O3jEP/9uElY3KDegjlrgbEWGWG5VLbmQwIBA6OC <newline>+AdcwggHTMBEGCWCGSAGG+EIBAQQEAwIABzCCARkGA1UdHwSCARAwggEMMIHeoIHb <newline>+oIHYpIHVMIHSMQswCQYDVQQGEwJVUzEUMBIGA1UEChMLRW50cnVzdC5uZXQxOzA5 <newline>+BgNVBAsTMnd3dy5lbnRydXN0Lm5ldC9DUFMgaW5jb3JwLiBieSByZWYuIChsaW1p <newline>+dHMgbGlhYi4pMSUwIwYDVQQLExwoYykgMTk5OSBFbnRydXN0Lm5ldCBMaW1pdGVk <newline>+MTowOAYDVQQDEzFFbnRydXN0Lm5ldCBTZWN1cmUgU2VydmVyIENlcnRpZmljYXRp <newline>+b24gQXV0aG9yaXR5MQ0wCwYDVQQDEwRDUkwxMCmgJ6AlhiNodHRwOi8vd3d3LmVu <newline>+dHJ1c3QubmV0L0NSTC9uZXQxLmNybDArBgNVHRAEJDAigA8xOTk5MDUyNTE2MDk0 <newline>+MFqBDzIwMTkwNTI1MTYwOTQwWjALBgNVHQ8EBAMCAQYwHwYDVR0jBBgwFoAU8Bdi <newline>+E1U9s/8KAGv7UISX8+1i0BowHQYDVR0OBBYEFPAXYhNVPbP/CgBr+1CEl/PtYtAa <newline>+MAwGA1UdEwQFMAMBAf8wGQYJKoZIhvZ9B0EABAwwChsEVjQuMAMCBJAwDQYJKoZI <newline>+hvcNAQEFBQADgYEAkNwwAvpkdMKnCqV8IY00F6j7Rw7/JXyNEwr75Ji174z4xRAN <newline>+95K+8cPV1ZVqBLssziY2ZcgxxufuP+NXdYR6Ee9GTxj005i7qIcyunL2POI9n9cd <newline>+2cNgQ4xYDiKWL2KjLB+6rQXvqzJ4h6BUcxm1XAX5Uj5tLUUL9wqT6u0G+bI= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Entrust_SSL[] = <newline>+    "sha1/8BdiE1U9s/8KAGv7UISX8+1i0Bo="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEMjCCAxqgAwIBAgIBATANBgkqhkiG9w0BAQUFADB7MQswCQYDVQQGEwJHQjEb <newline>+MBkGA1UECAwSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHDAdTYWxmb3JkMRow <newline>+GAYDVQQKDBFDb21vZG8gQ0EgTGltaXRlZDEhMB8GA1UEAwwYQUFBIENlcnRpZmlj <newline>+YXRlIFNlcnZpY2VzMB4XDTA0MDEwMTAwMDAwMFoXDTI4MTIzMTIzNTk1OVowezEL <newline>+MAkGA1UEBhMCR0IxGzAZBgNVBAgMEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UE <newline>+BwwHU2FsZm9yZDEaMBgGA1UECgwRQ29tb2RvIENBIExpbWl0ZWQxITAfBgNVBAMM <newline>+GEFBQSBDZXJ0aWZpY2F0ZSBTZXJ2aWNlczCCASIwDQYJKoZIhvcNAQEBBQADggEP <newline>+ADCCAQoCggEBAL5AnfRu4ep2hxxNRUSOvkbIgwadwSr+GB+O5AL686tdUIoWMQua <newline>+BtDFcCLNSS1UY8y2bmhGC1Pqy0wkwLxyTurxFa70VJoSCsN6sjNg4tqJVfMiWPPe <newline>+3M/vg4aijJRPn2jymJBGhCfHdr/jzDUsi14HZGWCwEiwqJH5YZ92IFCokcdmtet4 <newline>+YgNW8IoaE+oxox6gmf049vYnMlhvB/VruPsUK6+3qszWY19zjNoFmag4qMsXeDZR <newline>+rOme9Hg6jc8P2ULimAyrL58OAd7vn5lJ8S3frHRNG5i1R8XlKdH5kBjHYpy+g8cm <newline>+ez6KJcfA3Z3mNWgQIJ2P2N7Sw4ScDV7oL8kCAwEAAaOBwDCBvTAdBgNVHQ4EFgQU <newline>+oBEKIz6W8Qfs4q8p74Klf9AwpLQwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQF <newline>+MAMBAf8wewYDVR0fBHQwcjA4oDagNIYyaHR0cDovL2NybC5jb21vZG9jYS5jb20v <newline>+QUFBQ2VydGlmaWNhdGVTZXJ2aWNlcy5jcmwwNqA0oDKGMGh0dHA6Ly9jcmwuY29t <newline>+b2RvLm5ldC9BQUFDZXJ0aWZpY2F0ZVNlcnZpY2VzLmNybDANBgkqhkiG9w0BAQUF <newline>+AAOCAQEACFb8AvCb6P+k+tZ7xkSAzk/ExfYAWMymtrwUSWgEdujm7l3sAg9g1o1Q <newline>+GE8mTgHj5rCl7r+8dFRBv/38ErjHT1r0iWAFf2C3BUrz9vHCv8S5dIa2LX1rzNLz <newline>+Rt0vxuBqw8M0Ayx9lt1awg6nCpnBBYurDC/zXDrPbDdVCYfeU0BsWO/8tqtlbgT2 <newline>+G9w84FoVxp7Z8VlIMCFlA2zs6SFz7JsDoeA3raAVGI/6ugLOpyypEBMs1OUIJqsi <newline>+l2D4kF501KKaU73yqWjgom7C12yxow+ev+to51byrvLjKzg6CYG1a4XXvi3tPxq3 <newline>+smPi9WIsgtRqAEFQ8TmDn5XpNpaYbg== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_AAACertificateServices[] = <newline>+    "sha1/xDAoxdPjCAwQRIssd7okU5dgu/k="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEGDCCAwCgAwIBAgIBATANBgkqhkiG9w0BAQUFADBlMQswCQYDVQQGEwJTRTEU <newline>+MBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3 <newline>+b3JrMSEwHwYDVQQDExhBZGRUcnVzdCBDbGFzcyAxIENBIFJvb3QwHhcNMDAwNTMw <newline>+MTAzODMxWhcNMjAwNTMwMTAzODMxWjBlMQswCQYDVQQGEwJTRTEUMBIGA1UEChML <newline>+QWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3b3JrMSEwHwYD <newline>+VQQDExhBZGRUcnVzdCBDbGFzcyAxIENBIFJvb3QwggEiMA0GCSqGSIb3DQEBAQUA <newline>+A4IBDwAwggEKAoIBAQCWltQhSWDia+hBBwzexODcEyPNwTXH+9ZOEQpnXvUGW2ul <newline>+CDtbKRY654eyNAbFvAWlA3yCyykQruGIgb3WntP+LVbBFc7jJp0VLhD7Bo8wBN6n <newline>+tGO0/7Gcrjyvd7ZWxbWroulpOj0OM3kyP3CCkplhbY0wCI9xP6ZIVxn4JdxLZlyl <newline>+dI+Yrsj5wAYi56xz36Uu+1LcsRVlIPo1Zmne3yzxbrww2ywkEtvrNTVokMsAsJch <newline>+PXQhI2U0K7t4WaPW4XY5mqRJjox0r26kmqPZm9I4XJuiGMx1I4S+6+JNM3GOGvDC <newline>++Mcdoq0Dlyz4zyXG9rgkMbFjXZJ/Y/AlyVMuH79NAgMBAAGjgdIwgc8wHQYDVR0O <newline>+BBYEFJWxtPCUtr3H2tERCSG+wa9J/RB7MAsGA1UdDwQEAwIBBjAPBgNVHRMBAf8E <newline>+BTADAQH/MIGPBgNVHSMEgYcwgYSAFJWxtPCUtr3H2tERCSG+wa9J/RB7oWmkZzBl <newline>+MQswCQYDVQQGEwJTRTEUMBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFk <newline>+ZFRydXN0IFRUUCBOZXR3b3JrMSEwHwYDVQQDExhBZGRUcnVzdCBDbGFzcyAxIENB <newline>+IFJvb3SCAQEwDQYJKoZIhvcNAQEFBQADggEBACxtZBsfzQ3duQH6lmM0MkhHma6X <newline>+7f1yFqZzR1r0693p9db7RcwpiURdv0Y5PejuvE1Uhh4dbOMXJ0PhiVYrqW9yTkkz <newline>+43J8KiOavD7/KCrto/8cI7pDVwlnTUtiBi34/2ydYB7YHEt9tTEv2dB8Xfjea4MY <newline>+eDdXL+gzB2ffHsdrKpV2ro9Xo/D0UrSpUwjP4E/TelOL/bscVjby/rK25Xa71SJl <newline>+pz/+0WatC7xrmYbvP33zGDLKe8bjq2RGlfgmadlVg3sslgf/WSxEo8bl6ancoWOA <newline>+WiFeIc9TVPC6b4nbqKqVz4vjccweGyBECMB6tkD9xOQ14R0WHNC8K47Wcdk= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_AddTrustClass1CARoot[] = <newline>+    "sha1/i9vXzKBoU0IW9MErJUT8Apyli0c="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIENjCCAx6gAwIBAgIBATANBgkqhkiG9w0BAQUFADBvMQswCQYDVQQGEwJTRTEU <newline>+MBIGA1UEChMLQWRkVHJ1c3QgQUIxJjAkBgNVBAsTHUFkZFRydXN0IEV4dGVybmFs <newline>+IFRUUCBOZXR3b3JrMSIwIAYDVQQDExlBZGRUcnVzdCBFeHRlcm5hbCBDQSBSb290 <newline>+MB4XDTAwMDUzMDEwNDgzOFoXDTIwMDUzMDEwNDgzOFowbzELMAkGA1UEBhMCU0Ux <newline>+FDASBgNVBAoTC0FkZFRydXN0IEFCMSYwJAYDVQQLEx1BZGRUcnVzdCBFeHRlcm5h <newline>+bCBUVFAgTmV0d29yazEiMCAGA1UEAxMZQWRkVHJ1c3QgRXh0ZXJuYWwgQ0EgUm9v <newline>+dDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALf3GjPm8gAELTngTlvt <newline>+H7xsD821+iO2zt6bETOXpClMfZOfvUq8k+0DGuOPz+VtUFrWlymUWoCwSXrbLpX9 <newline>+uMq/NzgtHj6RQa1wVsfwTz/oMp50ysiQVOnGXw94nZpAPA6sYapeFI+eh6FqUNzX <newline>+mk6vBbOmcZSccbNQYArHE504B4YCqOmoaSYYkKtMsE8jqzpPhNjfzp/haW+710LX <newline>+a0Tkx63ubUFfclpxCDezeWWkWaCUN/cALw3CknLa0Dhy2xSoRcRdKn23tNbE7qzN <newline>+E0S3ySvdQwAl+mG5aWpYIxG3pzOPVnVZ9c0p10a3CitlttNCbxWyuHv77+ldU9U0 <newline>+WicCAwEAAaOB3DCB2TAdBgNVHQ4EFgQUrb2YejS0Jvf6xCZU7wO94CTLVBowCwYD <newline>+VR0PBAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wgZkGA1UdIwSBkTCBjoAUrb2YejS0 <newline>+Jvf6xCZU7wO94CTLVBqhc6RxMG8xCzAJBgNVBAYTAlNFMRQwEgYDVQQKEwtBZGRU <newline>+cnVzdCBBQjEmMCQGA1UECxMdQWRkVHJ1c3QgRXh0ZXJuYWwgVFRQIE5ldHdvcmsx <newline>+IjAgBgNVBAMTGUFkZFRydXN0IEV4dGVybmFsIENBIFJvb3SCAQEwDQYJKoZIhvcN <newline>+AQEFBQADggEBALCb4IUlwtYj4g+WBpKdQZic2YR5gdkeWxQHIzZlj7DYd7usQWxH <newline>+YINRsPkyPef89iYTx4AWpb9a/IfPeHmJIZriTAcKhjW88t5RxNKWt9x+Tu5w/Rw5 <newline>+6wwCURQtjr0W4MHfRnXnJK3s9EK0hZNwEGe6nQY1ShjTK3rMUUKhemPR5ruhxSvC <newline>+Nr4TDea9Y355e6cJDUCrat2PisP29owaQgVR1EX1n6diIWgVIEM8med8vSTYqZEX <newline>+c4g/VhsxOBi0cQ+azcgOno4uG+GMmIPLHzHxREzGBHNJdmAPx/i9F4BrLunMTA5a <newline>+mnkPIAou1Z5jJh5VkpTYghdae9C8x49OhgQ= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_AddTrustExternalCARoot[] = <newline>+    "sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEFTCCAv2gAwIBAgIBATANBgkqhkiG9w0BAQUFADBkMQswCQYDVQQGEwJTRTEU <newline>+MBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3 <newline>+b3JrMSAwHgYDVQQDExdBZGRUcnVzdCBQdWJsaWMgQ0EgUm9vdDAeFw0wMDA1MzAx <newline>+MDQxNTBaFw0yMDA1MzAxMDQxNTBaMGQxCzAJBgNVBAYTAlNFMRQwEgYDVQQKEwtB <newline>+ZGRUcnVzdCBBQjEdMBsGA1UECxMUQWRkVHJ1c3QgVFRQIE5ldHdvcmsxIDAeBgNV <newline>+BAMTF0FkZFRydXN0IFB1YmxpYyBDQSBSb290MIIBIjANBgkqhkiG9w0BAQEFAAOC <newline>+AQ8AMIIBCgKCAQEA6Rowj4OIFMEg2Dybjxt+A3S72mnTRqX4jsIMEZBRpS9mVEBV <newline>+6tsfSlbunyNu9DnLoblv8n75XYcmYZ4c+OLspoH4IcUkzBEMP9smcnrHAZcHF/nX <newline>+GCwwfQ56HmIexkvA/X1id9NEHif2P0tEs7c42TkfYNVRknMDtABp4/MUTu7R3AnP <newline>+dzRGULD4EfL+OHn3Bzn+UZKXC1sIXzSGAa2Il+tmzV7R/9x98oTaunet3IAIx6eH <newline>+1lWfl2royBFkuucZKT8Rs3iQhCBSWxHveNCD9tVIkNAwHM+A+WD+eeSI8t0A65RF <newline>+62WUaUC6wNW0uLp9BBGo6zEFlpROWCGOn9Bg/QIDAQABo4HRMIHOMB0GA1UdDgQW <newline>+BBSBPjfYkrAfd59ctKtzquf2NGAv+jALBgNVHQ8EBAMCAQYwDwYDVR0TAQH/BAUw <newline>+AwEB/zCBjgYDVR0jBIGGMIGDgBSBPjfYkrAfd59ctKtzquf2NGAv+qFopGYwZDEL <newline>+MAkGA1UEBhMCU0UxFDASBgNVBAoTC0FkZFRydXN0IEFCMR0wGwYDVQQLExRBZGRU <newline>+cnVzdCBUVFAgTmV0d29yazEgMB4GA1UEAxMXQWRkVHJ1c3QgUHVibGljIENBIFJv <newline>+b3SCAQEwDQYJKoZIhvcNAQEFBQADggEBAAP3FUr4JNojVhaTdt02KLmuG7jD8WS6 <newline>+IBh4lSknVwW8fCr0uVFV2ocC3g8WFzH4qnkuCRO7r7IgGRLlk/lL+YPoRNWyQSW/ <newline>+iHVv/xD8SlTQX/D67zZzfRs2RcYhbbQVuE7PnFylPVoAjgbjPGsye/Kf8Lb93/Ao <newline>+GEjwxrzQvzSAlsJKsW2Ox5BF3i9nrEUEo3rcVZLJR2bYGozH7ZxOmuASu7VqTITh <newline>+4SINhwBk/ox9Yjllpu9CtoAlEmEBqCQTcAARJl/6NVDFSMwGR+gn2HCNX2TmoUQm <newline>+XiLsks3/QppEIW1cxeMiHV9HEufOX1362KqxMy3ZdvJOOjMMK7MtkAY= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_AddTrustPublicCARoot[] = <newline>+    "sha1/qFdl1ugyyMUZY3Namhd0OoHf7i4="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEHjCCAwagAwIBAgIBATANBgkqhkiG9w0BAQUFADBnMQswCQYDVQQGEwJTRTEU <newline>+MBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3 <newline>+b3JrMSMwIQYDVQQDExpBZGRUcnVzdCBRdWFsaWZpZWQgQ0EgUm9vdDAeFw0wMDA1 <newline>+MzAxMDQ0NTBaFw0yMDA1MzAxMDQ0NTBaMGcxCzAJBgNVBAYTAlNFMRQwEgYDVQQK <newline>+EwtBZGRUcnVzdCBBQjEdMBsGA1UECxMUQWRkVHJ1c3QgVFRQIE5ldHdvcmsxIzAh <newline>+BgNVBAMTGkFkZFRydXN0IFF1YWxpZmllZCBDQSBSb290MIIBIjANBgkqhkiG9w0B <newline>+AQEFAAOCAQ8AMIIBCgKCAQEA5B6a/twJWoekn0e+EV+vhDTbYjx5eLfpMLXsDBwq <newline>+xBb/4Oxx64r1EW7tTw2R0hIYLUkVAcKkIhPHEWT/IhKauY5cLwjPcWqzZwFZ8V1G <newline>+87B4pfYOQnrjfxvM0PC3KP0q6p6zsLkEqv32x7SxuCqg+1jxGaBvcCV+PmlKfw8i <newline>+2O+tCBGaKZnhqkRFmhJePp1tUvznoD1oL/BLcHwTOK28FSXx1s6rosAx1i+f4P8U <newline>+WfyEk9mHfExUE+uf0S0R+Bg6Ot4l2ffTQO2kBhLEO+GRwVY18BTcZTYJbqukB8c1 <newline>+0cIDMzZbdSZtQvESa0NvS3GU+jQd7RNuyoB/mC9suWXY6QIDAQABo4HUMIHRMB0G <newline>+A1UdDgQWBBQ5lYtii1zJ1IC6WA+XPxUIQ8yYpzALBgNVHQ8EBAMCAQYwDwYDVR0T <newline>+AQH/BAUwAwEB/zCBkQYDVR0jBIGJMIGGgBQ5lYtii1zJ1IC6WA+XPxUIQ8yYp6Fr <newline>+pGkwZzELMAkGA1UEBhMCU0UxFDASBgNVBAoTC0FkZFRydXN0IEFCMR0wGwYDVQQL <newline>+ExRBZGRUcnVzdCBUVFAgTmV0d29yazEjMCEGA1UEAxMaQWRkVHJ1c3QgUXVhbGlm <newline>+aWVkIENBIFJvb3SCAQEwDQYJKoZIhvcNAQEFBQADggEBABmrder4i2VhlRO6aQTv <newline>+hsoToMeqT2QbPxj2qC0sVY8FtzDqQmodwCVRLae/DLPt7wh/bDxGGuoYQ992zPlm <newline>+hpwsaPXpF/gxsxjE1kh9I0xowX67ARRvxdlu3rsEQmr49lx95dr6h+sNNVJn0J6X <newline>+dgWTP5XHAeZpVTh/EGGZyeNfpso+gmNIquIISD6q8rKFYqa0p9m9N5xotS1WfbC3 <newline>+P6CxB9bpT9zeRXEwMn8bLgn5v1Kh7sKAPgZcLlVAwRv1cEWw3F369nJad9Jjzc9Y <newline>+iQBCYz95OdBEsIJuQRno3eDBiFrRHnGTHyQwdOUeqN48Jzd/g66ed8/wMLH/S5no <newline>+xqE= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_AddTrustQualifiedCARoot[] = <newline>+    "sha1/vOS3IxJVmOVjQRkcUOS2R8J2Bdc="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEHTCCAwWgAwIBAgIQToEtioJl4AsC7j41AkblPTANBgkqhkiG9w0BAQUFADCB <newline>+gTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G <newline>+A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxJzAlBgNV <newline>+BAMTHkNPTU9ETyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0wNjEyMDEwMDAw <newline>+MDBaFw0yOTEyMzEyMzU5NTlaMIGBMQswCQYDVQQGEwJHQjEbMBkGA1UECBMSR3Jl <newline>+YXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHEwdTYWxmb3JkMRowGAYDVQQKExFDT01P <newline>+RE8gQ0EgTGltaXRlZDEnMCUGA1UEAxMeQ09NT0RPIENlcnRpZmljYXRpb24gQXV0 <newline>+aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0ECLi3LjkRv3 <newline>+UcEbVASY06m/weaKXTuH+7uIzg3jLz8GlvCiKVCZrts7oVewdFFxze1CkU1B/qnI <newline>+2GqGd0S7WWaXUF601CxwRM/aN5VCaTwwxHGzUvAhTaHYujl8HJ6jJJ3ygxaYqhZ8 <newline>+Q5sVW7euNJH+1GImGEaaP+vB+fGQV+useg2L23IwambV4EajcNxo2f8ESIl33rXp <newline>++2dtQem8Ob0y2WIC8bGoPW43nOIv4tOiJovGuFVDiOEjPqXSJDlqR6sA1KGzqSX+ <newline>+DT+nHbrTUcELpNqsOO9VUCQFZUaTNE8tja3G1CEZ0o7KBWFxB3NH5YoZEr0ETc5O <newline>+nKVIrLsm9wIDAQABo4GOMIGLMB0GA1UdDgQWBBQLWOWLxkwVN6RAqTCpIb5HNlpW <newline>+/zAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zBJBgNVHR8EQjBAMD6g <newline>+PKA6hjhodHRwOi8vY3JsLmNvbW9kb2NhLmNvbS9DT01PRE9DZXJ0aWZpY2F0aW9u <newline>+QXV0aG9yaXR5LmNybDANBgkqhkiG9w0BAQUFAAOCAQEAPpiem/Yb6dc5t3iuHXIY <newline>+SdOH5EOC6z/JqvWote9VfCFSZfnVDeFs9D6Mk3ORLgLETgdxb8CPOGEIqB6BCsAv <newline>+IC9Bi5HcSEW88cbeunZrM8gALTFGTO3nnc+IlP8zwFboJIYmuNg4ON8qa90SzMc/ <newline>+RxdMosIGlgnW2/4/PEZB31jiVg88O8EckzXZOFKs7sjsLjBOlDW0JB9LeGna8gI4 <newline>+zJVSk/BwJVmcIGfE7vmLV2H0knZ9P4SNVbfo5azV8fUZVqZa+5Acr5Pr5RzUZ5dd <newline>+BA6+C4OmF4O5MBKgxTMVBbkN+8cFduPYSo38NBejxiEovjBFMR7HeL5YYTisO+IB <newline>+ZQ== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_COMODOCertificationAuthority[] = <newline>+    "sha1/EeSR0cnkwOuazs9zVF3h8agwPsM="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEPzCCAyegAwIBAgIBATANBgkqhkiG9w0BAQUFADB+MQswCQYDVQQGEwJHQjEb <newline>+MBkGA1UECAwSR3JlYXRlciBNYW5jaG																								
Chromium	5		a79de7b4d24ac33f08ecaec4e4748170ee4bf82	agl@chromium.org <agl@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Mar 26 20:06:05 2012 +0000	Add hsts_preloaded.h This CL is the result of: % cat public_key_hashes.h transport_security_state.cc > hsts_preloaded.h This is purely to make a future CL easier to review. (Not reviewed)				svn://svn.chromium.org/chrome/trunk/src@128984 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/base/hsts_preloaded.h b/net/base/hsts_preloaded.h <newline>new file mode 100644 <newline>index 0000000..342c435 <newline>--- /dev/null <newline>+++ b/net/base/hsts_preloaded.h <newline>@@ -0,0 +1,2904 @@ <newline>+// Copyright (c) 2011 The Chromium Authors. All rights reserved. <newline>+// Use of this source code is governed by a BSD-style license that can be <newline>+// found in the LICENSE file. <newline>+ <newline>+#ifndef NET_BASE_PUBLIC_KEY_HASHES_ <newline>+#define NET_BASE_PUBLIC_KEY_HASHES_ <newline>+#pragma once <newline>+ <newline>+// This file contains SubjectPublicKeyInfo hashes for public key pinning. The <newline>+// hashes are base64 encoded, SHA1 digests. <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIICPDCCAaUCEDyRMcsf9tAbDpq40ES/Er4wDQYJKoZIhvcNAQEFBQAwXzELMAkG <newline>+A1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFz <newline>+cyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTk2 <newline>+MDEyOTAwMDAwMFoXDTI4MDgwMjIzNTk1OVowXzELMAkGA1UEBhMCVVMxFzAVBgNV <newline>+BAoTDlZlcmlTaWduLCBJbmMuMTcwNQYDVQQLEy5DbGFzcyAzIFB1YmxpYyBQcmlt <newline>+YXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGfMA0GCSqGSIb3DQEBAQUAA4GN <newline>+ADCBiQKBgQDJXFme8huKARS0EN8EQNvjV69qRUCPhAwL0TPZ2RHP7gJYHyX3KqhE <newline>+BarsAx94f56TuZoAqiN91qyFomNFx3InzPRMxnVx0jnvT0Lwdd8KkMaOIG+YD/is <newline>+I19wKTakyYbnsZogy1Olhec9vn2a/iRFM9x2Fe0PonFkTGUugWhFpwIDAQABMA0G <newline>+CSqGSIb3DQEBBQUAA4GBABByUqkFFBkyCEHwxWsKzH4PIRnN5GfcX6kb5sroc50i <newline>+2JhucwNhkcV8sEVAbkSdjbCxlnRhLQ2pRdKkkirWmnWXbj9T/UWZYB2oK0z5XqcJ <newline>+2HUw19JlYD1n1khVdWk/kfVIC0dpImmClr7JyDiGSnoscxlIaU5rfGW/D/xwzoiQ <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass3[] = <newline>+    "sha1/4n972HfV354KP560yw4uqe/baXc="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEGjCCAwICEQCbfgZJoz5iudXukEhxKe9XMA0GCSqGSIb3DQEBBQUAMIHKMQsw <newline>+CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZl <newline>+cmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWdu <newline>+LCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT <newline>+aWduIENsYXNzIDMgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp <newline>+dHkgLSBHMzAeFw05OTEwMDEwMDAwMDBaFw0zNjA3MTYyMzU5NTlaMIHKMQswCQYD <newline>+VQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT <newline>+aWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJ <newline>+bmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWdu <newline>+IENsYXNzIDMgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg <newline>+LSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMu6nFL8eB8aHm8b <newline>+N3O9+MlrlBIwT/A2R/XQkQr1F8ilYcEWQE37imGQ5XYgwREGfassbqb1EUGO+i2t <newline>+KmFZpGcmTNDovFJbcCAEWNF6yaRpvIMXZK0Fi7zQWM6NjPXr8EJJC52XJ2cybuGu <newline>+kxUccLwgTS8Y3pKI6GyFVxEa6X7jJhFUokWWVYPKMIno3Nij7SqAP395ZVc+FSBm <newline>+CC+Vk7+qRy+oRpfwEuL+wgorUeZ25rdGt+INpsyow0xZVYnm6FNcHOqd8GIWC6fJ <newline>+Xwzw3sJ2zq/3avL6QaaiMxTJ5Xpj055iN9WFZZ4O5lMkdBteHRJTW8cs54NJOxWu <newline>+imi5V5cCAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAERSWwauSCPc/L8my/uRan2Te <newline>+2yFPhpk0djZX3dAVL8WtfxUfN2JzPtTnX84XA9s1+ivbrmAJXx5fj267Cz3qWhMe <newline>+DGBvtcC1IyIuBwvLqXTLR7sdwdela8wv0kL9Sd2nic9TutoAWii/gt/4uhMdUIaC <newline>+/Y4wjylGsB49Ndo4YhYYSq3mtlFs3q9i6wHQHiT+eo8SGhJouPtmmRQURVyu565p <newline>+F4ErWjfJXir0xuKhXFSbplQAz/DxwceYMBo7Nhbbo27q/a2ywtrvAkcTisDxszGt <newline>+TxzhT5yvDwyd93gN2PQ1VoDat20Xj50egWTh/sVFuq1ruQp6Tk9LhO5L8X3dEQ== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass3_G3[] = <newline>+    "sha1/IvGeLsbqzPxdI0b0wuj2xVTdXgc="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIICsDCCAhmgAwIBAgIDC2dxMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT <newline>+MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0 <newline>+aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDkwNjA4MjA0MzI3WhcNMTMwNjA3MTk0MzI3 <newline>+WjBGMQswCQYDVQQGEwJVUzETMBEGA1UEChMKR29vZ2xlIEluYzEiMCAGA1UEAxMZ <newline>+R29vZ2xlIEludGVybmV0IEF1dGhvcml0eTCBnzANBgkqhkiG9w0BAQEFAAOBjQAw <newline>+gYkCgYEAye23pIucV+eEPkB9hPSP0XFjU5nneXQUr0SZMyCSjXvlKAy6rWxJfoNf <newline>+NFlOCnowzdDXxFdF7dWq1nMmzq0yE7jXDx07393cCDaob1FEm8rWIFJztyaHNWrb <newline>+qeXUWaUr/GcZOfqTGBhs3t0lig4zFEfC7wFQeeT9adGnwKziV28CAwEAAaOBozCB <newline>+oDAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFL/AMOv1QxE+Z7qekfv8atrjaxIk <newline>+MB8GA1UdIwQYMBaAFEjmaPkr0rKV10fYIyAQTzOYkJ/UMBIGA1UdEwEB/wQIMAYB <newline>+Af8CAQAwOgYDVR0fBDMwMTAvoC2gK4YpaHR0cDovL2NybC5nZW90cnVzdC5jb20v <newline>+Y3Jscy9zZWN1cmVjYS5jcmwwDQYJKoZIhvcNAQEFBQADgYEAuIojxkiWsRF8YHde <newline>+BZqrocb6ghwYB8TrgbCoZutJqOkM0ymt9e8kTP3kS8p/XmOrmSfLnzYhLLkQYGfN <newline>+0rTw8Ktx5YtaiScRhKqOv5nwnQkhClIZmloJ0pC3+gz4fniisIWvXEyZ2VxVKfml <newline>+UUIuOss4jHg7y/j7lYe8vJD5UDI= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Google1024[] = <newline>+    "sha1/QMVAHW+MuvCLAO3vse6H0AWzuc0="; <newline>+ <newline>+// Not yet used publicly. <newline>+static const char kSPKIHash_Google2048[] = <newline>+    "sha1/AbkhxY0L343gKf+cki7NVWp+ozk="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDIDCCAomgAwIBAgIENd70zzANBgkqhkiG9w0BAQUFADBOMQswCQYDVQQGEwJV <newline>+UzEQMA4GA1UEChMHRXF1aWZheDEtMCsGA1UECxMkRXF1aWZheCBTZWN1cmUgQ2Vy <newline>+dGlmaWNhdGUgQXV0aG9yaXR5MB4XDTk4MDgyMjE2NDE1MVoXDTE4MDgyMjE2NDE1 <newline>+MVowTjELMAkGA1UEBhMCVVMxEDAOBgNVBAoTB0VxdWlmYXgxLTArBgNVBAsTJEVx <newline>+dWlmYXggU2VjdXJlIENlcnRpZmljYXRlIEF1dGhvcml0eTCBnzANBgkqhkiG9w0B <newline>+AQEFAAOBjQAwgYkCgYEAwV2xWGcIYu6gmi0fCG2RFGiYCh7+2gRvE4RiIcPRfM6f <newline>+BeC4AfBONOziipUEZKzxa1NfBbPLZ4C/QgKO/t0BCezhABRP/PvwDN1Dulsr4R+A <newline>+cJkVV5MW8Q+XarfCaCMczE1ZMKxRHjuvK9buY0V7xdlfUNLjUA86iOe/FP3gx7kC <newline>+AwEAAaOCAQkwggEFMHAGA1UdHwRpMGcwZaBjoGGkXzBdMQswCQYDVQQGEwJVUzEQ <newline>+MA4GA1UEChMHRXF1aWZheDEtMCsGA1UECxMkRXF1aWZheCBTZWN1cmUgQ2VydGlm <newline>+aWNhdGUgQXV0aG9yaXR5MQ0wCwYDVQQDEwRDUkwxMBoGA1UdEAQTMBGBDzIwMTgw <newline>+ODIyMTY0MTUxWjALBgNVHQ8EBAMCAQYwHwYDVR0jBBgwFoAUSOZo+SvSspXXR9gj <newline>+IBBPM5iQn9QwHQYDVR0OBBYEFEjmaPkr0rKV10fYIyAQTzOYkJ/UMAwGA1UdEwQF <newline>+MAMBAf8wGgYJKoZIhvZ9B0EABA0wCxsFVjMuMGMDAgbAMA0GCSqGSIb3DQEBBQUA <newline>+A4GBAFjOKer89961zgK5F7WF0bnj4JXMJTENAKaSbn+2kmOeUJXRmm/kEd5jhW6Y <newline>+7qj/WsjTVbJmcVfewCHrPSqnI0kBBIZCe/zuf6IWUrVnZ9NA2zsmWLIodz2uFHdh <newline>+1voqZiegDfqnc1zqcPGUIWVEX/r87yloqaKHee9570+sB3c4 <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_EquifaxSecureCA[] = <newline>+    "sha1/SOZo+SvSspXXR9gjIBBPM5iQn9Q="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIICsjCCAhugAwIBAgIDBe3YMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT <newline>+MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0 <newline>+aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDUwODMxMjA0MDM3WhcNMTIwODMxMjA0MDM3 <newline>+WjBIMQswCQYDVQQGEwJVUzETMBEGA1UEChMKQWV0bmEgSW5jLjEkMCIGA1UEAxMb <newline>+QWV0bmEgSW5jLiBTZWN1cmUgU2VydmVyIENBMIGfMA0GCSqGSIb3DQEBAQUAA4GN <newline>+ADCBiQKBgQCnB2yrm4i44DG5epPu0fbe/pOZDWOvAS7qCcy6YbSkPfOHfH9Blmf3 <newline>+8L6D5yY1pzmTXaU7cDQu4qmj21toEIGwBziMmW6NsiV8nHtmtfXfHP6xrmyPUdN2 <newline>+DdTj937fnrYOoyMhGgBYEjiemeHFQxZSpKZdolFEFXbUa2/yWQafrQIDAQABo4Gj <newline>+MIGgMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQU2S4/xnaeitmFkzoxLnZeo33n <newline>+H4owHwYDVR0jBBgwFoAUSOZo+SvSspXXR9gjIBBPM5iQn9QwEgYDVR0TAQH/BAgw <newline>+BgEB/wIBADA6BgNVHR8EMzAxMC+gLaArhilodHRwOi8vY3JsLmdlb3RydXN0LmNv <newline>+bS9jcmxzL3NlY3VyZWNhLmNybDANBgkqhkiG9w0BAQUFAAOBgQBMSoZHIrD1rq8v <newline>+UG3UYbN76xiF9FDRzWTs5Mvv4Psvf2kk426slzNO0ukFAsmwqN1mA/P9Nc4FlMMC <newline>+YtcnLNwC/syEYdQBOJjxfTVGTqh5q6jDs7S3rPJv8mrFk8ldC8PxU1ZJVfSlFCDn <newline>+6diMDgvOAJfUeJlIRLGu2k/ksI0Y1w== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Aetna[] = <newline>+    "sha1/klKqFN6/gK4wqtlOYDhwJKVDLxo="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDfTCCAuagAwIBAgIDErvmMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT <newline>+MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0 <newline>+aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDIwNTIxMDQwMDAwWhcNMTgwODIxMDQwMDAw <newline>+WjBCMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEbMBkGA1UE <newline>+AxMSR2VvVHJ1c3QgR2xvYmFsIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB <newline>+CgKCAQEA2swYYzD99BcjGlZ+W988bDjkcbd4kdS8odhM+KhDtgPpTSEHCIjaWC9m <newline>+OSm9BXiLnTjoBbdqfnGk5sRgprDvgOSJKA+eJdbtg/OtppHHmMlCGDUUna2YRpIu <newline>+T8rxh0PBFpVXLVDviS2Aelet8u5fa9IAjbkU+BQVNdnARqN7csiRv8lVK83Qlz6c <newline>+JmTM386DGXHKTubU1XupGc1V3sjs0l44U+VcT4wt/lAjNvxm5suOpDkZALeVAjmR <newline>+Cw7+OC7RHQWa9k0+bw8HHa8sHo9gOeL6NlMTOdReJivbPagUvTLrGAMoUgRx5asz <newline>+PeE4uwc2hGKceeoWMPRfwCvocWvk+QIDAQABo4HwMIHtMB8GA1UdIwQYMBaAFEjm <newline>+aPkr0rKV10fYIyAQTzOYkJ/UMB0GA1UdDgQWBBTAephojYn7qwVkDBF9qn1luMrM <newline>+TjAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjA6BgNVHR8EMzAxMC+g <newline>+LaArhilodHRwOi8vY3JsLmdlb3RydXN0LmNvbS9jcmxzL3NlY3VyZWNhLmNybDBO <newline>+BgNVHSAERzBFMEMGBFUdIAAwOzA5BggrBgEFBQcCARYtaHR0cHM6Ly93d3cuZ2Vv <newline>+dHJ1c3QuY29tL3Jlc291cmNlcy9yZXBvc2l0b3J5MA0GCSqGSIb3DQEBBQUAA4GB <newline>+AHbhEm5OSxYShjAGsoEIz/AIx8dxfmbuwu3UOx//8PDITtZDOLC5MH0Y0FWDomrL <newline>+NhGc6Ehmo21/uBPUR/6LWlxz/K7ZGzIZOKuXNBSqltLroxwUCEm2u+WR74M26x1W <newline>+b8ravHNjkOR/ez4iyz0H7V84dJzjA1BOoa+Y7mHyhD8S <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustGlobal[] = <newline>+    "sha1/wHqYaI2J+6sFZAwRfap9ZbjKzE4="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDizCCAvSgAwIBAgIDDW5iMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT <newline>+MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0 <newline>+aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDYxMTI3MDAwMDAwWhcNMTgwODIxMTYxNTAw <newline>+WjBYMQswCQYDVQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjExMC8GA1UE <newline>+AxMoR2VvVHJ1c3QgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCCASIw <newline>+DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL64FXv/1Hx9Z62DZHvIQlMt3/aE <newline>+CCBh1gFZapxEEa/vdv2Vfs5hMLt6g18CvQFmyu4VjW+hMJy9oYWelDrzVogAMc/Y <newline>+7mqWAtntA4z7dW3n6rhVFgUWmvTgXrGIwGSFXBVNiMe3uuB16a0FPZ3HiUjguyjI <newline>+A+Ewk2ReUsBZcCI1V4iK8ZUKg9e8MXMBNO3vRnHgawKoNXJrl5tm4MsceV/YGgRo <newline>+HkcC5p1g4jaXAd/ONZLfvmfHbXdZO4+d1pAVlLxCNBDBOfmxJz5+1op1xbKvltOi <newline>+3pvkmL594emBrbZv/NcO2uA0sA0ad+fjCJjvWPqchLc2r8LfrNL0EAZwcTUCAwEA <newline>+AaOB6DCB5TAOBgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFCzVUEGXFYvwjzZhW0r7 <newline>+a9mZyTOSMB8GA1UdIwQYMBaAFEjmaPkr0rKV10fYIyAQTzOYkJ/UMA8GA1UdEwEB <newline>+/wQFMAMBAf8wOgYDVR0fBDMwMTAvoC2gK4YpaHR0cDovL2NybC5nZW90cnVzdC5j <newline>+b20vY3Jscy9zZWN1cmVjYS5jcmwwRgYDVR0gBD8wPTA7BgRVHSAAMDMwMQYIKwYB <newline>+BQUHAgEWJWh0dHA6Ly93d3cuZ2VvdHJ1c3QuY29tL3Jlc291cmNlcy9jcHMwDQYJ <newline>+KoZIhvcNAQEFBQADgYEAr/MO1nKrx6mXyiprhDneeanwgeUIZ6vXLyACAXEMBCLJ <newline>+HoiVA8lJOq9nCEmw1Qj1ID2AkaDFh6P7yaMXkfmoL67pD9+Wcg91F4BdeAFNnx9t <newline>+e9j1QjgjGpmT9IO+OzV05zcTNXqstLaQgmwnpODsnjW9v+UpoUefWzL86Zl9Kzk= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustPrimary[] = <newline>+    "sha1/sBmJ5+/7Sq/LFI9YRjl2IkFQ4bo="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIFijCCBHKgAwIBAgIKYSCKYgAAAAAACDANBgkqhkiG9w0BAQUFADBSMQswCQYD <newline>+VQQGEwJVUzEaMBgGA1UEChMRSW50ZWwgQ29ycG9yYXRpb24xJzAlBgNVBAMTHklu <newline>+dGVsIEV4dGVybmFsIEJhc2ljIFBvbGljeSBDQTAeFw0wOTA1MTUxOTI3MjZaFw0x <newline>+NTA1MTUxOTM3MjZaMFYxCzAJBgNVBAYTAlVTMRowGAYDVQQKExFJbnRlbCBDb3Jw <newline>+b3JhdGlvbjErMCkGA1UEAxMiSW50ZWwgRXh0ZXJuYWwgQmFzaWMgSXNzdWluZyBD <newline>+QSAzQjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKQEM1Wn9TU9vc9C <newline>++/Tc7KB+eiYElmrcEWE32WUdHvWG+IcQHVQsikTmMyKKojNLw2B5s6Iekc8ivDo/ <newline>+wCfjZzX9JyftMnc+AArc0la87Olybzm8K9jXEfTBvTnUSFSiI9ZYefITdiUgqlAF <newline>+uljFZEHYKYtLuhrRacpmQfP4mV63NKdc2bT804HRf6YptZFa4k6YN94zlrGNrBuQ <newline>+Q74WFzz/jLBusbUpEkro6Mu/ZYFOFWQrV9lBhF9Ruk8yN+3N6n9fUo/qBigiF2kE <newline>+n9xVh1ykl7SCGL2jBUkXx4qgV27a6Si8lRRdgrHGtN/HWnSWlLXTH5l575H4Lq++ <newline>+77OFv38CAwEAAaOCAlwwggJYMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFA7G <newline>+KvdZsggQkCVvw939imYxMCvFMAsGA1UdDwQEAwIBhjASBgkrBgEEAYI3FQEEBQID <newline>+AQABMCMGCSsGAQQBgjcVAgQWBBQ5oFY2ekKQ/5Ktim+VdMeSWb4QWTAZBgkrBgEE <newline>+AYI3FAIEDB4KAFMAdQBiAEMAQTAfBgNVHSMEGDAWgBQaxgxKxEdvqNutK/D0Vgaj <newline>+7TdUDDCBvQYDVR0fBIG1MIGyMIGvoIGsoIGphk5odHRwOi8vd3d3LmludGVsLmNv <newline>+bS9yZXBvc2l0b3J5L0NSTC9JbnRlbCUyMEV4dGVybmFsJTIwQmFzaWMlMjBQb2xp <newline>+Y3klMjBDQS5jcmyGV2h0dHA6Ly9jZXJ0aWZpY2F0ZXMuaW50ZWwuY29tL3JlcG9z <newline>+aXRvcnkvQ1JML0ludGVsJTIwRXh0ZXJuYWwlMjBCYXNpYyUyMFBvbGljeSUyMENB <newline>+LmNybDCB4wYIKwYBBQUHAQEEgdYwgdMwYwYIKwYBBQUHMAKGV2h0dHA6Ly93d3cu <newline>+aW50ZWwuY29tL3JlcG9zaXRvcnkvY2VydGlmaWNhdGVzL0ludGVsJTIwRXh0ZXJu <newline>+YWwlMjBCYXNpYyUyMFBvbGljeSUyMENBLmNydDBsBggrBgEFBQcwAoZgaHR0cDov <newline>+L2NlcnRpZmljYXRlcy5pbnRlbC5jb20vcmVwb3NpdG9yeS9jZXJ0aWZpY2F0ZXMv <newline>+SW50ZWwlMjBFeHRlcm5hbCUyMEJhc2ljJTIwUG9saWN5JTIwQ0EuY3J0MA0GCSqG <newline>+SIb3DQEBBQUAA4IBAQCxtQEHchVQhXyjEqtMVUMe6gkmPsIczHxSeqNbo9dsD+6x <newline>+bT65JT+oYgpIAtfEsYXeUJu1cChqpb22U5bMAz7eaQcW5bzefufWvA6lg2048B8o <newline>+czBj/q+5P5NpYrUO8jOmN4jTjfJq3ElZ7yFWpy7rB3Vm/aN6ATYqWfMbS/xfh+JC <newline>+xmH3droUmMJI0/aZJHsLtjbjFnNsHDNrJZX1vxlM78Lb1hjskTENPmhbVbfTj5i/ <newline>+ZGnhv4tmI8QZPCNtcegXJrfhRl2D9bWpdTOPrWiLDUqzy1Z6KL7TcOS/PCl8RHCJ <newline>+XkPau/thTQCpIoDa2+c+3XA++gRTfAQ4svTO260N <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Intel[] = <newline>+    "sha1/DsYq91myCBCQJW/D3f2KZjEwK8U="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDWzCCAsSgAwIBAgIDCaxIMA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT <newline>+MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0 <newline>+aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDgwODE1MTY0NTE1WhcNMTMwMjE0MTc0NTE1 <newline>+WjBtMQswCQYDVQQGEwJERTEcMBoGA1UEChMTVEMgVHJ1c3RDZW50ZXIgR21iSDEe <newline>+MBwGA1UECxMVVEMgVHJ1c3RDZW50ZXIgU1NMIENBMSAwHgYDVQQDExdUQyBUcnVz <newline>+dENlbnRlciBTU0wgQ0EgSTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB <newline>+AOkCoJoNbJw33wSxNWbDdmIfDIedR8Zmr/mjOhMkXdxRYb6qrl/WfMEuo4PBcysJ <newline>+kF81LaDMkBH0zc7Hs1eYixrMVObkCmEUjxYylgOk4ExGwhmIWDJUWGslNBUIIhFf <newline>++ucDWuGZNfILQrwCWRHYBG0n/6lZPylCqopCMYhBK5sTI/PyuHEAzDL7+buep/Na <newline>+zn+oy/a6x1nobsuL9X2oFaWZb7Z6ty5kZ/U56JHa7vnsLrg4ePwiQb8jtyUdz0fD <newline>+uMHkNzK0gWxr4hm0v92otYFuOTZqNLEJneeiILxUCCMop2chr1obpq2zGVNxJ/rP <newline>+StWmcu75KBGMpT+mzFgIyf0CAwEAAaOBozCBoDAOBgNVHQ8BAf8EBAMCAQYwHQYD <newline>+VR0OBBYEFOe/bKlImXeG4tD/MKCQHQtk0IU6MB8GA1UdIwQYMBaAFEjmaPkr0rKV <newline>+10fYIyAQTzOYkJ/UMBIGA1UdEwEB/wQIMAYBAf8CAQAwOgYDVR0fBDMwMTAvoC2g <newline>+K4YpaHR0cDovL2NybC5nZW90cnVzdC5jb20vY3Jscy9zZWN1cmVjYS5jcmwwDQYJ <newline>+KoZIhvcNAQEFBQADgYEAVKyJLbJha83PggEit8+dzh50wIsKXpTV2K6K4HnUI1kh <newline>+xqocLVfQORluC+LS7L78D2EKTWLZ8WNujiP6DbbIPSTsMasuiBMQMBUlJMUqsp/M <newline>+XmQJgIGAbxsr19MY6mmB30oWuo4cjHnkMzSCfhcON6Rxvbjijk2qCWXkk2T2HAk= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_TCTrustCenter[] = <newline>+    "sha1/gzuEEAB/bkqdQS3EIjk2by7lW+k="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDJDCCAo2gAwIBAgIDBfw3MA0GCSqGSIb3DQEBBQUAME4xCzAJBgNVBAYTAlVT <newline>+MRAwDgYDVQQKEwdFcXVpZmF4MS0wKwYDVQQLEyRFcXVpZmF4IFNlY3VyZSBDZXJ0 <newline>+aWZpY2F0ZSBBdXRob3JpdHkwHhcNMDYwNzIxMTUwNTA2WhcNMTEwNzEyMTUwNTA2 <newline>+WjA5MQswCQYDVQQGEwJVSzEXMBUGA1UEChMOVm9kYWZvbmUgR3JvdXAxETAPBgNV <newline>+BAMTCFZvZGFmb25lMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAs61K <newline>+wbMcB+GGGbjyo1dYEiVNGRYKRsDXfeOgeq03Vebf7D5Xq6a0Qs4Rvp6CuRTSNDPi <newline>+M+0vuQRW5sib9UD8UB2x4znc6FriRV4FUpAyKNVqQ9NB0MOBpQekVlX9DzcXkn+p <newline>+zWRi6tt3CtPsaDyHo06oAwX5qu3tW3pjtf0vnQqJWwwA6Mp4YJ/acHD/vVtt67hz <newline>+a0Upz0O2DEJetb3OaqI5yaNZ91y6i7sK0KTvBQxZHeJs+y5UjluHv3ptMUZvmsf0 <newline>+SiKysXnkg5mtsZSFlfM+U7dADq1zNb764NV5sSlmbDLEkvohQyg1p9gh2HX9Jk4A <newline>+e9nnF4hjw2U33HLBXwIDAQABo4GgMIGdMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4E <newline>+FgQUR+YiAaq+68BPLD6l0UcvzlkcgvswHwYDVR0jBBgwFoAUSOZo+SvSspXXR9gj <newline>+IBBPM5iQn9QwDwYDVR0TAQH/BAUwAwEB/zA6BgNVHR8EMzAxMC+gLaArhilodHRw <newline>+Oi8vY3JsLmdlb3RydXN0LmNvbS9jcmxzL3NlY3VyZWNhLmNybDANBgkqhkiG9w0B <newline>+AQUFAAOBgQCs37zuSY/KkPigCvJevu+ewWy9GP2bFZi5EaxKuHGF+tYFZUNkyc06 <newline>+ACYMM3ADPM6dVUYeXIDZnPfV8BJFCpdoAHkSNlg341AVjabCOWtzOYolBn0ua8Wi <newline>+BM471XfzzXD7yMliek9J4fUn2vQU7MYgEkSAA53ZkMScGDkA/c1wMQ== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Vodafone[] = <newline>+    "sha1/DX/hXFUUNmiZ/EDWIgjvIuvRFRw="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIID1TCCAr2gAwIBAgIDAjbRMA0GCSqGSIb3DQEBBQUAMEIxCzAJBgNVBAYTAlVT <newline>+MRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMRswGQYDVQQDExJHZW9UcnVzdCBHbG9i <newline>+YWwgQ0EwHhcNMTAwMjE5MjI0NTA1WhcNMjAwMjE4MjI0NTA1WjA8MQswCQYDVQQG <newline>+EwJVUzEXMBUGA1UEChMOR2VvVHJ1c3QsIEluYy4xFDASBgNVBAMTC1JhcGlkU1NM <newline>+IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAx3H4Vsce2cy1rfa0 <newline>+l6P7oeYLUF9QqjraD/w9KSRDxhApwfxVQHLuverfn7ZB9EhLyG7+T1cSi1v6kt1e <newline>+6K3z8Buxe037z/3R5fjj3Of1c3/fAUnPjFbBvTfjW761T4uL8NpPx+PdVUdp3/Jb <newline>+ewdPPeWsIcHIHXro5/YPoar1b96oZU8QiZwD84l6pV4BcjPtqelaHnnzh8jfyMX8 <newline>+N8iamte4dsywPuf95lTq319SQXhZV63xEtZ/vNWfcNMFbPqjfWdY3SZiHTGSDHl5 <newline>+HI7PynvBZq+odEj7joLCniyZXHstXZu8W1eefDp6E63yoxhbK1kPzVw662gzxigd <newline>+gtFQiwIDAQABo4HZMIHWMA4GA1UdDwEB/wQEAwIBBjAdBgNVHQ4EFgQUa2k9ahhC <newline>+St2PAmU5/TUkhniRFjAwHwYDVR0jBBgwFoAUwHqYaI2J+6sFZAwRfap9ZbjKzE4w <newline>+EgYDVR0TAQH/BAgwBgEB/wIBADA6BgNVHR8EMzAxMC+gLaArhilodHRwOi8vY3Js <newline>+Lmdlb3RydXN0LmNvbS9jcmxzL2d0Z2xvYmFsLmNybDA0BggrBgEFBQcBAQQoMCYw <newline>+JAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmdlb3RydXN0LmNvbTANBgkqhkiG9w0B <newline>+AQUFAAOCAQEAq7y8Cl0YlOPBscOoTFXWvrSY8e48HM3P8yQkXJYDJ1j8Nq6iL4/x <newline>+/torAsMzvcjdSCIrYA+lAxD9d/jQ7ZZnT/3qRyBwVNypDFV+4ZYlitm12ldKvo2O <newline>+SUNjpWxOJ4cl61tt/qJ/OCjgNqutOaWlYsS3XFgsql0BYKZiZ6PAx2Ij9OdsRu61 <newline>+04BqIhPSLT90T+qvjF+0OJzbrs6vhB6m9jRRWXnT43XcvNfzc9+S7NIgWW+c+5X4 <newline>+knYYCnwPLKbK3opie9jzzl9ovY8+wXS7FXI6FoOpC+ZNmZzYV+yoAVHHb1c0XqtK <newline>+LEL2TxyJeN4mTvVvk0wVaydWTQBUbHq3tw== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_RapidSSL[] = <newline>+    "sha1/o5OZxATDsgmwgcIfIWIneMJ0jkw="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDxTCCAq2gAwIBAgIQAqxcJmoLQJuPC3nyrkYldzANBgkqhkiG9w0BAQUFADBs <newline>+MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3 <newline>+d3cuZGlnaWNlcnQuY29tMSswKQYDVQQDEyJEaWdpQ2VydCBIaWdoIEFzc3VyYW5j <newline>+ZSBFViBSb290IENBMB4XDTA2MTExMDAwMDAwMFoXDTMxMTExMDAwMDAwMFowbDEL <newline>+MAkGA1UEBhMCVVMxFTATBgNVBAoTDERpZ2lDZXJ0IEluYzEZMBcGA1UECxMQd3d3 <newline>+LmRpZ2ljZXJ0LmNvbTErMCkGA1UEAxMiRGlnaUNlcnQgSGlnaCBBc3N1cmFuY2Ug <newline>+RVYgUm9vdCBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMbM5XPm <newline>++9S75S0tMqbf5YE/yc0lSbZxKsPVlDRnogocsF9ppkCxxLeyj9CYpKlBWTrT3JTW <newline>+PNt0OKRKzE0lgvdKpVMSOO7zSW1xkX5jtqumX8OkhPhPYlG++MXs2ziS4wblCJEM <newline>+xChBVfvLWokVfnHoNb9Ncgk9vjo4UFt3MRuNs8ckRZqnrG0AFFoEt7oT61EKmEFB <newline>+Ik5lYYeBQVCmeVyJ3hlKV9Uu5l0cUyx+mM0aBhakaHPQNAQTXKFx01p8VdteZOE3 <newline>+hzBWBOURtCmAEvF5OYiiAhF8J2a3iLd48soKqDirCmTCv2ZdlYTBoSUeh10aUAsg <newline>+EsxBu24LUTi4S8sCAwEAAaNjMGEwDgYDVR0PAQH/BAQDAgGGMA8GA1UdEwEB/wQF <newline>+MAMBAf8wHQYDVR0OBBYEFLE+w2kD+L9HAdSYJhoIAu9jZCvDMB8GA1UdIwQYMBaA <newline>+FLE+w2kD+L9HAdSYJhoIAu9jZCvDMA0GCSqGSIb3DQEBBQUAA4IBAQAcGgaX3Nec <newline>+nzyIZgYIVyHbIUf4KmeqvxgydkAQV8GK83rZEWWONfqe/EW1ntlMMUu4kehDLI6z <newline>+eM7b41N5cdblIZQB2lWHmiRk9opmzN6cN82oNLFpmyPInngiK3BD41VHMWEZ71jF <newline>+hS9OMPagMRYjyOfiZRYzy78aG6A9+MpeizGLYAiJLQwGXFK3xPkKmNEVX58Svnw2 <newline>+Yzi9RKR/5CYrCsSXaQ3pjOLAEFe4yHYSkVXySGnYvCoCWw9E1CAx2/S6cCZdkGCe <newline>+vEsXCS+0yx5DaMkHJ8HSXPfqIbloEpw8nL+e/IBcm2PN7EeqJSdnoDfzAIJ9VNep <newline>++OkuE6N36B9K <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_DigiCertEVRoot[] = <newline>+    "sha1/gzF+YoVCU9bXeDGQ7JGQVumRueM="; <newline>+ <newline>+// Not public <newline>+static const char kSPKIHash_Tor1[] = <newline>+    "sha1/juNxSTv9UANmpC9kF5GKpmWNx3Y="; <newline>+static const char kSPKIHash_Tor2[] = <newline>+    "sha1/lia43lPolzSPVIq34Dw57uYcLD8="; <newline>+static const char kSPKIHash_Tor3[] = <newline>+    "sha1/rzEyQIKOh77j87n5bjWUNguXF8Y="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIICPTCCAaYCEQDNun9W8N/kvFT+IqyzcqpVMA0GCSqGSIb3DQEBAgUAMF8xCzAJ <newline>+BgNVBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE3MDUGA1UECxMuQ2xh <newline>+c3MgMSBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw05 <newline>+NjAxMjkwMDAwMDBaFw0yODA4MDEyMzU5NTlaMF8xCzAJBgNVBAYTAlVTMRcwFQYD <newline>+VQQKEw5WZXJpU2lnbiwgSW5jLjE3MDUGA1UECxMuQ2xhc3MgMSBQdWJsaWMgUHJp <newline>+bWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCBnzANBgkqhkiG9w0BAQEFAAOB <newline>+jQAwgYkCgYEA5Rm/baNWYS2ZSHH2Z965jeu3noaACpEO+jglr0aIguVzqKCbJF0N <newline>+H8xlbgyw0FaEGIeaBpsQoXPftFg5a27B9hXVqKg/qhIGjTGsf7A01480Z4gJzRQR <newline>+4k5FVmkfeAKA2txHkSm7NsljXMXg1y2He6G3MrB7MLoqLzGq7qNn2tsCAwEAATAN <newline>+BgkqhkiG9w0BAQIFAAOBgQBMP7iLxmjf7kMzDl3ppssHhE16M/+SG/Q2rdiVIjZo <newline>+EWx8QszznC7EBz8UsA9P/5CSdvnivErpj82ggAr3xSnxgiJduLHdgSOjeyUVRjB5 <newline>+FvjqBUuUfx3CHMjjt/QQQDwTw18fU+hI5Ia0e6E1sHslurjTjqs/OJ0ANACY89Fx <newline>+lA== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass1[] = <newline>+    "sha1/I0PRSKJViZuUfUYaeX7ATP7RcLc="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDhDCCAwqgAwIBAgIQL4D+I4wOIg9IZxIokYesszAKBggqhkjOPQQDAzCByjEL <newline>+MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZW <newline>+ZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNyBWZXJpU2ln <newline>+biwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJp <newline>+U2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9y <newline>+aXR5IC0gRzQwHhcNMDcxMTA1MDAwMDAwWhcNMzgwMTE4MjM1OTU5WjCByjELMAkG <newline>+A1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZWZXJp <newline>+U2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNyBWZXJpU2lnbiwg <newline>+SW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJpU2ln <newline>+biBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9yaXR5 <newline>+IC0gRzQwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAASnVnp8Utpkmw4tXNherJI9/gHm <newline>+GUo9FANL+mAnINmDiWn6VMaaGF5VKmTeBvaNSjutEDxlPZCIBIngMGGzrl0Bp3ve <newline>+fLK+ymVhAIau2o970ImtTR1ZmkGxvEeA3J5iw/mjgbIwga8wDwYDVR0TAQH/BAUw <newline>+AwEB/zAOBgNVHQ8BAf8EBAMCAQYwbQYIKwYBBQUHAQwEYTBfoV2gWzBZMFcwVRYJ <newline>+aW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUj+XTGoasjY5rw8+AatRIGCx7GS4wJRYj <newline>+aHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nby5naWYwHQYDVR0OBBYEFLMW <newline>+kf3upm7ktS5Jj4d4gYDs5bG1MAoGCCqGSM49BAMDA2gAMGUCMGYhDBgmYFo4e1ZC <newline>+4Kf8NoRRkSAsdk1DPcQdhCPQrNZ8NQbOzWm9kA3bbEhCHQ6qQgIxAJw9SDkjOVga <newline>+FRJZap7v1VmyHVIsmXHNxynfGyphe3HR3vPA5Q06Sqotp9iGKt0uEA== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass3_G4[] = <newline>+    "sha1/7WYxNdMb1OymFMQp4xkGn5TBJlA="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEGjCCAwICEQDsoKeLbnVqAc/EfMwvlF7XMA0GCSqGSIb3DQEBBQUAMIHKMQsw <newline>+CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZl <newline>+cmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWdu <newline>+LCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT <newline>+aWduIENsYXNzIDQgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp <newline>+dHkgLSBHMzAeFw05OTEwMDEwMDAwMDBaFw0zNjA3MTYyMzU5NTlaMIHKMQswCQYD <newline>+VQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT <newline>+aWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJ <newline>+bmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWdu <newline>+IENsYXNzIDQgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg <newline>+LSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAK3LpRFpxlmr8Y+1 <newline>+GQ9Wzsy1HyDkniYlS+BzZYlZ3tCD5PUPtbut8XzoIfzk6AzufEUiGXaStBO3IFsJ <newline>++mGuqPKljYXCKtbeZjbSmwL0qJJgfJxptI8kHtCGUvYynEFYHiK9zUVilQhu0Gbd <newline>+U6LM8BDcVHOLBKFGMzNcF0C5nk3T875Vg+ixiY5afJqWIpA7iCXy0lOIAgwLePLm <newline>+NxdLMEYH5IBtptiWLugs+BGzOA1mppvqySNb247i8xOOGlktqgLw7KSHZtzBP/XY <newline>+ufTsgsbSPZUd5cBPhMnZo0QoBmrXRazwa2rvTl/4EYIeOGM0ZlDUPpNz+jDDZq3/ <newline>+ky2X7wMCAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAj/ola09b5KROJ1WrIhVZPMq1 <newline>+CtRK26vdoV9TxaBXOcLORyu+OshWv8LZJxA6sQU8wHcxuzrTBXttmhwwjIDLk5Mq <newline>+g6sFUYICABFna/OIYUdfA5PVWw3g8dShMjWFsjrbsIKr0csKvE+MW8VLADsfKoKm <newline>+fjaF3H48ZwC15DtS4KjrXRX5xm3wrR0OhbepmnMUWluPQSjA1egtTaRezarZ7c7c <newline>+2NU8Qh0XwRJdRTjDOPP8hS6DRkiy1yBfkjaP53kPmF6Z6PDQpLv1U70qzlmwr25/ <newline>+bLvSHgCwIe34QWKCudiyxLtGUPMxxY8BqHTr9Xgn2uf3ZkPznoM+IKrDNWCRzg== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass4_G3[] = <newline>+    "sha1/PANDaGiVHPNpKri0Jtq6j+ki5b0="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEGjCCAwICEQCLW3VWhFSFCwDPrzhIzrGkMA0GCSqGSIb3DQEBBQUAMIHKMQsw <newline>+CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZl <newline>+cmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWdu <newline>+LCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT <newline>+aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp <newline>+dHkgLSBHMzAeFw05OTEwMDEwMDAwMDBaFw0zNjA3MTYyMzU5NTlaMIHKMQswCQYD <newline>+VQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT <newline>+aWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJ <newline>+bmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWdu <newline>+IENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg <newline>+LSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAN2E1Lm0+afY8wR4 <newline>+nN493GwTFtl63SRRZsDHJlkNrAYIwpTRMx/wgzUfbhvI3qpuFU5UJ+/EbRrsC+MO <newline>+8ESlV8dAWB6jRx9x7GD2bZTIGDnt/kIYVt/kTEkQeE4BdjVjEjbdZrwBBDajVWjV <newline>+ojYJrKshJlQGrT/KFOCsyq0GHZXi+J3x4GD/wn91K0zM2v6HmSHquv4+VNfSWXjb <newline>+PG7PoBMAGrgnoeS+Z5bKoMWznN3JdZ7rMJpfo83ZrngZPyPpXNspva1VyBtUjGP2 <newline>+6KbqxzcSXKMpHgLZ2x87tNcPVkeBFQRKr4Mn0cVYiMHd9qqnoxjaaKptEVHhv2Vr <newline>+n5Z20T0CAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAq2aN17O6x5q25lXQBfGfMY1a <newline>+qtmqRiYPce2lrVNWYgFHKkTp/j90CxObufRNG7LRX7K20ohcs5/Ny9Sn2WCVhDr4 <newline>+wTcdYcrnsMXlkdpUpqwxga6X3s0IrLjAl4B/bnKk52kTlWUfxJM8/XmPBNQ+T+r3 <newline>+ns7NZ3xPZQL/kYVUc8f/NveGLezQXk//EZ9yBta4GvFMDSZl4kSAHsef493oCtrs <newline>+pSCAaWihT37ha88HQfqDjrw43bAuEbFrskLMmrz5SCJ5ShkPshw+IHTZasO+8ih4 <newline>+E1Z5T21Q6huwtVexN2ZYI/PcD98Kh8TvhgXVOBRgmaNL3gaWcSzy27YfpO8/7g== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass1_G3[] = <newline>+    "sha1/VRmyeKyygdftp6vBg5nDu2kEJLU="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEGTCCAwECEGFwy0mMX5hFKeewptlQW3owDQYJKoZIhvcNAQEFBQAwgcoxCzAJ <newline>+BgNVBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVy <newline>+aVNpZ24gVHJ1c3QgTmV0d29yazE6MDgGA1UECxMxKGMpIDE5OTkgVmVyaVNpZ24s <newline>+IEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25seTFFMEMGA1UEAxM8VmVyaVNp <newline>+Z24gQ2xhc3MgMiBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0 <newline>+eSAtIEczMB4XDTk5MTAwMTAwMDAwMFoXDTM2MDcxNjIzNTk1OVowgcoxCzAJBgNV <newline>+BAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjEfMB0GA1UECxMWVmVyaVNp <newline>+Z24gVHJ1c3QgTmV0d29yazE6MDgGA1UECxMxKGMpIDE5OTkgVmVyaVNpZ24sIElu <newline>+Yy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25seTFFMEMGA1UEAxM8VmVyaVNpZ24g <newline>+Q2xhc3MgMiBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAt <newline>+IEczMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArwoNwtUs22e5LeWU <newline>+J92lvuCwTY+zYVY81nzD9M0+hsuiiOLh2KRpxbXiv8GmR1BeRjmL1Za6tW8UvxDO <newline>+JxOeBUebMXoT2B/Z0wI3i60sR/COgQanDTAM6/c8DyAd3HJG7qUCyFvDyVZpTMUY <newline>+wZF7C9UTAJu878NIPkZgIIUq1ZC2zYugzDLdt/1AVbJQHFauzI13TccgTacxdu9o <newline>+koqQHgiBVrKtaaNS0MscxCM9H5n+TOgWY47GCI72MfbS+uV23bUckqNJzc0BzWjN <newline>+qWm6o+sdDZykIKbBoMXRRkwXbdKsZj+WjOCE1Db/IlnF+RFgqF8EffIa9iVCYQ/E <newline>+Srg+iQIDAQABMA0GCSqGSIb3DQEBBQUAA4IBAQA0JhU8wI1NQ0kdvekhktdmnLfe <newline>+xbjQ5F1fdiLAJvmEOjr5jLX77GDx6M4EsMjdpwOPMPOY36TmpDHf0xwLRtxyID+u <newline>+7gU8pDM/CzmscHhzS5kr3zDCVLCoO1Wh/hYozUK9dG6A2ydEp85EXdQbkJgNHkKU <newline>+sQAsBNB0owIFImNjzYO1+8FtYmtpdf1dcEG59b98377BMnMiIYtYgXsVkXq642RI <newline>+sH/7NiXaldDxJBQX3RiAa0YjOVT1jmIJBB2UkKab5iXiQkWquJCtvgiPqQtCGJTP <newline>+cjnhsUPgKM+351psE2tJs//jGHyJizNdrDPXp/naOlXJWBD5qu9ats9LS98q <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass2_G3[] = <newline>+    "sha1/Wr7Fddyu87COJxlD/H8lDD32YeM="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDAjCCAmsCEH3Z/gfPqB63EHln+6eJNMYwDQYJKoZIhvcNAQEFBQAwgcExCzAJ <newline>+BgNVBAYTAlVTMRcwFQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE8MDoGA1UECxMzQ2xh <newline>+c3MgMyBQdWJsaWMgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEcy <newline>+MTowOAYDVQQLEzEoYykgMTk5OCBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3Jp <newline>+emVkIHVzZSBvbmx5MR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMB4X <newline>+DTk4MDUxODAwMDAwMFoXDTI4MDgwMTIzNTk1OVowgcExCzAJBgNVBAYTAlVTMRcw <newline>+FQYDVQQKEw5WZXJpU2lnbiwgSW5jLjE8MDoGA1UECxMzQ2xhc3MgMyBQdWJsaWMg <newline>+UHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eSAtIEcyMTowOAYDVQQLEzEo <newline>+YykgMTk5OCBWZXJpU2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5 <newline>+MR8wHQYDVQQLExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMIGfMA0GCSqGSIb3DQEB <newline>+AQUAA4GNADCBiQKBgQDMXtERXVxp0KvTuWpMmR9ZmDCOFoUgRm1HP9SFIIThbbP4 <newline>+pO0M8RcPO/mn+SXXwc+EY/J8Y8+iR/LGWzOOZEAEaMGAuWQcRXfH2G71lSk8UOg0 <newline>+13gfqLptQ5GVj0VXXn7F+8qkBOvqlzdUMG+7AUcyM83cV5tkaWH4mx0ciU9cZwID <newline>+AQABMA0GCSqGSIb3DQEBBQUAA4GBAFFNzb5cy5gZnBWyATl4Lk0PZ3BwmcYQWpSk <newline>+U01UbSuvDV1Ai2TT1+7eVmGSX6bEHRBhNtMsJzzoKQm5EWR0zLVznxxIqbxhAe7i <newline>+F6YM40AIOw7n60RzKprxaZLvcRTDOaxxp5EJb+RxBrO6WVcmeQD2+A2iMzAo1KpY <newline>+oJ2daZH9 <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass3_G2[] = <newline>+    "sha1/GiG0lStik84Ys2XsnA6TTLOB5tQ="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDAzCCAmwCEQC5L2DMiJ+hekYJuFtwbIqvMA0GCSqGSIb3DQEBBQUAMIHBMQsw <newline>+CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xPDA6BgNVBAsTM0Ns <newline>+YXNzIDIgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBH <newline>+MjE6MDgGA1UECxMxKGMpIDE5OTggVmVyaVNpZ24sIEluYy4gLSBGb3IgYXV0aG9y <newline>+aXplZCB1c2Ugb25seTEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29yazAe <newline>+Fw05ODA1MTgwMDAwMDBaFw0yODA4MDEyMzU5NTlaMIHBMQswCQYDVQQGEwJVUzEX <newline>+MBUGA1UEChMOVmVyaVNpZ24sIEluYy4xPDA6BgNVBAsTM0NsYXNzIDIgUHVibGlj <newline>+IFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBHMjE6MDgGA1UECxMx <newline>+KGMpIDE5OTggVmVyaVNpZ24sIEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25s <newline>+eTEfMB0GA1UECxMWVmVyaVNpZ24gVHJ1c3QgTmV0d29yazCBnzANBgkqhkiG9w0B <newline>+AQEFAAOBjQAwgYkCgYEAp4gBIXQs5xoD8JjhlzwPIQjxnNuX6Zr8wgQGE75fUsjM <newline>+HiwSViy4AWkszJkfrbCWrnkE8hM5wXuYuggs6MKEEyyqaekJ9MepAqRCwiNPStjw <newline>+DqL7MWzJ5m+ZJwf15vRMeJ5t60aG+rmGyVTyssSv1EYcWskVMP8NbPUtDm3Of3cC <newline>+AwEAATANBgkqhkiG9w0BAQUFAAOBgQByLvl/0fFx+8Se9sVeUYpAmLho+Jscg9ji <newline>+nb3/7aHmZuovCfTK1+qlK5X2JGCGTUQug6XELaDTrnhpb3LabK4I8GOSN+a7xDAX <newline>+rXfMSTWqz9iP0b63GJZHc2pUIjRkLbYWm1lbtFFZOrMLFPQS32eg9K0yZF6xRnIn <newline>+jBJ7xUS0rg== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass2_G2[] = <newline>+    "sha1/Eje6RRfurSkm/cHN/r7t8t7ZFFw="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIE0zCCA7ugAwIBAgIQGNrRniZ96LtKIVjNzGs7SjANBgkqhkiG9w0BAQUFADCB <newline>+yjELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL <newline>+ExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJp <newline>+U2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxW <newline>+ZXJpU2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0 <newline>+aG9yaXR5IC0gRzUwHhcNMDYxMTA4MDAwMDAwWhcNMzYwNzE2MjM1OTU5WjCByjEL <newline>+MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZW <newline>+ZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJpU2ln <newline>+biwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJp <newline>+U2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9y <newline>+aXR5IC0gRzUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1 <newline>+nmAMqudLO07cfLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKzj/i5Vbex <newline>+t0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2IIPVQT60nKWVSFJuUrjxuf6/WhkcIz <newline>+SdhDY2pSS9KP6HBRTdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY5fQG <newline>+BO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9r911kTMZHRxAy3QkGSGT2RT+ <newline>+rCpSx4/VBEnkjWNHiDxpg8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/ <newline>+NIeWiu5T6CUVAgMBAAGjgbIwga8wDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8E <newline>+BAMCAQYwbQYIKwYBBQUHAQwEYTBfoV2gWzBZMFcwVRYJaW1hZ2UvZ2lmMCEwHzAH <newline>+BgUrDgMCGgQUj+XTGoasjY5rw8+AatRIGCx7GS4wJRYjaHR0cDovL2xvZ28udmVy <newline>+aXNpZ24uY29tL3ZzbG9nby5naWYwHQYDVR0OBBYEFH/TZafC3ey78DAJ80M5+gKv <newline>+MzEzMA0GCSqGSIb3DQEBBQUAA4IBAQCTJEowX2LP2BqYLz3q3JktvXf2pXkiOOzE <newline>+p6B4Eq1iDkVwZMXnl2YtmAl+X6/WzChl8gGqCBpH3vn5fJJaCGkgDdk+bW48DW7Y <newline>+5gaRQBi5+MHt39tBquCWIMnNZBU4gcmU7qKEKQsTb47bDN0lAtukixlE0kF6BWlK <newline>+WE9gyn6CagsCqiUXObXbf+eEZSqVir2G3l6BFoMtEMze/aiCKm0oHw0LxOXnGiYZ <newline>+4fQRbxC1lfznQgUy286dUV4otp6F01vvpX1FQHKOtw5rDgb7MzVIcbidJ4vEZV8N <newline>+hnacRHr2lVz2XTIIM6RUthg/aFzyQkqFOFSDX9HoLPKsEdao7WNq <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignClass3_G5[] = <newline>+    "sha1/sYEIGhmkwJQf+uiVKMEkyZs0rMc="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEuTCCA6GgAwIBAgIQQBrEZCGzEyEDDrvkEhrFHTANBgkqhkiG9w0BAQsFADCB <newline>+vTELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL <newline>+ExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwOCBWZXJp <newline>+U2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MTgwNgYDVQQDEy9W <newline>+ZXJpU2lnbiBVbml2ZXJzYWwgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAe <newline>+Fw0wODA0MDIwMDAwMDBaFw0zNzEyMDEyMzU5NTlaMIG9MQswCQYDVQQGEwJVUzEX <newline>+MBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlTaWduIFRydXN0 <newline>+IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAyMDA4IFZlcmlTaWduLCBJbmMuIC0gRm9y <newline>+IGF1dGhvcml6ZWQgdXNlIG9ubHkxODA2BgNVBAMTL1ZlcmlTaWduIFVuaXZlcnNh <newline>+bCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEF <newline>+AAOCAQ8AMIIBCgKCAQEAx2E3XrEBNNti1xWb/1hajCMj1mCOkdeQmIN65lgZOIzF <newline>+9uVkhbSicfvtvbnazU0AtMgtc6XHaXGVHzk8skQHnOgO+k1KxCHfKWGPMiJhgsWH <newline>+H26MfF8WIFFE0XBPV+rjHOPMee5Y2A7Cs0WTwCznmhcrewA3ekEzeOEz4vMQGn+H <newline>+LL729fdC4uW/h2KJXwBL38Xd5HVEMkE6HnFuacsLdUYI0crSK5XQz/u5QGtkjFdN <newline>+/BMReYTtXlT2NJ8IAfMQJQYXStrxHXpma5hgZqTZ79IugvHw7wnqRMkVauIDbjPT <newline>+rJ9VAMf2CGqUuV/c4DPxhGD5WycRtPwW8rtWaoAljQIDAQABo4GyMIGvMA8GA1Ud <newline>+EwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMG0GCCsGAQUFBwEMBGEwX6FdoFsw <newline>+WTBXMFUWCWltYWdlL2dpZjAhMB8wBwYFKw4DAhoEFI/l0xqGrI2Oa8PPgGrUSBgs <newline>+exkuMCUWI2h0dHA6Ly9sb2dvLnZlcmlzaWduLmNvbS92c2xvZ28uZ2lmMB0GA1Ud <newline>+DgQWBBS2d/ppSEefUxLVwuoHMnYH0ZcHGTANBgkqhkiG9w0BAQsFAAOCAQEASvj4 <newline>+sAPmLGd75JR3Y8xuTPl9Dg3cyLk1uXBPY/ok+myDjEedO2Pzmvl2MpWRsXe8rJq+ <newline>+seQxIcaBlVZaDrHC1LGmWazxY8u4TB1ZkErvkBYoH1quEPuBUDgMbMzxPcP1Y+Oz <newline>+4yHJJDnp/RVmRvQbEdBNc6N9Rvk97ahfYtTxP/jgdFcrGJ2BtMQo2pSXpXDrrB2+ <newline>+BxHw1dvd5Yzw1TKwg+ZX4o+/vqGqvz0dtdQ46tewXDpPaj+PwGZsY6rp2aQW9IHR <newline>+lRQOfc2VNNnSj3BzgXucfr2YYdhFh5iQxeuGMMY1v/D/w1WIg0vvBZIGcfK4mJO3 <newline>+7M2CYfE45k+XmCpajQ== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_VeriSignUniversal[] = <newline>+    "sha1/u8I+KQuzKHcdrT6iTb30I70GsD0="; <newline>+ <newline>+// Not public <newline>+static const char kSPKIHash_Twitter1[] = <newline>+    "sha1/Vv7zwhR9TtOIN/29MFI4cgHld40="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIDZjCCAk6gAwIBAgIBATANBgkqhkiG9w0BAQUFADBEMQswCQYDVQQGEwJVUzEW <newline>+MBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEdMBsGA1UEAxMUR2VvVHJ1c3QgR2xvYmFs <newline>+IENBIDIwHhcNMDQwMzA0MDUwMDAwWhcNMTkwMzA0MDUwMDAwWjBEMQswCQYDVQQG <newline>+EwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEdMBsGA1UEAxMUR2VvVHJ1c3Qg <newline>+R2xvYmFsIENBIDIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDvPE1A <newline>+PRDfO1MA4Wf+lGAVPoWI8YkNkMgoI5kF6CsgncbzYEbYwbLVjDHZ3CB5JIG/NTL8 <newline>+Y2nbsSpr7iFY8gjpeMtvy/wWUsiRxP89c96xPqfCfWbB9X5SJBri1WeR0IIQ13hL <newline>+TytCOb1kLUCgsBDTOEhGiKEMuzozKmKY+wCdE1l/bztyqu6mD4b5BWHqZ38MN5aL <newline>+5mkWRxHCJ1kDs6ZgwiFAVvqgx306E+PsV8ez1q6diYD3Aecs9pYrEw15LNnA5IZ7 <newline>+S4wMcoKK+xfNAGw6EzywhIdLFnopsk/bHdQL82Y3vdj2V7teJHq4PIu5+pIaGoSe <newline>+2HSPqht/XvT+RSIhAgMBAAGjYzBhMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYE <newline>+FHE4NvICMVNHK266ZUapEBVYIAUJMB8GA1UdIwQYMBaAFHE4NvICMVNHK266ZUap <newline>+EBVYIAUJMA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG9w0BAQUFAAOCAQEAA/e1K6td <newline>+EPx7srJerJsOflN4WT5CBP51o62sgU7XAotexC3IUnbHLB/8gTKY0UvGkpMzNTEv <newline>+/NgdRN3ggX+d6YvhZJFiCzkIjKx0nVnZellSlxG5FntvRdOW2TF9AjYPnDtuzywN <newline>+A0ZF66D0f0hExghAzN4bcLUprbqLOzRldRtxIR0sFAqwlpW41uryZfspuk/qkZN0 <newline>+abby/+Ea0AzRdoXLiiW9l14sbxWZJue2Kf8i7MkCx1YAzUm5s2x7UwQa4qjJqhIF <newline>+I8LO57sEAszAR6LkxCkvW0VXiVHuPOtSCP8HNR6fNWpHSlaY0VqFH4z1Ir+rzoPz <newline>+4iIprn2DQKi6bA== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustGlobal2[] = <newline>+    "sha1/cTg28gIxU0crbrplRqkQFVggBQk="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIFaDCCA1CgAwIBAgIBATANBgkqhkiG9w0BAQUFADBFMQswCQYDVQQGEwJVUzEW <newline>+MBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEeMBwGA1UEAxMVR2VvVHJ1c3QgVW5pdmVy <newline>+c2FsIENBMB4XDTA0MDMwNDA1MDAwMFoXDTI5MDMwNDA1MDAwMFowRTELMAkGA1UE <newline>+BhMCVVMxFjAUBgNVBAoTDUdlb1RydXN0IEluYy4xHjAcBgNVBAMTFUdlb1RydXN0 <newline>+IFVuaXZlcnNhbCBDQTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAKYV <newline>+VaCjxuAfjJ0hUNfBvitbtaSeodlyWL0AG0y/YckUHUWCq8YdgNY96xCcOq9tJPi8 <newline>+cQGeBvV8Xx7BDlXKg5pZMK4ZyzBIle0iN430SppyZj6tlcDgFgDgEB8rMQ7XlFTT <newline>+QjOgNB0eRXbdT8oYN+yFFXoZCPzVx5zw8qkuEKmS5j1YPakWaDwvdSEYfyh3peFh <newline>+F7em6fgemdtzbvQKoiFs7tqqhZJmr/Z6a4LauiIINQ/PQvE1+mrufislzDoR5G2v <newline>+c7J2Ha3QsnhnGqQ5HFELZ1aD/ThdDc7d8Lsrlh/eezJS/R27tQahsiFepdaVaH/w <newline>+mZ7cRQg+59IJDTWU3YBOU5fXtQlEIGQWFwMCTFMNaN7VqnJNk22CDtucvc+081xd <newline>+VHppCZbW2xHBjXWotM85yM48vCR85mLK4b19p71XZQvk/iXttmkQ3CgaRr0BHdCX <newline>+teGYO8A3ZNY9lO4L4fUorgtWv3GLIylBjobFS1J72HGrH4oVpjuDWtdYAVHGTEHZ <newline>+f9hBZ3KiKN9gg6meyHv8U3NyWfWTehd2Ds735VzZC1U0oqpbtWpU5xPKV+yXbfRe <newline>+Bi9Fi1jUIxaS5BZuKGNZMN9QAZxjiRqf2xeUgnA3wySemkfWWspOqGmJch+RbNt+ <newline>+nhutxx9z3SxPGWX9f5NAEC7S8O08ni4oPmkmM8V7AgMBAAGjYzBhMA8GA1UdEwEB <newline>+/wQFMAMBAf8wHQYDVR0OBBYEFNq7LqqwDLiIJlF0XG0D08DYj3rWMB8GA1UdIwQY <newline>+MBaAFNq7LqqwDLiIJlF0XG0D08DYj3rWMA4GA1UdDwEB/wQEAwIBhjANBgkqhkiG <newline>+9w0BAQUFAAOCAgEAMXjmx7XfuJRAyXHEqDXsRh3ChfMoWIawC/yOsjmPRFWrZIRc <newline>+aanQmjg8+uUfNeVE44B5lGiku8SfPeE0zTBGi1QrlaXv9z+ZhP015s8xxtxqv6fX <newline>+IwjhmF7DWgh2qaavdy+3YL1ERmrvl/9zlcGO6JP7/TG37FcREUWbMPEaiDnBTzyn <newline>+ANXH/KttgCJwpQzgXQQpAvvLoJHRfNbDflDVnVi+QTjruXU8FdmbyUqDWcDaU/0z <newline>+uzYYm4UPFd3uLax2k7nZAY1IEKj79TiG8dsKxr2EoyNB3tZ3b4XUhRxQ4K5RirqN <newline>+Pnbiucon8l+f725ZDQbYKxek0nxru18UGkiPGkzns0ccjkxFKyDuSN/n3QmOGKja <newline>+QI2SJhFTYXNd673nxE0pN2HrrDktZy4W1vUAg4WhzH92xH3kt0tm7wNFYGm2DFKW <newline>+koRepqO1pD4r2czYG0eq8kTaT/kD6PAUyz/zg97QwVTjt+gKN02LIFkDMBmhLMi9 <newline>+ER/frslKxfMnZmaGrGiR/9nmUxwPi1xpZQomyB40w11Re9epnAahNt3ViZS82eQt <newline>+DF4JbAiXfKM9fJP/P6EUp8+1Xevb2xzEdt+Iub1FBZUbrvxGakyvSOPOrg/Sfuvm <newline>+bJxPgWp6ZKy7PtXny3YuxadIwVyQD8vIP/rmMuGNG2+k5o7Y+SlIis5z/iw= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustUniversal[] = <newline>+    "sha1/h+hbY1PGI6MSjLD/u/VR/lmADiI="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIFbDCCA1SgAwIBAgIBATANBgkqhkiG9w0BAQUFADBHMQswCQYDVQQGEwJVUzEW <newline>+MBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEgMB4GA1UEAxMXR2VvVHJ1c3QgVW5pdmVy <newline>+c2FsIENBIDIwHhcNMDQwMzA0MDUwMDAwWhcNMjkwMzA0MDUwMDAwWjBHMQswCQYD <newline>+VQQGEwJVUzEWMBQGA1UEChMNR2VvVHJ1c3QgSW5jLjEgMB4GA1UEAxMXR2VvVHJ1 <newline>+c3QgVW5pdmVyc2FsIENBIDIwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoIC <newline>+AQCzVFLByT7y2dyxUxpZKeexw0Uo5dfR7cXFS6GqdHtXr0om/Nj1XqduGdt0DE81 <newline>+WzILAePb63p3NeqqWuDW6KFXlPCQo3RWlEQwAx5cTiuFJnSCegx2oG9NzkEtoBUG <newline>+FF+3Qs17j1hhNNwqCPkuwwGmIkQcTAeC5lvO0Ep8BNMZcyfwqph/Lq9O64ceJHdq <newline>+XbboW0W63MOhBW9Wjo8QJqVJwy7XQYci4E+GymC16qFjwAGXEHm9ADwSbSsVsaxL <newline>+se4YuU6W3Nx2/zu+z18DwPw76L5GG//aQMJS9/7jOvdqdzXQ2o3rXhhqMcceujwb <newline>+KNZrVMaqW9eiLBsZzKIC9ptZvTdrhrVtgrrY6slWvKk2WP0+GfPtDCapkzj4T8Fd <newline>+IgbQl+rhrcZV4IErKIM6+vR7IVEAvlI4zs1meaj0gVbi0IMJR1FbUGrP20gaXT73 <newline>+y/Zl92zxlfgCOzJWgjl6W70viRu/obTo/3+NjN8D8WBOWBFM66M/ECuDmgFz2ZRt <newline>+hAAnZqzwcEAJQpKtT5MNYQlRJNiS1QuUYbKHsu3/mjX/hVTK7URDrBs8FmtISgoc <newline>+QIgfksILAAX/8sgCSqSqqcyZlpwvWOB94b67B9xfBHJcMTTD7F8t4D1kkCLm0ey4 <newline>+Lt1ZrtmhN79UNdxzMk+MBB4zsslG8dhcyFVQyWi9qLo2CQIDAQABo2MwYTAPBgNV <newline>+HRMBAf8EBTADAQH/MB0GA1UdDgQWBBR281Xh+qQ2+/CfXGJx7Tz0RzgQKzAfBgNV <newline>+HSMEGDAWgBR281Xh+qQ2+/CfXGJx7Tz0RzgQKzAOBgNVHQ8BAf8EBAMCAYYwDQYJ <newline>+KoZIhvcNAQEFBQADggIBAGbBxiPz2eAubl/oz66wsCVNK/g7WJtAJDday6sWSf+z <newline>+dXkzoS9tcBc0kf5nfo/sm+VegqlVHy/c1FEHEv6sFj4sNcZj/NwQ6w2jqtB8zNHQ <newline>+L1EuxBRa3ugZ4T7GzKQp5y6EqgYweHZUcyiYWTjgAA1i00J9IZ+uPTqM1fp3DRgr <newline>+Fg5fNuH8KrUwJM/gYwx7WBr+mbpCErGR9Hxo4sjoryzqyX6uuyo9DRXcNJW2GHSo <newline>+ag/HtPQTxORb7QrSpJdMKu0vbBKJPfEncKpqA1Ihn0CoZ1Dy81of398j9tx4TuaY <newline>+T1U6U+Pv8vSfx3zYWK8pIpe44L2RLrB27FcRz+8pRPPphXpgY+RdM4kX2TGq2tbz <newline>+GDVyz4crL2MjhF2EjD9XoIj8mZEoJmmZ1I+XRL6O1UixpCgp8RW04eWe3fiPpm8m <newline>+1wk8OhwRDqZsN/etRIcsKMfYdIKz0G9KV7s1KSegi+ghp4dkNl3M2Basx7InQJJV <newline>+OCiNUW7dFGdTbHFcJoRNdVq2fmBWqU2t+5sel/MN2dKXVHfaPRK34B7vCAas+YWH <newline>+6aLcr34YEoP9VhdBLtUpgn2Z9DH2canPLAEnpQW5qrJITirvn5NSUZU8UnOOVkwX <newline>+QMAJKOSLakhT2+zNVVXxxvjpoixMptEmX36vWkzaH6byHCx+rgIW0lbQL1dTR+iS <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustUniversal2[] = <newline>+    "sha1/Xk9ThoXdT57KX9wNRW99UbHcm3s="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIICrjCCAjWgAwIBAgIQPLL0SAoA4v7rJDteYD7DazAKBggqhkjOPQQDAzCBmDEL <newline>+MAkGA1UEBhMCVVMxFjAUBgNVBAoTDUdlb1RydXN0IEluYy4xOTA3BgNVBAsTMChj <newline>+KSAyMDA3IEdlb1RydXN0IEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25seTE2 <newline>+MDQGA1UEAxMtR2VvVHJ1c3QgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0 <newline>+eSAtIEcyMB4XDTA3MTEwNTAwMDAwMFoXDTM4MDExODIzNTk1OVowgZgxCzAJBgNV <newline>+BAYTAlVTMRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMTkwNwYDVQQLEzAoYykgMjAw <newline>+NyBHZW9UcnVzdCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxNjA0BgNV <newline>+BAMTLUdlb1RydXN0IFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgLSBH <newline>+MjB2MBAGByqGSM49AgEGBSuBBAAiA2IABBWx6P0DFUPlrOuHNxFi79KDNlJ9RVcL <newline>+So17VDs6bl8VAsBQps8lL33KSLjHUGMcKiEIfJo22Av+0SbFWDEwKCXzXV2juLal <newline>+tJLtbCyf691DiaI8S0iRHVDsJt/WYC69IaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAO <newline>+BgNVHQ8BAf8EBAMCAQYwHQYDVR0OBBYEFBVfNVdRVfslsq0DafwBo/q+EVXVMAoG <newline>+CCqGSM49BAMDA2cAMGQCMGSWWaboCd6LuvpaiIjwH5HTRqjySkwCY/tsXzjbLkGT <newline>+qQ7mndwxHLKgpxgceeHHNgIwOlavmnRs9vuD4DPTCF+hnMJbn0bWtsuRBmOiBucz <newline>+rD6ogRLQy7rQkgu2npaqBA+K <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustPrimary_G2[] = <newline>+    "sha1/vb6nG6txV/nkddlU0rcngBqCJoI="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIID/jCCAuagAwIBAgIQFaxulBmyeUtB9iepwxgPHzANBgkqhkiG9w0BAQsFADCB <newline>+mDELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUdlb1RydXN0IEluYy4xOTA3BgNVBAsT <newline>+MChjKSAyMDA4IEdlb1RydXN0IEluYy4gLSBGb3IgYXV0aG9yaXplZCB1c2Ugb25s <newline>+eTE2MDQGA1UEAxMtR2VvVHJ1c3QgUHJpbWFyeSBDZXJ0aWZpY2F0aW9uIEF1dGhv <newline>+cml0eSAtIEczMB4XDTA4MDQwMjAwMDAwMFoXDTM3MTIwMTIzNTk1OVowgZgxCzAJ <newline>+BgNVBAYTAlVTMRYwFAYDVQQKEw1HZW9UcnVzdCBJbmMuMTkwNwYDVQQLEzAoYykg <newline>+MjAwOCBHZW9UcnVzdCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxNjA0 <newline>+BgNVBAMTLUdlb1RydXN0IFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg <newline>+LSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANziXmJYHTNXOTIz <newline>++uvLh4yn1ErdBojqZI4xmKU4kB6Yzy5jK/BGvESyiaHAKAxJcCGVn2TAppMSAmUm <newline>+hsalifD614SgcK9PGpc/BkTVyetyEH3kMSj7HGHmKAdEc5IiaacDiGydY8hS2pgn <newline>+5whMcD60yRLBxWeDXTPzAxHsatBT4tG6NmCUgLthY2xbF37fQJQeqw3CIShwiP/W <newline>+JmxsYAQlTlV+fe+/lEjetx3dcI0FX4ilm/LC7urRQEFtYjgdVgbFA0dRIBn8exAL <newline>+DmKudlW/X3e+PkkBUz2YJQN2JFodtNuJ6nnltrM7P7pMKEF/BqxqjsHQ9gUdfeZC <newline>+huOl1UcCAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYw <newline>+HQYDVR0OBBYEFMR5yo6hTgMdHNxr2zFblD4/MH8tMA0GCSqGSIb3DQEBCwUAA4IB <newline>+AQAtxRPPVoB7eni9n64smefv2t+UXglpp+duaIy9cr5HqQ6XErhK8WTTOd8lNNTB <newline>+zU6B8A8ExCSzNJbGpqow32hhc9f5joWJ7w5elShKKiePEI4ufIbEAp7aDHdlDkQN <newline>+kv39sxY2+hENHYwOB4lqKVb3cvTdFZx3NWZXqxNT2I7BQMXXExZacse3aQHEerGD <newline>+AWh9jUGhlBjBJVz88P6DAod8DQ3PLghcSkANPuyBYeYk28rgDi0Hsj5W3I31QYUH <newline>+SJsMC8tJP33st/3LjWeJGqvtux6jAAgIFyqCXDFdRootD4abdNlF+9RAsXqqaC2G <newline>+spki4cErx5z481+oghLrGREt <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_GeoTrustPrimary_G3[] = <newline>+    "sha1/nKmNAK90Dd2BgNITRaWLjy6UONY="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEKjCCAxKgAwIBAgIEOGPe+DANBgkqhkiG9w0BAQUFADCBtDEUMBIGA1UEChMLRW50cnVzdC5u <newline>+ZXQxQDA+BgNVBAsUN3d3dy5lbnRydXN0Lm5ldC9DUFNfMjA0OCBpbmNvcnAuIGJ5IHJlZi4gKGxp <newline>+bWl0cyBsaWFiLikxJTAjBgNVBAsTHChjKSAxOTk5IEVudHJ1c3QubmV0IExpbWl0ZWQxMzAxBgNV <newline>+BAMTKkVudHJ1c3QubmV0IENlcnRpZmljYXRpb24gQXV0aG9yaXR5ICgyMDQ4KTAeFw05OTEyMjQx <newline>+NzUwNTFaFw0yOTA3MjQxNDE1MTJaMIG0MRQwEgYDVQQKEwtFbnRydXN0Lm5ldDFAMD4GA1UECxQ3 <newline>+d3d3LmVudHJ1c3QubmV0L0NQU18yMDQ4IGluY29ycC4gYnkgcmVmLiAobGltaXRzIGxpYWIuKTEl <newline>+MCMGA1UECxMcKGMpIDE5OTkgRW50cnVzdC5uZXQgTGltaXRlZDEzMDEGA1UEAxMqRW50cnVzdC5u <newline>+ZXQgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkgKDIwNDgpMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A <newline>+MIIBCgKCAQEArU1LqRKGsuqjIAcVFmQqK0vRvwtKTY7tgHalZ7d4QMBzQshowNtTK91euHaYNZOL <newline>+Gp18EzoOH1u3Hs/lJBQesYGpjX24zGtLA/ECDNyrpUAkAH90lKGdCCmziAv1h3edVc3kw37XamSr <newline>+hRSGlVuXMlBvPci6Zgzj/L24ScF2iUkZ/cCovYmjZy/Gn7xxGWC4LeksyZB2ZnuU4q941mVTXTzW <newline>+nLLPKQP5L6RQstRIzgUyVYr9smRMDuSYB3Xbf9+5CFVghTAp+XtIpGmG4zU/HoZdenoVve8AjhUi <newline>+VBcAkCaTvA5JaJG/+EfTnZVCwQ5N328mz8MYIWJmQ3DW1cAH4QIDAQABo0IwQDAOBgNVHQ8BAf8E <newline>+BAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUVeSB0RGAvtiJuQijMfmhJAkWuXAwDQYJ <newline>+KoZIhvcNAQEFBQADggEBADubj1abMOdTmXx6eadNl9cZlZD7Bh/KM3xGY4+WZiT6QBshJ8rmcnPy <newline>+T/4xmf3IDExoU8aAghOY+rat2l098c5u9hURlIIM7j+VrxGrD9cv3h8Dj1csHsm7mhpElesYT6Yf <newline>+zX1XEC+bBAlahLVu2B064dae0Wx5XnkcFMXj0EyTO2U87d89vqbllRrDtRnDvV5bu/8j72gZyxKT <newline>+J1wDLW8w0B62GqzeWvfRqqgnpv55gcR5mTNXuhKwqeBCbJPKVt7+bYQLCIt+jerXmCHG8+c8eS9e <newline>+nNFMFY3h7CI3zJpDC5fcgJCNs2ebb0gIFVbPv/ErfF6adulZkMV8gzURZVE= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Entrust_2048[] = <newline>+    "sha1/VeSB0RGAvtiJuQijMfmhJAkWuXA="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEkTCCA3mgAwIBAgIERWtQVDANBgkqhkiG9w0BAQUFADCBsDELMAkGA1UEBhMC <newline>+VVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xOTA3BgNVBAsTMHd3dy5lbnRydXN0 <newline>+Lm5ldC9DUFMgaXMgaW5jb3Jwb3JhdGVkIGJ5IHJlZmVyZW5jZTEfMB0GA1UECxMW <newline>+KGMpIDIwMDYgRW50cnVzdCwgSW5jLjEtMCsGA1UEAxMkRW50cnVzdCBSb290IENl <newline>+cnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTA2MTEyNzIwMjM0MloXDTI2MTEyNzIw <newline>+NTM0MlowgbAxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1FbnRydXN0LCBJbmMuMTkw <newline>+NwYDVQQLEzB3d3cuZW50cnVzdC5uZXQvQ1BTIGlzIGluY29ycG9yYXRlZCBieSBy <newline>+ZWZlcmVuY2UxHzAdBgNVBAsTFihjKSAyMDA2IEVudHJ1c3QsIEluYy4xLTArBgNV <newline>+BAMTJEVudHJ1c3QgUm9vdCBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCCASIwDQYJ <newline>+KoZIhvcNAQEBBQADggEPADCCAQoCggEBALaVtkNC+sZtKm9I35RMOVcF7sN5EUFo <newline>+Nu3s/poBj6E4KPz3EEZmLk0eGrEaTsbRwJWIsMn/MYszA9u3g3s+IIRe7bJWKKf4 <newline>+4LlAcTfFy0cOlypowCKVYhXbR9n10Cv/gkvJrT7eTNuQgFA/CYqEAOwwCj0Yzfv9 <newline>+KlmaI5UXLEWeH25DeW0MXJj+SKfFI0dcXv1u5x609mhF0YaDW6KKjbHjKYD+JXGI <newline>+rb68j6xSlkuqUY3kEzEZ6E5Nn9uss2rVvDlUccp6en+Q3X0dgNmBu1kmwhH+5pPi <newline>+94DkZfs0Nw4pgHBNrziGLp5/V6+eF67rHMsoIV+2HNjnogQi+dPa2MsCAwEAAaOB <newline>+sDCBrTAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zArBgNVHRAEJDAi <newline>+gA8yMDA2MTEyNzIwMjM0MlqBDzIwMjYxMTI3MjA1MzQyWjAfBgNVHSMEGDAWgBRo <newline>+kORnpKZTgMeGZqTx90tD+4S9bTAdBgNVHQ4EFgQUaJDkZ6SmU4DHhmak8fdLQ/uE <newline>+vW0wHQYJKoZIhvZ9B0EABBAwDhsIVjcuMTo0LjADAgSQMA0GCSqGSIb3DQEBBQUA <newline>+A4IBAQCT1DCw1wMgKtD5Y+iRDAUgqV8ZyntyTtSx29CW+1RaGSwMCPeyvIWonX9t <newline>+O1KzKtvn1ISMY/YPyyYBkVBs9F8U4pN0wBOeMDpQ47RgxRzwIkSNcUesyBrJ6Zua <newline>+AGAT/3B+XxFNSRuzFVJ7yVTav52Vr2ua2J7p8eRDjeIRRDq/r72DQnNSi6q7pynP <newline>+9WQcCk3RvKqsnyrQ/39/2n3qse0wJcGE2jTSW3iDVuycNsMm4hH2Z0kdkquM++v/ <newline>+eu6FSqdQgPCnXEqULl8FmTxSQeDNtGPPAUO6nIPcj2A781q0tHuu2guQOHXvgR1m <newline>+0vdXcDazv/wor3ElhVsT/h5/WrQ8 <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Entrust_EV[] = <newline>+    "sha1/ukKwgYhTiB2GY71MwF4I/upuu3c="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEPjCCAyagAwIBAgIESlOMKDANBgkqhkiG9w0BAQsFADCBvjELMAkGA1UEBhMC <newline>+VVMxFjAUBgNVBAoTDUVudHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50 <newline>+cnVzdC5uZXQvbGVnYWwtdGVybXMxOTA3BgNVBAsTMChjKSAyMDA5IEVudHJ1c3Qs <newline>+IEluYy4gLSBmb3IgYXV0aG9yaXplZCB1c2Ugb25seTEyMDAGA1UEAxMpRW50cnVz <newline>+dCBSb290IENlcnRpZmljYXRpb24gQXV0aG9yaXR5IC0gRzIwHhcNMDkwNzA3MTcy <newline>+NTU0WhcNMzAxMjA3MTc1NTU0WjCBvjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUVu <newline>+dHJ1c3QsIEluYy4xKDAmBgNVBAsTH1NlZSB3d3cuZW50cnVzdC5uZXQvbGVnYWwt <newline>+dGVybXMxOTA3BgNVBAsTMChjKSAyMDA5IEVudHJ1c3QsIEluYy4gLSBmb3IgYXV0 <newline>+aG9yaXplZCB1c2Ugb25seTEyMDAGA1UEAxMpRW50cnVzdCBSb290IENlcnRpZmlj <newline>+YXRpb24gQXV0aG9yaXR5IC0gRzIwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK <newline>+AoIBAQC6hLZy254Ma+KZ6TABp3bqMriVQRrJ2mFOWHLP/vaCeb9zYQYKpSfYs1/T <newline>+RU4cctZOMvJyig/3gxnQaoCAAEUesMfnmr8SVycco2gvCoe9amsOXmXzHHfV1IWN <newline>+cCG0szLni6LVhjkCsbjSR87kyUnEO6fe+1R9V77w6G7CebI6C1XiUJgWMhNcL3hW <newline>+wcKUs/Ja5CeanyTXxuzQmyWC48zCxEXFjJd6BmsqEZ+pCm5IO2/b1BEZQvePB7/1 <newline>+U1+cPvQXLOZprE4yTGJ36rfo5bs0vBmLrpxR57d+tVOxMyLlbc9wPBr64ptntoP0 <newline>+jaWvYkxN4FisZDQSA/i2jZRjJKRxAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAP <newline>+BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRqciZ60B7vfec7aVHUbI2fkBJmqzAN <newline>+BgkqhkiG9w0BAQsFAAOCAQEAeZ8dlsa2eT8ijYfThwMEYGprmi5ZiXMRrEPR9RP/ <newline>+jTkrwPK9T3CMqS/qF8QLVJ7UG5aYMzyorWKiAHarWWluBh1+xLlEjZivEtRh2woZ <newline>+Rkfz6/djwUAFQKXSt/S1mja/qYh2iARVBCuch38aNzx+LaUa2NSJXsq9rD1s2G2v <newline>+1fN2D807iDginWyTmsQ9v4IbZT+mD12q/OWyFcq1rca8PdCE6OoGcrBNOTJ4vz4R <newline>+nAuknZoh8/CbCzB428Hch0P+vGOaysXCHMnHjf87ElgI5rY97HosTvuDls4MPGmH <newline>+VHOkc8KT/1EQrBVUAdj8BbGJoX90g5pJ19xOe4pIb4tF9g== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Entrust_G2[] = <newline>+    "sha1/qzDTr0vY8WtYae5FaSnahLhzlIg="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIE2DCCBEGgAwIBAgIEN0rSQzANBgkqhkiG9w0BAQUFADCBwzELMAkGA1UEBhMC <newline>+VVMxFDASBgNVBAoTC0VudHJ1c3QubmV0MTswOQYDVQQLEzJ3d3cuZW50cnVzdC5u <newline>+ZXQvQ1BTIGluY29ycC4gYnkgcmVmLiAobGltaXRzIGxpYWIuKTElMCMGA1UECxMc <newline>+KGMpIDE5OTkgRW50cnVzdC5uZXQgTGltaXRlZDE6MDgGA1UEAxMxRW50cnVzdC5u <newline>+ZXQgU2VjdXJlIFNlcnZlciBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw05OTA1 <newline>+MjUxNjA5NDBaFw0xOTA1MjUxNjM5NDBaMIHDMQswCQYDVQQGEwJVUzEUMBIGA1UE <newline>+ChMLRW50cnVzdC5uZXQxOzA5BgNVBAsTMnd3dy5lbnRydXN0Lm5ldC9DUFMgaW5j <newline>+b3JwLiBieSByZWYuIChsaW1pdHMgbGlhYi4pMSUwIwYDVQQLExwoYykgMTk5OSBF <newline>+bnRydXN0Lm5ldCBMaW1pdGVkMTowOAYDVQQDEzFFbnRydXN0Lm5ldCBTZWN1cmUg <newline>+U2VydmVyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MIGdMA0GCSqGSIb3DQEBAQUA <newline>+A4GLADCBhwKBgQDNKIM0VBuJ8w+vN5Ex/68xYMmo6LIQaO2f55M28Qpku0f1BBc/ <newline>+I0dNxScZgSYMVHINiC3ZH5oSn7yzcdOAGT9HZnuMNSjSuQrfJNqc1lB5gXpa0zf3 <newline>+wkrYKZImZNHkmGw6AIr1NJtl+O3jEP/9uElY3KDegjlrgbEWGWG5VLbmQwIBA6OC <newline>+AdcwggHTMBEGCWCGSAGG+EIBAQQEAwIABzCCARkGA1UdHwSCARAwggEMMIHeoIHb <newline>+oIHYpIHVMIHSMQswCQYDVQQGEwJVUzEUMBIGA1UEChMLRW50cnVzdC5uZXQxOzA5 <newline>+BgNVBAsTMnd3dy5lbnRydXN0Lm5ldC9DUFMgaW5jb3JwLiBieSByZWYuIChsaW1p <newline>+dHMgbGlhYi4pMSUwIwYDVQQLExwoYykgMTk5OSBFbnRydXN0Lm5ldCBMaW1pdGVk <newline>+MTowOAYDVQQDEzFFbnRydXN0Lm5ldCBTZWN1cmUgU2VydmVyIENlcnRpZmljYXRp <newline>+b24gQXV0aG9yaXR5MQ0wCwYDVQQDEwRDUkwxMCmgJ6AlhiNodHRwOi8vd3d3LmVu <newline>+dHJ1c3QubmV0L0NSTC9uZXQxLmNybDArBgNVHRAEJDAigA8xOTk5MDUyNTE2MDk0 <newline>+MFqBDzIwMTkwNTI1MTYwOTQwWjALBgNVHQ8EBAMCAQYwHwYDVR0jBBgwFoAU8Bdi <newline>+E1U9s/8KAGv7UISX8+1i0BowHQYDVR0OBBYEFPAXYhNVPbP/CgBr+1CEl/PtYtAa <newline>+MAwGA1UdEwQFMAMBAf8wGQYJKoZIhvZ9B0EABAwwChsEVjQuMAMCBJAwDQYJKoZI <newline>+hvcNAQEFBQADgYEAkNwwAvpkdMKnCqV8IY00F6j7Rw7/JXyNEwr75Ji174z4xRAN <newline>+95K+8cPV1ZVqBLssziY2ZcgxxufuP+NXdYR6Ee9GTxj005i7qIcyunL2POI9n9cd <newline>+2cNgQ4xYDiKWL2KjLB+6rQXvqzJ4h6BUcxm1XAX5Uj5tLUUL9wqT6u0G+bI= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_Entrust_SSL[] = <newline>+    "sha1/8BdiE1U9s/8KAGv7UISX8+1i0Bo="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEMjCCAxqgAwIBAgIBATANBgkqhkiG9w0BAQUFADB7MQswCQYDVQQGEwJHQjEb <newline>+MBkGA1UECAwSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHDAdTYWxmb3JkMRow <newline>+GAYDVQQKDBFDb21vZG8gQ0EgTGltaXRlZDEhMB8GA1UEAwwYQUFBIENlcnRpZmlj <newline>+YXRlIFNlcnZpY2VzMB4XDTA0MDEwMTAwMDAwMFoXDTI4MTIzMTIzNTk1OVowezEL <newline>+MAkGA1UEBhMCR0IxGzAZBgNVBAgMEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4GA1UE <newline>+BwwHU2FsZm9yZDEaMBgGA1UECgwRQ29tb2RvIENBIExpbWl0ZWQxITAfBgNVBAMM <newline>+GEFBQSBDZXJ0aWZpY2F0ZSBTZXJ2aWNlczCCASIwDQYJKoZIhvcNAQEBBQADggEP <newline>+ADCCAQoCggEBAL5AnfRu4ep2hxxNRUSOvkbIgwadwSr+GB+O5AL686tdUIoWMQua <newline>+BtDFcCLNSS1UY8y2bmhGC1Pqy0wkwLxyTurxFa70VJoSCsN6sjNg4tqJVfMiWPPe <newline>+3M/vg4aijJRPn2jymJBGhCfHdr/jzDUsi14HZGWCwEiwqJH5YZ92IFCokcdmtet4 <newline>+YgNW8IoaE+oxox6gmf049vYnMlhvB/VruPsUK6+3qszWY19zjNoFmag4qMsXeDZR <newline>+rOme9Hg6jc8P2ULimAyrL58OAd7vn5lJ8S3frHRNG5i1R8XlKdH5kBjHYpy+g8cm <newline>+ez6KJcfA3Z3mNWgQIJ2P2N7Sw4ScDV7oL8kCAwEAAaOBwDCBvTAdBgNVHQ4EFgQU <newline>+oBEKIz6W8Qfs4q8p74Klf9AwpLQwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQF <newline>+MAMBAf8wewYDVR0fBHQwcjA4oDagNIYyaHR0cDovL2NybC5jb21vZG9jYS5jb20v <newline>+QUFBQ2VydGlmaWNhdGVTZXJ2aWNlcy5jcmwwNqA0oDKGMGh0dHA6Ly9jcmwuY29t <newline>+b2RvLm5ldC9BQUFDZXJ0aWZpY2F0ZVNlcnZpY2VzLmNybDANBgkqhkiG9w0BAQUF <newline>+AAOCAQEACFb8AvCb6P+k+tZ7xkSAzk/ExfYAWMymtrwUSWgEdujm7l3sAg9g1o1Q <newline>+GE8mTgHj5rCl7r+8dFRBv/38ErjHT1r0iWAFf2C3BUrz9vHCv8S5dIa2LX1rzNLz <newline>+Rt0vxuBqw8M0Ayx9lt1awg6nCpnBBYurDC/zXDrPbDdVCYfeU0BsWO/8tqtlbgT2 <newline>+G9w84FoVxp7Z8VlIMCFlA2zs6SFz7JsDoeA3raAVGI/6ugLOpyypEBMs1OUIJqsi <newline>+l2D4kF501KKaU73yqWjgom7C12yxow+ev+to51byrvLjKzg6CYG1a4XXvi3tPxq3 <newline>+smPi9WIsgtRqAEFQ8TmDn5XpNpaYbg== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_AAACertificateServices[] = <newline>+    "sha1/xDAoxdPjCAwQRIssd7okU5dgu/k="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEGDCCAwCgAwIBAgIBATANBgkqhkiG9w0BAQUFADBlMQswCQYDVQQGEwJTRTEU <newline>+MBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3 <newline>+b3JrMSEwHwYDVQQDExhBZGRUcnVzdCBDbGFzcyAxIENBIFJvb3QwHhcNMDAwNTMw <newline>+MTAzODMxWhcNMjAwNTMwMTAzODMxWjBlMQswCQYDVQQGEwJTRTEUMBIGA1UEChML <newline>+QWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3b3JrMSEwHwYD <newline>+VQQDExhBZGRUcnVzdCBDbGFzcyAxIENBIFJvb3QwggEiMA0GCSqGSIb3DQEBAQUA <newline>+A4IBDwAwggEKAoIBAQCWltQhSWDia+hBBwzexODcEyPNwTXH+9ZOEQpnXvUGW2ul <newline>+CDtbKRY654eyNAbFvAWlA3yCyykQruGIgb3WntP+LVbBFc7jJp0VLhD7Bo8wBN6n <newline>+tGO0/7Gcrjyvd7ZWxbWroulpOj0OM3kyP3CCkplhbY0wCI9xP6ZIVxn4JdxLZlyl <newline>+dI+Yrsj5wAYi56xz36Uu+1LcsRVlIPo1Zmne3yzxbrww2ywkEtvrNTVokMsAsJch <newline>+PXQhI2U0K7t4WaPW4XY5mqRJjox0r26kmqPZm9I4XJuiGMx1I4S+6+JNM3GOGvDC <newline>++Mcdoq0Dlyz4zyXG9rgkMbFjXZJ/Y/AlyVMuH79NAgMBAAGjgdIwgc8wHQYDVR0O <newline>+BBYEFJWxtPCUtr3H2tERCSG+wa9J/RB7MAsGA1UdDwQEAwIBBjAPBgNVHRMBAf8E <newline>+BTADAQH/MIGPBgNVHSMEgYcwgYSAFJWxtPCUtr3H2tERCSG+wa9J/RB7oWmkZzBl <newline>+MQswCQYDVQQGEwJTRTEUMBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFk <newline>+ZFRydXN0IFRUUCBOZXR3b3JrMSEwHwYDVQQDExhBZGRUcnVzdCBDbGFzcyAxIENB <newline>+IFJvb3SCAQEwDQYJKoZIhvcNAQEFBQADggEBACxtZBsfzQ3duQH6lmM0MkhHma6X <newline>+7f1yFqZzR1r0693p9db7RcwpiURdv0Y5PejuvE1Uhh4dbOMXJ0PhiVYrqW9yTkkz <newline>+43J8KiOavD7/KCrto/8cI7pDVwlnTUtiBi34/2ydYB7YHEt9tTEv2dB8Xfjea4MY <newline>+eDdXL+gzB2ffHsdrKpV2ro9Xo/D0UrSpUwjP4E/TelOL/bscVjby/rK25Xa71SJl <newline>+pz/+0WatC7xrmYbvP33zGDLKe8bjq2RGlfgmadlVg3sslgf/WSxEo8bl6ancoWOA <newline>+WiFeIc9TVPC6b4nbqKqVz4vjccweGyBECMB6tkD9xOQ14R0WHNC8K47Wcdk= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_AddTrustClass1CARoot[] = <newline>+    "sha1/i9vXzKBoU0IW9MErJUT8Apyli0c="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIENjCCAx6gAwIBAgIBATANBgkqhkiG9w0BAQUFADBvMQswCQYDVQQGEwJTRTEU <newline>+MBIGA1UEChMLQWRkVHJ1c3QgQUIxJjAkBgNVBAsTHUFkZFRydXN0IEV4dGVybmFs <newline>+IFRUUCBOZXR3b3JrMSIwIAYDVQQDExlBZGRUcnVzdCBFeHRlcm5hbCBDQSBSb290 <newline>+MB4XDTAwMDUzMDEwNDgzOFoXDTIwMDUzMDEwNDgzOFowbzELMAkGA1UEBhMCU0Ux <newline>+FDASBgNVBAoTC0FkZFRydXN0IEFCMSYwJAYDVQQLEx1BZGRUcnVzdCBFeHRlcm5h <newline>+bCBUVFAgTmV0d29yazEiMCAGA1UEAxMZQWRkVHJ1c3QgRXh0ZXJuYWwgQ0EgUm9v <newline>+dDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALf3GjPm8gAELTngTlvt <newline>+H7xsD821+iO2zt6bETOXpClMfZOfvUq8k+0DGuOPz+VtUFrWlymUWoCwSXrbLpX9 <newline>+uMq/NzgtHj6RQa1wVsfwTz/oMp50ysiQVOnGXw94nZpAPA6sYapeFI+eh6FqUNzX <newline>+mk6vBbOmcZSccbNQYArHE504B4YCqOmoaSYYkKtMsE8jqzpPhNjfzp/haW+710LX <newline>+a0Tkx63ubUFfclpxCDezeWWkWaCUN/cALw3CknLa0Dhy2xSoRcRdKn23tNbE7qzN <newline>+E0S3ySvdQwAl+mG5aWpYIxG3pzOPVnVZ9c0p10a3CitlttNCbxWyuHv77+ldU9U0 <newline>+WicCAwEAAaOB3DCB2TAdBgNVHQ4EFgQUrb2YejS0Jvf6xCZU7wO94CTLVBowCwYD <newline>+VR0PBAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wgZkGA1UdIwSBkTCBjoAUrb2YejS0 <newline>+Jvf6xCZU7wO94CTLVBqhc6RxMG8xCzAJBgNVBAYTAlNFMRQwEgYDVQQKEwtBZGRU <newline>+cnVzdCBBQjEmMCQGA1UECxMdQWRkVHJ1c3QgRXh0ZXJuYWwgVFRQIE5ldHdvcmsx <newline>+IjAgBgNVBAMTGUFkZFRydXN0IEV4dGVybmFsIENBIFJvb3SCAQEwDQYJKoZIhvcN <newline>+AQEFBQADggEBALCb4IUlwtYj4g+WBpKdQZic2YR5gdkeWxQHIzZlj7DYd7usQWxH <newline>+YINRsPkyPef89iYTx4AWpb9a/IfPeHmJIZriTAcKhjW88t5RxNKWt9x+Tu5w/Rw5 <newline>+6wwCURQtjr0W4MHfRnXnJK3s9EK0hZNwEGe6nQY1ShjTK3rMUUKhemPR5ruhxSvC <newline>+Nr4TDea9Y355e6cJDUCrat2PisP29owaQgVR1EX1n6diIWgVIEM8med8vSTYqZEX <newline>+c4g/VhsxOBi0cQ+azcgOno4uG+GMmIPLHzHxREzGBHNJdmAPx/i9F4BrLunMTA5a <newline>+mnkPIAou1Z5jJh5VkpTYghdae9C8x49OhgQ= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_AddTrustExternalCARoot[] = <newline>+    "sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEFTCCAv2gAwIBAgIBATANBgkqhkiG9w0BAQUFADBkMQswCQYDVQQGEwJTRTEU <newline>+MBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3 <newline>+b3JrMSAwHgYDVQQDExdBZGRUcnVzdCBQdWJsaWMgQ0EgUm9vdDAeFw0wMDA1MzAx <newline>+MDQxNTBaFw0yMDA1MzAxMDQxNTBaMGQxCzAJBgNVBAYTAlNFMRQwEgYDVQQKEwtB <newline>+ZGRUcnVzdCBBQjEdMBsGA1UECxMUQWRkVHJ1c3QgVFRQIE5ldHdvcmsxIDAeBgNV <newline>+BAMTF0FkZFRydXN0IFB1YmxpYyBDQSBSb290MIIBIjANBgkqhkiG9w0BAQEFAAOC <newline>+AQ8AMIIBCgKCAQEA6Rowj4OIFMEg2Dybjxt+A3S72mnTRqX4jsIMEZBRpS9mVEBV <newline>+6tsfSlbunyNu9DnLoblv8n75XYcmYZ4c+OLspoH4IcUkzBEMP9smcnrHAZcHF/nX <newline>+GCwwfQ56HmIexkvA/X1id9NEHif2P0tEs7c42TkfYNVRknMDtABp4/MUTu7R3AnP <newline>+dzRGULD4EfL+OHn3Bzn+UZKXC1sIXzSGAa2Il+tmzV7R/9x98oTaunet3IAIx6eH <newline>+1lWfl2royBFkuucZKT8Rs3iQhCBSWxHveNCD9tVIkNAwHM+A+WD+eeSI8t0A65RF <newline>+62WUaUC6wNW0uLp9BBGo6zEFlpROWCGOn9Bg/QIDAQABo4HRMIHOMB0GA1UdDgQW <newline>+BBSBPjfYkrAfd59ctKtzquf2NGAv+jALBgNVHQ8EBAMCAQYwDwYDVR0TAQH/BAUw <newline>+AwEB/zCBjgYDVR0jBIGGMIGDgBSBPjfYkrAfd59ctKtzquf2NGAv+qFopGYwZDEL <newline>+MAkGA1UEBhMCU0UxFDASBgNVBAoTC0FkZFRydXN0IEFCMR0wGwYDVQQLExRBZGRU <newline>+cnVzdCBUVFAgTmV0d29yazEgMB4GA1UEAxMXQWRkVHJ1c3QgUHVibGljIENBIFJv <newline>+b3SCAQEwDQYJKoZIhvcNAQEFBQADggEBAAP3FUr4JNojVhaTdt02KLmuG7jD8WS6 <newline>+IBh4lSknVwW8fCr0uVFV2ocC3g8WFzH4qnkuCRO7r7IgGRLlk/lL+YPoRNWyQSW/ <newline>+iHVv/xD8SlTQX/D67zZzfRs2RcYhbbQVuE7PnFylPVoAjgbjPGsye/Kf8Lb93/Ao <newline>+GEjwxrzQvzSAlsJKsW2Ox5BF3i9nrEUEo3rcVZLJR2bYGozH7ZxOmuASu7VqTITh <newline>+4SINhwBk/ox9Yjllpu9CtoAlEmEBqCQTcAARJl/6NVDFSMwGR+gn2HCNX2TmoUQm <newline>+XiLsks3/QppEIW1cxeMiHV9HEufOX1362KqxMy3ZdvJOOjMMK7MtkAY= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_AddTrustPublicCARoot[] = <newline>+    "sha1/qFdl1ugyyMUZY3Namhd0OoHf7i4="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEHjCCAwagAwIBAgIBATANBgkqhkiG9w0BAQUFADBnMQswCQYDVQQGEwJTRTEU <newline>+MBIGA1UEChMLQWRkVHJ1c3QgQUIxHTAbBgNVBAsTFEFkZFRydXN0IFRUUCBOZXR3 <newline>+b3JrMSMwIQYDVQQDExpBZGRUcnVzdCBRdWFsaWZpZWQgQ0EgUm9vdDAeFw0wMDA1 <newline>+MzAxMDQ0NTBaFw0yMDA1MzAxMDQ0NTBaMGcxCzAJBgNVBAYTAlNFMRQwEgYDVQQK <newline>+EwtBZGRUcnVzdCBBQjEdMBsGA1UECxMUQWRkVHJ1c3QgVFRQIE5ldHdvcmsxIzAh <newline>+BgNVBAMTGkFkZFRydXN0IFF1YWxpZmllZCBDQSBSb290MIIBIjANBgkqhkiG9w0B <newline>+AQEFAAOCAQ8AMIIBCgKCAQEA5B6a/twJWoekn0e+EV+vhDTbYjx5eLfpMLXsDBwq <newline>+xBb/4Oxx64r1EW7tTw2R0hIYLUkVAcKkIhPHEWT/IhKauY5cLwjPcWqzZwFZ8V1G <newline>+87B4pfYOQnrjfxvM0PC3KP0q6p6zsLkEqv32x7SxuCqg+1jxGaBvcCV+PmlKfw8i <newline>+2O+tCBGaKZnhqkRFmhJePp1tUvznoD1oL/BLcHwTOK28FSXx1s6rosAx1i+f4P8U <newline>+WfyEk9mHfExUE+uf0S0R+Bg6Ot4l2ffTQO2kBhLEO+GRwVY18BTcZTYJbqukB8c1 <newline>+0cIDMzZbdSZtQvESa0NvS3GU+jQd7RNuyoB/mC9suWXY6QIDAQABo4HUMIHRMB0G <newline>+A1UdDgQWBBQ5lYtii1zJ1IC6WA+XPxUIQ8yYpzALBgNVHQ8EBAMCAQYwDwYDVR0T <newline>+AQH/BAUwAwEB/zCBkQYDVR0jBIGJMIGGgBQ5lYtii1zJ1IC6WA+XPxUIQ8yYp6Fr <newline>+pGkwZzELMAkGA1UEBhMCU0UxFDASBgNVBAoTC0FkZFRydXN0IEFCMR0wGwYDVQQL <newline>+ExRBZGRUcnVzdCBUVFAgTmV0d29yazEjMCEGA1UEAxMaQWRkVHJ1c3QgUXVhbGlm <newline>+aWVkIENBIFJvb3SCAQEwDQYJKoZIhvcNAQEFBQADggEBABmrder4i2VhlRO6aQTv <newline>+hsoToMeqT2QbPxj2qC0sVY8FtzDqQmodwCVRLae/DLPt7wh/bDxGGuoYQ992zPlm <newline>+hpwsaPXpF/gxsxjE1kh9I0xowX67ARRvxdlu3rsEQmr49lx95dr6h+sNNVJn0J6X <newline>+dgWTP5XHAeZpVTh/EGGZyeNfpso+gmNIquIISD6q8rKFYqa0p9m9N5xotS1WfbC3 <newline>+P6CxB9bpT9zeRXEwMn8bLgn5v1Kh7sKAPgZcLlVAwRv1cEWw3F369nJad9Jjzc9Y <newline>+iQBCYz95OdBEsIJuQRno3eDBiFrRHnGTHyQwdOUeqN48Jzd/g66ed8/wMLH/S5no <newline>+xqE= <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_AddTrustQualifiedCARoot[] = <newline>+    "sha1/vOS3IxJVmOVjQRkcUOS2R8J2Bdc="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEHTCCAwWgAwIBAgIQToEtioJl4AsC7j41AkblPTANBgkqhkiG9w0BAQUFADCB <newline>+gTELMAkGA1UEBhMCR0IxGzAZBgNVBAgTEkdyZWF0ZXIgTWFuY2hlc3RlcjEQMA4G <newline>+A1UEBxMHU2FsZm9yZDEaMBgGA1UEChMRQ09NT0RPIENBIExpbWl0ZWQxJzAlBgNV <newline>+BAMTHkNPTU9ETyBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0wNjEyMDEwMDAw <newline>+MDBaFw0yOTEyMzEyMzU5NTlaMIGBMQswCQYDVQQGEwJHQjEbMBkGA1UECBMSR3Jl <newline>+YXRlciBNYW5jaGVzdGVyMRAwDgYDVQQHEwdTYWxmb3JkMRowGAYDVQQKExFDT01P <newline>+RE8gQ0EgTGltaXRlZDEnMCUGA1UEAxMeQ09NT0RPIENlcnRpZmljYXRpb24gQXV0 <newline>+aG9yaXR5MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0ECLi3LjkRv3 <newline>+UcEbVASY06m/weaKXTuH+7uIzg3jLz8GlvCiKVCZrts7oVewdFFxze1CkU1B/qnI <newline>+2GqGd0S7WWaXUF601CxwRM/aN5VCaTwwxHGzUvAhTaHYujl8HJ6jJJ3ygxaYqhZ8 <newline>+Q5sVW7euNJH+1GImGEaaP+vB+fGQV+useg2L23IwambV4EajcNxo2f8ESIl33rXp <newline>++2dtQem8Ob0y2WIC8bGoPW43nOIv4tOiJovGuFVDiOEjPqXSJDlqR6sA1KGzqSX+ <newline>+DT+nHbrTUcELpNqsOO9VUCQFZUaTNE8tja3G1CEZ0o7KBWFxB3NH5YoZEr0ETc5O <newline>+nKVIrLsm9wIDAQABo4GOMIGLMB0GA1UdDgQWBBQLWOWLxkwVN6RAqTCpIb5HNlpW <newline>+/zAOBgNVHQ8BAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zBJBgNVHR8EQjBAMD6g <newline>+PKA6hjhodHRwOi8vY3JsLmNvbW9kb2NhLmNvbS9DT01PRE9DZXJ0aWZpY2F0aW9u <newline>+QXV0aG9yaXR5LmNybDANBgkqhkiG9w0BAQUFAAOCAQEAPpiem/Yb6dc5t3iuHXIY <newline>+SdOH5EOC6z/JqvWote9VfCFSZfnVDeFs9D6Mk3ORLgLETgdxb8CPOGEIqB6BCsAv <newline>+IC9Bi5HcSEW88cbeunZrM8gALTFGTO3nnc+IlP8zwFboJIYmuNg4ON8qa90SzMc/ <newline>+RxdMosIGlgnW2/4/PEZB31jiVg88O8EckzXZOFKs7sjsLjBOlDW0JB9LeGna8gI4 <newline>+zJVSk/BwJVmcIGfE7vmLV2H0knZ9P4SNVbfo5azV8fUZVqZa+5Acr5Pr5RzUZ5dd <newline>+BA6+C4OmF4O5MBKgxTMVBbkN+8cFduPYSo38NBejxiEovjBFMR7HeL5YYTisO+IB <newline>+ZQ== <newline>+-----END CERTIFICATE----- <newline>+#endif <newline>+static const char kSPKIHash_COMODOCertificationAuthority[] = <newline>+    "sha1/EeSR0cnkwOuazs9zVF3h8agwPsM="; <newline>+ <newline>+#if 0 <newline>+-----BEGIN CERTIFICATE----- <newline>+MIIEPzCCAyegAwIBAgIBATANBgkqhkiG9w0BAQUFADB+MQswCQYDVQQGEwJHQjEb <newline>+MBkGA1UECAwSR3JlYXRlciBNYW5jaG																								
Chromium	5		105e7c339a9e785891b130239c9a96356c4b0b4	alexeypa@chromium.org <alexeypa@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Mar 20 21:22:23 2012 +0000	Enable positional parameters for base::vsnprintf and base::vswprintf on Windows. This is to avoid bugs like http://code.google.com/p/chromium/issues/detail?id=118064 in the future. Positional parameters are supported by the VC++ runtime via the set of "_p" flavored printf-like routines. MSDN claims that "By default the positional functions behave identically to the non position ones, if no positional formatting is present." There is a little difference that require some attention though. Currently base::vsnprintf and base::vswprintf wrappers use "_s" functions (so called "security enhanced versions"). Judging by looking at the CRT code, _p functions implement the same checks as _s ones do. The base wrappers call the CRT routines so that count == (sizeOfBuffer - 1). This reduces most of the additional code in _vsnprintf_s (comparing to _vsprintf_p) to no-op. Namely: 1. When truncation happens the tail of the buffer is filled with a pattern: _SECURECRT__FILL_STRING(string, sizeInBytes, count + 1); This does not happen in our case because sizeInBytes == count + 1. 2. The special case check shown below was never true since sizeInBytes != count in our case: if (count == 0 && string == NULL && sizeInBytes == 0) 3. The following checks in _vsnprintf_s are also implemented in _vsnprintf_helper: _VALIDATE_RETURN(format != NULL, EINVAL, -1); _VALIDATE_RETURN(string != NULL && sizeInBytes > 0, EINVAL, -1); The only remaining difference between _vsnprintf_s and _vsprintf_p is that the former NULL-terminates the buffer and fills the rest a pattern if _vsnprintf_helper failed because of any reason other than truncation: string[0] = 0; _SECURECRT__FILL_STRING(string, sizeInBytes, 1); This CL write NULL to the end of the buffer in any error case (truncation or other reason).			http://codereview.chromium.org/9702002	svn://svn.chromium.org/chrome/trunk/src@127788 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/base/stringprintf_unittest.cc b/base/stringprintf_unittest.cc <newline>index ffb9c77..6f4458b 100644 <newline>--- a/base/stringprintf_unittest.cc <newline>+++ b/base/stringprintf_unittest.cc <newline>@@ -1,4 +1,4 @@ <newline>-// Copyright (c) 2010 The Chromium Authors. All rights reserved. <newline>+// Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline> // Use of this source code is governed by a BSD-style license that can be <newline> // found in the LICENSE file. <newline>@@ -149,4 +149,17 @@ TEST(StringPrintfTest, Invalid) { <newline> } <newline> #endif <newline>+// Test that the positional parameters work. <newline>+TEST(StringPrintfTest, PositionalParameters) { <newline>+  std::string out; <newline>+  SStringPrintf(&out, "%1$s %1$s", "test"); <newline>+  EXPECT_STREQ("test test", out.c_str()); <newline>+ <newline>+#if defined(OS_WIN) <newline>+  std::wstring wout; <newline>+  SStringPrintf(&wout, L"%1$ls %1$ls", L"test"); <newline>+  EXPECT_STREQ(L"test test", wout.c_str()); <newline>+#endif <newline>+} <newline>+ <newline> }  // namespace base																								
Chromium	5		9913e7a98457fc2a25f89328fd639e17ffdf427	alexeypa@chromium.org <alexeypa@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Mar 20 21:22:23 2012 +0000	Enable positional parameters for base::vsnprintf and base::vswprintf on Windows. This is to avoid bugs like http://code.google.com/p/chromium/issues/detail?id=118064 in the future. Positional parameters are supported by the VC++ runtime via the set of "_p" flavored printf-like routines. MSDN claims that "By default the positional functions behave identically to the non position ones, if no positional formatting is present." There is a little difference that require some attention though. Currently base::vsnprintf and base::vswprintf wrappers use "_s" functions (so called "security enhanced versions"). Judging by looking at the CRT code, _p functions implement the same checks as _s ones do. The base wrappers call the CRT routines so that count == (sizeOfBuffer - 1). This reduces most of the additional code in _vsnprintf_s (comparing to _vsprintf_p) to no-op. Namely: 1. When truncation happens the tail of the buffer is filled with a pattern: _SECURECRT__FILL_STRING(string, sizeInBytes, count + 1); This does not happen in our case because sizeInBytes == count + 1. 2. The special case check shown below was never true since sizeInBytes != count in our case: if (count == 0 && string == NULL && sizeInBytes == 0) 3. The following checks in _vsnprintf_s are also implemented in _vsnprintf_helper: _VALIDATE_RETURN(format != NULL, EINVAL, -1); _VALIDATE_RETURN(string != NULL && sizeInBytes > 0, EINVAL, -1); The only remaining difference between _vsnprintf_s and _vsprintf_p is that the former NULL-terminates the buffer and fills the rest a pattern if _vsnprintf_helper failed because of any reason other than truncation: string[0] = 0; _SECURECRT__FILL_STRING(string, sizeInBytes, 1); This CL write NULL to the end of the buffer in any error case (truncation or other reason).			http://codereview.chromium.org/9702002	svn://svn.chromium.org/chrome/trunk/src@127788 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/base/stringprintf_unittest.cc b/base/stringprintf_unittest.cc <newline>index ffb9c77..6f4458b 100644 <newline>--- a/base/stringprintf_unittest.cc <newline>+++ b/base/stringprintf_unittest.cc <newline>@@ -1,4 +1,4 @@ <newline>-// Copyright (c) 2010 The Chromium Authors. All rights reserved. <newline>+// Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline> // Use of this source code is governed by a BSD-style license that can be <newline> // found in the LICENSE file. <newline>@@ -149,4 +149,17 @@ TEST(StringPrintfTest, Invalid) { <newline> } <newline> #endif <newline>+// Test that the positional parameters work. <newline>+TEST(StringPrintfTest, PositionalParameters) { <newline>+  std::string out; <newline>+  SStringPrintf(&out, "%1$s %1$s", "test"); <newline>+  EXPECT_STREQ("test test", out.c_str()); <newline>+ <newline>+#if defined(OS_WIN) <newline>+  std::wstring wout; <newline>+  SStringPrintf(&wout, L"%1$ls %1$ls", L"test"); <newline>+  EXPECT_STREQ(L"test test", wout.c_str()); <newline>+#endif <newline>+} <newline>+ <newline> }  // namespace base																								
Chromium	1	3	6e0db1296382970af257c295b4787a7b12a2724	dalecurtis@google.com <dalecurtis@google.com@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Mar 20 20:13:17 2012 +0000	Roll FFmpeg DEPS for mp3 and security fixes. ffmpeg_revision: http://src.chromium.org/viewvc/chrome/trunk/deps/third_party/ffmpeg/?view=log ffmpeg_hash: http://git.chromium.org/gitweb/?p=chromium/third_party/ffmpeg.git&a=commit Pulls in the following upstream patches: c7a9f96 vp8: avoid race condition on segment map. 0781696 threads: fix old frames returned after avcodec_flush_buffers() 7d627c4 mp3_probe: consider id3 tags to be low scoring mp3. TEST=ffmpeg_regression_tests, media_unittests, manual playback.	93932, 110309		https://chromiumcodereview.appspot.com/9742001	svn://svn.chromium.org/chrome/trunk/src@127759 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/DEPS b/DEPS <newline>index 0d8f678..8407308 100644 <newline>--- a/DEPS <newline>+++ b/DEPS <newline>@@ -46,8 +46,8 @@ vars = { <newline>   # These two FFmpeg variables must be updated together.  One is used for SVN <newline>   # checkouts and the other for Git checkouts. <newline>-  "ffmpeg_revision": "126470", <newline>-  "ffmpeg_hash": "ddcf259fa5fb83159d441bd71f54e617e2a4afd3", <newline>+  "ffmpeg_revision": "127595", <newline>+  "ffmpeg_hash": "c4db435602131b218d0c39e85ccf18a4be195e60", <newline>   "sfntly_revision": "128", <newline>   "skia_revision": "3441",																								
Chromium	1	3	6e3afcd0cd30d1887773f6524ae25ebffd313ea	dalecurtis@google.com <dalecurtis@google.com@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Mar 20 20:13:17 2012 +0000	Roll FFmpeg DEPS for mp3 and security fixes. ffmpeg_revision: http://src.chromium.org/viewvc/chrome/trunk/deps/third_party/ffmpeg/?view=log ffmpeg_hash: http://git.chromium.org/gitweb/?p=chromium/third_party/ffmpeg.git&a=commit Pulls in the following upstream patches: c7a9f96 vp8: avoid race condition on segment map. 0781696 threads: fix old frames returned after avcodec_flush_buffers() 7d627c4 mp3_probe: consider id3 tags to be low scoring mp3. TEST=ffmpeg_regression_tests, media_unittests, manual playback.	93932, 110309		https://chromiumcodereview.appspot.com/9742001	svn://svn.chromium.org/chrome/trunk/src@127759 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/DEPS b/DEPS <newline>index 0d8f678..8407308 100644 <newline>--- a/DEPS <newline>+++ b/DEPS <newline>@@ -46,8 +46,8 @@ vars = { <newline>   # These two FFmpeg variables must be updated together.  One is used for SVN <newline>   # checkouts and the other for Git checkouts. <newline>-  "ffmpeg_revision": "126470", <newline>-  "ffmpeg_hash": "ddcf259fa5fb83159d441bd71f54e617e2a4afd3", <newline>+  "ffmpeg_revision": "127595", <newline>+  "ffmpeg_hash": "c4db435602131b218d0c39e85ccf18a4be195e60", <newline>   "sfntly_revision": "128", <newline>   "skia_revision": "3441",																								
Chromium	1	2	ef8bcc2fda766c2ae22eac9c8f47dbb07e8ebdb	keybuk@google.com <keybuk@google.com@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Mar 19 18:16:41 2012 +0000	bluetooth: add support for Passkey pairing Bluetooth 2.1 onwards defines a pairing mechanism where a device without capability for Input or Display, and that declines Passkey-less pairing for security reasons, can require us to enter a six-digit numeric Passkey to perform pairing. This will, of course, never happen. But in case it does, implement support for it. This requires us knowing whether the device is expecting a PIN Code or Passkey, and in the latter case converting the String we receive from JavaScript into a numeric to return. TEST=verified with a fake device Change-Id: I0fe420f8fab7073ab8c158eb372ec227f7fa53f5 R=satorux1@chromium.org	chromium-os:21320		https://chromiumcodereview.appspot.com/9704074	svn://svn.chromium.org/chrome/trunk/src@127506 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/ui/webui/options2/chromeos/bluetooth_options_handler2.cc b/chrome/browser/ui/webui/options2/chromeos/bluetooth_options_handler2.cc <newline>index dd45c75..b1cce391 100644 <newline>--- a/chrome/browser/ui/webui/options2/chromeos/bluetooth_options_handler2.cc <newline>+++ b/chrome/browser/ui/webui/options2/chromeos/bluetooth_options_handler2.cc <newline>@@ -6,6 +6,7 @@ <newline> #include "base/bind.h" <newline> #include "base/command_line.h" <newline>+#include "base/string_number_conversions.h" <newline> #include "base/utf_string_conversions.h" <newline> #include "base/values.h" <newline> #include "chrome/browser/chromeos/bluetooth/bluetooth_adapter.h" <newline>@@ -23,7 +24,7 @@ namespace { <newline> // value stored in each list element is indicated by the following constants. <newline> const int kUpdateDeviceAddressIndex = 0; <newline> const int kUpdateDeviceCommandIndex = 1; <newline>-const int kUpdateDevicePasskeyIndex = 2; <newline>+const int kUpdateDeviceAuthTokenIndex = 2; <newline> // |UpdateDeviceCallback| provides a command value of one of the following <newline> // constants that indicates what update it is providing to us. <newline>@@ -233,14 +234,33 @@ void BluetoothOptionsHandler::UpdateDeviceCallback( <newline>   if (command == kConnectCommand) { <newline>     int size = args->GetSize(); <newline>-    if (size > kUpdateDevicePasskeyIndex) { <newline>+    if (size > kUpdateDeviceAuthTokenIndex) { <newline>       // PIN code or Passkey entry during the pairing process. <newline>-      // TODO(keybuk, kevers): disambiguate PIN (string) vs. Passkey (integer) <newline>-      std::string pincode; <newline>-      args->GetString(kUpdateDevicePasskeyIndex, &pincode); <newline>-      DVLOG(1) << "PIN code supplied: " << address << ": " << pincode; <newline>- <newline>-      device->SetPinCode(pincode); <newline>+      std::string auth_token; <newline>+      args->GetString(kUpdateDeviceAuthTokenIndex, &auth_token); <newline>+ <newline>+      if (device->ExpectingPinCode()) { <newline>+        // PIN Code is an array of 1 to 16 8-bit bytes, the usual <newline>+        // interpretation, and the one shared by BlueZ, is a UTF-8 string <newline>+        // of as many characters that will fit in that space, thus we <newline>+        // can use the auth token from JavaScript unmodified. <newline>+        DVLOG(1) << "PIN Code supplied: " << address << ": " << auth_token; <newline>+        device->SetPinCode(auth_token); <newline>+      } else if (device->ExpectingPasskey()) { <newline>+        // Passkey is a numeric in the range 0-999999, in this case the <newline>+        // JavaScript code should have ensured the auth token string only <newline>+        // contains digits so a simple conversion is sufficient. In the <newline>+        // failure case, just use 0 since that's the most likely Passkey <newline>+        // anyway, and if it's refused the device will request a new one. <newline>+        unsigned passkey = 0; <newline>+        base::StringToUint(auth_token, &passkey); <newline>+ <newline>+        DVLOG(1) << "Passkey supplied: " << address << ": " << passkey; <newline>+        device->SetPasskey(passkey); <newline>+      } else { <newline>+        LOG(WARNING) << "Auth token supplied after pairing ended: " << address <newline>+                     << ": " << auth_token; <newline>+      } <newline>     } else { <newline>       // Connection request. <newline>       DVLOG(1) << "Connect: " << address;																								
Chromium	1	2	84a65aef61f9809cbe083ef93fb66ff016d5776	keybuk@google.com <keybuk@google.com@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Mar 19 18:16:41 2012 +0000	bluetooth: add support for Passkey pairing Bluetooth 2.1 onwards defines a pairing mechanism where a device without capability for Input or Display, and that declines Passkey-less pairing for security reasons, can require us to enter a six-digit numeric Passkey to perform pairing. This will, of course, never happen. But in case it does, implement support for it. This requires us knowing whether the device is expecting a PIN Code or Passkey, and in the latter case converting the String we receive from JavaScript into a numeric to return. TEST=verified with a fake device Change-Id: I0fe420f8fab7073ab8c158eb372ec227f7fa53f5 R=satorux1@chromium.org	chromium-os:21320		https://chromiumcodereview.appspot.com/9704074	svn://svn.chromium.org/chrome/trunk/src@127506 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/ui/webui/options2/chromeos/bluetooth_options_handler2.cc b/chrome/browser/ui/webui/options2/chromeos/bluetooth_options_handler2.cc <newline>index dd45c75..b1cce391 100644 <newline>--- a/chrome/browser/ui/webui/options2/chromeos/bluetooth_options_handler2.cc <newline>+++ b/chrome/browser/ui/webui/options2/chromeos/bluetooth_options_handler2.cc <newline>@@ -6,6 +6,7 @@ <newline> #include "base/bind.h" <newline> #include "base/command_line.h" <newline>+#include "base/string_number_conversions.h" <newline> #include "base/utf_string_conversions.h" <newline> #include "base/values.h" <newline> #include "chrome/browser/chromeos/bluetooth/bluetooth_adapter.h" <newline>@@ -23,7 +24,7 @@ namespace { <newline> // value stored in each list element is indicated by the following constants. <newline> const int kUpdateDeviceAddressIndex = 0; <newline> const int kUpdateDeviceCommandIndex = 1; <newline>-const int kUpdateDevicePasskeyIndex = 2; <newline>+const int kUpdateDeviceAuthTokenIndex = 2; <newline> // |UpdateDeviceCallback| provides a command value of one of the following <newline> // constants that indicates what update it is providing to us. <newline>@@ -233,14 +234,33 @@ void BluetoothOptionsHandler::UpdateDeviceCallback( <newline>   if (command == kConnectCommand) { <newline>     int size = args->GetSize(); <newline>-    if (size > kUpdateDevicePasskeyIndex) { <newline>+    if (size > kUpdateDeviceAuthTokenIndex) { <newline>       // PIN code or Passkey entry during the pairing process. <newline>-      // TODO(keybuk, kevers): disambiguate PIN (string) vs. Passkey (integer) <newline>-      std::string pincode; <newline>-      args->GetString(kUpdateDevicePasskeyIndex, &pincode); <newline>-      DVLOG(1) << "PIN code supplied: " << address << ": " << pincode; <newline>- <newline>-      device->SetPinCode(pincode); <newline>+      std::string auth_token; <newline>+      args->GetString(kUpdateDeviceAuthTokenIndex, &auth_token); <newline>+ <newline>+      if (device->ExpectingPinCode()) { <newline>+        // PIN Code is an array of 1 to 16 8-bit bytes, the usual <newline>+        // interpretation, and the one shared by BlueZ, is a UTF-8 string <newline>+        // of as many characters that will fit in that space, thus we <newline>+        // can use the auth token from JavaScript unmodified. <newline>+        DVLOG(1) << "PIN Code supplied: " << address << ": " << auth_token; <newline>+        device->SetPinCode(auth_token); <newline>+      } else if (device->ExpectingPasskey()) { <newline>+        // Passkey is a numeric in the range 0-999999, in this case the <newline>+        // JavaScript code should have ensured the auth token string only <newline>+        // contains digits so a simple conversion is sufficient. In the <newline>+        // failure case, just use 0 since that's the most likely Passkey <newline>+        // anyway, and if it's refused the device will request a new one. <newline>+        unsigned passkey = 0; <newline>+        base::StringToUint(auth_token, &passkey); <newline>+ <newline>+        DVLOG(1) << "Passkey supplied: " << address << ": " << passkey; <newline>+        device->SetPasskey(passkey); <newline>+      } else { <newline>+        LOG(WARNING) << "Auth token supplied after pairing ended: " << address <newline>+                     << ": " << auth_token; <newline>+      } <newline>     } else { <newline>       // Connection request. <newline>       DVLOG(1) << "Connect: " << address;																								
Chromium	5		bfb531f82278bede5d4bd78ceb012f3f6d85bfb	rsleevi@chromium.org <rsleevi@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Mar 15 05:21:47 2012 +0000	Revert 126777 - Broke 'win' trybot (shared + all = fails linking pyautolib due to over swigging) Exposed GetSecurityState and GetPageType to pyAuto. The GetSecurityState retrieves different security states for the current tab. The GetPageType returns the type of page showing (normal, interstitial, error). Added additional tests that uses the exposed hooks. - testSSLCertOK - testSSLCertIsExpiredAndCertNameMismatches - testSSLCertAuthorityOK TEST=none TBR=dyu@chromium.org	none		https://chromiumcodereview.appspot.com/9705052	svn://svn.chromium.org/chrome/trunk/src@126848 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/test/pyautolib/pyautolib.i b/chrome/test/pyautolib/pyautolib.i <newline>index 8d3c60a..5c15397 100644 <newline>--- a/chrome/test/pyautolib/pyautolib.i <newline>+++ b/chrome/test/pyautolib/pyautolib.i <newline>@@ -17,10 +17,8 @@ <newline> %module(docstring="Python interface to Automation Proxy.") pyautolib <newline> %feature("autodoc", "1"); <newline>-%include <cpointer.i> <newline>-%include <std_string.i> <newline> %include <std_wstring.i> <newline>-%include <typemaps.i> <newline>+%include <std_string.i> <newline> %include "chrome/test/pyautolib/argc_argv.i" <newline>@@ -32,11 +30,6 @@ <newline> %include "chrome/app/chrome_dll_resource.h" <newline> %include "chrome/common/automation_constants.h" <newline> %include "chrome/common/pref_names.h" <newline>-%include "content/public/common/page_type.h" <newline>-%include "content/public/common/security_style.h" <newline>-// Must come before cert_status_flags.h <newline>-%include "net/base/net_export.h" <newline>-%include "net/base/cert_status_flags.h" <newline> %{ <newline> #include "chrome/common/automation_constants.h" <newline>@@ -154,42 +147,6 @@ class TabProxy { <newline>           "button, if false to 'Take me out of there' button.") <newline>       TakeActionOnSSLBlockingPage; <newline>   bool TakeActionOnSSLBlockingPage(bool proceed); <newline>-  %extend { <newline>-    %feature("docstring", "Retrieves the different security states for the " <newline>-             "current tab.") <newline>-        GetSecurityState; <newline>-    PyObject* GetSecurityState() { <newline>-      content::SecurityStyle security_style; <newline>-      net::CertStatus ssl_cert_status; <newline>-      int insecure_content_status; <newline>-      PyObject* result_dict = PyDict_New(); <newline>-      if ($self->GetSecurityState( <newline>-          &security_style, &ssl_cert_status, &insecure_content_status)) { <newline>-        PyDict_SetItem(result_dict, PyString_FromString("security_style"), <newline>-                       PyInt_FromLong(security_style)); <newline>-        PyDict_SetItem(result_dict, PyString_FromString("ssl_cert_status"), <newline>-                       PyInt_FromLong(ssl_cert_status)); <newline>-        PyDict_SetItem(result_dict, <newline>-                       PyString_FromString("insecure_content_status"), <newline>-                       PyInt_FromLong(insecure_content_status)); <newline>-      } <newline>-      return result_dict; <newline>-    } <newline>-  }; <newline>-  %extend { <newline>-    %feature("docstring", "Returns the type of page currently showing " <newline>-             "(normal, interstitial, error.") <newline>-        GetPageType; <newline>-    PyObject* GetPageType() { <newline>-      content::PageType page_type; <newline>-      PyObject* result_dict = PyDict_New(); <newline>-      if ($self->GetPageType(&page_type)) { <newline>-        PyDict_SetItem(result_dict, PyString_FromString("page_type"), <newline>-                       PyInt_FromLong(page_type)); <newline>-      } <newline>-      return result_dict; <newline>-    } <newline>-  }; <newline>   // HTTP Auth <newline>   %feature("docstring", <newline>@@ -518,6 +475,3 @@ struct HTTPSOptions { <newline> %{ <newline> typedef net::TestServer::HTTPSOptions HTTPSOptions; <newline> %} <newline>- <newline>-%pointer_class(int, int_ptr); <newline>-%pointer_class(uint32, uint32_ptr);																								
Chromium	5		fd13395a6cfaecb0463563b4deaa1e7b8eff87c	rsleevi@chromium.org <rsleevi@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Mar 15 05:21:47 2012 +0000	Revert 126777 - Broke 'win' trybot (shared + all = fails linking pyautolib due to over swigging) Exposed GetSecurityState and GetPageType to pyAuto. The GetSecurityState retrieves different security states for the current tab. The GetPageType returns the type of page showing (normal, interstitial, error). Added additional tests that uses the exposed hooks. - testSSLCertOK - testSSLCertIsExpiredAndCertNameMismatches - testSSLCertAuthorityOK TEST=none TBR=dyu@chromium.org	none		https://chromiumcodereview.appspot.com/9705052	svn://svn.chromium.org/chrome/trunk/src@126848 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/test/pyautolib/pyautolib.i b/chrome/test/pyautolib/pyautolib.i <newline>index 8d3c60a..5c15397 100644 <newline>--- a/chrome/test/pyautolib/pyautolib.i <newline>+++ b/chrome/test/pyautolib/pyautolib.i <newline>@@ -17,10 +17,8 @@ <newline> %module(docstring="Python interface to Automation Proxy.") pyautolib <newline> %feature("autodoc", "1"); <newline>-%include <cpointer.i> <newline>-%include <std_string.i> <newline> %include <std_wstring.i> <newline>-%include <typemaps.i> <newline>+%include <std_string.i> <newline> %include "chrome/test/pyautolib/argc_argv.i" <newline>@@ -32,11 +30,6 @@ <newline> %include "chrome/app/chrome_dll_resource.h" <newline> %include "chrome/common/automation_constants.h" <newline> %include "chrome/common/pref_names.h" <newline>-%include "content/public/common/page_type.h" <newline>-%include "content/public/common/security_style.h" <newline>-// Must come before cert_status_flags.h <newline>-%include "net/base/net_export.h" <newline>-%include "net/base/cert_status_flags.h" <newline> %{ <newline> #include "chrome/common/automation_constants.h" <newline>@@ -154,42 +147,6 @@ class TabProxy { <newline>           "button, if false to 'Take me out of there' button.") <newline>       TakeActionOnSSLBlockingPage; <newline>   bool TakeActionOnSSLBlockingPage(bool proceed); <newline>-  %extend { <newline>-    %feature("docstring", "Retrieves the different security states for the " <newline>-             "current tab.") <newline>-        GetSecurityState; <newline>-    PyObject* GetSecurityState() { <newline>-      content::SecurityStyle security_style; <newline>-      net::CertStatus ssl_cert_status; <newline>-      int insecure_content_status; <newline>-      PyObject* result_dict = PyDict_New(); <newline>-      if ($self->GetSecurityState( <newline>-          &security_style, &ssl_cert_status, &insecure_content_status)) { <newline>-        PyDict_SetItem(result_dict, PyString_FromString("security_style"), <newline>-                       PyInt_FromLong(security_style)); <newline>-        PyDict_SetItem(result_dict, PyString_FromString("ssl_cert_status"), <newline>-                       PyInt_FromLong(ssl_cert_status)); <newline>-        PyDict_SetItem(result_dict, <newline>-                       PyString_FromString("insecure_content_status"), <newline>-                       PyInt_FromLong(insecure_content_status)); <newline>-      } <newline>-      return result_dict; <newline>-    } <newline>-  }; <newline>-  %extend { <newline>-    %feature("docstring", "Returns the type of page currently showing " <newline>-             "(normal, interstitial, error.") <newline>-        GetPageType; <newline>-    PyObject* GetPageType() { <newline>-      content::PageType page_type; <newline>-      PyObject* result_dict = PyDict_New(); <newline>-      if ($self->GetPageType(&page_type)) { <newline>-        PyDict_SetItem(result_dict, PyString_FromString("page_type"), <newline>-                       PyInt_FromLong(page_type)); <newline>-      } <newline>-      return result_dict; <newline>-    } <newline>-  }; <newline>   // HTTP Auth <newline>   %feature("docstring", <newline>@@ -518,6 +475,3 @@ struct HTTPSOptions { <newline> %{ <newline> typedef net::TestServer::HTTPSOptions HTTPSOptions; <newline> %} <newline>- <newline>-%pointer_class(int, int_ptr); <newline>-%pointer_class(uint32, uint32_ptr);																								
Chromium	5		c64c8d67434b00be4d820f0f0046efbc19ee320	dyu@chromium.org <dyu@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Mar 14 23:10:46 2012 +0000	Exposed GetSecurityState and GetPageType to pyAuto. The GetSecurityState retrieves different security states for the current tab. The GetPageType returns the type of page showing (normal, interstitial, error). Added additional tests that uses the exposed hooks. - testSSLCertOK - testSSLCertIsExpiredAndCertNameMismatches - testSSLCertAuthorityOK TEST=none	none		https://chromiumcodereview.appspot.com/9535022	svn://svn.chromium.org/chrome/trunk/src@126777 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/test/pyautolib/pyautolib.i b/chrome/test/pyautolib/pyautolib.i <newline>index 5c15397..8d3c60a 100644 <newline>--- a/chrome/test/pyautolib/pyautolib.i <newline>+++ b/chrome/test/pyautolib/pyautolib.i <newline>@@ -17,8 +17,10 @@ <newline> %module(docstring="Python interface to Automation Proxy.") pyautolib <newline> %feature("autodoc", "1"); <newline>-%include <std_wstring.i> <newline>+%include <cpointer.i> <newline> %include <std_string.i> <newline>+%include <std_wstring.i> <newline>+%include <typemaps.i> <newline> %include "chrome/test/pyautolib/argc_argv.i" <newline>@@ -30,6 +32,11 @@ <newline> %include "chrome/app/chrome_dll_resource.h" <newline> %include "chrome/common/automation_constants.h" <newline> %include "chrome/common/pref_names.h" <newline>+%include "content/public/common/page_type.h" <newline>+%include "content/public/common/security_style.h" <newline>+// Must come before cert_status_flags.h <newline>+%include "net/base/net_export.h" <newline>+%include "net/base/cert_status_flags.h" <newline> %{ <newline> #include "chrome/common/automation_constants.h" <newline>@@ -147,6 +154,42 @@ class TabProxy { <newline>           "button, if false to 'Take me out of there' button.") <newline>       TakeActionOnSSLBlockingPage; <newline>   bool TakeActionOnSSLBlockingPage(bool proceed); <newline>+  %extend { <newline>+    %feature("docstring", "Retrieves the different security states for the " <newline>+             "current tab.") <newline>+        GetSecurityState; <newline>+    PyObject* GetSecurityState() { <newline>+      content::SecurityStyle security_style; <newline>+      net::CertStatus ssl_cert_status; <newline>+      int insecure_content_status; <newline>+      PyObject* result_dict = PyDict_New(); <newline>+      if ($self->GetSecurityState( <newline>+          &security_style, &ssl_cert_status, &insecure_content_status)) { <newline>+        PyDict_SetItem(result_dict, PyString_FromString("security_style"), <newline>+                       PyInt_FromLong(security_style)); <newline>+        PyDict_SetItem(result_dict, PyString_FromString("ssl_cert_status"), <newline>+                       PyInt_FromLong(ssl_cert_status)); <newline>+        PyDict_SetItem(result_dict, <newline>+                       PyString_FromString("insecure_content_status"), <newline>+                       PyInt_FromLong(insecure_content_status)); <newline>+      } <newline>+      return result_dict; <newline>+    } <newline>+  }; <newline>+  %extend { <newline>+    %feature("docstring", "Returns the type of page currently showing " <newline>+             "(normal, interstitial, error.") <newline>+        GetPageType; <newline>+    PyObject* GetPageType() { <newline>+      content::PageType page_type; <newline>+      PyObject* result_dict = PyDict_New(); <newline>+      if ($self->GetPageType(&page_type)) { <newline>+        PyDict_SetItem(result_dict, PyString_FromString("page_type"), <newline>+                       PyInt_FromLong(page_type)); <newline>+      } <newline>+      return result_dict; <newline>+    } <newline>+  }; <newline>   // HTTP Auth <newline>   %feature("docstring", <newline>@@ -475,3 +518,6 @@ struct HTTPSOptions { <newline> %{ <newline> typedef net::TestServer::HTTPSOptions HTTPSOptions; <newline> %} <newline>+ <newline>+%pointer_class(int, int_ptr); <newline>+%pointer_class(uint32, uint32_ptr);																								
Chromium	5		bb74b9e9a4f1775767360d2294030b93157981e	dyu@chromium.org <dyu@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Mar 14 23:10:46 2012 +0000	Exposed GetSecurityState and GetPageType to pyAuto. The GetSecurityState retrieves different security states for the current tab. The GetPageType returns the type of page showing (normal, interstitial, error). Added additional tests that uses the exposed hooks. - testSSLCertOK - testSSLCertIsExpiredAndCertNameMismatches - testSSLCertAuthorityOK TEST=none	none		https://chromiumcodereview.appspot.com/9535022	svn://svn.chromium.org/chrome/trunk/src@126777 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/test/pyautolib/pyautolib.i b/chrome/test/pyautolib/pyautolib.i <newline>index 5c15397..8d3c60a 100644 <newline>--- a/chrome/test/pyautolib/pyautolib.i <newline>+++ b/chrome/test/pyautolib/pyautolib.i <newline>@@ -17,8 +17,10 @@ <newline> %module(docstring="Python interface to Automation Proxy.") pyautolib <newline> %feature("autodoc", "1"); <newline>-%include <std_wstring.i> <newline>+%include <cpointer.i> <newline> %include <std_string.i> <newline>+%include <std_wstring.i> <newline>+%include <typemaps.i> <newline> %include "chrome/test/pyautolib/argc_argv.i" <newline>@@ -30,6 +32,11 @@ <newline> %include "chrome/app/chrome_dll_resource.h" <newline> %include "chrome/common/automation_constants.h" <newline> %include "chrome/common/pref_names.h" <newline>+%include "content/public/common/page_type.h" <newline>+%include "content/public/common/security_style.h" <newline>+// Must come before cert_status_flags.h <newline>+%include "net/base/net_export.h" <newline>+%include "net/base/cert_status_flags.h" <newline> %{ <newline> #include "chrome/common/automation_constants.h" <newline>@@ -147,6 +154,42 @@ class TabProxy { <newline>           "button, if false to 'Take me out of there' button.") <newline>       TakeActionOnSSLBlockingPage; <newline>   bool TakeActionOnSSLBlockingPage(bool proceed); <newline>+  %extend { <newline>+    %feature("docstring", "Retrieves the different security states for the " <newline>+             "current tab.") <newline>+        GetSecurityState; <newline>+    PyObject* GetSecurityState() { <newline>+      content::SecurityStyle security_style; <newline>+      net::CertStatus ssl_cert_status; <newline>+      int insecure_content_status; <newline>+      PyObject* result_dict = PyDict_New(); <newline>+      if ($self->GetSecurityState( <newline>+          &security_style, &ssl_cert_status, &insecure_content_status)) { <newline>+        PyDict_SetItem(result_dict, PyString_FromString("security_style"), <newline>+                       PyInt_FromLong(security_style)); <newline>+        PyDict_SetItem(result_dict, PyString_FromString("ssl_cert_status"), <newline>+                       PyInt_FromLong(ssl_cert_status)); <newline>+        PyDict_SetItem(result_dict, <newline>+                       PyString_FromString("insecure_content_status"), <newline>+                       PyInt_FromLong(insecure_content_status)); <newline>+      } <newline>+      return result_dict; <newline>+    } <newline>+  }; <newline>+  %extend { <newline>+    %feature("docstring", "Returns the type of page currently showing " <newline>+             "(normal, interstitial, error.") <newline>+        GetPageType; <newline>+    PyObject* GetPageType() { <newline>+      content::PageType page_type; <newline>+      PyObject* result_dict = PyDict_New(); <newline>+      if ($self->GetPageType(&page_type)) { <newline>+        PyDict_SetItem(result_dict, PyString_FromString("page_type"), <newline>+                       PyInt_FromLong(page_type)); <newline>+      } <newline>+      return result_dict; <newline>+    } <newline>+  }; <newline>   // HTTP Auth <newline>   %feature("docstring", <newline>@@ -475,3 +518,6 @@ struct HTTPSOptions { <newline> %{ <newline> typedef net::TestServer::HTTPSOptions HTTPSOptions; <newline> %} <newline>+ <newline>+%pointer_class(int, int_ptr); <newline>+%pointer_class(uint32, uint32_ptr);																								
Chromium	5		b5d9147ea50dec6a77b49ffede2e561a8370d15	dalecurtis@google.com <dalecurtis@google.com@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Mar 14 18:20:58 2012 +0000	Roll deps for ffmpeg security fixes and add new test case. Includes many upstream h264 fixes as well. ffmpeg_revision: http://src.chromium.org/viewvc/chrome?view=rev&revision=126470 ffmpeg_hash: http://git.chromium.org/gitweb/?p=chromium/third_party/ffmpeg.git;a=commit;h=ddcf259fa5fb83159d441bd71f54e617e2a4afd3 Includes the following patches: ddcf259 Update Windows binaries to pull in latest fixes. 707d08c h264: Fix invalid interlaced/progressive MB combinations for direct mode prediction. d6e7e28 h264: error out on invalid bitdepth. 8b29ceb h264: prevent overreads in intra PCM decoding. 9d8f016 h264: fix mmxext chroma deblock to use correct TC values. 8052a84 h264: change underread for 10bit QPEL to overread. f476438 h264: don't use redzone in loopfilter on win64. 400de19 Revert commit c98c1f434 due to webm regression. ed45601 Move struc FFTContext below SECTION_RODATA d881f5b Reverts removal of problen check in a2edf3dd. TEST=ffmpeg_regression_tests	117912		https://chromiumcodereview.appspot.com/9693060	svn://svn.chromium.org/chrome/trunk/src@126683 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/media/ffmpeg/ffmpeg_regression_tests.cc b/media/ffmpeg/ffmpeg_regression_tests.cc <newline>index 294fd22..a145bdd 100644 <newline>--- a/media/ffmpeg/ffmpeg_regression_tests.cc <newline>+++ b/media/ffmpeg/ffmpeg_regression_tests.cc <newline>@@ -136,6 +136,8 @@ FFMPEG_TEST_CASE(WEBM_4, "security/out.webm.68798.1929", <newline>                  DECODER_ERROR_NOT_SUPPORTED, DECODER_ERROR_NOT_SUPPORTED); <newline> FFMPEG_TEST_CASE(WEBM_5, "content/frame_size_change.webm", PIPELINE_OK, <newline>                  PIPELINE_OK); <newline>+FFMPEG_TEST_CASE(WEBM_6, "security/117912.webm", DEMUXER_ERROR_COULD_NOT_OPEN, <newline>+                 DEMUXER_ERROR_COULD_NOT_OPEN); <newline> // Flaky, maybe larger issues.  All eventually fail in the browser. <newline> FFMPEG_TEST_CASE(FLAKY_Cr99652, "security/99652.webm", PIPELINE_OK,																								
Chromium	5		aeda7a42266dab9938534fa8b2c027c3a436364	dalecurtis@google.com <dalecurtis@google.com@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Mar 14 18:20:58 2012 +0000	Roll deps for ffmpeg security fixes and add new test case. Includes many upstream h264 fixes as well. ffmpeg_revision: http://src.chromium.org/viewvc/chrome?view=rev&revision=126470 ffmpeg_hash: http://git.chromium.org/gitweb/?p=chromium/third_party/ffmpeg.git;a=commit;h=ddcf259fa5fb83159d441bd71f54e617e2a4afd3 Includes the following patches: ddcf259 Update Windows binaries to pull in latest fixes. 707d08c h264: Fix invalid interlaced/progressive MB combinations for direct mode prediction. d6e7e28 h264: error out on invalid bitdepth. 8b29ceb h264: prevent overreads in intra PCM decoding. 9d8f016 h264: fix mmxext chroma deblock to use correct TC values. 8052a84 h264: change underread for 10bit QPEL to overread. f476438 h264: don't use redzone in loopfilter on win64. 400de19 Revert commit c98c1f434 due to webm regression. ed45601 Move struc FFTContext below SECTION_RODATA d881f5b Reverts removal of problen check in a2edf3dd. TEST=ffmpeg_regression_tests	117912		https://chromiumcodereview.appspot.com/9693060	svn://svn.chromium.org/chrome/trunk/src@126683 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/media/ffmpeg/ffmpeg_regression_tests.cc b/media/ffmpeg/ffmpeg_regression_tests.cc <newline>index 294fd22..a145bdd 100644 <newline>--- a/media/ffmpeg/ffmpeg_regression_tests.cc <newline>+++ b/media/ffmpeg/ffmpeg_regression_tests.cc <newline>@@ -136,6 +136,8 @@ FFMPEG_TEST_CASE(WEBM_4, "security/out.webm.68798.1929", <newline>                  DECODER_ERROR_NOT_SUPPORTED, DECODER_ERROR_NOT_SUPPORTED); <newline> FFMPEG_TEST_CASE(WEBM_5, "content/frame_size_change.webm", PIPELINE_OK, <newline>                  PIPELINE_OK); <newline>+FFMPEG_TEST_CASE(WEBM_6, "security/117912.webm", DEMUXER_ERROR_COULD_NOT_OPEN, <newline>+                 DEMUXER_ERROR_COULD_NOT_OPEN); <newline> // Flaky, maybe larger issues.  All eventually fail in the browser. <newline> FFMPEG_TEST_CASE(FLAKY_Cr99652, "security/99652.webm", PIPELINE_OK,																								
Chromium	5		d7b0900f0989f1c5bc4860c43c37fe5268e3386	alexeypa@chromium.org <alexeypa@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Mar 12 19:23:07 2012 +0000	Chromoting: Implemented security attention sequence (SAS) emulation on Windows. The default SAS is Ctrl+Alt+Delete. It can neither be intercepted by the client (at least on Windows) nor it can be injected the same way other key strokes are injected. This CL makes the Windows host to interpret a double Scroll Lock as a SAS and invoke the Chromoting service to issue the actual SAS.			http://codereview.chromium.org/9617027	svn://svn.chromium.org/chrome/trunk/src@126186 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/remoting/remoting.gyp b/remoting/remoting.gyp <newline>index 285ff03..14da577 100644 <newline>--- a/remoting/remoting.gyp <newline>+++ b/remoting/remoting.gyp <newline>@@ -234,6 +234,7 @@ <newline>             '../base/base.gyp:base', <newline>             '../base/base.gyp:base_i18n', <newline>             '../media/media.gyp:media', <newline>+            '../ipc/ipc.gyp:ipc', <newline>           ], <newline>           'sources': [ <newline>             'host/host_event_logger_win.cc', <newline>@@ -279,13 +280,18 @@ <newline>           'dependencies': [ <newline>             '../base/base.gyp:base', <newline>             '../base/third_party/dynamic_annotations/dynamic_annotations.gyp:dynamic_annotations', <newline>+            '../ipc/ipc.gyp:ipc', <newline>           ], <newline>           'sources': [ <newline>             'base/scoped_sc_handle_win.h', <newline>+            'host/chromoting_messages.cc', <newline>+            'host/chromoting_messages.h', <newline>             'host/host_service.rc', <newline>             'host/host_service_resource.h', <newline>             'host/host_service_win.cc', <newline>             'host/host_service_win.h', <newline>+            'host/sas_injector.h', <newline>+            'host/sas_injector_win.cc', <newline>             'host/wts_console_monitor_win.h', <newline>             'host/wts_console_observer_win.h', <newline>             'host/wts_session_process_launcher_win.cc', <newline>@@ -404,6 +410,11 @@ <newline>             }], <newline>           ],  # conditions <newline>         }],  # OS=="mac" <newline>+        [ 'OS=="win"', { <newline>+          'dependencies': [ <newline>+            '../ipc/ipc.gyp:ipc' <newline>+          ], <newline>+        }], <newline>         ['OS!="win"', { <newline>           'sources!': [ <newline>             'host/plugin/host_plugin.def', <newline>@@ -641,6 +652,8 @@ <newline>         'host/screen_recorder.h', <newline>         'host/server_log_entry.cc', <newline>         'host/server_log_entry.h', <newline>+        'host/session_event_executor_win.cc', <newline>+        'host/session_event_executor_win.h', <newline>         'host/signaling_connector.cc', <newline>         'host/signaling_connector.h', <newline>         'host/ui_strings.cc', <newline>@@ -690,6 +703,12 @@ <newline>             ], <newline>           }, <newline>         }], <newline>+        ['OS=="win"', { <newline>+          'sources': [ <newline>+            'host/chromoting_messages.cc', <newline>+            'host/chromoting_messages.h', <newline>+          ], <newline>+        }], <newline>       ], <newline>     },  # end of target 'remoting_host' <newline>@@ -750,6 +769,13 @@ <newline>         'host/it2me_host_user_interface.h', <newline>         'host/simple_host_process.cc', <newline>       ], <newline>+      'conditions': [ <newline>+        [ 'OS=="win"', { <newline>+          'dependencies': [ <newline>+            '../ipc/ipc.gyp:ipc' <newline>+          ], <newline>+        }], <newline>+      ], <newline>     },  # end of target 'remoting_simple_host' <newline>     { <newline>@@ -1021,6 +1047,11 @@ <newline>         'run_all_unittests.cc', <newline>       ], <newline>       'conditions': [ <newline>+        [ 'OS=="win"', { <newline>+          'dependencies': [ <newline>+            '../ipc/ipc.gyp:ipc' <newline>+          ], <newline>+        }], <newline>         ['chromeos == 0', { <newline>           'dependencies': [ <newline>             'remoting_host'																								
Chromium	5		2b374409956cdad6d90ae6913f02251b09d8280	alexeypa@chromium.org <alexeypa@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Mar 12 19:23:07 2012 +0000	Chromoting: Implemented security attention sequence (SAS) emulation on Windows. The default SAS is Ctrl+Alt+Delete. It can neither be intercepted by the client (at least on Windows) nor it can be injected the same way other key strokes are injected. This CL makes the Windows host to interpret a double Scroll Lock as a SAS and invoke the Chromoting service to issue the actual SAS.			http://codereview.chromium.org/9617027	svn://svn.chromium.org/chrome/trunk/src@126186 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/remoting/remoting.gyp b/remoting/remoting.gyp <newline>index 285ff03..14da577 100644 <newline>--- a/remoting/remoting.gyp <newline>+++ b/remoting/remoting.gyp <newline>@@ -234,6 +234,7 @@ <newline>             '../base/base.gyp:base', <newline>             '../base/base.gyp:base_i18n', <newline>             '../media/media.gyp:media', <newline>+            '../ipc/ipc.gyp:ipc', <newline>           ], <newline>           'sources': [ <newline>             'host/host_event_logger_win.cc', <newline>@@ -279,13 +280,18 @@ <newline>           'dependencies': [ <newline>             '../base/base.gyp:base', <newline>             '../base/third_party/dynamic_annotations/dynamic_annotations.gyp:dynamic_annotations', <newline>+            '../ipc/ipc.gyp:ipc', <newline>           ], <newline>           'sources': [ <newline>             'base/scoped_sc_handle_win.h', <newline>+            'host/chromoting_messages.cc', <newline>+            'host/chromoting_messages.h', <newline>             'host/host_service.rc', <newline>             'host/host_service_resource.h', <newline>             'host/host_service_win.cc', <newline>             'host/host_service_win.h', <newline>+            'host/sas_injector.h', <newline>+            'host/sas_injector_win.cc', <newline>             'host/wts_console_monitor_win.h', <newline>             'host/wts_console_observer_win.h', <newline>             'host/wts_session_process_launcher_win.cc', <newline>@@ -404,6 +410,11 @@ <newline>             }], <newline>           ],  # conditions <newline>         }],  # OS=="mac" <newline>+        [ 'OS=="win"', { <newline>+          'dependencies': [ <newline>+            '../ipc/ipc.gyp:ipc' <newline>+          ], <newline>+        }], <newline>         ['OS!="win"', { <newline>           'sources!': [ <newline>             'host/plugin/host_plugin.def', <newline>@@ -641,6 +652,8 @@ <newline>         'host/screen_recorder.h', <newline>         'host/server_log_entry.cc', <newline>         'host/server_log_entry.h', <newline>+        'host/session_event_executor_win.cc', <newline>+        'host/session_event_executor_win.h', <newline>         'host/signaling_connector.cc', <newline>         'host/signaling_connector.h', <newline>         'host/ui_strings.cc', <newline>@@ -690,6 +703,12 @@ <newline>             ], <newline>           }, <newline>         }], <newline>+        ['OS=="win"', { <newline>+          'sources': [ <newline>+            'host/chromoting_messages.cc', <newline>+            'host/chromoting_messages.h', <newline>+          ], <newline>+        }], <newline>       ], <newline>     },  # end of target 'remoting_host' <newline>@@ -750,6 +769,13 @@ <newline>         'host/it2me_host_user_interface.h', <newline>         'host/simple_host_process.cc', <newline>       ], <newline>+      'conditions': [ <newline>+        [ 'OS=="win"', { <newline>+          'dependencies': [ <newline>+            '../ipc/ipc.gyp:ipc' <newline>+          ], <newline>+        }], <newline>+      ], <newline>     },  # end of target 'remoting_simple_host' <newline>     { <newline>@@ -1021,6 +1047,11 @@ <newline>         'run_all_unittests.cc', <newline>       ], <newline>       'conditions': [ <newline>+        [ 'OS=="win"', { <newline>+          'dependencies': [ <newline>+            '../ipc/ipc.gyp:ipc' <newline>+          ], <newline>+        }], <newline>         ['chromeos == 0', { <newline>           'dependencies': [ <newline>             'remoting_host'																								
Chromium	5		e43e7c366c9c10c6bd22f4d947afc78a90b4dbd	agl@chromium.org <agl@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Feb 24 20:49:55 2012 +0000	ots: roll r81->r82 Picks up this commit: Remove dependency on winsock2 (ws2_32.dll) on Windows. Use intrinsics for byte order conversion, per suggestion by maruel. Are there any other opentype tests to verify functionality? Wiki page says I need security team access to get the malicious fonts. Patch-by: dcurtis TEST=No longer crashes with new ffmpeg.	115477			svn://svn.chromium.org/chrome/trunk/src@123542 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/DEPS b/DEPS <newline>index b732f03..0d6ccd3 100644 <newline>--- a/DEPS <newline>+++ b/DEPS <newline>@@ -159,7 +159,7 @@ deps = { <newline>     Var("webkit_trunk") + "/Tools/TestWebKitAPI@" + Var("webkit_revision"), <newline>   "src/third_party/ots": <newline>-    (Var("googlecode_url") % "ots") + "/trunk@81", <newline>+    (Var("googlecode_url") % "ots") + "/trunk@82", <newline>   "src/tools/page_cycler/acid3": <newline>     "/trunk/deps/page_cycler/acid3@102714",																								
Chromium	5		4fa8419eb47a5b046b7499d15c22e231e126d74	agl@chromium.org <agl@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Feb 24 20:49:55 2012 +0000	ots: roll r81->r82 Picks up this commit: Remove dependency on winsock2 (ws2_32.dll) on Windows. Use intrinsics for byte order conversion, per suggestion by maruel. Are there any other opentype tests to verify functionality? Wiki page says I need security team access to get the malicious fonts. Patch-by: dcurtis TEST=No longer crashes with new ffmpeg.	115477			svn://svn.chromium.org/chrome/trunk/src@123542 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/DEPS b/DEPS <newline>index b732f03..0d6ccd3 100644 <newline>--- a/DEPS <newline>+++ b/DEPS <newline>@@ -159,7 +159,7 @@ deps = { <newline>     Var("webkit_trunk") + "/Tools/TestWebKitAPI@" + Var("webkit_revision"), <newline>   "src/third_party/ots": <newline>-    (Var("googlecode_url") % "ots") + "/trunk@81", <newline>+    (Var("googlecode_url") % "ots") + "/trunk@82", <newline>   "src/tools/page_cycler/acid3": <newline>     "/trunk/deps/page_cycler/acid3@102714",																								
Chromium	5		5a2ba387be709f6c1237aa184f54c3075f3660f	jorgelo@chromium.org <jorgelo@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Sat Feb 18 01:26:20 2012 +0000	Set LINUX_SANDBOX_PATH when on Linux or Chrome OS. LINUX_SANDBOX_PATH was being set when 'toolkit_use_gtk' was on. With the Aura switch, GTK was no longer used and the sandbox stopped working. TEST=security_RendererSandbox passes again Change-Id: I2a47256740a99a27d5b1cc1ce6e6ebb265e3841d	chromium-os:26299		http://codereview.chromium.org/9414035	svn://svn.chromium.org/chrome/trunk/src@122655 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/content_browser.gypi b/content/content_browser.gypi <newline>index c1b81a5..ebcf8ed 100644 <newline>--- a/content/content_browser.gypi <newline>+++ b/content/content_browser.gypi <newline>@@ -741,6 +741,12 @@ <newline>         '../build/linux/system.gyp:x11', <newline>         '../dbus/dbus.gyp:dbus', <newline>       ], <newline>+    }], <newline>+    ['OS=="linux"', { <newline>+      'dependencies': [ <newline>+        '../build/linux/system.gyp:udev', <newline>+      ], <newline>+      # Set LINUX_SANDBOX_PATH for Linux, including Chrome OS <newline>       'conditions': [ <newline>         ['linux_sandbox_path != ""', { <newline>           'defines': [ <newline>@@ -749,11 +755,6 @@ <newline>         }], <newline>       ], <newline>     }], <newline>-    ['OS=="linux"', { <newline>-      'dependencies': [ <newline>-        '../build/linux/system.gyp:udev', <newline>-      ], <newline>-    }], <newline>     ['OS=="linux" and toolkit_uses_gtk==0', { <newline>       'dependencies': [ <newline>         '../build/linux/system.gyp:dbus',																								
Chromium	5		33b9f6a54a41c7a2d39b5cba3a2b032e754db00	jorgelo@chromium.org <jorgelo@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Sat Feb 18 01:26:20 2012 +0000	Set LINUX_SANDBOX_PATH when on Linux or Chrome OS. LINUX_SANDBOX_PATH was being set when 'toolkit_use_gtk' was on. With the Aura switch, GTK was no longer used and the sandbox stopped working. TEST=security_RendererSandbox passes again Change-Id: I2a47256740a99a27d5b1cc1ce6e6ebb265e3841d	chromium-os:26299		http://codereview.chromium.org/9414035	svn://svn.chromium.org/chrome/trunk/src@122655 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/content_browser.gypi b/content/content_browser.gypi <newline>index c1b81a5..ebcf8ed 100644 <newline>--- a/content/content_browser.gypi <newline>+++ b/content/content_browser.gypi <newline>@@ -741,6 +741,12 @@ <newline>         '../build/linux/system.gyp:x11', <newline>         '../dbus/dbus.gyp:dbus', <newline>       ], <newline>+    }], <newline>+    ['OS=="linux"', { <newline>+      'dependencies': [ <newline>+        '../build/linux/system.gyp:udev', <newline>+      ], <newline>+      # Set LINUX_SANDBOX_PATH for Linux, including Chrome OS <newline>       'conditions': [ <newline>         ['linux_sandbox_path != ""', { <newline>           'defines': [ <newline>@@ -749,11 +755,6 @@ <newline>         }], <newline>       ], <newline>     }], <newline>-    ['OS=="linux"', { <newline>-      'dependencies': [ <newline>-        '../build/linux/system.gyp:udev', <newline>-      ], <newline>-    }], <newline>     ['OS=="linux" and toolkit_uses_gtk==0', { <newline>       'dependencies': [ <newline>         '../build/linux/system.gyp:dbus',																								
Chromium	3	2	d4a9e1643c20d064993f818f70f3f33bdbde068	brettw@chromium.org <brettw@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Feb 17 22:59:33 2012 +0000	Add process type to the pepper message filter. This adds the concept of process type to the pepper message filter. This cleans up the existing checks for the security origin since we don't have to rely on the existance of the process ID being set. TEST=none	none		http://codereview.chromium.org/9423014	svn://svn.chromium.org/chrome/trunk/src@122614 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/browser/renderer_host/render_process_host_impl.cc b/content/browser/renderer_host/render_process_host_impl.cc <newline>index f9dd954..0174d49 100644 <newline>--- a/content/browser/renderer_host/render_process_host_impl.cc <newline>+++ b/content/browser/renderer_host/render_process_host_impl.cc <newline>@@ -473,7 +473,8 @@ void RenderProcessHostImpl::CreateMessageFilters() { <newline>   channel_->AddFilter(new media_stream::MediaStreamDispatcherHost( <newline>       resource_context, GetID())); <newline>   channel_->AddFilter(new PepperFileMessageFilter(GetID(), browser_context)); <newline>-  channel_->AddFilter(new PepperMessageFilter(GetID(), resource_context)); <newline>+  channel_->AddFilter(new PepperMessageFilter(PepperMessageFilter::RENDERER, <newline>+                                              GetID(), resource_context)); <newline>   channel_->AddFilter(new speech_input::SpeechInputDispatcherHost( <newline>       GetID(), browser_context->GetRequestContext(), <newline>       browser_context->GetSpeechInputPreferences(), resource_context));																								
Chromium	3	2	038b82cee4dff308fafc18a7ac1b3f305c9d5c6	brettw@chromium.org <brettw@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Feb 17 22:59:33 2012 +0000	Add process type to the pepper message filter. This adds the concept of process type to the pepper message filter. This cleans up the existing checks for the security origin since we don't have to rely on the existance of the process ID being set. TEST=none	none		http://codereview.chromium.org/9423014	svn://svn.chromium.org/chrome/trunk/src@122614 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/browser/renderer_host/render_process_host_impl.cc b/content/browser/renderer_host/render_process_host_impl.cc <newline>index f9dd954..0174d49 100644 <newline>--- a/content/browser/renderer_host/render_process_host_impl.cc <newline>+++ b/content/browser/renderer_host/render_process_host_impl.cc <newline>@@ -473,7 +473,8 @@ void RenderProcessHostImpl::CreateMessageFilters() { <newline>   channel_->AddFilter(new media_stream::MediaStreamDispatcherHost( <newline>       resource_context, GetID())); <newline>   channel_->AddFilter(new PepperFileMessageFilter(GetID(), browser_context)); <newline>-  channel_->AddFilter(new PepperMessageFilter(GetID(), resource_context)); <newline>+  channel_->AddFilter(new PepperMessageFilter(PepperMessageFilter::RENDERER, <newline>+                                              GetID(), resource_context)); <newline>   channel_->AddFilter(new speech_input::SpeechInputDispatcherHost( <newline>       GetID(), browser_context->GetRequestContext(), <newline>       browser_context->GetSpeechInputPreferences(), resource_context));																								
Chromium	3	2	77526417e110e88532f2399dbda5b6fd4648423	tsepez@chromium.org <tsepez@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Feb 15 23:00:09 2012 +0000	Enforce object-src 'none' content security policy on webui pages except for a whitelist of exceptions.	114224		http://codereview.chromium.org/9395026	svn://svn.chromium.org/chrome/trunk/src@122178 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/ui/webui/chrome_url_data_manager_backend.cc b/chrome/browser/ui/webui/chrome_url_data_manager_backend.cc <newline>index ffc384c..9199e84 100644 <newline>--- a/chrome/browser/ui/webui/chrome_url_data_manager_backend.cc <newline>+++ b/chrome/browser/ui/webui/chrome_url_data_manager_backend.cc <newline>@@ -47,10 +47,13 @@ namespace { <newline> // TODO(tsepez) chrome-extension: permits the ChromeVox screen reader <newline> //     extension to function on these pages.  Remove it when the extension <newline> //     is updated to stop injecting script into the pages. <newline>-const char kChromeURLContentSecurityPolicyHeader[] = <newline>-    "X-WebKit-CSP: object-src 'self'; script-src chrome://resources " <newline>+const char kChromeURLContentSecurityPolicyHeaderBase[] = <newline>+    "X-WebKit-CSP: script-src chrome://resources " <newline>     "chrome-extension://mndnfokpggljbaajbnioimlmbfngpief " <newline>-    "'self' 'unsafe-eval'"; <newline>+    "'self' 'unsafe-eval'; "; <newline>+ <newline>+// TODO(tsepez) The following should be replaced with a centralized table. <newline>+// See crbug.com/104631. <newline> // If you are inserting new exemptions into this list, then you have a bug. <newline> // It is not acceptable to disable content-security-policy on chrome:// pages <newline>@@ -89,8 +92,43 @@ class ChromeURLContentSecurityPolicyExceptionSet <newline>   } <newline> }; <newline>+// It is OK to add URLs to this set which slightly reduces the CSP for them. <newline>+class ChromeURLContentSecurityPolicyObjectTagSet <newline>+    : public std::set<std::string> { <newline>+ public: <newline>+  ChromeURLContentSecurityPolicyObjectTagSet() : std::set<std::string>() { <newline>+    insert(chrome::kChromeUIPrintHost); <newline>+  } <newline>+}; <newline>+ <newline> base::LazyInstance<ChromeURLContentSecurityPolicyExceptionSet> <newline>-    g_chrome_url_content_security_policy_exceptions = LAZY_INSTANCE_INITIALIZER; <newline>+    g_chrome_url_content_security_policy_exception_set = <newline>+        LAZY_INSTANCE_INITIALIZER; <newline>+ <newline>+base::LazyInstance<ChromeURLContentSecurityPolicyObjectTagSet> <newline>+    g_chrome_url_content_security_policy_object_tag_set = <newline>+        LAZY_INSTANCE_INITIALIZER; <newline>+ <newline>+// Determine the least-privileged content security policy header, if any, <newline>+// that is compatible with a given WebUI URL, and append it to the existing <newline>+// response headers. <newline>+void AddContentSecurityPolicyHeader( <newline>+    const GURL& url, net::HttpResponseHeaders* headers) { <newline>+  ChromeURLContentSecurityPolicyExceptionSet* exceptions = <newline>+      g_chrome_url_content_security_policy_exception_set.Pointer(); <newline>+ <newline>+  if (exceptions->find(url.host()) == exceptions->end()) { <newline>+    std::string base = kChromeURLContentSecurityPolicyHeaderBase; <newline>+    ChromeURLContentSecurityPolicyObjectTagSet* object_tag_set = <newline>+        g_chrome_url_content_security_policy_object_tag_set.Pointer(); <newline>+ <newline>+    base.append(object_tag_set->find(url.host()) == object_tag_set->end() ? <newline>+                "object-src 'none';" : <newline>+                "object-src 'self';"); <newline>+ <newline>+    headers->AddHeader(base); <newline>+  } <newline>+} <newline> // Parse a URL into the components used to resolve its request. |source_name| <newline> // is the hostname and |path| is the remaining portion of the URL. <newline>@@ -215,10 +253,7 @@ void URLRequestChromeJob::GetResponseInfo(net::HttpResponseInfo* info) { <newline>   // status code of 200. Without this they return a 0, which makes the status <newline>   // indistiguishable from other error types. Instant relies on getting a 200. <newline>   info->headers = new net::HttpResponseHeaders("HTTP/1.1 200 OK"); <newline>-  ChromeURLContentSecurityPolicyExceptionSet* exceptions = <newline>-      g_chrome_url_content_security_policy_exceptions.Pointer(); <newline>-  if (exceptions->find(request_->url().host()) == exceptions->end()) <newline>-    info->headers->AddHeader(kChromeURLContentSecurityPolicyHeader); <newline>+  AddContentSecurityPolicyHeader(request_->url(), info->headers); <newline> } <newline> void URLRequestChromeJob::DataAvailable(RefCountedMemory* bytes) {																								
Chromium	3	2	8c119da0066b18c472559dd80e58e9895d5ee06	tsepez@chromium.org <tsepez@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Feb 15 23:00:09 2012 +0000	Enforce object-src 'none' content security policy on webui pages except for a whitelist of exceptions.	114224		http://codereview.chromium.org/9395026	svn://svn.chromium.org/chrome/trunk/src@122178 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/ui/webui/chrome_url_data_manager_backend.cc b/chrome/browser/ui/webui/chrome_url_data_manager_backend.cc <newline>index ffc384c..9199e84 100644 <newline>--- a/chrome/browser/ui/webui/chrome_url_data_manager_backend.cc <newline>+++ b/chrome/browser/ui/webui/chrome_url_data_manager_backend.cc <newline>@@ -47,10 +47,13 @@ namespace { <newline> // TODO(tsepez) chrome-extension: permits the ChromeVox screen reader <newline> //     extension to function on these pages.  Remove it when the extension <newline> //     is updated to stop injecting script into the pages. <newline>-const char kChromeURLContentSecurityPolicyHeader[] = <newline>-    "X-WebKit-CSP: object-src 'self'; script-src chrome://resources " <newline>+const char kChromeURLContentSecurityPolicyHeaderBase[] = <newline>+    "X-WebKit-CSP: script-src chrome://resources " <newline>     "chrome-extension://mndnfokpggljbaajbnioimlmbfngpief " <newline>-    "'self' 'unsafe-eval'"; <newline>+    "'self' 'unsafe-eval'; "; <newline>+ <newline>+// TODO(tsepez) The following should be replaced with a centralized table. <newline>+// See crbug.com/104631. <newline> // If you are inserting new exemptions into this list, then you have a bug. <newline> // It is not acceptable to disable content-security-policy on chrome:// pages <newline>@@ -89,8 +92,43 @@ class ChromeURLContentSecurityPolicyExceptionSet <newline>   } <newline> }; <newline>+// It is OK to add URLs to this set which slightly reduces the CSP for them. <newline>+class ChromeURLContentSecurityPolicyObjectTagSet <newline>+    : public std::set<std::string> { <newline>+ public: <newline>+  ChromeURLContentSecurityPolicyObjectTagSet() : std::set<std::string>() { <newline>+    insert(chrome::kChromeUIPrintHost); <newline>+  } <newline>+}; <newline>+ <newline> base::LazyInstance<ChromeURLContentSecurityPolicyExceptionSet> <newline>-    g_chrome_url_content_security_policy_exceptions = LAZY_INSTANCE_INITIALIZER; <newline>+    g_chrome_url_content_security_policy_exception_set = <newline>+        LAZY_INSTANCE_INITIALIZER; <newline>+ <newline>+base::LazyInstance<ChromeURLContentSecurityPolicyObjectTagSet> <newline>+    g_chrome_url_content_security_policy_object_tag_set = <newline>+        LAZY_INSTANCE_INITIALIZER; <newline>+ <newline>+// Determine the least-privileged content security policy header, if any, <newline>+// that is compatible with a given WebUI URL, and append it to the existing <newline>+// response headers. <newline>+void AddContentSecurityPolicyHeader( <newline>+    const GURL& url, net::HttpResponseHeaders* headers) { <newline>+  ChromeURLContentSecurityPolicyExceptionSet* exceptions = <newline>+      g_chrome_url_content_security_policy_exception_set.Pointer(); <newline>+ <newline>+  if (exceptions->find(url.host()) == exceptions->end()) { <newline>+    std::string base = kChromeURLContentSecurityPolicyHeaderBase; <newline>+    ChromeURLContentSecurityPolicyObjectTagSet* object_tag_set = <newline>+        g_chrome_url_content_security_policy_object_tag_set.Pointer(); <newline>+ <newline>+    base.append(object_tag_set->find(url.host()) == object_tag_set->end() ? <newline>+                "object-src 'none';" : <newline>+                "object-src 'self';"); <newline>+ <newline>+    headers->AddHeader(base); <newline>+  } <newline>+} <newline> // Parse a URL into the components used to resolve its request. |source_name| <newline> // is the hostname and |path| is the remaining portion of the URL. <newline>@@ -215,10 +253,7 @@ void URLRequestChromeJob::GetResponseInfo(net::HttpResponseInfo* info) { <newline>   // status code of 200. Without this they return a 0, which makes the status <newline>   // indistiguishable from other error types. Instant relies on getting a 200. <newline>   info->headers = new net::HttpResponseHeaders("HTTP/1.1 200 OK"); <newline>-  ChromeURLContentSecurityPolicyExceptionSet* exceptions = <newline>-      g_chrome_url_content_security_policy_exceptions.Pointer(); <newline>-  if (exceptions->find(request_->url().host()) == exceptions->end()) <newline>-    info->headers->AddHeader(kChromeURLContentSecurityPolicyHeader); <newline>+  AddContentSecurityPolicyHeader(request_->url(), info->headers); <newline> } <newline> void URLRequestChromeJob::DataAvailable(RefCountedMemory* bytes) {																								
Chromium	3	1	66b28b5892985a094426787b9f6b2fca27ebec1	cevans@chromium.org <cevans@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Feb 9 05:36:28 2012 +0000	Don't use system libpng by default. It causes security maintenance problems for ChromeOS. It's worth noting that we also don't use the system library for many other important components such as libxml. R=wad,abarth	112822		https://chromiumcodereview.appspot.com/9365007	svn://svn.chromium.org/chrome/trunk/src@121199 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/third_party/libpng/libpng.gyp b/third_party/libpng/libpng.gyp <newline>index 5325310..978877e 100644 <newline>--- a/third_party/libpng/libpng.gyp <newline>+++ b/third_party/libpng/libpng.gyp <newline>@@ -6,8 +6,9 @@ <newline>   'variables': { <newline>     'conditions': [ <newline>       [ 'os_posix == 1 and OS != "mac" and OS != "android"', { <newline>-        # Link to system .so since we already use it due to GTK. <newline>-        'use_system_libpng%': 1, <newline>+        # Maybe link to system .so once the security concerns are thought <newline>+        # through, since we already use it due to GTK. <newline>+        'use_system_libpng%': 0, <newline>       }, {  # os_posix != 1 or OS == "mac" <newline>         'use_system_libpng%': 0, <newline>       }],																								
Chromium	3	1	6336270df808b7a25bf46b8d2cc039fd567e438	cevans@chromium.org <cevans@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Feb 9 05:36:28 2012 +0000	Don't use system libpng by default. It causes security maintenance problems for ChromeOS. It's worth noting that we also don't use the system library for many other important components such as libxml. R=wad,abarth	112822		https://chromiumcodereview.appspot.com/9365007	svn://svn.chromium.org/chrome/trunk/src@121199 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/third_party/libpng/libpng.gyp b/third_party/libpng/libpng.gyp <newline>index 5325310..978877e 100644 <newline>--- a/third_party/libpng/libpng.gyp <newline>+++ b/third_party/libpng/libpng.gyp <newline>@@ -6,8 +6,9 @@ <newline>   'variables': { <newline>     'conditions': [ <newline>       [ 'os_posix == 1 and OS != "mac" and OS != "android"', { <newline>-        # Link to system .so since we already use it due to GTK. <newline>-        'use_system_libpng%': 1, <newline>+        # Maybe link to system .so once the security concerns are thought <newline>+        # through, since we already use it due to GTK. <newline>+        'use_system_libpng%': 0, <newline>       }, {  # os_posix != 1 or OS == "mac" <newline>         'use_system_libpng%': 0, <newline>       }],																								
Chromium	5		3b9c7ceaefb9eae435c7f03db95ad03248a9244	ananta@chromium.org <ananta@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Feb 9 01:47:59 2012 +0000	Create a content public browser API around the ChildProcessSecurityPolicy class. The implementation of this interface lives in content\browser\child_process_security_policy_impl.cc/.h. Moved some security checks from the TabContentsDelegate implementation (chrome\browser) to the TabContents code in content.	98716		https://chromiumcodereview.appspot.com/9360014	svn://svn.chromium.org/chrome/trunk/src@121137 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/public/browser/child_process_security_policy.h b/content/public/browser/child_process_security_policy.h <newline>new file mode 100644 <newline>index 0000000..eccd9d3 <newline>--- /dev/null <newline>+++ b/content/public/browser/child_process_security_policy.h <newline>@@ -0,0 +1,68 @@ <newline>+// Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline>+// Use of this source code is governed by a BSD-style license that can be <newline>+// found in the LICENSE file. <newline>+ <newline>+#ifndef CONTENT_PUBLIC_BROWSER_CHILD_PROCESS_SECURITY_POLICY_H_ <newline>+#define CONTENT_PUBLIC_BROWSER_CHILD_PROCESS_SECURITY_POLICY_H_ <newline>+#pragma once <newline>+ <newline>+#include <set> <newline>+#include <string> <newline>+ <newline>+#include "base/basictypes.h" <newline>+#include "content/common/content_export.h" <newline>+ <newline>+class FilePath; <newline>+ <newline>+namespace content { <newline>+ <newline>+// The ChildProcessSecurityPolicy class is used to grant and revoke security <newline>+// capabilities for child processes.  For example, it restricts whether a child <newline>+// process is permitted to load file:// URLs based on whether the process <newline>+// has ever been commanded to load file:// URLs by the browser. <newline>+// <newline>+// ChildProcessSecurityPolicy is a singleton that may be used on any thread. <newline>+// <newline>+class ChildProcessSecurityPolicy { <newline>+ public: <newline>+  virtual ~ChildProcessSecurityPolicy() {} <newline>+ <newline>+  // There is one global ChildProcessSecurityPolicy object for the entire <newline>+  // browser process.  The object returned by this method may be accessed on <newline>+  // any thread. <newline>+  static CONTENT_EXPORT ChildProcessSecurityPolicy* GetInstance(); <newline>+ <newline>+  // Web-safe schemes can be requested by any child process.  Once a web-safe <newline>+  // scheme has been registered, any child process can request URLs with <newline>+  // that scheme.  There is no mechanism for revoking web-safe schemes. <newline>+  virtual void RegisterWebSafeScheme(const std::string& scheme) = 0; <newline>+ <newline>+  // Returns true iff |scheme| has been registered as a web-safe scheme. <newline>+  virtual bool IsWebSafeScheme(const std::string& scheme) = 0; <newline>+ <newline>+  // Sets the list of disabled schemes. <newline>+  // URLs using these schemes won't be loaded at all. The previous list of <newline>+  // schemes is overwritten. An empty |schemes| disables this feature. <newline>+  // Schemes listed as disabled take precedence over Web-safe schemes. <newline>+  virtual void RegisterDisabledSchemes( <newline>+      const std::set<std::string>& schemes) = 0; <newline>+ <newline>+  // Grants certain permissions to a file. |permissions| must be a bit-set of <newline>+  // base::PlatformFileFlags. <newline>+  virtual void GrantPermissionsForFile(int child_id, <newline>+                                       const FilePath& file, <newline>+                                       int permissions) = 0; <newline>+ <newline>+  // Whenever the user picks a file from a <input type="file"> element, the <newline>+  // browser should call this function to grant the child process the capability <newline>+  // to upload the file to the web. <newline>+  virtual void GrantReadFile(int child_id, const FilePath& file) = 0; <newline>+ <newline>+  // Grants the child process the capability to access URLs of the provided <newline>+  // scheme. <newline>+  virtual void GrantScheme(int child_id, const std::string& scheme) = 0; <newline>+}; <newline>+ <newline>+};  // namespace content <newline>+ <newline>+#endif  // CONTENT_PUBLIC_BROWSER_CHILD_PROCESS_SECURITY_POLICY_H_																								
Chromium	5		953542108e0ffd871acc0de0919fe3da151db6c	ananta@chromium.org <ananta@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Feb 9 01:47:59 2012 +0000	Create a content public browser API around the ChildProcessSecurityPolicy class. The implementation of this interface lives in content\browser\child_process_security_policy_impl.cc/.h. Moved some security checks from the TabContentsDelegate implementation (chrome\browser) to the TabContents code in content.	98716		https://chromiumcodereview.appspot.com/9360014	svn://svn.chromium.org/chrome/trunk/src@121137 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/public/browser/child_process_security_policy.h b/content/public/browser/child_process_security_policy.h <newline>new file mode 100644 <newline>index 0000000..eccd9d3 <newline>--- /dev/null <newline>+++ b/content/public/browser/child_process_security_policy.h <newline>@@ -0,0 +1,68 @@ <newline>+// Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline>+// Use of this source code is governed by a BSD-style license that can be <newline>+// found in the LICENSE file. <newline>+ <newline>+#ifndef CONTENT_PUBLIC_BROWSER_CHILD_PROCESS_SECURITY_POLICY_H_ <newline>+#define CONTENT_PUBLIC_BROWSER_CHILD_PROCESS_SECURITY_POLICY_H_ <newline>+#pragma once <newline>+ <newline>+#include <set> <newline>+#include <string> <newline>+ <newline>+#include "base/basictypes.h" <newline>+#include "content/common/content_export.h" <newline>+ <newline>+class FilePath; <newline>+ <newline>+namespace content { <newline>+ <newline>+// The ChildProcessSecurityPolicy class is used to grant and revoke security <newline>+// capabilities for child processes.  For example, it restricts whether a child <newline>+// process is permitted to load file:// URLs based on whether the process <newline>+// has ever been commanded to load file:// URLs by the browser. <newline>+// <newline>+// ChildProcessSecurityPolicy is a singleton that may be used on any thread. <newline>+// <newline>+class ChildProcessSecurityPolicy { <newline>+ public: <newline>+  virtual ~ChildProcessSecurityPolicy() {} <newline>+ <newline>+  // There is one global ChildProcessSecurityPolicy object for the entire <newline>+  // browser process.  The object returned by this method may be accessed on <newline>+  // any thread. <newline>+  static CONTENT_EXPORT ChildProcessSecurityPolicy* GetInstance(); <newline>+ <newline>+  // Web-safe schemes can be requested by any child process.  Once a web-safe <newline>+  // scheme has been registered, any child process can request URLs with <newline>+  // that scheme.  There is no mechanism for revoking web-safe schemes. <newline>+  virtual void RegisterWebSafeScheme(const std::string& scheme) = 0; <newline>+ <newline>+  // Returns true iff |scheme| has been registered as a web-safe scheme. <newline>+  virtual bool IsWebSafeScheme(const std::string& scheme) = 0; <newline>+ <newline>+  // Sets the list of disabled schemes. <newline>+  // URLs using these schemes won't be loaded at all. The previous list of <newline>+  // schemes is overwritten. An empty |schemes| disables this feature. <newline>+  // Schemes listed as disabled take precedence over Web-safe schemes. <newline>+  virtual void RegisterDisabledSchemes( <newline>+      const std::set<std::string>& schemes) = 0; <newline>+ <newline>+  // Grants certain permissions to a file. |permissions| must be a bit-set of <newline>+  // base::PlatformFileFlags. <newline>+  virtual void GrantPermissionsForFile(int child_id, <newline>+                                       const FilePath& file, <newline>+                                       int permissions) = 0; <newline>+ <newline>+  // Whenever the user picks a file from a <input type="file"> element, the <newline>+  // browser should call this function to grant the child process the capability <newline>+  // to upload the file to the web. <newline>+  virtual void GrantReadFile(int child_id, const FilePath& file) = 0; <newline>+ <newline>+  // Grants the child process the capability to access URLs of the provided <newline>+  // scheme. <newline>+  virtual void GrantScheme(int child_id, const std::string& scheme) = 0; <newline>+}; <newline>+ <newline>+};  // namespace content <newline>+ <newline>+#endif  // CONTENT_PUBLIC_BROWSER_CHILD_PROCESS_SECURITY_POLICY_H_																								
Chromium	5		7e6fa5602edc44523393383520fae945bf6f337	csilv@chromium.org <csilv@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Feb 8 23:39:44 2012 +0000	Revert 121044 - Don't use system libpng by default. It causes security maintenance problems for ChromeOS. It's worth noting that we also don't use the system library for many other important components such as libxml. Reverting due to compile errors on Linux: http://chromegw.corp.google.com/i/chromium/builders/Linux%20Builder%20%28dbg%29%28shared%29/builds/17665/steps/compile/logs/stdio TBR=cevans@chromium.org	112822		https://chromiumcodereview.appspot.com/9374001	svn://svn.chromium.org/chrome/trunk/src@121090 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/third_party/libpng/libpng.gyp b/third_party/libpng/libpng.gyp <newline>index beccefe..5325310 100644 <newline>--- a/third_party/libpng/libpng.gyp <newline>+++ b/third_party/libpng/libpng.gyp <newline>@@ -1,4 +1,4 @@ <newline>-# Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline>+# Copyright (c) 2011 The Chromium Authors. All rights reserved. <newline> # Use of this source code is governed by a BSD-style license that can be <newline> # found in the LICENSE file. <newline>@@ -6,9 +6,8 @@ <newline>   'variables': { <newline>     'conditions': [ <newline>       [ 'os_posix == 1 and OS != "mac" and OS != "android"', { <newline>-        # Maybe link to system .so once the security concerns are thought <newline>-        # through, since we already use it due to GTK. <newline>-        'use_system_libpng%': 0, <newline>+        # Link to system .so since we already use it due to GTK. <newline>+        'use_system_libpng%': 1, <newline>       }, {  # os_posix != 1 or OS == "mac" <newline>         'use_system_libpng%': 0, <newline>       }],																								
Chromium	5		e1f5e02e91002563a90c031999face8db78ee3c	csilv@chromium.org <csilv@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Feb 8 23:39:44 2012 +0000	Revert 121044 - Don't use system libpng by default. It causes security maintenance problems for ChromeOS. It's worth noting that we also don't use the system library for many other important components such as libxml. Reverting due to compile errors on Linux: http://chromegw.corp.google.com/i/chromium/builders/Linux%20Builder%20%28dbg%29%28shared%29/builds/17665/steps/compile/logs/stdio TBR=cevans@chromium.org	112822		https://chromiumcodereview.appspot.com/9374001	svn://svn.chromium.org/chrome/trunk/src@121090 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/third_party/libpng/libpng.gyp b/third_party/libpng/libpng.gyp <newline>index beccefe..5325310 100644 <newline>--- a/third_party/libpng/libpng.gyp <newline>+++ b/third_party/libpng/libpng.gyp <newline>@@ -1,4 +1,4 @@ <newline>-# Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline>+# Copyright (c) 2011 The Chromium Authors. All rights reserved. <newline> # Use of this source code is governed by a BSD-style license that can be <newline> # found in the LICENSE file. <newline>@@ -6,9 +6,8 @@ <newline>   'variables': { <newline>     'conditions': [ <newline>       [ 'os_posix == 1 and OS != "mac" and OS != "android"', { <newline>-        # Maybe link to system .so once the security concerns are thought <newline>-        # through, since we already use it due to GTK. <newline>-        'use_system_libpng%': 0, <newline>+        # Link to system .so since we already use it due to GTK. <newline>+        'use_system_libpng%': 1, <newline>       }, {  # os_posix != 1 or OS == "mac" <newline>         'use_system_libpng%': 0, <newline>       }],																								
Chromium	3	1	1509e2b34ce9b7f096f6d0dedd425dbc5f1edcd	cevans@chromium.org <cevans@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Feb 8 21:43:49 2012 +0000	Don't use system libpng by default. It causes security maintenance problems for ChromeOS. It's worth noting that we also don't use the system library for many other important components such as libxml.	112822		http://codereview.chromium.org/9365007	svn://svn.chromium.org/chrome/trunk/src@121044 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/third_party/libpng/libpng.gyp b/third_party/libpng/libpng.gyp <newline>index 5325310..beccefe 100644 <newline>--- a/third_party/libpng/libpng.gyp <newline>+++ b/third_party/libpng/libpng.gyp <newline>@@ -1,4 +1,4 @@ <newline>-# Copyright (c) 2011 The Chromium Authors. All rights reserved. <newline>+# Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline> # Use of this source code is governed by a BSD-style license that can be <newline> # found in the LICENSE file. <newline>@@ -6,8 +6,9 @@ <newline>   'variables': { <newline>     'conditions': [ <newline>       [ 'os_posix == 1 and OS != "mac" and OS != "android"', { <newline>-        # Link to system .so since we already use it due to GTK. <newline>-        'use_system_libpng%': 1, <newline>+        # Maybe link to system .so once the security concerns are thought <newline>+        # through, since we already use it due to GTK. <newline>+        'use_system_libpng%': 0, <newline>       }, {  # os_posix != 1 or OS == "mac" <newline>         'use_system_libpng%': 0, <newline>       }],																								
Chromium	3	1	1eb17e9535bf2025d8ae6045a88ea21f1eeb4ba	cevans@chromium.org <cevans@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Feb 8 21:43:49 2012 +0000	Don't use system libpng by default. It causes security maintenance problems for ChromeOS. It's worth noting that we also don't use the system library for many other important components such as libxml.	112822		http://codereview.chromium.org/9365007	svn://svn.chromium.org/chrome/trunk/src@121044 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/third_party/libpng/libpng.gyp b/third_party/libpng/libpng.gyp <newline>index 5325310..beccefe 100644 <newline>--- a/third_party/libpng/libpng.gyp <newline>+++ b/third_party/libpng/libpng.gyp <newline>@@ -1,4 +1,4 @@ <newline>-# Copyright (c) 2011 The Chromium Authors. All rights reserved. <newline>+# Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline> # Use of this source code is governed by a BSD-style license that can be <newline> # found in the LICENSE file. <newline>@@ -6,8 +6,9 @@ <newline>   'variables': { <newline>     'conditions': [ <newline>       [ 'os_posix == 1 and OS != "mac" and OS != "android"', { <newline>-        # Link to system .so since we already use it due to GTK. <newline>-        'use_system_libpng%': 1, <newline>+        # Maybe link to system .so once the security concerns are thought <newline>+        # through, since we already use it due to GTK. <newline>+        'use_system_libpng%': 0, <newline>       }, {  # os_posix != 1 or OS == "mac" <newline>         'use_system_libpng%': 0, <newline>       }],																								
Chromium	5		65b3c4132027ecec10aa516b1c2f751d12522ba	dalecurtis@chromium.org <dalecurtis@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Feb 7 06:45:55 2012 +0000	Fix incomplete teardown of demuxer. I ran into an issue with PipelineIntegrationTests where one of the security videos was causing ~FileDataSource to DCHECK complain about file_ never being torn down. Tracing this back, it's because we return NULL for the demuxer when an error is encountered. This prevents demuxer->Stop() from being called which leaves the data source in an unhappy state. TEST=PipelineIntegrationTests/media_unittests	none		http://codereview.chromium.org/9350004	svn://svn.chromium.org/chrome/trunk/src@120730 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/media/filters/ffmpeg_demuxer_factory.cc b/media/filters/ffmpeg_demuxer_factory.cc <newline>index 0c5e402..13494b9 100644 <newline>--- a/media/filters/ffmpeg_demuxer_factory.cc <newline>+++ b/media/filters/ffmpeg_demuxer_factory.cc <newline>@@ -22,11 +22,7 @@ FFmpegDemuxerFactory::~FFmpegDemuxerFactory() {} <newline> static void DemuxerInitDone(const DemuxerFactory::BuildCallback& cb, <newline>                             const scoped_refptr<FFmpegDemuxer>& demuxer, <newline>                             PipelineStatus status) { <newline>-  if (status != PIPELINE_OK) { <newline>-    cb.Run(status, NULL); <newline>-    return; <newline>-  } <newline>-  cb.Run(PIPELINE_OK, demuxer); <newline>+  cb.Run(status, demuxer); <newline> } <newline> void FFmpegDemuxerFactory::Build(const std::string& url,																								
Chromium	5		d4154b7addac3548b34cf487800775682e0144f	dalecurtis@chromium.org <dalecurtis@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Feb 7 06:45:55 2012 +0000	Fix incomplete teardown of demuxer. I ran into an issue with PipelineIntegrationTests where one of the security videos was causing ~FileDataSource to DCHECK complain about file_ never being torn down. Tracing this back, it's because we return NULL for the demuxer when an error is encountered. This prevents demuxer->Stop() from being called which leaves the data source in an unhappy state. TEST=PipelineIntegrationTests/media_unittests	none		http://codereview.chromium.org/9350004	svn://svn.chromium.org/chrome/trunk/src@120730 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/media/filters/ffmpeg_demuxer_factory.cc b/media/filters/ffmpeg_demuxer_factory.cc <newline>index 0c5e402..13494b9 100644 <newline>--- a/media/filters/ffmpeg_demuxer_factory.cc <newline>+++ b/media/filters/ffmpeg_demuxer_factory.cc <newline>@@ -22,11 +22,7 @@ FFmpegDemuxerFactory::~FFmpegDemuxerFactory() {} <newline> static void DemuxerInitDone(const DemuxerFactory::BuildCallback& cb, <newline>                             const scoped_refptr<FFmpegDemuxer>& demuxer, <newline>                             PipelineStatus status) { <newline>-  if (status != PIPELINE_OK) { <newline>-    cb.Run(status, NULL); <newline>-    return; <newline>-  } <newline>-  cb.Run(PIPELINE_OK, demuxer); <newline>+  cb.Run(status, demuxer); <newline> } <newline> void FFmpegDemuxerFactory::Build(const std::string& url,																								
Chromium	5		c1a97dfa88dab1e0d66e3fccf4b8e9a37287df6	ananta@chromium.org <ananta@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Feb 1 20:26:58 2012 +0000	Removing unnecessary includes of the content\browser\child_process_security_policy.h file in preparation for creating a public content API around the ChildProcessSecurityPolicy class.	98716		https://chromiumcodereview.appspot.com/9307023	svn://svn.chromium.org/chrome/trunk/src@120096 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/extensions/extension_message_service.cc b/chrome/browser/extensions/extension_message_service.cc <newline>index 097e2f6..21cb99a 100644 <newline>--- a/chrome/browser/extensions/extension_message_service.cc <newline>+++ b/chrome/browser/extensions/extension_message_service.cc <newline>@@ -1,4 +1,4 @@ <newline>-// Copyright (c) 2011 The Chromium Authors. All rights reserved. <newline>+// Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline> // Use of this source code is governed by a BSD-style license that can be <newline> // found in the LICENSE file. <newline>@@ -16,7 +16,6 @@ <newline> #include "chrome/browser/ui/tab_contents/tab_contents_wrapper.h" <newline> #include "chrome/common/extensions/extension.h" <newline> #include "chrome/common/extensions/extension_messages.h" <newline>-#include "content/browser/child_process_security_policy.h" <newline> #include "content/browser/renderer_host/render_view_host.h" <newline> #include "content/public/browser/notification_service.h" <newline> #include "content/public/browser/notification_types.h"																								
Chromium	5		fce15bcdfd22b6d9eb60c9741932d9c917b3bcc	ananta@chromium.org <ananta@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Feb 1 20:26:58 2012 +0000	Removing unnecessary includes of the content\browser\child_process_security_policy.h file in preparation for creating a public content API around the ChildProcessSecurityPolicy class.	98716		https://chromiumcodereview.appspot.com/9307023	svn://svn.chromium.org/chrome/trunk/src@120096 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/extensions/extension_message_service.cc b/chrome/browser/extensions/extension_message_service.cc <newline>index 097e2f6..21cb99a 100644 <newline>--- a/chrome/browser/extensions/extension_message_service.cc <newline>+++ b/chrome/browser/extensions/extension_message_service.cc <newline>@@ -1,4 +1,4 @@ <newline>-// Copyright (c) 2011 The Chromium Authors. All rights reserved. <newline>+// Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline> // Use of this source code is governed by a BSD-style license that can be <newline> // found in the LICENSE file. <newline>@@ -16,7 +16,6 @@ <newline> #include "chrome/browser/ui/tab_contents/tab_contents_wrapper.h" <newline> #include "chrome/common/extensions/extension.h" <newline> #include "chrome/common/extensions/extension_messages.h" <newline>-#include "content/browser/child_process_security_policy.h" <newline> #include "content/browser/renderer_host/render_view_host.h" <newline> #include "content/public/browser/notification_service.h" <newline> #include "content/public/browser/notification_types.h"																								
Chromium	5		bb9af6cb129a36b6244314899370a40f8b75e35	mkwst@chromium.org <mkwst@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Jan 26 08:31:45 2012 +0000	Improving `content_security_policy` documentation. Added a document just for `content_security_policy` explaining the default restrictions, and offering pointers regarding best practice. Also updated the Analytics example and documentation accordingly. TEST=	111049		https://chromiumcodereview.appspot.com/9212044	svn://svn.chromium.org/chrome/trunk/src@119211 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/common/extensions/docs/tut_analytics.html b/chrome/common/extensions/docs/tut_analytics.html <newline>index 180cf1e..74bca00 100644 <newline>--- a/chrome/common/extensions/docs/tut_analytics.html <newline>+++ b/chrome/common/extensions/docs/tut_analytics.html <newline>@@ -394,7 +394,7 @@ extension.</p> <newline> <p> <newline>   You will also need a <a href="http://www.google.com/analytics">Google <newline>-  Analytics account</a> set up to track your extension.  Note that when setting <newline>+  Analytics account</a> set up to track your extension. Note that when setting <newline>   up the account, you can use any value in the Website's URL field, as your <newline>   extension will not have an URL of its own. <newline> </p> <newline>@@ -403,26 +403,20 @@ extension.</p> <newline>   <img src="images/tut_analytics/screenshot01.png" style="width:400px;height:82px;" alt="The analytics setup with info for a chrome extension filled out."> <newline> </p> <newline>-<p> <newline>-  Also note that Google Analytics requires version <strong>4.0.302.2</strong> <newline>-  of Google Chrome to work correctly.  Users with an earlier version of Google <newline>-  Chrome will not show up on your Google Analytics reports.  View <newline>-  <a href="faq.html#faq-dev-14">this FAQ entry</a> to learn how to check which <newline>-  version of Google Chrome is deployed to which platform. <newline>-</p> <newline>- <newline> <h2 id="toc-installing">Installing the tracking code</h2> <newline> <p> <newline>   The standard Google Analytics tracking code snippet fetches a file named <newline>   <code>ga.js</code> from an SSL protected URL if the current page <newline>-  was loaded using the <code>https://</code> protocol.  <strong>It is strongly <newline>-  advised to use the SSL protected ga.js in an extension</strong>, <newline>-  but Google Chrome extension <newline>-  pages are hosted under <code>chrome-extension://</code> URLs, so the tracking <newline>-  snippet must be modified slightly to pull <code>ga.js</code> directly from <newline>-  <code>https://ssl.google-analytics.com/ga.js</code> instead of the default <newline>-  location. <newline>+  was loaded using the <code>https://</code> protocol.  <strong>Chrome <newline>+  extensions and applications may <em>only</em> use the SSL-protected version of <newline>+  <code>ga.js</code></strong>. Loading <code>ga.js</code> over insecure HTTP is <newline>+  disallowed by Chrome's default <a href="contentSecurityPolicy.html">Content <newline>+  Security Policy</a>. This, plus the fact that Chrome extensions are hosted <newline>+  under the <code>chrome-extension://</code> schema, requires a slight <newline>+  modification to the usual tracking snippet to pull <code>ga.js</code> directly <newline>+  from <code>https://ssl.google-analytics.com/ga.js</code> instead of the <newline>+  default location. <newline> </p> <newline> <p> <newline>@@ -439,28 +433,45 @@ extension.</p> <newline> </pre> <newline> <p> <newline>-  Here is a background page which loads the asynchronous tracking code and <newline>+  You'll also need to ensure that your extension has access to load the resource <newline>+  by relaxing the default content security policy. The policy definition in your <newline>+  <a href="manifest.html"><code>manifest.json</code></a> might look like: <newline>+</p> <newline>+ <newline>+<pre>{ <newline>+  ..., <newline>+  "content_security_policy": "script-src 'self' https://ssl.google-analytics.com; object-src 'self'", <newline>+  ... <newline>+}</pre> <newline>+ <newline>+<p> <newline>+  Here is a popup page (<code>popup.html</code>) which loads the asynchronous <newline>+  tracking code via an external JavaScript file (<code>popup.js</code>) and <newline>   tracks a single page view: <newline> </p> <newline>-<pre>&lt;!DOCTYPE html&gt; <newline>+<pre>popup.js: <newline>+========= <newline>+ <newline>+var _gaq = _gaq || []; <newline>+_gaq.push(['_setAccount', 'UA-XXXXXXXX-X']); <newline>+_gaq.push(['_trackPageview']); <newline>+ <newline>+(function() { <newline>+  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true; <newline>+  ga.src = 'https://ssl.google-analytics.com/ga.js'; <newline>+  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); <newline>+})(); <newline>+ <newline>+popup.html: <newline>+=========== <newline>+&lt;!DOCTYPE html&gt; <newline> &lt;html&gt; <newline>  &lt;head&gt; <newline>    ... <newline>+  &lt;script src="popup.js"&gt;&lt;/script&gt; <newline>  &lt;/head&gt; <newline>  &lt;body&gt; <newline>-   &lt;script&gt; <newline>-     var _gaq = _gaq || []; <newline>-     _gaq.push(['_setAccount', 'UA-XXXXXXXX-X']); <newline>-     _gaq.push(['_trackPageview']); <newline>- <newline>-     (function() { <newline>-       var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true; <newline>-       ga.src = 'https://ssl.google-analytics.com/ga.js'; <newline>-       var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); <newline>-     })(); <newline>-   &lt;/script&gt; <newline>- <newline>    ... <newline>  &lt;/body&gt; <newline> &lt;/html&gt; <newline>@@ -514,27 +525,28 @@ extension.</p> <newline>   three buttons users may click: <newline> </p> <newline>-<pre>  &lt;button&gt;Button 1&lt;/button&gt; <newline>-  &lt;button&gt;Button 2&lt;/button&gt; <newline>-  &lt;button&gt;Button 3&lt;/button&gt; <newline>+<pre>  &lt;button id='button1'&gt;Button 1&lt;/button&gt; <newline>+  &lt;button id='button2'&gt;Button 2&lt;/button&gt; <newline>+  &lt;button id='button3'&gt;Button 3&lt;/button&gt; <newline> </pre> <newline> <p> <newline>   Write a function that sends click events to Google Analytics: <newline> </p> <newline>-<pre>  function trackButton(button_id) { <newline>-    _gaq.push(['_trackEvent', 'button' + button_id, 'clicked']); <newline>+<pre>  function trackButton(e) { <newline>+    _gaq.push(['_trackEvent', e.target.id, 'clicked']); <newline>   }; <newline> </pre> <newline> <p> <newline>-  And call it when each button is pressed: <newline>+  And use it as an event handler for each button's click: <newline> </p> <newline>-<pre>  &lt;button onclick="trackButton(1);"&gt;Button 1&lt;/button&gt; <newline>-  &lt;button onclick="trackButton(2);"&gt;Button 2&lt;/button&gt; <newline>-  &lt;button onclick="trackButton(3);"&gt;Button 3&lt;/button&gt; <newline>+<pre>  var buttons = document.querySelectorAll('button'); <newline>+  for (var i = 0; i &lt; buttons.length; i++) { <newline>+    buttons[i].addEventListener('click', trackButtonClick); <newline>+  } <newline> </pre> <newline> <p>																								
Chromium	5		b77fe592eed618a37d3b73ba0dff5b1968b4efa	mkwst@chromium.org <mkwst@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Jan 26 08:31:45 2012 +0000	Improving `content_security_policy` documentation. Added a document just for `content_security_policy` explaining the default restrictions, and offering pointers regarding best practice. Also updated the Analytics example and documentation accordingly. TEST=	111049		https://chromiumcodereview.appspot.com/9212044	svn://svn.chromium.org/chrome/trunk/src@119211 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/common/extensions/docs/tut_analytics.html b/chrome/common/extensions/docs/tut_analytics.html <newline>index 180cf1e..74bca00 100644 <newline>--- a/chrome/common/extensions/docs/tut_analytics.html <newline>+++ b/chrome/common/extensions/docs/tut_analytics.html <newline>@@ -394,7 +394,7 @@ extension.</p> <newline> <p> <newline>   You will also need a <a href="http://www.google.com/analytics">Google <newline>-  Analytics account</a> set up to track your extension.  Note that when setting <newline>+  Analytics account</a> set up to track your extension. Note that when setting <newline>   up the account, you can use any value in the Website's URL field, as your <newline>   extension will not have an URL of its own. <newline> </p> <newline>@@ -403,26 +403,20 @@ extension.</p> <newline>   <img src="images/tut_analytics/screenshot01.png" style="width:400px;height:82px;" alt="The analytics setup with info for a chrome extension filled out."> <newline> </p> <newline>-<p> <newline>-  Also note that Google Analytics requires version <strong>4.0.302.2</strong> <newline>-  of Google Chrome to work correctly.  Users with an earlier version of Google <newline>-  Chrome will not show up on your Google Analytics reports.  View <newline>-  <a href="faq.html#faq-dev-14">this FAQ entry</a> to learn how to check which <newline>-  version of Google Chrome is deployed to which platform. <newline>-</p> <newline>- <newline> <h2 id="toc-installing">Installing the tracking code</h2> <newline> <p> <newline>   The standard Google Analytics tracking code snippet fetches a file named <newline>   <code>ga.js</code> from an SSL protected URL if the current page <newline>-  was loaded using the <code>https://</code> protocol.  <strong>It is strongly <newline>-  advised to use the SSL protected ga.js in an extension</strong>, <newline>-  but Google Chrome extension <newline>-  pages are hosted under <code>chrome-extension://</code> URLs, so the tracking <newline>-  snippet must be modified slightly to pull <code>ga.js</code> directly from <newline>-  <code>https://ssl.google-analytics.com/ga.js</code> instead of the default <newline>-  location. <newline>+  was loaded using the <code>https://</code> protocol.  <strong>Chrome <newline>+  extensions and applications may <em>only</em> use the SSL-protected version of <newline>+  <code>ga.js</code></strong>. Loading <code>ga.js</code> over insecure HTTP is <newline>+  disallowed by Chrome's default <a href="contentSecurityPolicy.html">Content <newline>+  Security Policy</a>. This, plus the fact that Chrome extensions are hosted <newline>+  under the <code>chrome-extension://</code> schema, requires a slight <newline>+  modification to the usual tracking snippet to pull <code>ga.js</code> directly <newline>+  from <code>https://ssl.google-analytics.com/ga.js</code> instead of the <newline>+  default location. <newline> </p> <newline> <p> <newline>@@ -439,28 +433,45 @@ extension.</p> <newline> </pre> <newline> <p> <newline>-  Here is a background page which loads the asynchronous tracking code and <newline>+  You'll also need to ensure that your extension has access to load the resource <newline>+  by relaxing the default content security policy. The policy definition in your <newline>+  <a href="manifest.html"><code>manifest.json</code></a> might look like: <newline>+</p> <newline>+ <newline>+<pre>{ <newline>+  ..., <newline>+  "content_security_policy": "script-src 'self' https://ssl.google-analytics.com; object-src 'self'", <newline>+  ... <newline>+}</pre> <newline>+ <newline>+<p> <newline>+  Here is a popup page (<code>popup.html</code>) which loads the asynchronous <newline>+  tracking code via an external JavaScript file (<code>popup.js</code>) and <newline>   tracks a single page view: <newline> </p> <newline>-<pre>&lt;!DOCTYPE html&gt; <newline>+<pre>popup.js: <newline>+========= <newline>+ <newline>+var _gaq = _gaq || []; <newline>+_gaq.push(['_setAccount', 'UA-XXXXXXXX-X']); <newline>+_gaq.push(['_trackPageview']); <newline>+ <newline>+(function() { <newline>+  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true; <newline>+  ga.src = 'https://ssl.google-analytics.com/ga.js'; <newline>+  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); <newline>+})(); <newline>+ <newline>+popup.html: <newline>+=========== <newline>+&lt;!DOCTYPE html&gt; <newline> &lt;html&gt; <newline>  &lt;head&gt; <newline>    ... <newline>+  &lt;script src="popup.js"&gt;&lt;/script&gt; <newline>  &lt;/head&gt; <newline>  &lt;body&gt; <newline>-   &lt;script&gt; <newline>-     var _gaq = _gaq || []; <newline>-     _gaq.push(['_setAccount', 'UA-XXXXXXXX-X']); <newline>-     _gaq.push(['_trackPageview']); <newline>- <newline>-     (function() { <newline>-       var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true; <newline>-       ga.src = 'https://ssl.google-analytics.com/ga.js'; <newline>-       var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); <newline>-     })(); <newline>-   &lt;/script&gt; <newline>- <newline>    ... <newline>  &lt;/body&gt; <newline> &lt;/html&gt; <newline>@@ -514,27 +525,28 @@ extension.</p> <newline>   three buttons users may click: <newline> </p> <newline>-<pre>  &lt;button&gt;Button 1&lt;/button&gt; <newline>-  &lt;button&gt;Button 2&lt;/button&gt; <newline>-  &lt;button&gt;Button 3&lt;/button&gt; <newline>+<pre>  &lt;button id='button1'&gt;Button 1&lt;/button&gt; <newline>+  &lt;button id='button2'&gt;Button 2&lt;/button&gt; <newline>+  &lt;button id='button3'&gt;Button 3&lt;/button&gt; <newline> </pre> <newline> <p> <newline>   Write a function that sends click events to Google Analytics: <newline> </p> <newline>-<pre>  function trackButton(button_id) { <newline>-    _gaq.push(['_trackEvent', 'button' + button_id, 'clicked']); <newline>+<pre>  function trackButton(e) { <newline>+    _gaq.push(['_trackEvent', e.target.id, 'clicked']); <newline>   }; <newline> </pre> <newline> <p> <newline>-  And call it when each button is pressed: <newline>+  And use it as an event handler for each button's click: <newline> </p> <newline>-<pre>  &lt;button onclick="trackButton(1);"&gt;Button 1&lt;/button&gt; <newline>-  &lt;button onclick="trackButton(2);"&gt;Button 2&lt;/button&gt; <newline>-  &lt;button onclick="trackButton(3);"&gt;Button 3&lt;/button&gt; <newline>+<pre>  var buttons = document.querySelectorAll('button'); <newline>+  for (var i = 0; i &lt; buttons.length; i++) { <newline>+    buttons[i].addEventListener('click', trackButtonClick); <newline>+  } <newline> </pre> <newline> <p>																								
Chromium	3	1	6856735768cefecd83c4ce03b4280fd98385165	tsepez@chromium.org <tsepez@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Jan 25 21:41:41 2012 +0000	Add comments about not skirting content-security-policy.			https://chromiumcodereview.appspot.com/9289024	svn://svn.chromium.org/chrome/trunk/src@119124 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/test/functional/special_tabs.py b/chrome/test/functional/special_tabs.py <newline>index 01963e8..159d0a9 100755 <newline>--- a/chrome/test/functional/special_tabs.py <newline>+++ b/chrome/test/functional/special_tabs.py <newline>@@ -276,7 +276,9 @@ class SpecialTabsTest(pyauto.PyUITest): <newline>     """Test special tabs created by URLs like chrome://downloads, <newline>        chrome://settings/extensionSettings, chrome://history etc. <newline>        Also ensures they specify content-security-policy and not inline <newline>-       scripts for those pages that are expected to do so.""" <newline>+       scripts for those pages that are expected to do so.  Patches which <newline>+       break this test by including new inline javascript are security <newline>+       vulnerabilities and should be reverted.""" <newline>     tabs = self._GetPlatformSpecialURLTabs() <newline>     for url, properties in tabs.iteritems(): <newline>       logging.debug('Testing URL %s.' % url)																								
Chromium	3	1	b85aa666c46e6e60493fc906161d966752fd0db	tsepez@chromium.org <tsepez@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Jan 25 21:41:41 2012 +0000	Add comments about not skirting content-security-policy.			https://chromiumcodereview.appspot.com/9289024	svn://svn.chromium.org/chrome/trunk/src@119124 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/test/functional/special_tabs.py b/chrome/test/functional/special_tabs.py <newline>index 01963e8..159d0a9 100755 <newline>--- a/chrome/test/functional/special_tabs.py <newline>+++ b/chrome/test/functional/special_tabs.py <newline>@@ -276,7 +276,9 @@ class SpecialTabsTest(pyauto.PyUITest): <newline>     """Test special tabs created by URLs like chrome://downloads, <newline>        chrome://settings/extensionSettings, chrome://history etc. <newline>        Also ensures they specify content-security-policy and not inline <newline>-       scripts for those pages that are expected to do so.""" <newline>+       scripts for those pages that are expected to do so.  Patches which <newline>+       break this test by including new inline javascript are security <newline>+       vulnerabilities and should be reverted.""" <newline>     tabs = self._GetPlatformSpecialURLTabs() <newline>     for url, properties in tabs.iteritems(): <newline>       logging.debug('Testing URL %s.' % url)																								
Chromium	3	1	a1c3252cbca1864f4453efdb292496e2628b821	tsepez@chromium.org <tsepez@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Jan 23 18:15:57 2012 +0000	Pass Content-security-policy and header type from WebSharedWorkerProxy to WebSharedWorkerStub now that webkit is updated. Step #2 of https://bugs.webkit.org/show_bug.cgi?id=75660#c15	105482		https://chromiumcodereview.appspot.com/9154003	svn://svn.chromium.org/chrome/trunk/src@118703 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/worker/websharedworker_stub.h b/content/worker/websharedworker_stub.h <newline>index 4ffe2a0..7caf545 100644 <newline>--- a/content/worker/websharedworker_stub.h <newline>+++ b/content/worker/websharedworker_stub.h <newline>@@ -11,6 +11,7 @@ <newline> #include "content/worker/worker_webapplicationcachehost_impl.h" <newline> #include "googleurl/src/gurl.h" <newline> #include "ipc/ipc_channel.h" <newline>+#include "third_party/WebKit/Source/WebKit/chromium/public/WebSharedWorker.h" <newline> namespace WebKit { <newline> class WebSharedWorker; <newline>@@ -51,7 +52,10 @@ class WebSharedWorkerStub : public IPC::Channel::Listener { <newline>   void OnConnect(int sent_message_port_id, int routing_id); <newline>   void OnStartWorkerContext( <newline>-      const GURL& url, const string16& user_agent, const string16& source_code); <newline>+      const GURL& url, const string16& user_agent, const string16& source_code, <newline>+      const string16& content_security_policy, <newline>+      WebKit::WebContentSecurityPolicyType policy_type); <newline>+ <newline>   void OnTerminateWorkerContext(); <newline>   int route_id_;																								
Chromium	3	1	d7e332037313bc5a1088a355c4a321a415de305	tsepez@chromium.org <tsepez@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Jan 23 18:15:57 2012 +0000	Pass Content-security-policy and header type from WebSharedWorkerProxy to WebSharedWorkerStub now that webkit is updated. Step #2 of https://bugs.webkit.org/show_bug.cgi?id=75660#c15	105482		https://chromiumcodereview.appspot.com/9154003	svn://svn.chromium.org/chrome/trunk/src@118703 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/worker/websharedworker_stub.h b/content/worker/websharedworker_stub.h <newline>index 4ffe2a0..7caf545 100644 <newline>--- a/content/worker/websharedworker_stub.h <newline>+++ b/content/worker/websharedworker_stub.h <newline>@@ -11,6 +11,7 @@ <newline> #include "content/worker/worker_webapplicationcachehost_impl.h" <newline> #include "googleurl/src/gurl.h" <newline> #include "ipc/ipc_channel.h" <newline>+#include "third_party/WebKit/Source/WebKit/chromium/public/WebSharedWorker.h" <newline> namespace WebKit { <newline> class WebSharedWorker; <newline>@@ -51,7 +52,10 @@ class WebSharedWorkerStub : public IPC::Channel::Listener { <newline>   void OnConnect(int sent_message_port_id, int routing_id); <newline>   void OnStartWorkerContext( <newline>-      const GURL& url, const string16& user_agent, const string16& source_code); <newline>+      const GURL& url, const string16& user_agent, const string16& source_code, <newline>+      const string16& content_security_policy, <newline>+      WebKit::WebContentSecurityPolicyType policy_type); <newline>+ <newline>   void OnTerminateWorkerContext(); <newline>   int route_id_;																								
Chromium	5		2257266be8d03e57a2fa7ffd2f1cd24ada21e04	Guanqun.Lu@gmail.com <Guanqun.Lu@gmail.com@0039d316-1c4b-4281-b951-d872f2087c98>	Sat Jan 14 07:40:44 2012 +0000	Fix compile error for net/third_party/mozilla_security_manager/nsNSSCertTrust.cpp Because in the new nss3 package, CERTDB_VALID_PEER is deprecated and in the chromium build, deprecated is marked as errors. TEST= compiled under nss-devel-3.12.10-6.fc15 and nss-devel-3.13.1-9.fc16	108656		http://codereview.chromium.org/9041002	svn://svn.chromium.org/chrome/trunk/src@117791 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/third_party/mozilla_security_manager/nsNSSCertTrust.cpp b/net/third_party/mozilla_security_manager/nsNSSCertTrust.cpp <newline>index 75fa04f..408e55d 100644 <newline>--- a/net/third_party/mozilla_security_manager/nsNSSCertTrust.cpp <newline>+++ b/net/third_party/mozilla_security_manager/nsNSSCertTrust.cpp <newline>@@ -38,6 +38,14 @@ <newline> #include "net/third_party/mozilla_security_manager/nsNSSCertTrust.h" <newline>+#if !defined(CERTDB_TERMINAL_RECORD) <newline>+/* NSS 3.13 renames CERTDB_VALID_PEER to CERTDB_TERMINAL_RECORD <newline>+ * and marks CERTDB_VALID_PEER as deprecated. <newline>+ * If we're using an older version, rename it ourselves. <newline>+ */ <newline>+#define CERTDB_TERMINAL_RECORD CERTDB_VALID_PEER <newline>+#endif <newline>+ <newline> namespace mozilla_security_manager { <newline> void <newline>@@ -102,7 +110,7 @@ nsNSSCertTrust::SetSSLTrust(PRBool peer, PRBool tPeer, <newline> { <newline>   mTrust.sslFlags = 0; <newline>   if (peer || tPeer) <newline>-    addTrust(&mTrust.sslFlags, CERTDB_VALID_PEER); <newline>+    addTrust(&mTrust.sslFlags, CERTDB_TERMINAL_RECORD); <newline>   if (tPeer) <newline>     addTrust(&mTrust.sslFlags, CERTDB_TRUSTED); <newline>   if (ca || tCA) <newline>@@ -124,7 +132,7 @@ nsNSSCertTrust::SetEmailTrust(PRBool peer, PRBool tPeer, <newline> { <newline>   mTrust.emailFlags = 0; <newline>   if (peer || tPeer) <newline>-    addTrust(&mTrust.emailFlags, CERTDB_VALID_PEER); <newline>+    addTrust(&mTrust.emailFlags, CERTDB_TERMINAL_RECORD); <newline>   if (tPeer) <newline>     addTrust(&mTrust.emailFlags, CERTDB_TRUSTED); <newline>   if (ca || tCA) <newline>@@ -146,7 +154,7 @@ nsNSSCertTrust::SetObjSignTrust(PRBool peer, PRBool tPeer, <newline> { <newline>   mTrust.objectSigningFlags = 0; <newline>   if (peer || tPeer) <newline>-    addTrust(&mTrust.objectSigningFlags, CERTDB_VALID_PEER); <newline>+    addTrust(&mTrust.objectSigningFlags, CERTDB_TERMINAL_RECORD); <newline>   if (tPeer) <newline>     addTrust(&mTrust.objectSigningFlags, CERTDB_TRUSTED); <newline>   if (ca || tCA) <newline>@@ -288,11 +296,12 @@ nsNSSCertTrust::HasPeer(PRBool checkSSL, <newline>                         PRBool checkEmail, <newline>                         PRBool checkObjSign) <newline> { <newline>-  if (checkSSL && !hasTrust(mTrust.sslFlags, CERTDB_VALID_PEER)) <newline>+  if (checkSSL && !hasTrust(mTrust.sslFlags, CERTDB_TERMINAL_RECORD)) <newline>     return PR_FALSE; <newline>-  if (checkEmail && !hasTrust(mTrust.emailFlags, CERTDB_VALID_PEER)) <newline>+  if (checkEmail && !hasTrust(mTrust.emailFlags, CERTDB_TERMINAL_RECORD)) <newline>     return PR_FALSE; <newline>-  if (checkObjSign && !hasTrust(mTrust.objectSigningFlags, CERTDB_VALID_PEER)) <newline>+  if (checkObjSign && <newline>+       !hasTrust(mTrust.objectSigningFlags, CERTDB_TERMINAL_RECORD)) <newline>     return PR_FALSE; <newline>   return PR_TRUE; <newline> }																								
Chromium	5		89dbcd50e560026e5d88973419f4dab0646124b	Guanqun.Lu@gmail.com <Guanqun.Lu@gmail.com@0039d316-1c4b-4281-b951-d872f2087c98>	Sat Jan 14 07:40:44 2012 +0000	Fix compile error for net/third_party/mozilla_security_manager/nsNSSCertTrust.cpp Because in the new nss3 package, CERTDB_VALID_PEER is deprecated and in the chromium build, deprecated is marked as errors. TEST= compiled under nss-devel-3.12.10-6.fc15 and nss-devel-3.13.1-9.fc16	108656		http://codereview.chromium.org/9041002	svn://svn.chromium.org/chrome/trunk/src@117791 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/third_party/mozilla_security_manager/nsNSSCertTrust.cpp b/net/third_party/mozilla_security_manager/nsNSSCertTrust.cpp <newline>index 75fa04f..408e55d 100644 <newline>--- a/net/third_party/mozilla_security_manager/nsNSSCertTrust.cpp <newline>+++ b/net/third_party/mozilla_security_manager/nsNSSCertTrust.cpp <newline>@@ -38,6 +38,14 @@ <newline> #include "net/third_party/mozilla_security_manager/nsNSSCertTrust.h" <newline>+#if !defined(CERTDB_TERMINAL_RECORD) <newline>+/* NSS 3.13 renames CERTDB_VALID_PEER to CERTDB_TERMINAL_RECORD <newline>+ * and marks CERTDB_VALID_PEER as deprecated. <newline>+ * If we're using an older version, rename it ourselves. <newline>+ */ <newline>+#define CERTDB_TERMINAL_RECORD CERTDB_VALID_PEER <newline>+#endif <newline>+ <newline> namespace mozilla_security_manager { <newline> void <newline>@@ -102,7 +110,7 @@ nsNSSCertTrust::SetSSLTrust(PRBool peer, PRBool tPeer, <newline> { <newline>   mTrust.sslFlags = 0; <newline>   if (peer || tPeer) <newline>-    addTrust(&mTrust.sslFlags, CERTDB_VALID_PEER); <newline>+    addTrust(&mTrust.sslFlags, CERTDB_TERMINAL_RECORD); <newline>   if (tPeer) <newline>     addTrust(&mTrust.sslFlags, CERTDB_TRUSTED); <newline>   if (ca || tCA) <newline>@@ -124,7 +132,7 @@ nsNSSCertTrust::SetEmailTrust(PRBool peer, PRBool tPeer, <newline> { <newline>   mTrust.emailFlags = 0; <newline>   if (peer || tPeer) <newline>-    addTrust(&mTrust.emailFlags, CERTDB_VALID_PEER); <newline>+    addTrust(&mTrust.emailFlags, CERTDB_TERMINAL_RECORD); <newline>   if (tPeer) <newline>     addTrust(&mTrust.emailFlags, CERTDB_TRUSTED); <newline>   if (ca || tCA) <newline>@@ -146,7 +154,7 @@ nsNSSCertTrust::SetObjSignTrust(PRBool peer, PRBool tPeer, <newline> { <newline>   mTrust.objectSigningFlags = 0; <newline>   if (peer || tPeer) <newline>-    addTrust(&mTrust.objectSigningFlags, CERTDB_VALID_PEER); <newline>+    addTrust(&mTrust.objectSigningFlags, CERTDB_TERMINAL_RECORD); <newline>   if (tPeer) <newline>     addTrust(&mTrust.objectSigningFlags, CERTDB_TRUSTED); <newline>   if (ca || tCA) <newline>@@ -288,11 +296,12 @@ nsNSSCertTrust::HasPeer(PRBool checkSSL, <newline>                         PRBool checkEmail, <newline>                         PRBool checkObjSign) <newline> { <newline>-  if (checkSSL && !hasTrust(mTrust.sslFlags, CERTDB_VALID_PEER)) <newline>+  if (checkSSL && !hasTrust(mTrust.sslFlags, CERTDB_TERMINAL_RECORD)) <newline>     return PR_FALSE; <newline>-  if (checkEmail && !hasTrust(mTrust.emailFlags, CERTDB_VALID_PEER)) <newline>+  if (checkEmail && !hasTrust(mTrust.emailFlags, CERTDB_TERMINAL_RECORD)) <newline>     return PR_FALSE; <newline>-  if (checkObjSign && !hasTrust(mTrust.objectSigningFlags, CERTDB_VALID_PEER)) <newline>+  if (checkObjSign && <newline>+       !hasTrust(mTrust.objectSigningFlags, CERTDB_TERMINAL_RECORD)) <newline>     return PR_FALSE; <newline>   return PR_TRUE; <newline> }																								
Chromium	5		b88d805d4acd285f9ab8c9dd00f673a079476db	tsepez@chromium.org <tsepez@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Jan 12 20:55:38 2012 +0000	Revert 116954 - Pass Content-security-policy and header type from WebSharedWorkerProxy to WebSharedWorkerStub. WebKit side has changed, and need to start from scratch to avoid conflicts on rolls. TBR=jam@chromium.org	105482		http://codereview.chromium.org/9188046	svn://svn.chromium.org/chrome/trunk/src@117496 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/worker/websharedworker_stub.h b/content/worker/websharedworker_stub.h <newline>index b2e8344..4ffe2a0 100644 <newline>--- a/content/worker/websharedworker_stub.h <newline>+++ b/content/worker/websharedworker_stub.h <newline>@@ -1,4 +1,4 @@ <newline>-// Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline>+// Copyright (c) 2011 The Chromium Authors. All rights reserved. <newline> // Use of this source code is governed by a BSD-style license that can be <newline> // found in the LICENSE file. <newline>@@ -51,9 +51,7 @@ class WebSharedWorkerStub : public IPC::Channel::Listener { <newline>   void OnConnect(int sent_message_port_id, int routing_id); <newline>   void OnStartWorkerContext( <newline>-      const GURL& url, const string16& user_agent, const string16& source_code, <newline>-      const string16& content_security_policy, bool report_only); <newline>- <newline>+      const GURL& url, const string16& user_agent, const string16& source_code); <newline>   void OnTerminateWorkerContext(); <newline>   int route_id_;																								
Chromium	5		c0fdb30ccff125add97db11b0d83f07713d5e0b	tsepez@chromium.org <tsepez@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Jan 12 20:55:38 2012 +0000	Revert 116954 - Pass Content-security-policy and header type from WebSharedWorkerProxy to WebSharedWorkerStub. WebKit side has changed, and need to start from scratch to avoid conflicts on rolls. TBR=jam@chromium.org	105482		http://codereview.chromium.org/9188046	svn://svn.chromium.org/chrome/trunk/src@117496 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/worker/websharedworker_stub.h b/content/worker/websharedworker_stub.h <newline>index b2e8344..4ffe2a0 100644 <newline>--- a/content/worker/websharedworker_stub.h <newline>+++ b/content/worker/websharedworker_stub.h <newline>@@ -1,4 +1,4 @@ <newline>-// Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline>+// Copyright (c) 2011 The Chromium Authors. All rights reserved. <newline> // Use of this source code is governed by a BSD-style license that can be <newline> // found in the LICENSE file. <newline>@@ -51,9 +51,7 @@ class WebSharedWorkerStub : public IPC::Channel::Listener { <newline>   void OnConnect(int sent_message_port_id, int routing_id); <newline>   void OnStartWorkerContext( <newline>-      const GURL& url, const string16& user_agent, const string16& source_code, <newline>-      const string16& content_security_policy, bool report_only); <newline>- <newline>+      const GURL& url, const string16& user_agent, const string16& source_code); <newline>   void OnTerminateWorkerContext(); <newline>   int route_id_;																								
Chromium	3	1	bc9a8b2d51f5c84d8621354b1b5063fdf4f6a26	tsepez@chromium.org <tsepez@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Jan 9 23:47:56 2012 +0000	Pass Content-security-policy and header type from WebSharedWorkerProxy to WebSharedWorkerStub.	105482		http://codereview.chromium.org/9154003	svn://svn.chromium.org/chrome/trunk/src@116954 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/worker/websharedworker_stub.h b/content/worker/websharedworker_stub.h <newline>index 4ffe2a0..b2e8344 100644 <newline>--- a/content/worker/websharedworker_stub.h <newline>+++ b/content/worker/websharedworker_stub.h <newline>@@ -1,4 +1,4 @@ <newline>-// Copyright (c) 2011 The Chromium Authors. All rights reserved. <newline>+// Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline> // Use of this source code is governed by a BSD-style license that can be <newline> // found in the LICENSE file. <newline>@@ -51,7 +51,9 @@ class WebSharedWorkerStub : public IPC::Channel::Listener { <newline>   void OnConnect(int sent_message_port_id, int routing_id); <newline>   void OnStartWorkerContext( <newline>-      const GURL& url, const string16& user_agent, const string16& source_code); <newline>+      const GURL& url, const string16& user_agent, const string16& source_code, <newline>+      const string16& content_security_policy, bool report_only); <newline>+ <newline>   void OnTerminateWorkerContext(); <newline>   int route_id_;																								
Chromium	3	1	bead4818d6bf5bfb9d75f943f2312ea20d7d944	tsepez@chromium.org <tsepez@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Jan 9 23:47:56 2012 +0000	Pass Content-security-policy and header type from WebSharedWorkerProxy to WebSharedWorkerStub.	105482		http://codereview.chromium.org/9154003	svn://svn.chromium.org/chrome/trunk/src@116954 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/worker/websharedworker_stub.h b/content/worker/websharedworker_stub.h <newline>index 4ffe2a0..b2e8344 100644 <newline>--- a/content/worker/websharedworker_stub.h <newline>+++ b/content/worker/websharedworker_stub.h <newline>@@ -1,4 +1,4 @@ <newline>-// Copyright (c) 2011 The Chromium Authors. All rights reserved. <newline>+// Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline> // Use of this source code is governed by a BSD-style license that can be <newline> // found in the LICENSE file. <newline>@@ -51,7 +51,9 @@ class WebSharedWorkerStub : public IPC::Channel::Listener { <newline>   void OnConnect(int sent_message_port_id, int routing_id); <newline>   void OnStartWorkerContext( <newline>-      const GURL& url, const string16& user_agent, const string16& source_code); <newline>+      const GURL& url, const string16& user_agent, const string16& source_code, <newline>+      const string16& content_security_policy, bool report_only); <newline>+ <newline>   void OnTerminateWorkerContext(); <newline>   int route_id_;																								
Chromium	5		fba662ab4048b26a3fd12c587a9e16854e20cf5	dalecurtis@chromium.org <dalecurtis@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Jan 5 23:43:12 2012 +0000	Fix abspath/normpath mixup in security check. Standarizes the security check and the input sanitizer to use abspath. Currently causing tests to fail on the bots. TEST=Ran server with relative path.	109320		http://codereview.chromium.org/9113027	svn://svn.chromium.org/chrome/trunk/src@116584 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/media/tools/constrained_network_server/cns.py b/media/tools/constrained_network_server/cns.py <newline>index 835ecdb..4f0198d 100755 <newline>--- a/media/tools/constrained_network_server/cns.py <newline>+++ b/media/tools/constrained_network_server/cns.py <newline>@@ -297,8 +297,8 @@ def ParseArgs(): <newline>   except ValueError: <newline>     parser.error('Invalid port range specified.') <newline>-  # Normalize the path to remove any . or .. <newline>-  options.www_root = os.path.normpath(options.www_root) <newline>+  # Convert the path to an absolute to remove any . or .. <newline>+  options.www_root = os.path.abspath(options.www_root) <newline>   return options																								
Chromium	5		fb8a20a11c9adccc5d77b0bed61c8b883b60b13	dalecurtis@chromium.org <dalecurtis@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Jan 5 23:43:12 2012 +0000	Fix abspath/normpath mixup in security check. Standarizes the security check and the input sanitizer to use abspath. Currently causing tests to fail on the bots. TEST=Ran server with relative path.	109320		http://codereview.chromium.org/9113027	svn://svn.chromium.org/chrome/trunk/src@116584 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/media/tools/constrained_network_server/cns.py b/media/tools/constrained_network_server/cns.py <newline>index 835ecdb..4f0198d 100755 <newline>--- a/media/tools/constrained_network_server/cns.py <newline>+++ b/media/tools/constrained_network_server/cns.py <newline>@@ -297,8 +297,8 @@ def ParseArgs(): <newline>   except ValueError: <newline>     parser.error('Invalid port range specified.') <newline>-  # Normalize the path to remove any . or .. <newline>-  options.www_root = os.path.normpath(options.www_root) <newline>+  # Convert the path to an absolute to remove any . or .. <newline>+  options.www_root = os.path.abspath(options.www_root) <newline>   return options																								
Chromium	5		ba3ff644ff135fc95bf61685a83eb57b8093f34	dennisjeffrey@chromium.org <dennisjeffrey@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Jan 4 21:43:45 2012 +0000	Exclude the Bookmark Manager extension from the pyauto ChromeOS extension security test. TEST=None	chromium-os:24637		http://codereview.chromium.org/9008072	svn://svn.chromium.org/chrome/trunk/src@116390 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/test/functional/chromeos_security.py b/chrome/test/functional/chromeos_security.py <newline>index b3e1a50..77c2527 100755 <newline>--- a/chrome/test/functional/chromeos_security.py <newline>+++ b/chrome/test/functional/chromeos_security.py <newline>@@ -1,5 +1,5 @@ <newline> #!/usr/bin/env python <newline>-# Copyright (c) 2011 The Chromium Authors. All rights reserved. <newline>+# Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline> # Use of this source code is governed by a BSD-style license that can be <newline> # found in the LICENSE file. <newline>@@ -98,10 +98,11 @@ class ChromeosSecurity(pyauto.PyUITest): <newline>       full_actual_info: A list of dictionaries describing the actual information <newline>                         for all extensions. <newline>     """ <newline>-    # Skip the Web Store; it's integral to Chrome and is redundant to check on <newline>-    # ChromeOS.  This can reduce the number of times we have to update the <newline>-    # baseline for this test. <newline>-    actual_set.discard('Chrome Web Store') <newline>+    # Skip the Web Store and Bookmark Manager; they are integral to Chrome and <newline>+    # are redundant to check on ChromeOS.  This can reduce the number of times <newline>+    # we have to update the baseline for this test. <newline>+    for extension_name in ['Chrome Web Store', 'Bookmark Manager']: <newline>+      actual_set.discard(extension_name) <newline>     def _GetSetDifferenceMessage(expected_set, actual_set): <newline>       strings = []																								
Chromium	5		158ee76f6ec8a8223de6ea62850d83a2ee98003	dennisjeffrey@chromium.org <dennisjeffrey@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Jan 4 21:43:45 2012 +0000	Exclude the Bookmark Manager extension from the pyauto ChromeOS extension security test. TEST=None	chromium-os:24637		http://codereview.chromium.org/9008072	svn://svn.chromium.org/chrome/trunk/src@116390 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/test/functional/chromeos_security.py b/chrome/test/functional/chromeos_security.py <newline>index b3e1a50..77c2527 100755 <newline>--- a/chrome/test/functional/chromeos_security.py <newline>+++ b/chrome/test/functional/chromeos_security.py <newline>@@ -1,5 +1,5 @@ <newline> #!/usr/bin/env python <newline>-# Copyright (c) 2011 The Chromium Authors. All rights reserved. <newline>+# Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline> # Use of this source code is governed by a BSD-style license that can be <newline> # found in the LICENSE file. <newline>@@ -98,10 +98,11 @@ class ChromeosSecurity(pyauto.PyUITest): <newline>       full_actual_info: A list of dictionaries describing the actual information <newline>                         for all extensions. <newline>     """ <newline>-    # Skip the Web Store; it's integral to Chrome and is redundant to check on <newline>-    # ChromeOS.  This can reduce the number of times we have to update the <newline>-    # baseline for this test. <newline>-    actual_set.discard('Chrome Web Store') <newline>+    # Skip the Web Store and Bookmark Manager; they are integral to Chrome and <newline>+    # are redundant to check on ChromeOS.  This can reduce the number of times <newline>+    # we have to update the baseline for this test. <newline>+    for extension_name in ['Chrome Web Store', 'Bookmark Manager']: <newline>+      actual_set.discard(extension_name) <newline>     def _GetSetDifferenceMessage(expected_set, actual_set): <newline>       strings = []																								
Chromium	5		7f3805644d0324133f508a010dc81012ea827cd	thakis@chromium.org <thakis@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Jan 3 23:35:06 2012 +0000	Revert 116138 (this regressed morejs perf on mac and win for some reason. My attempted fix in r116219 didn't work; I'm afraid you'll have to look into this) - Update required Flash version to 10.3.183.10. See http://www.adobe.com/support/security/bulletins/apsb11-26.html. TEST=Flash Player 10.3.183.7 is considered out of date. TBR=bauerb@chromium.org	81293		http://codereview.chromium.org/9008051	svn://svn.chromium.org/chrome/trunk/src@116231 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/webkit/plugins/npapi/plugin_list.cc b/webkit/plugins/npapi/plugin_list.cc <newline>index 5a0479c..f12ce5c 100644 <newline>--- a/webkit/plugins/npapi/plugin_list.cc <newline>+++ b/webkit/plugins/npapi/plugin_list.cc <newline>@@ -1,4 +1,4 @@ <newline>-// Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline>+// Copyright (c) 2011 The Chromium Authors. All rights reserved. <newline> // Use of this source code is governed by a BSD-style license that can be <newline> // found in the LICENSE file. <newline>@@ -59,16 +59,9 @@ FilePath::CharType kDefaultPluginLibraryName[] = <newline> // Some version ranges can be shared across operating systems. This should be <newline> // done where possible to avoid duplication. <newline> // This is up to date with <newline>-// http://www.adobe.com/support/security/bulletins/apsb11-28.html <newline>+// http://www.adobe.com/support/security/bulletins/apsb11-26.html <newline> static const VersionRangeDefinition kFlashVersionRange[] = { <newline>-// Flash on Linux doesn't show the fourth version component, so we leave it <newline>-// out here in order to avoid blocking an up-to-date Flash. <newline>-#if defined(OS_LINUX) <newline>-#define FLASH_SUBVERSION "" <newline>-#else <newline>-#define FLASH_SUBVERSION ".55" <newline>-#endif <newline>-    { "", "", "11.1.102" FLASH_SUBVERSION, false } <newline>+    { "", "", "10.3.183", false } <newline> }; <newline> // This is up to date with <newline> // http://www.adobe.com/support/security/bulletins/apsb11-19.html <newline>@@ -139,10 +132,10 @@ static const VersionRangeDefinition kJavaVersionRange[] = { <newline>     { "7", "", "10.1", true }  // JDK7u1 identifies itself as 10.1 <newline> }; <newline> // This is up to date with <newline>-// http://www.adobe.com/support/security/bulletins/apsb11-30.html <newline>+// http://www.adobe.com/support/security/bulletins/apsb11-24.html <newline> static const VersionRangeDefinition kAdobeReaderVersionRange[] = { <newline>     { "10", "11", "10.1.1", false }, <newline>-    { "9", "10", "9.4.7", false }, <newline>+    { "9", "10", "9.4.6", false }, <newline>     { "0", "9", "8.3.1", false } <newline> }; <newline> static const VersionRangeDefinition kDivXVersionRange[] = {																								
Chromium	5		4c235d361c3b319f976aeb4e2256f29f3868d34	thakis@chromium.org <thakis@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Jan 3 23:35:06 2012 +0000	Revert 116138 (this regressed morejs perf on mac and win for some reason. My attempted fix in r116219 didn't work; I'm afraid you'll have to look into this) - Update required Flash version to 10.3.183.10. See http://www.adobe.com/support/security/bulletins/apsb11-26.html. TEST=Flash Player 10.3.183.7 is considered out of date. TBR=bauerb@chromium.org	81293		http://codereview.chromium.org/9008051	svn://svn.chromium.org/chrome/trunk/src@116231 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/webkit/plugins/npapi/plugin_list.cc b/webkit/plugins/npapi/plugin_list.cc <newline>index 5a0479c..f12ce5c 100644 <newline>--- a/webkit/plugins/npapi/plugin_list.cc <newline>+++ b/webkit/plugins/npapi/plugin_list.cc <newline>@@ -1,4 +1,4 @@ <newline>-// Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline>+// Copyright (c) 2011 The Chromium Authors. All rights reserved. <newline> // Use of this source code is governed by a BSD-style license that can be <newline> // found in the LICENSE file. <newline>@@ -59,16 +59,9 @@ FilePath::CharType kDefaultPluginLibraryName[] = <newline> // Some version ranges can be shared across operating systems. This should be <newline> // done where possible to avoid duplication. <newline> // This is up to date with <newline>-// http://www.adobe.com/support/security/bulletins/apsb11-28.html <newline>+// http://www.adobe.com/support/security/bulletins/apsb11-26.html <newline> static const VersionRangeDefinition kFlashVersionRange[] = { <newline>-// Flash on Linux doesn't show the fourth version component, so we leave it <newline>-// out here in order to avoid blocking an up-to-date Flash. <newline>-#if defined(OS_LINUX) <newline>-#define FLASH_SUBVERSION "" <newline>-#else <newline>-#define FLASH_SUBVERSION ".55" <newline>-#endif <newline>-    { "", "", "11.1.102" FLASH_SUBVERSION, false } <newline>+    { "", "", "10.3.183", false } <newline> }; <newline> // This is up to date with <newline> // http://www.adobe.com/support/security/bulletins/apsb11-19.html <newline>@@ -139,10 +132,10 @@ static const VersionRangeDefinition kJavaVersionRange[] = { <newline>     { "7", "", "10.1", true }  // JDK7u1 identifies itself as 10.1 <newline> }; <newline> // This is up to date with <newline>-// http://www.adobe.com/support/security/bulletins/apsb11-30.html <newline>+// http://www.adobe.com/support/security/bulletins/apsb11-24.html <newline> static const VersionRangeDefinition kAdobeReaderVersionRange[] = { <newline>     { "10", "11", "10.1.1", false }, <newline>-    { "9", "10", "9.4.7", false }, <newline>+    { "9", "10", "9.4.6", false }, <newline>     { "0", "9", "8.3.1", false } <newline> }; <newline> static const VersionRangeDefinition kDivXVersionRange[] = {																								
Chromium	5		517e4f160b696bb6c4bdb3d0d695ce2cd7739b3	bauerb@chromium.org <bauerb@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Jan 3 15:54:47 2012 +0000	Update required Flash version to 10.3.183.10. See http://www.adobe.com/support/security/bulletins/apsb11-26.html. TEST=Flash Player 10.3.183.7 is considered out of date.	81293		http://codereview.chromium.org/9071005	svn://svn.chromium.org/chrome/trunk/src@116138 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/webkit/plugins/npapi/plugin_list.cc b/webkit/plugins/npapi/plugin_list.cc <newline>index f12ce5c..5a0479c 100644 <newline>--- a/webkit/plugins/npapi/plugin_list.cc <newline>+++ b/webkit/plugins/npapi/plugin_list.cc <newline>@@ -1,4 +1,4 @@ <newline>-// Copyright (c) 2011 The Chromium Authors. All rights reserved. <newline>+// Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline> // Use of this source code is governed by a BSD-style license that can be <newline> // found in the LICENSE file. <newline>@@ -59,9 +59,16 @@ FilePath::CharType kDefaultPluginLibraryName[] = <newline> // Some version ranges can be shared across operating systems. This should be <newline> // done where possible to avoid duplication. <newline> // This is up to date with <newline>-// http://www.adobe.com/support/security/bulletins/apsb11-26.html <newline>+// http://www.adobe.com/support/security/bulletins/apsb11-28.html <newline> static const VersionRangeDefinition kFlashVersionRange[] = { <newline>-    { "", "", "10.3.183", false } <newline>+// Flash on Linux doesn't show the fourth version component, so we leave it <newline>+// out here in order to avoid blocking an up-to-date Flash. <newline>+#if defined(OS_LINUX) <newline>+#define FLASH_SUBVERSION "" <newline>+#else <newline>+#define FLASH_SUBVERSION ".55" <newline>+#endif <newline>+    { "", "", "11.1.102" FLASH_SUBVERSION, false } <newline> }; <newline> // This is up to date with <newline> // http://www.adobe.com/support/security/bulletins/apsb11-19.html <newline>@@ -132,10 +139,10 @@ static const VersionRangeDefinition kJavaVersionRange[] = { <newline>     { "7", "", "10.1", true }  // JDK7u1 identifies itself as 10.1 <newline> }; <newline> // This is up to date with <newline>-// http://www.adobe.com/support/security/bulletins/apsb11-24.html <newline>+// http://www.adobe.com/support/security/bulletins/apsb11-30.html <newline> static const VersionRangeDefinition kAdobeReaderVersionRange[] = { <newline>     { "10", "11", "10.1.1", false }, <newline>-    { "9", "10", "9.4.6", false }, <newline>+    { "9", "10", "9.4.7", false }, <newline>     { "0", "9", "8.3.1", false } <newline> }; <newline> static const VersionRangeDefinition kDivXVersionRange[] = {																								
Chromium	5		513c973cc0dec3012d5b7efa9817bf85fdcc7e6	bauerb@chromium.org <bauerb@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Jan 3 15:54:47 2012 +0000	Update required Flash version to 10.3.183.10. See http://www.adobe.com/support/security/bulletins/apsb11-26.html. TEST=Flash Player 10.3.183.7 is considered out of date.	81293		http://codereview.chromium.org/9071005	svn://svn.chromium.org/chrome/trunk/src@116138 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/webkit/plugins/npapi/plugin_list.cc b/webkit/plugins/npapi/plugin_list.cc <newline>index f12ce5c..5a0479c 100644 <newline>--- a/webkit/plugins/npapi/plugin_list.cc <newline>+++ b/webkit/plugins/npapi/plugin_list.cc <newline>@@ -1,4 +1,4 @@ <newline>-// Copyright (c) 2011 The Chromium Authors. All rights reserved. <newline>+// Copyright (c) 2012 The Chromium Authors. All rights reserved. <newline> // Use of this source code is governed by a BSD-style license that can be <newline> // found in the LICENSE file. <newline>@@ -59,9 +59,16 @@ FilePath::CharType kDefaultPluginLibraryName[] = <newline> // Some version ranges can be shared across operating systems. This should be <newline> // done where possible to avoid duplication. <newline> // This is up to date with <newline>-// http://www.adobe.com/support/security/bulletins/apsb11-26.html <newline>+// http://www.adobe.com/support/security/bulletins/apsb11-28.html <newline> static const VersionRangeDefinition kFlashVersionRange[] = { <newline>-    { "", "", "10.3.183", false } <newline>+// Flash on Linux doesn't show the fourth version component, so we leave it <newline>+// out here in order to avoid blocking an up-to-date Flash. <newline>+#if defined(OS_LINUX) <newline>+#define FLASH_SUBVERSION "" <newline>+#else <newline>+#define FLASH_SUBVERSION ".55" <newline>+#endif <newline>+    { "", "", "11.1.102" FLASH_SUBVERSION, false } <newline> }; <newline> // This is up to date with <newline> // http://www.adobe.com/support/security/bulletins/apsb11-19.html <newline>@@ -132,10 +139,10 @@ static const VersionRangeDefinition kJavaVersionRange[] = { <newline>     { "7", "", "10.1", true }  // JDK7u1 identifies itself as 10.1 <newline> }; <newline> // This is up to date with <newline>-// http://www.adobe.com/support/security/bulletins/apsb11-24.html <newline>+// http://www.adobe.com/support/security/bulletins/apsb11-30.html <newline> static const VersionRangeDefinition kAdobeReaderVersionRange[] = { <newline>     { "10", "11", "10.1.1", false }, <newline>-    { "9", "10", "9.4.6", false }, <newline>+    { "9", "10", "9.4.7", false }, <newline>     { "0", "9", "8.3.1", false } <newline> }; <newline> static const VersionRangeDefinition kDivXVersionRange[] = {																								
Chromium	5		ae24217607b5fa58ffadcdadc61856e0055906d	dennisjeffrey@chromium.org <dennisjeffrey@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Dec 15 21:36:38 2011 +0000	Modify the pyauto-based CrOS extension persmission security test to ignore Web Store. TEST=None	chromium-os:24254		http://codereview.chromium.org/8952008	svn://svn.chromium.org/chrome/trunk/src@114702 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/test/functional/chromeos_security.py b/chrome/test/functional/chromeos_security.py <newline>index 47a4509..b3e1a50 100755 <newline>--- a/chrome/test/functional/chromeos_security.py <newline>+++ b/chrome/test/functional/chromeos_security.py <newline>@@ -98,6 +98,11 @@ class ChromeosSecurity(pyauto.PyUITest): <newline>       full_actual_info: A list of dictionaries describing the actual information <newline>                         for all extensions. <newline>     """ <newline>+    # Skip the Web Store; it's integral to Chrome and is redundant to check on <newline>+    # ChromeOS.  This can reduce the number of times we have to update the <newline>+    # baseline for this test. <newline>+    actual_set.discard('Chrome Web Store') <newline>+ <newline>     def _GetSetDifferenceMessage(expected_set, actual_set): <newline>       strings = [] <newline>       for missing_item in expected_set.difference(actual_set):																								
Chromium	5		dfe3531ea5881381c7810aabcdbb52e1fa7bb8a	dennisjeffrey@chromium.org <dennisjeffrey@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Dec 15 21:36:38 2011 +0000	Modify the pyauto-based CrOS extension persmission security test to ignore Web Store. TEST=None	chromium-os:24254		http://codereview.chromium.org/8952008	svn://svn.chromium.org/chrome/trunk/src@114702 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/test/functional/chromeos_security.py b/chrome/test/functional/chromeos_security.py <newline>index 47a4509..b3e1a50 100755 <newline>--- a/chrome/test/functional/chromeos_security.py <newline>+++ b/chrome/test/functional/chromeos_security.py <newline>@@ -98,6 +98,11 @@ class ChromeosSecurity(pyauto.PyUITest): <newline>       full_actual_info: A list of dictionaries describing the actual information <newline>                         for all extensions. <newline>     """ <newline>+    # Skip the Web Store; it's integral to Chrome and is redundant to check on <newline>+    # ChromeOS.  This can reduce the number of times we have to update the <newline>+    # baseline for this test. <newline>+    actual_set.discard('Chrome Web Store') <newline>+ <newline>     def _GetSetDifferenceMessage(expected_set, actual_set): <newline>       strings = [] <newline>       for missing_item in expected_set.difference(actual_set):																								
Chromium	1	2	0e3acfed6d61df073e611d371461635e65bd76c	rsleevi@chromium.org <rsleevi@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Dec 14 16:08:19 2011 +0000	When encountering certificates signed with md2/md4, make it a fatal error. When encountering certificates signed with md5, interstitial the page with an error about md5 being a weak signing algorithm. This excludes checking the signatures of root certificates (trust anchors), as their self-signed signatures are not relevant to the security of the chain. R=wtc@chromium.org	101123		http://codereview.chromium.org/8374020	svn://svn.chromium.org/chrome/trunk/src@114432 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/base/x509_certificate_win.cc b/net/base/x509_certificate_win.cc <newline>index c04ff4d..c672dfc 100644 <newline>--- a/net/base/x509_certificate_win.cc <newline>+++ b/net/base/x509_certificate_win.cc <newline>@@ -866,6 +866,7 @@ int X509Certificate::VerifyInternal(const std::string& hostname, <newline>            chain_flags, <newline>            NULL,  // reserved <newline>            &chain_context)) { <newline>+    verify_result->cert_status |= CERT_STATUS_INVALID; <newline>     return MapSecurityError(GetLastError()); <newline>   } <newline>@@ -884,6 +885,7 @@ int X509Certificate::VerifyInternal(const std::string& hostname, <newline>              chain_flags, <newline>              NULL,  // reserved <newline>              &chain_context)) { <newline>+      verify_result->cert_status |= CERT_STATUS_INVALID; <newline>       return MapSecurityError(GetLastError()); <newline>     } <newline>   } <newline>@@ -894,14 +896,6 @@ int X509Certificate::VerifyInternal(const std::string& hostname, <newline>   verify_result->cert_status |= MapCertChainErrorStatusToCertStatus( <newline>       chain_context->TrustStatus.dwErrorStatus); <newline>-  // Treat certificates signed using broken signature algorithms as invalid. <newline>-  if (verify_result->has_md4) <newline>-    verify_result->cert_status |= CERT_STATUS_INVALID; <newline>- <newline>-  // Flag certificates signed using weak signature algorithms. <newline>-  if (verify_result->has_md2) <newline>-    verify_result->cert_status |= CERT_STATUS_WEAK_SIGNATURE_ALGORITHM; <newline>- <newline>   // Flag certificates that have a Subject common name with a NULL character. <newline>   if (CertSubjectCommonNameHasNull(cert_handle_)) <newline>     verify_result->cert_status |= CERT_STATUS_INVALID;																								
Chromium	1	2	9684c749a9b96c701ec7c8f7ec17915d9d411e3	rsleevi@chromium.org <rsleevi@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Dec 14 16:08:19 2011 +0000	When encountering certificates signed with md2/md4, make it a fatal error. When encountering certificates signed with md5, interstitial the page with an error about md5 being a weak signing algorithm. This excludes checking the signatures of root certificates (trust anchors), as their self-signed signatures are not relevant to the security of the chain. R=wtc@chromium.org	101123		http://codereview.chromium.org/8374020	svn://svn.chromium.org/chrome/trunk/src@114432 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/base/x509_certificate_win.cc b/net/base/x509_certificate_win.cc <newline>index c04ff4d..c672dfc 100644 <newline>--- a/net/base/x509_certificate_win.cc <newline>+++ b/net/base/x509_certificate_win.cc <newline>@@ -866,6 +866,7 @@ int X509Certificate::VerifyInternal(const std::string& hostname, <newline>            chain_flags, <newline>            NULL,  // reserved <newline>            &chain_context)) { <newline>+    verify_result->cert_status |= CERT_STATUS_INVALID; <newline>     return MapSecurityError(GetLastError()); <newline>   } <newline>@@ -884,6 +885,7 @@ int X509Certificate::VerifyInternal(const std::string& hostname, <newline>              chain_flags, <newline>              NULL,  // reserved <newline>              &chain_context)) { <newline>+      verify_result->cert_status |= CERT_STATUS_INVALID; <newline>       return MapSecurityError(GetLastError()); <newline>     } <newline>   } <newline>@@ -894,14 +896,6 @@ int X509Certificate::VerifyInternal(const std::string& hostname, <newline>   verify_result->cert_status |= MapCertChainErrorStatusToCertStatus( <newline>       chain_context->TrustStatus.dwErrorStatus); <newline>-  // Treat certificates signed using broken signature algorithms as invalid. <newline>-  if (verify_result->has_md4) <newline>-    verify_result->cert_status |= CERT_STATUS_INVALID; <newline>- <newline>-  // Flag certificates signed using weak signature algorithms. <newline>-  if (verify_result->has_md2) <newline>-    verify_result->cert_status |= CERT_STATUS_WEAK_SIGNATURE_ALGORITHM; <newline>- <newline>   // Flag certificates that have a Subject common name with a NULL character. <newline>   if (CertSubjectCommonNameHasNull(cert_handle_)) <newline>     verify_result->cert_status |= CERT_STATUS_INVALID;																								
Chromium	5		5d18e0f3b35728b33c3efdb2f87156da5a251a5	mmenke@chromium.org <mmenke@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Dec 13 20:34:21 2011 +0000	No longer preconnect to unsafe ports.  As UrlRequests were never allowed to use these ports anyways, this wasn't a security issue, but just doesn't seem like a good idea.	93326		http://codereview.chromium.org/8898008	svn://svn.chromium.org/chrome/trunk/src@114261 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/url_request/url_request_http_job.cc b/net/url_request/url_request_http_job.cc <newline>index 73cf26d..bf3df81 100644 <newline>--- a/net/url_request/url_request_http_job.cc <newline>+++ b/net/url_request/url_request_http_job.cc <newline>@@ -165,10 +165,6 @@ URLRequestJob* URLRequestHttpJob::Factory(URLRequest* request, <newline>                                           const std::string& scheme) { <newline>   DCHECK(scheme == "http" || scheme == "https"); <newline>-  int port = request->url().IntPort(); <newline>-  if (!IsPortAllowedByDefault(port) && !IsPortAllowedByOverride(port)) <newline>-    return new URLRequestErrorJob(request, ERR_UNSAFE_PORT); <newline>- <newline>   if (!request->context() || <newline>       !request->context()->http_transaction_factory()) { <newline>     NOTREACHED() << "requires a valid context";																								
Chromium	5		967b09ecf28b09636f85a657b4752098467d2b7	mmenke@chromium.org <mmenke@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Dec 13 20:34:21 2011 +0000	No longer preconnect to unsafe ports.  As UrlRequests were never allowed to use these ports anyways, this wasn't a security issue, but just doesn't seem like a good idea.	93326		http://codereview.chromium.org/8898008	svn://svn.chromium.org/chrome/trunk/src@114261 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/url_request/url_request_http_job.cc b/net/url_request/url_request_http_job.cc <newline>index 73cf26d..bf3df81 100644 <newline>--- a/net/url_request/url_request_http_job.cc <newline>+++ b/net/url_request/url_request_http_job.cc <newline>@@ -165,10 +165,6 @@ URLRequestJob* URLRequestHttpJob::Factory(URLRequest* request, <newline>                                           const std::string& scheme) { <newline>   DCHECK(scheme == "http" || scheme == "https"); <newline>-  int port = request->url().IntPort(); <newline>-  if (!IsPortAllowedByDefault(port) && !IsPortAllowedByOverride(port)) <newline>-    return new URLRequestErrorJob(request, ERR_UNSAFE_PORT); <newline>- <newline>   if (!request->context() || <newline>       !request->context()->http_transaction_factory()) { <newline>     NOTREACHED() << "requires a valid context";																								
Chromium	1	2	eb519502c4972237cfc28c53879034b5767867a	zelidrag@chromium.org <zelidrag@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Dec 6 23:47:14 2011 +0000	Landing http://codereview.chromium.org/8759014/ on behalf of kmixter: Add ONC VPN support for OpenVPN and L2TP/IPsec VPNs Also simplifies some of the parsing code, adds type validation, brings the WiFi security parsing up to spec, and improves the unit tests for wifi so that they all verify the property_map_ fields (the only ones actually used to configure the network). Also fixed a general parser problem where certificates wouldn't be parsed if network configs were. chromium-os:23477 TEST=manual import of ONC file with openvpn network, unit_tests	chromium-os:23476				diff --git a/net/url_request/url_request_http_job.cc b/net/url_request/url_request_http_job.cc <newline>index 73cf26d..bf3df81 100644 <newline>--- a/net/url_request/url_request_http_job.cc <newline>+++ b/net/url_request/url_request_http_job.cc <newline>@@ -165,10 +165,6 @@ URLRequestJob* URLRequestHttpJob::Factory(URLRequest* request, <newline>                                           const std::string& scheme) { <newline>   DCHECK(scheme == "http" || scheme == "https"); <newline>-  int port = request->url().IntPort(); <newline>-  if (!IsPortAllowedByDefault(port) && !IsPortAllowedByOverride(port)) <newline>-    return new URLRequestErrorJob(request, ERR_UNSAFE_PORT); <newline>- <newline>   if (!request->context() || <newline>       !request->context()->http_transaction_factory()) { <newline>     NOTREACHED() << "requires a valid context";																								
Chromium	1	2	82c572e0f7f8f87f924b208ff6c4a204757d052	zelidrag@chromium.org <zelidrag@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Dec 6 23:47:14 2011 +0000	Landing http://codereview.chromium.org/8759014/ on behalf of kmixter: Add ONC VPN support for OpenVPN and L2TP/IPsec VPNs Also simplifies some of the parsing code, adds type validation, brings the WiFi security parsing up to spec, and improves the unit tests for wifi so that they all verify the property_map_ fields (the only ones actually used to configure the network). Also fixed a general parser problem where certificates wouldn't be parsed if network configs were. chromium-os:23477 TEST=manual import of ONC file with openvpn network, unit_tests	chromium-os:23476				diff --git a/chrome/browser/chromeos/cros/onc_network_parser_unittest.cc b/chrome/browser/chromeos/cros/onc_network_parser_unittest.cc <newline>index 24e656b..b2a2486 100644 <newline>--- a/chrome/browser/chromeos/cros/onc_network_parser_unittest.cc <newline>+++ b/chrome/browser/chromeos/cros/onc_network_parser_unittest.cc <newline>@@ -16,9 +16,93 @@ <newline> #include "net/base/crypto_module.h" <newline> #include "net/base/x509_certificate.h" <newline> #include "testing/gtest/include/gtest/gtest.h" <newline>+#include "third_party/cros_system_api/dbus/service_constants.h" <newline> namespace chromeos { <newline>+const char kNetworkConfigurationOpenVPN[] = <newline>+      "    {" <newline>+      "      \"GUID\": \"{408290ea-9299-4757-ab04-8957d55f0f13}\"," <newline>+      "      \"Type\": \"VPN\"," <newline>+      "      \"Name\": \"MyVPN\"," <newline>+      "      \"VPN\": {" <newline>+      "        \"Host\": \"vpn.acme.org\"," <newline>+      "        \"Type\": \"OpenVPN\"," <newline>+      "        \"OpenVPN\": {" <newline>+      "          \"AuthRetry\": \"interact\"," <newline>+      "          \"CompLZO\": \"true\"," <newline>+      "          \"KeyDirection\": \"1\"," <newline>+      "          \"Port\": 443," <newline>+      "          \"Proto\": \"udp\"," <newline>+      "          \"PushPeerInfo\": true," <newline>+      "          \"RemoteCertEKU\": \"TLS Web Server Authentication\"," <newline>+      "          \"RemoteCertKU\": [" <newline>+      "            \"eo\"" <newline>+      "          ]," <newline>+      "          \"RemoteCertTLS\": \"server\"," <newline>+      "          \"RenegSec\": 0," <newline>+      "          \"ServerPollTimeout\": 10," <newline>+      "          \"StaticChallenge\": \"My static challenge\"," <newline>+      "          \"TLSAuthContents\": \"" <newline>+      "-----BEGIN OpenVPN Static key V1-----\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "END OpenVPN Static key V1-----\n\"," <newline>+      "          \"TLSRemote\": \"MyOpenVPNServer\"," <newline>+      "          \"SaveCredentials\": false," <newline>+      "          \"ServerCARef\": \"{55ca78f6-0842-4e1b-96a3-09a9e1a26ef5}\"," <newline>+      "          \"ClientCertType\": \"Pattern\"," <newline>+      "          \"ClientCertPattern\": {" <newline>+      "            \"IssuerRef\": \"{68a2ed90-13a1-4120-a1fe-282508320e18}\"," <newline>+      "            \"EnrollmentURI\": [" <newline>+      "              \"chrome-extension://abc/keygen-cert.html\"" <newline>+      "            ]" <newline>+      "          }," <newline>+      "        }" <newline>+      "      }" <newline>+      "    }"; <newline>+ <newline>+const char kCertificateWebAuthority[] = <newline>+      "        {" <newline>+      "            \"GUID\": \"{f998f760-272b-6939-4c2beffe428697ab}\"," <newline>+      "            \"Type\": \"Authority\"," <newline>+      "            \"Trust\": [\"Web\"]," <newline>+      "            \"X509\": \"MIIDojCCAwugAwIBAgIJAKGvi5ZgEWDVMA0GCSqGSIb3D" <newline>+      "QEBBAUAMIGTMRUwEwYDVQQKEwxHb29nbGUsIEluYy4xETAPBgNVBAsTCENocm9tZU9TMS" <newline>+      "IwIAYJKoZIhvcNAQkBFhNnc3BlbmNlckBnb29nbGUuY29tMRowGAYDVQQHExFNb3VudGF" <newline>+      "pbiBWaWV3LCBDQTELMAkGA1UECBMCQ0ExCzAJBgNVBAYTAlVTMQ0wCwYDVQQDEwRsbWFv" <newline>+      "MB4XDTExMDMxNjIzNDcxMFoXDTEyMDMxNTIzNDcxMFowgZMxFTATBgNVBAoTDEdvb2dsZ" <newline>+      "SwgSW5jLjERMA8GA1UECxMIQ2hyb21lT1MxIjAgBgkqhkiG9w0BCQEWE2dzcGVuY2VyQG" <newline>+      "dvb2dsZS5jb20xGjAYBgNVBAcTEU1vdW50YWluIFZpZXcsIENBMQswCQYDVQQIEwJDQTE" <newline>+      "LMAkGA1UEBhMCVVMxDTALBgNVBAMTBGxtYW8wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJ" <newline>+      "AoGBAMDX6BQz2JUzIAVjetiXxDznd2wdqVqVHfNkbSRW+xBywgqUaIXmFEGUol7VzPfme" <newline>+      "FV8o8ok/eFlQB0h6ycqgwwMd0KjtJs2ys/k0F5GuN0G7fsgr+NRnhVgxj21yF6gYTN/8a" <newline>+      "9kscla/svdmp8ekexbALFnghbLBx3CgcqUxT+tAgMBAAGjgfswgfgwDAYDVR0TBAUwAwE" <newline>+      "B/zAdBgNVHQ4EFgQUbYygbSkl4kpjCNuxoezFGupA97UwgcgGA1UdIwSBwDCBvYAUbYyg" <newline>+      "bSkl4kpjCNuxoezFGupA97WhgZmkgZYwgZMxFTATBgNVBAoTDEdvb2dsZSwgSW5jLjERM" <newline>+      "A8GA1UECxMIQ2hyb21lT1MxIjAgBgkqhkiG9w0BCQEWE2dzcGVuY2VyQGdvb2dsZS5jb2" <newline>+      "0xGjAYBgNVBAcTEU1vdW50YWluIFZpZXcsIENBMQswCQYDVQQIEwJDQTELMAkGA1UEBhM" <newline>+      "CVVMxDTALBgNVBAMTBGxtYW+CCQChr4uWYBFg1TANBgkqhkiG9w0BAQQFAAOBgQCDq9wi" <newline>+      "Q4uVuf1CQU3sXfXCy1yqi5m8AsO9FxHvah5/SVFNwKllqTfedpCaWEswJ55YAojW9e+pY" <newline>+      "2Fh3Fo/Y9YkF88KCtLuBjjqDKCRLxF4LycjHODKyQQ7mN/t5AtP9yKOsNvWF+M4IfReg5" <newline>+      "1kohau6FauQx87by5NIRPdkNPvkQ==\"" <newline>+      "        }"; <newline>+ <newline>+ <newline> class OncNetworkParserTest : public testing::Test { <newline>  public: <newline>   static void SetUpTestCase() { <newline>@@ -52,6 +136,16 @@ class OncNetworkParserTest : public testing::Test { <newline>     EXPECT_EQ(0U, ListCertsInSlot(slot_->os_module_handle()).size()); <newline>   } <newline>+  const base::Value* GetExpectedProperty(const Network* network, <newline>+                                         PropertyIndex index, <newline>+                                         base::Value::Type expected_type); <newline>+  void CheckStringProperty(const Network* network, <newline>+                           PropertyIndex index, <newline>+                           const char* expected); <newline>+  void CheckBooleanProperty(const Network* network, <newline>+                            PropertyIndex index, <newline>+                            bool expected); <newline>+ <newline>  protected: <newline>   scoped_refptr<net::CryptoModule> slot_; <newline>   net::CertDatabase cert_db_; <newline>@@ -86,6 +180,48 @@ class OncNetworkParserTest : public testing::Test { <newline>   static base::LazyInstance<ScopedTempDir> temp_db_dir_; <newline> }; <newline>+const base::Value* OncNetworkParserTest::GetExpectedProperty( <newline>+    const Network* network, <newline>+    PropertyIndex index, <newline>+    base::Value::Type expected_type) { <newline>+  const base::Value* value; <newline>+  if (!network->GetProperty(index, &value)) { <newline>+    ADD_FAILURE() << "Property " << index << " does not exist"; <newline>+    return NULL; <newline>+  } <newline>+  if (!value->IsType(expected_type)) { <newline>+    ADD_FAILURE() << "Property " << index << " expected type " <newline>+                  << expected_type << " actual type " <newline>+                  << value->GetType(); <newline>+    return NULL; <newline>+  } <newline>+  return value; <newline>+} <newline>+ <newline>+void OncNetworkParserTest::CheckStringProperty(const Network* network, <newline>+                                               PropertyIndex index, <newline>+                                               const char* expected) { <newline>+  const base::Value* value = <newline>+    GetExpectedProperty(network, index, base::Value::TYPE_STRING); <newline>+  if (!value) <newline>+    return; <newline>+  std::string string_value; <newline>+  value->GetAsString(&string_value); <newline>+  EXPECT_EQ(expected, string_value); <newline>+} <newline>+ <newline>+void OncNetworkParserTest::CheckBooleanProperty(const Network* network, <newline>+                                                PropertyIndex index, <newline>+                                                bool expected) { <newline>+  const base::Value* value = <newline>+    GetExpectedProperty(network, index, base::Value::TYPE_BOOLEAN); <newline>+  if (!value) <newline>+    return; <newline>+  bool bool_value = false; <newline>+  value->GetAsBoolean(&bool_value); <newline>+  EXPECT_EQ(expected, bool_value); <newline>+} <newline>+ <newline> // static <newline> base::LazyInstance<ScopedTempDir> OncNetworkParserTest::temp_db_dir_ = <newline>     LAZY_INSTANCE_INITIALIZER; <newline>@@ -97,7 +233,7 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifi1) { <newline>       "    \"GUID\": \"{485d6076-dd44-6b6d-69787465725f5045}\"," <newline>       "    \"Type\": \"WiFi\"," <newline>       "    \"WiFi\": {" <newline>-      "      \"Security\": \"WEP\"," <newline>+      "      \"Security\": \"WEP-PSK\"," <newline>       "      \"SSID\": \"ssid\"," <newline>       "      \"Passphrase\": \"pass\"," <newline>       "    }" <newline>@@ -108,15 +244,18 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifi1) { <newline>   EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>   EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>   EXPECT_FALSE(parser.ParseNetwork(1)); <newline>-  Network* network = parser.ParseNetwork(0); <newline>-  ASSERT_TRUE(network); <newline>+  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>+  ASSERT_TRUE(network.get()); <newline>   EXPECT_EQ(network->type(), chromeos::TYPE_WIFI); <newline>-  WifiNetwork* wifi = static_cast<WifiNetwork*>(network); <newline>+  WifiNetwork* wifi = static_cast<WifiNetwork*>(network.get()); <newline>   EXPECT_EQ(wifi->encryption(), chromeos::SECURITY_WEP); <newline>+  CheckStringProperty(wifi, PROPERTY_INDEX_SECURITY, flimflam::kSecurityWep); <newline>   EXPECT_EQ(wifi->name(), "ssid"); <newline>+  CheckStringProperty(wifi, PROPERTY_INDEX_SSID, "ssid"); <newline>   EXPECT_EQ(wifi->auto_connect(), false); <newline>   EXPECT_EQ(wifi->passphrase(), "pass"); <newline>+  CheckStringProperty(wifi, PROPERTY_INDEX_PASSPHRASE, "pass"); <newline> } <newline> TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP1) { <newline>@@ -126,7 +265,7 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP1) { <newline>       "    \"GUID\": \"{485d6076-dd44-6b6d-69787465725f5045}\"," <newline>       "    \"Type\": \"WiFi\"," <newline>       "    \"WiFi\": {" <newline>-      "      \"Security\": \"WPA2\"," <newline>+      "      \"Security\": \"WPA-EAP\"," <newline>       "      \"SSID\": \"ssid\"," <newline>       "      \"AutoConnect\": true," <newline>       "      \"EAP\": {" <newline>@@ -141,15 +280,19 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP1) { <newline>   EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>   EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>   EXPECT_FALSE(parser.ParseNetwork(1)); <newline>-  Network* network = parser.ParseNetwork(0); <newline>-  ASSERT_TRUE(network); <newline>+  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>+  ASSERT_TRUE(network.get()); <newline>   EXPECT_EQ(network->type(), chromeos::TYPE_WIFI); <newline>-  WifiNetwork* wifi = static_cast<WifiNetwork*>(network); <newline>+  WifiNetwork* wifi = static_cast<WifiNetwork*>(network.get()); <newline>   EXPECT_EQ(wifi->encryption(), chromeos::SECURITY_8021X); <newline>+  CheckStringProperty(wifi, PROPERTY_INDEX_SECURITY, flimflam::kSecurity8021x); <newline>   EXPECT_EQ(wifi->name(), "ssid"); <newline>   EXPECT_EQ(wifi->auto_connect(), true); <newline>+  CheckBooleanProperty(wifi, PROPERTY_INDEX_AUTO_CONNECT, true); <newline>   EXPECT_EQ(wifi->eap_method(), EAP_METHOD_PEAP); <newline>+  CheckStringProperty(wifi, PROPERTY_INDEX_EAP_METHOD, <newline>+                      flimflam::kEapMethodPEAP); <newline>   EXPECT_EQ(wifi->eap_use_system_cas(), false); <newline> } <newline>@@ -160,7 +303,7 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP2) { <newline>       "    \"GUID\": \"{485d6076-dd44-6b6d-69787465725f5045}\"," <newline>       "    \"Type\": \"WiFi\"," <newline>       "    \"WiFi\": {" <newline>-      "      \"Security\": \"WPA2\"," <newline>+      "      \"Security\": \"WPA-EAP\"," <newline>       "      \"SSID\": \"ssid\"," <newline>       "      \"AutoConnect\": false," <newline>       "      \"EAP\": {" <newline>@@ -177,19 +320,130 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP2) { <newline>   EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>   EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>   EXPECT_FALSE(parser.ParseNetwork(1)); <newline>-  Network* network = parser.ParseNetwork(0); <newline>-  ASSERT_TRUE(network); <newline>+  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>+  ASSERT_TRUE(network.get()); <newline>   EXPECT_EQ(network->type(), chromeos::TYPE_WIFI); <newline>-  WifiNetwork* wifi = static_cast<WifiNetwork*>(network); <newline>+  WifiNetwork* wifi = static_cast<WifiNetwork*>(network.get()); <newline>   EXPECT_EQ(wifi->encryption(), chromeos::SECURITY_8021X); <newline>   EXPECT_EQ(wifi->name(), "ssid"); <newline>   EXPECT_EQ(wifi->auto_connect(), false); <newline>   EXPECT_EQ(wifi->eap_method(), EAP_METHOD_LEAP); <newline>   EXPECT_EQ(wifi->eap_use_system_cas(), true); <newline>   EXPECT_EQ(wifi->eap_identity(), "user"); <newline>+  CheckStringProperty(wifi, PROPERTY_INDEX_EAP_IDENTITY, "user"); <newline>   EXPECT_EQ(wifi->eap_passphrase(), "pass"); <newline>+  CheckStringProperty(wifi, PROPERTY_INDEX_EAP_PASSWORD, "pass"); <newline>   EXPECT_EQ(wifi->eap_anonymous_identity(), "anon"); <newline>+  CheckStringProperty(wifi, PROPERTY_INDEX_EAP_ANONYMOUS_IDENTITY, "anon"); <newline>+} <newline>+ <newline>+TEST_F(OncNetworkParserTest, TestCreateNetworkOpenVPN) { <newline>+  std::string test_blob(std::string( <newline>+      "{" <newline>+      "  \"NetworkConfigurations\": [") + <newline>+      std::string(kNetworkConfigurationOpenVPN) + std::string( <newline>+      "  ]}")); <newline>+  OncNetworkParser parser(test_blob); <newline>+ <newline>+  EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>+  EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>+  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>+  ASSERT_TRUE(network.get() != NULL); <newline>+ <newline>+  EXPECT_EQ(network->type(), chromeos::TYPE_VPN); <newline>+  CheckStringProperty(network.get(), PROPERTY_INDEX_TYPE, flimflam::kTypeVPN); <newline>+  VirtualNetwork* vpn = static_cast<VirtualNetwork*>(network.get()); <newline>+  EXPECT_EQ("MyVPN", vpn->name()); <newline>+  EXPECT_EQ(PROVIDER_TYPE_OPEN_VPN, vpn->provider_type()); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_PROVIDER_TYPE, <newline>+                      flimflam::kProviderOpenVpn); <newline>+  EXPECT_EQ("vpn.acme.org", vpn->server_hostname()); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_PROVIDER_HOST, "vpn.acme.org"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_VPN_DOMAIN, ""); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_AUTHRETRY, "interact"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_CACERT, <newline>+                      "{55ca78f6-0842-4e1b-96a3-09a9e1a26ef5}"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_COMPLZO, "true"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_KEYDIRECTION, "1"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_PORT, "443"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_PROTO, "udp"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_PUSHPEERINFO, "true"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_REMOTECERTEKU, <newline>+                      "TLS Web Server Authentication"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_REMOTECERTKU, "eo"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_REMOTECERTTLS, "server"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_RENEGSEC, "0"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_SERVERPOLLTIMEOUT, "10"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_STATICCHALLENGE, <newline>+                      "My static challenge"); <newline>+  // Check the default properties are set. <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_AUTHUSERPASS, ""); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_MGMT_ENABLE, ""); <newline>+ <newline>+  std::string tls_auth_contents; <newline>+  const Value* tls_auth_value = <newline>+    GetExpectedProperty(vpn, PROPERTY_INDEX_OPEN_VPN_TLSAUTHCONTENTS, <newline>+                        base::Value::TYPE_STRING); <newline>+  if (tls_auth_value != NULL) { <newline>+    tls_auth_value->GetAsString(&tls_auth_contents); <newline>+    EXPECT_NE(std::string::npos, <newline>+              tls_auth_contents.find("END OpenVPN Static key V1-----\n")); <newline>+    EXPECT_NE(std::string::npos, <newline>+              tls_auth_contents.find( <newline>+                  "-----BEGIN OpenVPN Static key V1-----\n")); <newline>+  } <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_TLSREMOTE, <newline>+                      "MyOpenVPNServer"); <newline>+  EXPECT_FALSE(vpn->save_credentials()); <newline>+  EXPECT_EQ("{55ca78f6-0842-4e1b-96a3-09a9e1a26ef5}", vpn->ca_cert_nss()); <newline>+} <newline>+ <newline>+TEST_F(OncNetworkParserTest, TestCreateNetworkL2TPIPsec) { <newline>+  std::string test_blob( <newline>+      "{" <newline>+      "  \"NetworkConfigurations\": [" <newline>+      "    {" <newline>+      "      \"GUID\": \"{926b84e4-f2c5-0972-b9bbb8f44c4316f5}\"," <newline>+      "      \"Name\": \"MyL2TPVPN\"," <newline>+      "      \"Type\": \"VPN\"," <newline>+      "      \"VPN\": {" <newline>+      "        \"Host\": \"l2tp.acme.org\"," <newline>+      "        \"Type\": \"L2TP-IPsec\"," <newline>+      "        \"IPsec\": {" <newline>+      "          \"IKEVersion\": 1," <newline>+      "          \"AuthenticationType\": \"PSK\"," <newline>+      "          \"PSK\": \"passphrase\"" <newline>+      "        }," <newline>+      "        \"L2TP\": {" <newline>+      "          \"SaveCredentials\": false" <newline>+      "        }" <newline>+      "      }" <newline>+      "    }" <newline>+      "  ]," <newline>+      "  \"Certificates\": []" <newline>+      "}"); <newline>+  OncNetworkParser parser(test_blob); <newline>+ <newline>+  EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>+  EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>+  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>+  ASSERT_TRUE(network != NULL); <newline>+ <newline>+  EXPECT_EQ(network->type(), chromeos::TYPE_VPN); <newline>+  CheckStringProperty(network.get(), PROPERTY_INDEX_TYPE, flimflam::kTypeVPN); <newline>+  VirtualNetwork* vpn = static_cast<VirtualNetwork*>(network.get()); <newline>+  EXPECT_EQ("MyL2TPVPN", vpn->name()); <newline>+  EXPECT_EQ(PROVIDER_TYPE_L2TP_IPSEC_PSK, vpn->provider_type()); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_PROVIDER_TYPE, <newline>+                      flimflam::kProviderL2tpIpsec); <newline>+  EXPECT_EQ("l2tp.acme.org", vpn->server_hostname()); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_PROVIDER_HOST, "l2tp.acme.org"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_VPN_DOMAIN, ""); <newline>+  EXPECT_EQ("passphrase", vpn->psk_passphrase()); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_L2TPIPSEC_PSK, "passphrase"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_IPSEC_IKEVERSION, "1"); <newline>+  EXPECT_FALSE(vpn->save_credentials()); <newline> } <newline> TEST_F(OncNetworkParserTest, TestAddServerCertificate) { <newline>@@ -222,34 +476,11 @@ TEST_F(OncNetworkParserTest, TestAddServerCertificate) { <newline> } <newline> TEST_F(OncNetworkParserTest, TestAddAuthorityCertificate) { <newline>-  const std::string test_blob("{" <newline>-      "    \"Certificates\": [" <newline>-      "        {" <newline>-      "            \"GUID\": \"{f998f760-272b-6939-4c2beffe428697ab}\"," <newline>-      "            \"Type\": \"Authority\"," <newline>-      "            \"Trust\": [\"Web\"]," <newline>-      "            \"X509\": \"MIIDojCCAwugAwIBAgIJAKGvi5ZgEWDVMA0GCSqGSIb3D" <newline>-      "QEBBAUAMIGTMRUwEwYDVQQKEwxHb29nbGUsIEluYy4xETAPBgNVBAsTCENocm9tZU9TMS" <newline>-      "IwIAYJKoZIhvcNAQkBFhNnc3BlbmNlckBnb29nbGUuY29tMRowGAYDVQQHExFNb3VudGF" <newline>-      "pbiBWaWV3LCBDQTELMAkGA1UECBMCQ0ExCzAJBgNVBAYTAlVTMQ0wCwYDVQQDEwRsbWFv" <newline>-      "MB4XDTExMDMxNjIzNDcxMFoXDTEyMDMxNTIzNDcxMFowgZMxFTATBgNVBAoTDEdvb2dsZ" <newline>-      "SwgSW5jLjERMA8GA1UECxMIQ2hyb21lT1MxIjAgBgkqhkiG9w0BCQEWE2dzcGVuY2VyQG" <newline>-      "dvb2dsZS5jb20xGjAYBgNVBAcTEU1vdW50YWluIFZpZXcsIENBMQswCQYDVQQIEwJDQTE" <newline>-      "LMAkGA1UEBhMCVVMxDTALBgNVBAMTBGxtYW8wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJ" <newline>-      "AoGBAMDX6BQz2JUzIAVjetiXxDznd2wdqVqVHfNkbSRW+xBywgqUaIXmFEGUol7VzPfme" <newline>-      "FV8o8ok/eFlQB0h6ycqgwwMd0KjtJs2ys/k0F5GuN0G7fsgr+NRnhVgxj21yF6gYTN/8a" <newline>-      "9kscla/svdmp8ekexbALFnghbLBx3CgcqUxT+tAgMBAAGjgfswgfgwDAYDVR0TBAUwAwE" <newline>-      "B/zAdBgNVHQ4EFgQUbYygbSkl4kpjCNuxoezFGupA97UwgcgGA1UdIwSBwDCBvYAUbYyg" <newline>-      "bSkl4kpjCNuxoezFGupA97WhgZmkgZYwgZMxFTATBgNVBAoTDEdvb2dsZSwgSW5jLjERM" <newline>-      "A8GA1UECxMIQ2hyb21lT1MxIjAgBgkqhkiG9w0BCQEWE2dzcGVuY2VyQGdvb2dsZS5jb2" <newline>-      "0xGjAYBgNVBAcTEU1vdW50YWluIFZpZXcsIENBMQswCQYDVQQIEwJDQTELMAkGA1UEBhM" <newline>-      "CVVMxDTALBgNVBAMTBGxtYW+CCQChr4uWYBFg1TANBgkqhkiG9w0BAQQFAAOBgQCDq9wi" <newline>-      "Q4uVuf1CQU3sXfXCy1yqi5m8AsO9FxHvah5/SVFNwKllqTfedpCaWEswJ55YAojW9e+pY" <newline>-      "2Fh3Fo/Y9YkF88KCtLuBjjqDKCRLxF4LycjHODKyQQ7mN/t5AtP9yKOsNvWF+M4IfReg5" <newline>-      "1kohau6FauQx87by5NIRPdkNPvkQ==\"" <newline>-      "        }" <newline>+  const std::string test_blob(std::string("{" <newline>+      "    \"Certificates\": [") + <newline>+      std::string(kCertificateWebAuthority) + std::string( <newline>       "    ]," <newline>-      "}"); <newline>+      "}")); <newline>   OncNetworkParser parser(test_blob); <newline>   EXPECT_EQ(1, parser.GetCertificatesSize()); <newline>@@ -304,4 +535,27 @@ TEST_F(OncNetworkParserTest, TestAddClientCertificate) { <newline>   EXPECT_TRUE(parser.ParseCertificate(0)); <newline> } <newline>+TEST_F(OncNetworkParserTest, TestNetworkAndCertificate) { <newline>+  std::string test_blob(std::string( <newline>+      "{" <newline>+      "  \"NetworkConfigurations\": [") + <newline>+      std::string(kNetworkConfigurationOpenVPN) + std::string( <newline>+      "  ]," <newline>+      "  \"Certificates\": [") + <newline>+      std::string(kCertificateWebAuthority) + std::string( <newline>+      "  ]," <newline>+      "}")); <newline>+  OncNetworkParser parser(test_blob); <newline>+ <newline>+  EXPECT_EQ(1, parser.GetCertificatesSize()); <newline>+  EXPECT_TRUE(parser.ParseCertificate(0)); <newline>+ <newline>+  EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>+  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>+  ASSERT_TRUE(network.get() != NULL); <newline>+  EXPECT_EQ(network->type(), chromeos::TYPE_VPN); <newline>+  VirtualNetwork* vpn = static_cast<VirtualNetwork*>(network.get()); <newline>+  EXPECT_EQ(PROVIDER_TYPE_OPEN_VPN, vpn->provider_type()); <newline>+} <newline>+ <newline> }  // namespace chromeos																								
Chromium	3	2	d088e385cba2de1c8ff7b07aaf5b31ef0823da4	sail@chromium.org <sail@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Dec 6 07:04:02 2011 +0000	Revert 113120 - this CL broke then chromeos clang bot: http://build.chromium.org/p/chromium.chromiumos/builders/Linux%20Clang%20%28ChromeOS%20dbg%29/builds/4017/steps/compile/logs/stdio Add ONC VPN support for OpenVPN and L2TP/IPsec VPNs Also simplifies some of the parsing code, adds type validation, brings the WiFi security parsing up to spec, and improves the unit tests for wifi so that they all verify the property_map_ fields (the only ones actually used to configure the network).  Also fixed a general parser problem where certificates wouldn't be parsed if network configs were. TEST=manual import of ONC file with openvpn network, unit_tests TBR=kmixter@chromium.org	chromium-os:23476 chromium-os:23477		http://codereview.chromium.org/8819011	svn://svn.chromium.org/chrome/trunk/src@113136 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/chromeos/cros/onc_network_parser_unittest.cc b/chrome/browser/chromeos/cros/onc_network_parser_unittest.cc <newline>index b2a2486..24e656b 100644 <newline>--- a/chrome/browser/chromeos/cros/onc_network_parser_unittest.cc <newline>+++ b/chrome/browser/chromeos/cros/onc_network_parser_unittest.cc <newline>@@ -16,93 +16,9 @@ <newline> #include "net/base/crypto_module.h" <newline> #include "net/base/x509_certificate.h" <newline> #include "testing/gtest/include/gtest/gtest.h" <newline>-#include "third_party/cros_system_api/dbus/service_constants.h" <newline> namespace chromeos { <newline>-const char kNetworkConfigurationOpenVPN[] = <newline>-      "    {" <newline>-      "      \"GUID\": \"{408290ea-9299-4757-ab04-8957d55f0f13}\"," <newline>-      "      \"Type\": \"VPN\"," <newline>-      "      \"Name\": \"MyVPN\"," <newline>-      "      \"VPN\": {" <newline>-      "        \"Host\": \"vpn.acme.org\"," <newline>-      "        \"Type\": \"OpenVPN\"," <newline>-      "        \"OpenVPN\": {" <newline>-      "          \"AuthRetry\": \"interact\"," <newline>-      "          \"CompLZO\": \"true\"," <newline>-      "          \"KeyDirection\": \"1\"," <newline>-      "          \"Port\": 443," <newline>-      "          \"Proto\": \"udp\"," <newline>-      "          \"PushPeerInfo\": true," <newline>-      "          \"RemoteCertEKU\": \"TLS Web Server Authentication\"," <newline>-      "          \"RemoteCertKU\": [" <newline>-      "            \"eo\"" <newline>-      "          ]," <newline>-      "          \"RemoteCertTLS\": \"server\"," <newline>-      "          \"RenegSec\": 0," <newline>-      "          \"ServerPollTimeout\": 10," <newline>-      "          \"StaticChallenge\": \"My static challenge\"," <newline>-      "          \"TLSAuthContents\": \"" <newline>-      "-----BEGIN OpenVPN Static key V1-----\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "END OpenVPN Static key V1-----\n\"," <newline>-      "          \"TLSRemote\": \"MyOpenVPNServer\"," <newline>-      "          \"SaveCredentials\": false," <newline>-      "          \"ServerCARef\": \"{55ca78f6-0842-4e1b-96a3-09a9e1a26ef5}\"," <newline>-      "          \"ClientCertType\": \"Pattern\"," <newline>-      "          \"ClientCertPattern\": {" <newline>-      "            \"IssuerRef\": \"{68a2ed90-13a1-4120-a1fe-282508320e18}\"," <newline>-      "            \"EnrollmentURI\": [" <newline>-      "              \"chrome-extension://abc/keygen-cert.html\"" <newline>-      "            ]" <newline>-      "          }," <newline>-      "        }" <newline>-      "      }" <newline>-      "    }"; <newline>- <newline>-const char kCertificateWebAuthority[] = <newline>-      "        {" <newline>-      "            \"GUID\": \"{f998f760-272b-6939-4c2beffe428697ab}\"," <newline>-      "            \"Type\": \"Authority\"," <newline>-      "            \"Trust\": [\"Web\"]," <newline>-      "            \"X509\": \"MIIDojCCAwugAwIBAgIJAKGvi5ZgEWDVMA0GCSqGSIb3D" <newline>-      "QEBBAUAMIGTMRUwEwYDVQQKEwxHb29nbGUsIEluYy4xETAPBgNVBAsTCENocm9tZU9TMS" <newline>-      "IwIAYJKoZIhvcNAQkBFhNnc3BlbmNlckBnb29nbGUuY29tMRowGAYDVQQHExFNb3VudGF" <newline>-      "pbiBWaWV3LCBDQTELMAkGA1UECBMCQ0ExCzAJBgNVBAYTAlVTMQ0wCwYDVQQDEwRsbWFv" <newline>-      "MB4XDTExMDMxNjIzNDcxMFoXDTEyMDMxNTIzNDcxMFowgZMxFTATBgNVBAoTDEdvb2dsZ" <newline>-      "SwgSW5jLjERMA8GA1UECxMIQ2hyb21lT1MxIjAgBgkqhkiG9w0BCQEWE2dzcGVuY2VyQG" <newline>-      "dvb2dsZS5jb20xGjAYBgNVBAcTEU1vdW50YWluIFZpZXcsIENBMQswCQYDVQQIEwJDQTE" <newline>-      "LMAkGA1UEBhMCVVMxDTALBgNVBAMTBGxtYW8wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJ" <newline>-      "AoGBAMDX6BQz2JUzIAVjetiXxDznd2wdqVqVHfNkbSRW+xBywgqUaIXmFEGUol7VzPfme" <newline>-      "FV8o8ok/eFlQB0h6ycqgwwMd0KjtJs2ys/k0F5GuN0G7fsgr+NRnhVgxj21yF6gYTN/8a" <newline>-      "9kscla/svdmp8ekexbALFnghbLBx3CgcqUxT+tAgMBAAGjgfswgfgwDAYDVR0TBAUwAwE" <newline>-      "B/zAdBgNVHQ4EFgQUbYygbSkl4kpjCNuxoezFGupA97UwgcgGA1UdIwSBwDCBvYAUbYyg" <newline>-      "bSkl4kpjCNuxoezFGupA97WhgZmkgZYwgZMxFTATBgNVBAoTDEdvb2dsZSwgSW5jLjERM" <newline>-      "A8GA1UECxMIQ2hyb21lT1MxIjAgBgkqhkiG9w0BCQEWE2dzcGVuY2VyQGdvb2dsZS5jb2" <newline>-      "0xGjAYBgNVBAcTEU1vdW50YWluIFZpZXcsIENBMQswCQYDVQQIEwJDQTELMAkGA1UEBhM" <newline>-      "CVVMxDTALBgNVBAMTBGxtYW+CCQChr4uWYBFg1TANBgkqhkiG9w0BAQQFAAOBgQCDq9wi" <newline>-      "Q4uVuf1CQU3sXfXCy1yqi5m8AsO9FxHvah5/SVFNwKllqTfedpCaWEswJ55YAojW9e+pY" <newline>-      "2Fh3Fo/Y9YkF88KCtLuBjjqDKCRLxF4LycjHODKyQQ7mN/t5AtP9yKOsNvWF+M4IfReg5" <newline>-      "1kohau6FauQx87by5NIRPdkNPvkQ==\"" <newline>-      "        }"; <newline>- <newline>- <newline> class OncNetworkParserTest : public testing::Test { <newline>  public: <newline>   static void SetUpTestCase() { <newline>@@ -136,16 +52,6 @@ class OncNetworkParserTest : public testing::Test { <newline>     EXPECT_EQ(0U, ListCertsInSlot(slot_->os_module_handle()).size()); <newline>   } <newline>-  const base::Value* GetExpectedProperty(const Network* network, <newline>-                                         PropertyIndex index, <newline>-                                         base::Value::Type expected_type); <newline>-  void CheckStringProperty(const Network* network, <newline>-                           PropertyIndex index, <newline>-                           const char* expected); <newline>-  void CheckBooleanProperty(const Network* network, <newline>-                            PropertyIndex index, <newline>-                            bool expected); <newline>- <newline>  protected: <newline>   scoped_refptr<net::CryptoModule> slot_; <newline>   net::CertDatabase cert_db_; <newline>@@ -180,48 +86,6 @@ class OncNetworkParserTest : public testing::Test { <newline>   static base::LazyInstance<ScopedTempDir> temp_db_dir_; <newline> }; <newline>-const base::Value* OncNetworkParserTest::GetExpectedProperty( <newline>-    const Network* network, <newline>-    PropertyIndex index, <newline>-    base::Value::Type expected_type) { <newline>-  const base::Value* value; <newline>-  if (!network->GetProperty(index, &value)) { <newline>-    ADD_FAILURE() << "Property " << index << " does not exist"; <newline>-    return NULL; <newline>-  } <newline>-  if (!value->IsType(expected_type)) { <newline>-    ADD_FAILURE() << "Property " << index << " expected type " <newline>-                  << expected_type << " actual type " <newline>-                  << value->GetType(); <newline>-    return NULL; <newline>-  } <newline>-  return value; <newline>-} <newline>- <newline>-void OncNetworkParserTest::CheckStringProperty(const Network* network, <newline>-                                               PropertyIndex index, <newline>-                                               const char* expected) { <newline>-  const base::Value* value = <newline>-    GetExpectedProperty(network, index, base::Value::TYPE_STRING); <newline>-  if (!value) <newline>-    return; <newline>-  std::string string_value; <newline>-  value->GetAsString(&string_value); <newline>-  EXPECT_EQ(expected, string_value); <newline>-} <newline>- <newline>-void OncNetworkParserTest::CheckBooleanProperty(const Network* network, <newline>-                                                PropertyIndex index, <newline>-                                                bool expected) { <newline>-  const base::Value* value = <newline>-    GetExpectedProperty(network, index, base::Value::TYPE_BOOLEAN); <newline>-  if (!value) <newline>-    return; <newline>-  bool bool_value = false; <newline>-  value->GetAsBoolean(&bool_value); <newline>-  EXPECT_EQ(expected, bool_value); <newline>-} <newline>- <newline> // static <newline> base::LazyInstance<ScopedTempDir> OncNetworkParserTest::temp_db_dir_ = <newline>     LAZY_INSTANCE_INITIALIZER; <newline>@@ -233,7 +97,7 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifi1) { <newline>       "    \"GUID\": \"{485d6076-dd44-6b6d-69787465725f5045}\"," <newline>       "    \"Type\": \"WiFi\"," <newline>       "    \"WiFi\": {" <newline>-      "      \"Security\": \"WEP-PSK\"," <newline>+      "      \"Security\": \"WEP\"," <newline>       "      \"SSID\": \"ssid\"," <newline>       "      \"Passphrase\": \"pass\"," <newline>       "    }" <newline>@@ -244,18 +108,15 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifi1) { <newline>   EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>   EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>   EXPECT_FALSE(parser.ParseNetwork(1)); <newline>-  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>-  ASSERT_TRUE(network.get()); <newline>+  Network* network = parser.ParseNetwork(0); <newline>+  ASSERT_TRUE(network); <newline>   EXPECT_EQ(network->type(), chromeos::TYPE_WIFI); <newline>-  WifiNetwork* wifi = static_cast<WifiNetwork*>(network.get()); <newline>+  WifiNetwork* wifi = static_cast<WifiNetwork*>(network); <newline>   EXPECT_EQ(wifi->encryption(), chromeos::SECURITY_WEP); <newline>-  CheckStringProperty(wifi, PROPERTY_INDEX_SECURITY, flimflam::kSecurityWep); <newline>   EXPECT_EQ(wifi->name(), "ssid"); <newline>-  CheckStringProperty(wifi, PROPERTY_INDEX_SSID, "ssid"); <newline>   EXPECT_EQ(wifi->auto_connect(), false); <newline>   EXPECT_EQ(wifi->passphrase(), "pass"); <newline>-  CheckStringProperty(wifi, PROPERTY_INDEX_PASSPHRASE, "pass"); <newline> } <newline> TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP1) { <newline>@@ -265,7 +126,7 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP1) { <newline>       "    \"GUID\": \"{485d6076-dd44-6b6d-69787465725f5045}\"," <newline>       "    \"Type\": \"WiFi\"," <newline>       "    \"WiFi\": {" <newline>-      "      \"Security\": \"WPA-EAP\"," <newline>+      "      \"Security\": \"WPA2\"," <newline>       "      \"SSID\": \"ssid\"," <newline>       "      \"AutoConnect\": true," <newline>       "      \"EAP\": {" <newline>@@ -280,19 +141,15 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP1) { <newline>   EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>   EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>   EXPECT_FALSE(parser.ParseNetwork(1)); <newline>-  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>-  ASSERT_TRUE(network.get()); <newline>+  Network* network = parser.ParseNetwork(0); <newline>+  ASSERT_TRUE(network); <newline>   EXPECT_EQ(network->type(), chromeos::TYPE_WIFI); <newline>-  WifiNetwork* wifi = static_cast<WifiNetwork*>(network.get()); <newline>+  WifiNetwork* wifi = static_cast<WifiNetwork*>(network); <newline>   EXPECT_EQ(wifi->encryption(), chromeos::SECURITY_8021X); <newline>-  CheckStringProperty(wifi, PROPERTY_INDEX_SECURITY, flimflam::kSecurity8021x); <newline>   EXPECT_EQ(wifi->name(), "ssid"); <newline>   EXPECT_EQ(wifi->auto_connect(), true); <newline>-  CheckBooleanProperty(wifi, PROPERTY_INDEX_AUTO_CONNECT, true); <newline>   EXPECT_EQ(wifi->eap_method(), EAP_METHOD_PEAP); <newline>-  CheckStringProperty(wifi, PROPERTY_INDEX_EAP_METHOD, <newline>-                      flimflam::kEapMethodPEAP); <newline>   EXPECT_EQ(wifi->eap_use_system_cas(), false); <newline> } <newline>@@ -303,7 +160,7 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP2) { <newline>       "    \"GUID\": \"{485d6076-dd44-6b6d-69787465725f5045}\"," <newline>       "    \"Type\": \"WiFi\"," <newline>       "    \"WiFi\": {" <newline>-      "      \"Security\": \"WPA-EAP\"," <newline>+      "      \"Security\": \"WPA2\"," <newline>       "      \"SSID\": \"ssid\"," <newline>       "      \"AutoConnect\": false," <newline>       "      \"EAP\": {" <newline>@@ -320,130 +177,19 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP2) { <newline>   EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>   EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>   EXPECT_FALSE(parser.ParseNetwork(1)); <newline>-  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>-  ASSERT_TRUE(network.get()); <newline>+  Network* network = parser.ParseNetwork(0); <newline>+  ASSERT_TRUE(network); <newline>   EXPECT_EQ(network->type(), chromeos::TYPE_WIFI); <newline>-  WifiNetwork* wifi = static_cast<WifiNetwork*>(network.get()); <newline>+  WifiNetwork* wifi = static_cast<WifiNetwork*>(network); <newline>   EXPECT_EQ(wifi->encryption(), chromeos::SECURITY_8021X); <newline>   EXPECT_EQ(wifi->name(), "ssid"); <newline>   EXPECT_EQ(wifi->auto_connect(), false); <newline>   EXPECT_EQ(wifi->eap_method(), EAP_METHOD_LEAP); <newline>   EXPECT_EQ(wifi->eap_use_system_cas(), true); <newline>   EXPECT_EQ(wifi->eap_identity(), "user"); <newline>-  CheckStringProperty(wifi, PROPERTY_INDEX_EAP_IDENTITY, "user"); <newline>   EXPECT_EQ(wifi->eap_passphrase(), "pass"); <newline>-  CheckStringProperty(wifi, PROPERTY_INDEX_EAP_PASSWORD, "pass"); <newline>   EXPECT_EQ(wifi->eap_anonymous_identity(), "anon"); <newline>-  CheckStringProperty(wifi, PROPERTY_INDEX_EAP_ANONYMOUS_IDENTITY, "anon"); <newline>-} <newline>- <newline>-TEST_F(OncNetworkParserTest, TestCreateNetworkOpenVPN) { <newline>-  std::string test_blob(std::string( <newline>-      "{" <newline>-      "  \"NetworkConfigurations\": [") + <newline>-      std::string(kNetworkConfigurationOpenVPN) + std::string( <newline>-      "  ]}")); <newline>-  OncNetworkParser parser(test_blob); <newline>- <newline>-  EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>-  EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>-  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>-  ASSERT_TRUE(network.get() != NULL); <newline>- <newline>-  EXPECT_EQ(network->type(), chromeos::TYPE_VPN); <newline>-  CheckStringProperty(network.get(), PROPERTY_INDEX_TYPE, flimflam::kTypeVPN); <newline>-  VirtualNetwork* vpn = static_cast<VirtualNetwork*>(network.get()); <newline>-  EXPECT_EQ("MyVPN", vpn->name()); <newline>-  EXPECT_EQ(PROVIDER_TYPE_OPEN_VPN, vpn->provider_type()); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_PROVIDER_TYPE, <newline>-                      flimflam::kProviderOpenVpn); <newline>-  EXPECT_EQ("vpn.acme.org", vpn->server_hostname()); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_PROVIDER_HOST, "vpn.acme.org"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_VPN_DOMAIN, ""); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_AUTHRETRY, "interact"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_CACERT, <newline>-                      "{55ca78f6-0842-4e1b-96a3-09a9e1a26ef5}"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_COMPLZO, "true"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_KEYDIRECTION, "1"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_PORT, "443"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_PROTO, "udp"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_PUSHPEERINFO, "true"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_REMOTECERTEKU, <newline>-                      "TLS Web Server Authentication"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_REMOTECERTKU, "eo"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_REMOTECERTTLS, "server"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_RENEGSEC, "0"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_SERVERPOLLTIMEOUT, "10"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_STATICCHALLENGE, <newline>-                      "My static challenge"); <newline>-  // Check the default properties are set. <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_AUTHUSERPASS, ""); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_MGMT_ENABLE, ""); <newline>- <newline>-  std::string tls_auth_contents; <newline>-  const Value* tls_auth_value = <newline>-    GetExpectedProperty(vpn, PROPERTY_INDEX_OPEN_VPN_TLSAUTHCONTENTS, <newline>-                        base::Value::TYPE_STRING); <newline>-  if (tls_auth_value != NULL) { <newline>-    tls_auth_value->GetAsString(&tls_auth_contents); <newline>-    EXPECT_NE(std::string::npos, <newline>-              tls_auth_contents.find("END OpenVPN Static key V1-----\n")); <newline>-    EXPECT_NE(std::string::npos, <newline>-              tls_auth_contents.find( <newline>-                  "-----BEGIN OpenVPN Static key V1-----\n")); <newline>-  } <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_TLSREMOTE, <newline>-                      "MyOpenVPNServer"); <newline>-  EXPECT_FALSE(vpn->save_credentials()); <newline>-  EXPECT_EQ("{55ca78f6-0842-4e1b-96a3-09a9e1a26ef5}", vpn->ca_cert_nss()); <newline>-} <newline>- <newline>-TEST_F(OncNetworkParserTest, TestCreateNetworkL2TPIPsec) { <newline>-  std::string test_blob( <newline>-      "{" <newline>-      "  \"NetworkConfigurations\": [" <newline>-      "    {" <newline>-      "      \"GUID\": \"{926b84e4-f2c5-0972-b9bbb8f44c4316f5}\"," <newline>-      "      \"Name\": \"MyL2TPVPN\"," <newline>-      "      \"Type\": \"VPN\"," <newline>-      "      \"VPN\": {" <newline>-      "        \"Host\": \"l2tp.acme.org\"," <newline>-      "        \"Type\": \"L2TP-IPsec\"," <newline>-      "        \"IPsec\": {" <newline>-      "          \"IKEVersion\": 1," <newline>-      "          \"AuthenticationType\": \"PSK\"," <newline>-      "          \"PSK\": \"passphrase\"" <newline>-      "        }," <newline>-      "        \"L2TP\": {" <newline>-      "          \"SaveCredentials\": false" <newline>-      "        }" <newline>-      "      }" <newline>-      "    }" <newline>-      "  ]," <newline>-      "  \"Certificates\": []" <newline>-      "}"); <newline>-  OncNetworkParser parser(test_blob); <newline>- <newline>-  EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>-  EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>-  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>-  ASSERT_TRUE(network != NULL); <newline>- <newline>-  EXPECT_EQ(network->type(), chromeos::TYPE_VPN); <newline>-  CheckStringProperty(network.get(), PROPERTY_INDEX_TYPE, flimflam::kTypeVPN); <newline>-  VirtualNetwork* vpn = static_cast<VirtualNetwork*>(network.get()); <newline>-  EXPECT_EQ("MyL2TPVPN", vpn->name()); <newline>-  EXPECT_EQ(PROVIDER_TYPE_L2TP_IPSEC_PSK, vpn->provider_type()); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_PROVIDER_TYPE, <newline>-                      flimflam::kProviderL2tpIpsec); <newline>-  EXPECT_EQ("l2tp.acme.org", vpn->server_hostname()); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_PROVIDER_HOST, "l2tp.acme.org"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_VPN_DOMAIN, ""); <newline>-  EXPECT_EQ("passphrase", vpn->psk_passphrase()); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_L2TPIPSEC_PSK, "passphrase"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_IPSEC_IKEVERSION, "1"); <newline>-  EXPECT_FALSE(vpn->save_credentials()); <newline> } <newline> TEST_F(OncNetworkParserTest, TestAddServerCertificate) { <newline>@@ -476,11 +222,34 @@ TEST_F(OncNetworkParserTest, TestAddServerCertificate) { <newline> } <newline> TEST_F(OncNetworkParserTest, TestAddAuthorityCertificate) { <newline>-  const std::string test_blob(std::string("{" <newline>-      "    \"Certificates\": [") + <newline>-      std::string(kCertificateWebAuthority) + std::string( <newline>+  const std::string test_blob("{" <newline>+      "    \"Certificates\": [" <newline>+      "        {" <newline>+      "            \"GUID\": \"{f998f760-272b-6939-4c2beffe428697ab}\"," <newline>+      "            \"Type\": \"Authority\"," <newline>+      "            \"Trust\": [\"Web\"]," <newline>+      "            \"X509\": \"MIIDojCCAwugAwIBAgIJAKGvi5ZgEWDVMA0GCSqGSIb3D" <newline>+      "QEBBAUAMIGTMRUwEwYDVQQKEwxHb29nbGUsIEluYy4xETAPBgNVBAsTCENocm9tZU9TMS" <newline>+      "IwIAYJKoZIhvcNAQkBFhNnc3BlbmNlckBnb29nbGUuY29tMRowGAYDVQQHExFNb3VudGF" <newline>+      "pbiBWaWV3LCBDQTELMAkGA1UECBMCQ0ExCzAJBgNVBAYTAlVTMQ0wCwYDVQQDEwRsbWFv" <newline>+      "MB4XDTExMDMxNjIzNDcxMFoXDTEyMDMxNTIzNDcxMFowgZMxFTATBgNVBAoTDEdvb2dsZ" <newline>+      "SwgSW5jLjERMA8GA1UECxMIQ2hyb21lT1MxIjAgBgkqhkiG9w0BCQEWE2dzcGVuY2VyQG" <newline>+      "dvb2dsZS5jb20xGjAYBgNVBAcTEU1vdW50YWluIFZpZXcsIENBMQswCQYDVQQIEwJDQTE" <newline>+      "LMAkGA1UEBhMCVVMxDTALBgNVBAMTBGxtYW8wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJ" <newline>+      "AoGBAMDX6BQz2JUzIAVjetiXxDznd2wdqVqVHfNkbSRW+xBywgqUaIXmFEGUol7VzPfme" <newline>+      "FV8o8ok/eFlQB0h6ycqgwwMd0KjtJs2ys/k0F5GuN0G7fsgr+NRnhVgxj21yF6gYTN/8a" <newline>+      "9kscla/svdmp8ekexbALFnghbLBx3CgcqUxT+tAgMBAAGjgfswgfgwDAYDVR0TBAUwAwE" <newline>+      "B/zAdBgNVHQ4EFgQUbYygbSkl4kpjCNuxoezFGupA97UwgcgGA1UdIwSBwDCBvYAUbYyg" <newline>+      "bSkl4kpjCNuxoezFGupA97WhgZmkgZYwgZMxFTATBgNVBAoTDEdvb2dsZSwgSW5jLjERM" <newline>+      "A8GA1UECxMIQ2hyb21lT1MxIjAgBgkqhkiG9w0BCQEWE2dzcGVuY2VyQGdvb2dsZS5jb2" <newline>+      "0xGjAYBgNVBAcTEU1vdW50YWluIFZpZXcsIENBMQswCQYDVQQIEwJDQTELMAkGA1UEBhM" <newline>+      "CVVMxDTALBgNVBAMTBGxtYW+CCQChr4uWYBFg1TANBgkqhkiG9w0BAQQFAAOBgQCDq9wi" <newline>+      "Q4uVuf1CQU3sXfXCy1yqi5m8AsO9FxHvah5/SVFNwKllqTfedpCaWEswJ55YAojW9e+pY" <newline>+      "2Fh3Fo/Y9YkF88KCtLuBjjqDKCRLxF4LycjHODKyQQ7mN/t5AtP9yKOsNvWF+M4IfReg5" <newline>+      "1kohau6FauQx87by5NIRPdkNPvkQ==\"" <newline>+      "        }" <newline>       "    ]," <newline>-      "}")); <newline>+      "}"); <newline>   OncNetworkParser parser(test_blob); <newline>   EXPECT_EQ(1, parser.GetCertificatesSize()); <newline>@@ -535,27 +304,4 @@ TEST_F(OncNetworkParserTest, TestAddClientCertificate) { <newline>   EXPECT_TRUE(parser.ParseCertificate(0)); <newline> } <newline>-TEST_F(OncNetworkParserTest, TestNetworkAndCertificate) { <newline>-  std::string test_blob(std::string( <newline>-      "{" <newline>-      "  \"NetworkConfigurations\": [") + <newline>-      std::string(kNetworkConfigurationOpenVPN) + std::string( <newline>-      "  ]," <newline>-      "  \"Certificates\": [") + <newline>-      std::string(kCertificateWebAuthority) + std::string( <newline>-      "  ]," <newline>-      "}")); <newline>-  OncNetworkParser parser(test_blob); <newline>- <newline>-  EXPECT_EQ(1, parser.GetCertificatesSize()); <newline>-  EXPECT_TRUE(parser.ParseCertificate(0)); <newline>- <newline>-  EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>-  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>-  ASSERT_TRUE(network.get() != NULL); <newline>-  EXPECT_EQ(network->type(), chromeos::TYPE_VPN); <newline>-  VirtualNetwork* vpn = static_cast<VirtualNetwork*>(network.get()); <newline>-  EXPECT_EQ(PROVIDER_TYPE_OPEN_VPN, vpn->provider_type()); <newline>-} <newline>- <newline> }  // namespace chromeos																								
Chromium	3	2	e8a77c2492aee5db0df376e1aef787fef3fc2a1	sail@chromium.org <sail@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Dec 6 07:04:02 2011 +0000	Revert 113120 - this CL broke then chromeos clang bot: http://build.chromium.org/p/chromium.chromiumos/builders/Linux%20Clang%20%28ChromeOS%20dbg%29/builds/4017/steps/compile/logs/stdio Add ONC VPN support for OpenVPN and L2TP/IPsec VPNs Also simplifies some of the parsing code, adds type validation, brings the WiFi security parsing up to spec, and improves the unit tests for wifi so that they all verify the property_map_ fields (the only ones actually used to configure the network).  Also fixed a general parser problem where certificates wouldn't be parsed if network configs were. TEST=manual import of ONC file with openvpn network, unit_tests TBR=kmixter@chromium.org	chromium-os:23476 chromium-os:23477		http://codereview.chromium.org/8819011	svn://svn.chromium.org/chrome/trunk/src@113136 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/chromeos/cros/onc_network_parser_unittest.cc b/chrome/browser/chromeos/cros/onc_network_parser_unittest.cc <newline>index b2a2486..24e656b 100644 <newline>--- a/chrome/browser/chromeos/cros/onc_network_parser_unittest.cc <newline>+++ b/chrome/browser/chromeos/cros/onc_network_parser_unittest.cc <newline>@@ -16,93 +16,9 @@ <newline> #include "net/base/crypto_module.h" <newline> #include "net/base/x509_certificate.h" <newline> #include "testing/gtest/include/gtest/gtest.h" <newline>-#include "third_party/cros_system_api/dbus/service_constants.h" <newline> namespace chromeos { <newline>-const char kNetworkConfigurationOpenVPN[] = <newline>-      "    {" <newline>-      "      \"GUID\": \"{408290ea-9299-4757-ab04-8957d55f0f13}\"," <newline>-      "      \"Type\": \"VPN\"," <newline>-      "      \"Name\": \"MyVPN\"," <newline>-      "      \"VPN\": {" <newline>-      "        \"Host\": \"vpn.acme.org\"," <newline>-      "        \"Type\": \"OpenVPN\"," <newline>-      "        \"OpenVPN\": {" <newline>-      "          \"AuthRetry\": \"interact\"," <newline>-      "          \"CompLZO\": \"true\"," <newline>-      "          \"KeyDirection\": \"1\"," <newline>-      "          \"Port\": 443," <newline>-      "          \"Proto\": \"udp\"," <newline>-      "          \"PushPeerInfo\": true," <newline>-      "          \"RemoteCertEKU\": \"TLS Web Server Authentication\"," <newline>-      "          \"RemoteCertKU\": [" <newline>-      "            \"eo\"" <newline>-      "          ]," <newline>-      "          \"RemoteCertTLS\": \"server\"," <newline>-      "          \"RenegSec\": 0," <newline>-      "          \"ServerPollTimeout\": 10," <newline>-      "          \"StaticChallenge\": \"My static challenge\"," <newline>-      "          \"TLSAuthContents\": \"" <newline>-      "-----BEGIN OpenVPN Static key V1-----\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>-      "END OpenVPN Static key V1-----\n\"," <newline>-      "          \"TLSRemote\": \"MyOpenVPNServer\"," <newline>-      "          \"SaveCredentials\": false," <newline>-      "          \"ServerCARef\": \"{55ca78f6-0842-4e1b-96a3-09a9e1a26ef5}\"," <newline>-      "          \"ClientCertType\": \"Pattern\"," <newline>-      "          \"ClientCertPattern\": {" <newline>-      "            \"IssuerRef\": \"{68a2ed90-13a1-4120-a1fe-282508320e18}\"," <newline>-      "            \"EnrollmentURI\": [" <newline>-      "              \"chrome-extension://abc/keygen-cert.html\"" <newline>-      "            ]" <newline>-      "          }," <newline>-      "        }" <newline>-      "      }" <newline>-      "    }"; <newline>- <newline>-const char kCertificateWebAuthority[] = <newline>-      "        {" <newline>-      "            \"GUID\": \"{f998f760-272b-6939-4c2beffe428697ab}\"," <newline>-      "            \"Type\": \"Authority\"," <newline>-      "            \"Trust\": [\"Web\"]," <newline>-      "            \"X509\": \"MIIDojCCAwugAwIBAgIJAKGvi5ZgEWDVMA0GCSqGSIb3D" <newline>-      "QEBBAUAMIGTMRUwEwYDVQQKEwxHb29nbGUsIEluYy4xETAPBgNVBAsTCENocm9tZU9TMS" <newline>-      "IwIAYJKoZIhvcNAQkBFhNnc3BlbmNlckBnb29nbGUuY29tMRowGAYDVQQHExFNb3VudGF" <newline>-      "pbiBWaWV3LCBDQTELMAkGA1UECBMCQ0ExCzAJBgNVBAYTAlVTMQ0wCwYDVQQDEwRsbWFv" <newline>-      "MB4XDTExMDMxNjIzNDcxMFoXDTEyMDMxNTIzNDcxMFowgZMxFTATBgNVBAoTDEdvb2dsZ" <newline>-      "SwgSW5jLjERMA8GA1UECxMIQ2hyb21lT1MxIjAgBgkqhkiG9w0BCQEWE2dzcGVuY2VyQG" <newline>-      "dvb2dsZS5jb20xGjAYBgNVBAcTEU1vdW50YWluIFZpZXcsIENBMQswCQYDVQQIEwJDQTE" <newline>-      "LMAkGA1UEBhMCVVMxDTALBgNVBAMTBGxtYW8wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJ" <newline>-      "AoGBAMDX6BQz2JUzIAVjetiXxDznd2wdqVqVHfNkbSRW+xBywgqUaIXmFEGUol7VzPfme" <newline>-      "FV8o8ok/eFlQB0h6ycqgwwMd0KjtJs2ys/k0F5GuN0G7fsgr+NRnhVgxj21yF6gYTN/8a" <newline>-      "9kscla/svdmp8ekexbALFnghbLBx3CgcqUxT+tAgMBAAGjgfswgfgwDAYDVR0TBAUwAwE" <newline>-      "B/zAdBgNVHQ4EFgQUbYygbSkl4kpjCNuxoezFGupA97UwgcgGA1UdIwSBwDCBvYAUbYyg" <newline>-      "bSkl4kpjCNuxoezFGupA97WhgZmkgZYwgZMxFTATBgNVBAoTDEdvb2dsZSwgSW5jLjERM" <newline>-      "A8GA1UECxMIQ2hyb21lT1MxIjAgBgkqhkiG9w0BCQEWE2dzcGVuY2VyQGdvb2dsZS5jb2" <newline>-      "0xGjAYBgNVBAcTEU1vdW50YWluIFZpZXcsIENBMQswCQYDVQQIEwJDQTELMAkGA1UEBhM" <newline>-      "CVVMxDTALBgNVBAMTBGxtYW+CCQChr4uWYBFg1TANBgkqhkiG9w0BAQQFAAOBgQCDq9wi" <newline>-      "Q4uVuf1CQU3sXfXCy1yqi5m8AsO9FxHvah5/SVFNwKllqTfedpCaWEswJ55YAojW9e+pY" <newline>-      "2Fh3Fo/Y9YkF88KCtLuBjjqDKCRLxF4LycjHODKyQQ7mN/t5AtP9yKOsNvWF+M4IfReg5" <newline>-      "1kohau6FauQx87by5NIRPdkNPvkQ==\"" <newline>-      "        }"; <newline>- <newline>- <newline> class OncNetworkParserTest : public testing::Test { <newline>  public: <newline>   static void SetUpTestCase() { <newline>@@ -136,16 +52,6 @@ class OncNetworkParserTest : public testing::Test { <newline>     EXPECT_EQ(0U, ListCertsInSlot(slot_->os_module_handle()).size()); <newline>   } <newline>-  const base::Value* GetExpectedProperty(const Network* network, <newline>-                                         PropertyIndex index, <newline>-                                         base::Value::Type expected_type); <newline>-  void CheckStringProperty(const Network* network, <newline>-                           PropertyIndex index, <newline>-                           const char* expected); <newline>-  void CheckBooleanProperty(const Network* network, <newline>-                            PropertyIndex index, <newline>-                            bool expected); <newline>- <newline>  protected: <newline>   scoped_refptr<net::CryptoModule> slot_; <newline>   net::CertDatabase cert_db_; <newline>@@ -180,48 +86,6 @@ class OncNetworkParserTest : public testing::Test { <newline>   static base::LazyInstance<ScopedTempDir> temp_db_dir_; <newline> }; <newline>-const base::Value* OncNetworkParserTest::GetExpectedProperty( <newline>-    const Network* network, <newline>-    PropertyIndex index, <newline>-    base::Value::Type expected_type) { <newline>-  const base::Value* value; <newline>-  if (!network->GetProperty(index, &value)) { <newline>-    ADD_FAILURE() << "Property " << index << " does not exist"; <newline>-    return NULL; <newline>-  } <newline>-  if (!value->IsType(expected_type)) { <newline>-    ADD_FAILURE() << "Property " << index << " expected type " <newline>-                  << expected_type << " actual type " <newline>-                  << value->GetType(); <newline>-    return NULL; <newline>-  } <newline>-  return value; <newline>-} <newline>- <newline>-void OncNetworkParserTest::CheckStringProperty(const Network* network, <newline>-                                               PropertyIndex index, <newline>-                                               const char* expected) { <newline>-  const base::Value* value = <newline>-    GetExpectedProperty(network, index, base::Value::TYPE_STRING); <newline>-  if (!value) <newline>-    return; <newline>-  std::string string_value; <newline>-  value->GetAsString(&string_value); <newline>-  EXPECT_EQ(expected, string_value); <newline>-} <newline>- <newline>-void OncNetworkParserTest::CheckBooleanProperty(const Network* network, <newline>-                                                PropertyIndex index, <newline>-                                                bool expected) { <newline>-  const base::Value* value = <newline>-    GetExpectedProperty(network, index, base::Value::TYPE_BOOLEAN); <newline>-  if (!value) <newline>-    return; <newline>-  bool bool_value = false; <newline>-  value->GetAsBoolean(&bool_value); <newline>-  EXPECT_EQ(expected, bool_value); <newline>-} <newline>- <newline> // static <newline> base::LazyInstance<ScopedTempDir> OncNetworkParserTest::temp_db_dir_ = <newline>     LAZY_INSTANCE_INITIALIZER; <newline>@@ -233,7 +97,7 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifi1) { <newline>       "    \"GUID\": \"{485d6076-dd44-6b6d-69787465725f5045}\"," <newline>       "    \"Type\": \"WiFi\"," <newline>       "    \"WiFi\": {" <newline>-      "      \"Security\": \"WEP-PSK\"," <newline>+      "      \"Security\": \"WEP\"," <newline>       "      \"SSID\": \"ssid\"," <newline>       "      \"Passphrase\": \"pass\"," <newline>       "    }" <newline>@@ -244,18 +108,15 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifi1) { <newline>   EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>   EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>   EXPECT_FALSE(parser.ParseNetwork(1)); <newline>-  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>-  ASSERT_TRUE(network.get()); <newline>+  Network* network = parser.ParseNetwork(0); <newline>+  ASSERT_TRUE(network); <newline>   EXPECT_EQ(network->type(), chromeos::TYPE_WIFI); <newline>-  WifiNetwork* wifi = static_cast<WifiNetwork*>(network.get()); <newline>+  WifiNetwork* wifi = static_cast<WifiNetwork*>(network); <newline>   EXPECT_EQ(wifi->encryption(), chromeos::SECURITY_WEP); <newline>-  CheckStringProperty(wifi, PROPERTY_INDEX_SECURITY, flimflam::kSecurityWep); <newline>   EXPECT_EQ(wifi->name(), "ssid"); <newline>-  CheckStringProperty(wifi, PROPERTY_INDEX_SSID, "ssid"); <newline>   EXPECT_EQ(wifi->auto_connect(), false); <newline>   EXPECT_EQ(wifi->passphrase(), "pass"); <newline>-  CheckStringProperty(wifi, PROPERTY_INDEX_PASSPHRASE, "pass"); <newline> } <newline> TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP1) { <newline>@@ -265,7 +126,7 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP1) { <newline>       "    \"GUID\": \"{485d6076-dd44-6b6d-69787465725f5045}\"," <newline>       "    \"Type\": \"WiFi\"," <newline>       "    \"WiFi\": {" <newline>-      "      \"Security\": \"WPA-EAP\"," <newline>+      "      \"Security\": \"WPA2\"," <newline>       "      \"SSID\": \"ssid\"," <newline>       "      \"AutoConnect\": true," <newline>       "      \"EAP\": {" <newline>@@ -280,19 +141,15 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP1) { <newline>   EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>   EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>   EXPECT_FALSE(parser.ParseNetwork(1)); <newline>-  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>-  ASSERT_TRUE(network.get()); <newline>+  Network* network = parser.ParseNetwork(0); <newline>+  ASSERT_TRUE(network); <newline>   EXPECT_EQ(network->type(), chromeos::TYPE_WIFI); <newline>-  WifiNetwork* wifi = static_cast<WifiNetwork*>(network.get()); <newline>+  WifiNetwork* wifi = static_cast<WifiNetwork*>(network); <newline>   EXPECT_EQ(wifi->encryption(), chromeos::SECURITY_8021X); <newline>-  CheckStringProperty(wifi, PROPERTY_INDEX_SECURITY, flimflam::kSecurity8021x); <newline>   EXPECT_EQ(wifi->name(), "ssid"); <newline>   EXPECT_EQ(wifi->auto_connect(), true); <newline>-  CheckBooleanProperty(wifi, PROPERTY_INDEX_AUTO_CONNECT, true); <newline>   EXPECT_EQ(wifi->eap_method(), EAP_METHOD_PEAP); <newline>-  CheckStringProperty(wifi, PROPERTY_INDEX_EAP_METHOD, <newline>-                      flimflam::kEapMethodPEAP); <newline>   EXPECT_EQ(wifi->eap_use_system_cas(), false); <newline> } <newline>@@ -303,7 +160,7 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP2) { <newline>       "    \"GUID\": \"{485d6076-dd44-6b6d-69787465725f5045}\"," <newline>       "    \"Type\": \"WiFi\"," <newline>       "    \"WiFi\": {" <newline>-      "      \"Security\": \"WPA-EAP\"," <newline>+      "      \"Security\": \"WPA2\"," <newline>       "      \"SSID\": \"ssid\"," <newline>       "      \"AutoConnect\": false," <newline>       "      \"EAP\": {" <newline>@@ -320,130 +177,19 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP2) { <newline>   EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>   EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>   EXPECT_FALSE(parser.ParseNetwork(1)); <newline>-  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>-  ASSERT_TRUE(network.get()); <newline>+  Network* network = parser.ParseNetwork(0); <newline>+  ASSERT_TRUE(network); <newline>   EXPECT_EQ(network->type(), chromeos::TYPE_WIFI); <newline>-  WifiNetwork* wifi = static_cast<WifiNetwork*>(network.get()); <newline>+  WifiNetwork* wifi = static_cast<WifiNetwork*>(network); <newline>   EXPECT_EQ(wifi->encryption(), chromeos::SECURITY_8021X); <newline>   EXPECT_EQ(wifi->name(), "ssid"); <newline>   EXPECT_EQ(wifi->auto_connect(), false); <newline>   EXPECT_EQ(wifi->eap_method(), EAP_METHOD_LEAP); <newline>   EXPECT_EQ(wifi->eap_use_system_cas(), true); <newline>   EXPECT_EQ(wifi->eap_identity(), "user"); <newline>-  CheckStringProperty(wifi, PROPERTY_INDEX_EAP_IDENTITY, "user"); <newline>   EXPECT_EQ(wifi->eap_passphrase(), "pass"); <newline>-  CheckStringProperty(wifi, PROPERTY_INDEX_EAP_PASSWORD, "pass"); <newline>   EXPECT_EQ(wifi->eap_anonymous_identity(), "anon"); <newline>-  CheckStringProperty(wifi, PROPERTY_INDEX_EAP_ANONYMOUS_IDENTITY, "anon"); <newline>-} <newline>- <newline>-TEST_F(OncNetworkParserTest, TestCreateNetworkOpenVPN) { <newline>-  std::string test_blob(std::string( <newline>-      "{" <newline>-      "  \"NetworkConfigurations\": [") + <newline>-      std::string(kNetworkConfigurationOpenVPN) + std::string( <newline>-      "  ]}")); <newline>-  OncNetworkParser parser(test_blob); <newline>- <newline>-  EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>-  EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>-  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>-  ASSERT_TRUE(network.get() != NULL); <newline>- <newline>-  EXPECT_EQ(network->type(), chromeos::TYPE_VPN); <newline>-  CheckStringProperty(network.get(), PROPERTY_INDEX_TYPE, flimflam::kTypeVPN); <newline>-  VirtualNetwork* vpn = static_cast<VirtualNetwork*>(network.get()); <newline>-  EXPECT_EQ("MyVPN", vpn->name()); <newline>-  EXPECT_EQ(PROVIDER_TYPE_OPEN_VPN, vpn->provider_type()); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_PROVIDER_TYPE, <newline>-                      flimflam::kProviderOpenVpn); <newline>-  EXPECT_EQ("vpn.acme.org", vpn->server_hostname()); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_PROVIDER_HOST, "vpn.acme.org"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_VPN_DOMAIN, ""); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_AUTHRETRY, "interact"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_CACERT, <newline>-                      "{55ca78f6-0842-4e1b-96a3-09a9e1a26ef5}"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_COMPLZO, "true"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_KEYDIRECTION, "1"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_PORT, "443"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_PROTO, "udp"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_PUSHPEERINFO, "true"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_REMOTECERTEKU, <newline>-                      "TLS Web Server Authentication"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_REMOTECERTKU, "eo"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_REMOTECERTTLS, "server"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_RENEGSEC, "0"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_SERVERPOLLTIMEOUT, "10"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_STATICCHALLENGE, <newline>-                      "My static challenge"); <newline>-  // Check the default properties are set. <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_AUTHUSERPASS, ""); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_MGMT_ENABLE, ""); <newline>- <newline>-  std::string tls_auth_contents; <newline>-  const Value* tls_auth_value = <newline>-    GetExpectedProperty(vpn, PROPERTY_INDEX_OPEN_VPN_TLSAUTHCONTENTS, <newline>-                        base::Value::TYPE_STRING); <newline>-  if (tls_auth_value != NULL) { <newline>-    tls_auth_value->GetAsString(&tls_auth_contents); <newline>-    EXPECT_NE(std::string::npos, <newline>-              tls_auth_contents.find("END OpenVPN Static key V1-----\n")); <newline>-    EXPECT_NE(std::string::npos, <newline>-              tls_auth_contents.find( <newline>-                  "-----BEGIN OpenVPN Static key V1-----\n")); <newline>-  } <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_TLSREMOTE, <newline>-                      "MyOpenVPNServer"); <newline>-  EXPECT_FALSE(vpn->save_credentials()); <newline>-  EXPECT_EQ("{55ca78f6-0842-4e1b-96a3-09a9e1a26ef5}", vpn->ca_cert_nss()); <newline>-} <newline>- <newline>-TEST_F(OncNetworkParserTest, TestCreateNetworkL2TPIPsec) { <newline>-  std::string test_blob( <newline>-      "{" <newline>-      "  \"NetworkConfigurations\": [" <newline>-      "    {" <newline>-      "      \"GUID\": \"{926b84e4-f2c5-0972-b9bbb8f44c4316f5}\"," <newline>-      "      \"Name\": \"MyL2TPVPN\"," <newline>-      "      \"Type\": \"VPN\"," <newline>-      "      \"VPN\": {" <newline>-      "        \"Host\": \"l2tp.acme.org\"," <newline>-      "        \"Type\": \"L2TP-IPsec\"," <newline>-      "        \"IPsec\": {" <newline>-      "          \"IKEVersion\": 1," <newline>-      "          \"AuthenticationType\": \"PSK\"," <newline>-      "          \"PSK\": \"passphrase\"" <newline>-      "        }," <newline>-      "        \"L2TP\": {" <newline>-      "          \"SaveCredentials\": false" <newline>-      "        }" <newline>-      "      }" <newline>-      "    }" <newline>-      "  ]," <newline>-      "  \"Certificates\": []" <newline>-      "}"); <newline>-  OncNetworkParser parser(test_blob); <newline>- <newline>-  EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>-  EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>-  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>-  ASSERT_TRUE(network != NULL); <newline>- <newline>-  EXPECT_EQ(network->type(), chromeos::TYPE_VPN); <newline>-  CheckStringProperty(network.get(), PROPERTY_INDEX_TYPE, flimflam::kTypeVPN); <newline>-  VirtualNetwork* vpn = static_cast<VirtualNetwork*>(network.get()); <newline>-  EXPECT_EQ("MyL2TPVPN", vpn->name()); <newline>-  EXPECT_EQ(PROVIDER_TYPE_L2TP_IPSEC_PSK, vpn->provider_type()); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_PROVIDER_TYPE, <newline>-                      flimflam::kProviderL2tpIpsec); <newline>-  EXPECT_EQ("l2tp.acme.org", vpn->server_hostname()); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_PROVIDER_HOST, "l2tp.acme.org"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_VPN_DOMAIN, ""); <newline>-  EXPECT_EQ("passphrase", vpn->psk_passphrase()); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_L2TPIPSEC_PSK, "passphrase"); <newline>-  CheckStringProperty(vpn, PROPERTY_INDEX_IPSEC_IKEVERSION, "1"); <newline>-  EXPECT_FALSE(vpn->save_credentials()); <newline> } <newline> TEST_F(OncNetworkParserTest, TestAddServerCertificate) { <newline>@@ -476,11 +222,34 @@ TEST_F(OncNetworkParserTest, TestAddServerCertificate) { <newline> } <newline> TEST_F(OncNetworkParserTest, TestAddAuthorityCertificate) { <newline>-  const std::string test_blob(std::string("{" <newline>-      "    \"Certificates\": [") + <newline>-      std::string(kCertificateWebAuthority) + std::string( <newline>+  const std::string test_blob("{" <newline>+      "    \"Certificates\": [" <newline>+      "        {" <newline>+      "            \"GUID\": \"{f998f760-272b-6939-4c2beffe428697ab}\"," <newline>+      "            \"Type\": \"Authority\"," <newline>+      "            \"Trust\": [\"Web\"]," <newline>+      "            \"X509\": \"MIIDojCCAwugAwIBAgIJAKGvi5ZgEWDVMA0GCSqGSIb3D" <newline>+      "QEBBAUAMIGTMRUwEwYDVQQKEwxHb29nbGUsIEluYy4xETAPBgNVBAsTCENocm9tZU9TMS" <newline>+      "IwIAYJKoZIhvcNAQkBFhNnc3BlbmNlckBnb29nbGUuY29tMRowGAYDVQQHExFNb3VudGF" <newline>+      "pbiBWaWV3LCBDQTELMAkGA1UECBMCQ0ExCzAJBgNVBAYTAlVTMQ0wCwYDVQQDEwRsbWFv" <newline>+      "MB4XDTExMDMxNjIzNDcxMFoXDTEyMDMxNTIzNDcxMFowgZMxFTATBgNVBAoTDEdvb2dsZ" <newline>+      "SwgSW5jLjERMA8GA1UECxMIQ2hyb21lT1MxIjAgBgkqhkiG9w0BCQEWE2dzcGVuY2VyQG" <newline>+      "dvb2dsZS5jb20xGjAYBgNVBAcTEU1vdW50YWluIFZpZXcsIENBMQswCQYDVQQIEwJDQTE" <newline>+      "LMAkGA1UEBhMCVVMxDTALBgNVBAMTBGxtYW8wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJ" <newline>+      "AoGBAMDX6BQz2JUzIAVjetiXxDznd2wdqVqVHfNkbSRW+xBywgqUaIXmFEGUol7VzPfme" <newline>+      "FV8o8ok/eFlQB0h6ycqgwwMd0KjtJs2ys/k0F5GuN0G7fsgr+NRnhVgxj21yF6gYTN/8a" <newline>+      "9kscla/svdmp8ekexbALFnghbLBx3CgcqUxT+tAgMBAAGjgfswgfgwDAYDVR0TBAUwAwE" <newline>+      "B/zAdBgNVHQ4EFgQUbYygbSkl4kpjCNuxoezFGupA97UwgcgGA1UdIwSBwDCBvYAUbYyg" <newline>+      "bSkl4kpjCNuxoezFGupA97WhgZmkgZYwgZMxFTATBgNVBAoTDEdvb2dsZSwgSW5jLjERM" <newline>+      "A8GA1UECxMIQ2hyb21lT1MxIjAgBgkqhkiG9w0BCQEWE2dzcGVuY2VyQGdvb2dsZS5jb2" <newline>+      "0xGjAYBgNVBAcTEU1vdW50YWluIFZpZXcsIENBMQswCQYDVQQIEwJDQTELMAkGA1UEBhM" <newline>+      "CVVMxDTALBgNVBAMTBGxtYW+CCQChr4uWYBFg1TANBgkqhkiG9w0BAQQFAAOBgQCDq9wi" <newline>+      "Q4uVuf1CQU3sXfXCy1yqi5m8AsO9FxHvah5/SVFNwKllqTfedpCaWEswJ55YAojW9e+pY" <newline>+      "2Fh3Fo/Y9YkF88KCtLuBjjqDKCRLxF4LycjHODKyQQ7mN/t5AtP9yKOsNvWF+M4IfReg5" <newline>+      "1kohau6FauQx87by5NIRPdkNPvkQ==\"" <newline>+      "        }" <newline>       "    ]," <newline>-      "}")); <newline>+      "}"); <newline>   OncNetworkParser parser(test_blob); <newline>   EXPECT_EQ(1, parser.GetCertificatesSize()); <newline>@@ -535,27 +304,4 @@ TEST_F(OncNetworkParserTest, TestAddClientCertificate) { <newline>   EXPECT_TRUE(parser.ParseCertificate(0)); <newline> } <newline>-TEST_F(OncNetworkParserTest, TestNetworkAndCertificate) { <newline>-  std::string test_blob(std::string( <newline>-      "{" <newline>-      "  \"NetworkConfigurations\": [") + <newline>-      std::string(kNetworkConfigurationOpenVPN) + std::string( <newline>-      "  ]," <newline>-      "  \"Certificates\": [") + <newline>-      std::string(kCertificateWebAuthority) + std::string( <newline>-      "  ]," <newline>-      "}")); <newline>-  OncNetworkParser parser(test_blob); <newline>- <newline>-  EXPECT_EQ(1, parser.GetCertificatesSize()); <newline>-  EXPECT_TRUE(parser.ParseCertificate(0)); <newline>- <newline>-  EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>-  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>-  ASSERT_TRUE(network.get() != NULL); <newline>-  EXPECT_EQ(network->type(), chromeos::TYPE_VPN); <newline>-  VirtualNetwork* vpn = static_cast<VirtualNetwork*>(network.get()); <newline>-  EXPECT_EQ(PROVIDER_TYPE_OPEN_VPN, vpn->provider_type()); <newline>-} <newline>- <newline> }  // namespace chromeos																								
Chromium	1	2	b812e7f4921ec552f3469187a068419a7bbf569	kmixter@chromium.org <kmixter@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Dec 6 06:14:18 2011 +0000	Add ONC VPN support for OpenVPN and L2TP/IPsec VPNs Also simplifies some of the parsing code, adds type validation, brings the WiFi security parsing up to spec, and improves the unit tests for wifi so that they all verify the property_map_ fields (the only ones actually used to configure the network).  Also fixed a general parser problem where certificates wouldn't be parsed if network configs were. TEST=manual import of ONC file with openvpn network, unit_tests	chromium-os:23476 chromium-os:23477		http://codereview.chromium.org/8759014	svn://svn.chromium.org/chrome/trunk/src@113120 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/chromeos/cros/onc_network_parser_unittest.cc b/chrome/browser/chromeos/cros/onc_network_parser_unittest.cc <newline>index 24e656b..b2a2486 100644 <newline>--- a/chrome/browser/chromeos/cros/onc_network_parser_unittest.cc <newline>+++ b/chrome/browser/chromeos/cros/onc_network_parser_unittest.cc <newline>@@ -16,9 +16,93 @@ <newline> #include "net/base/crypto_module.h" <newline> #include "net/base/x509_certificate.h" <newline> #include "testing/gtest/include/gtest/gtest.h" <newline>+#include "third_party/cros_system_api/dbus/service_constants.h" <newline> namespace chromeos { <newline>+const char kNetworkConfigurationOpenVPN[] = <newline>+      "    {" <newline>+      "      \"GUID\": \"{408290ea-9299-4757-ab04-8957d55f0f13}\"," <newline>+      "      \"Type\": \"VPN\"," <newline>+      "      \"Name\": \"MyVPN\"," <newline>+      "      \"VPN\": {" <newline>+      "        \"Host\": \"vpn.acme.org\"," <newline>+      "        \"Type\": \"OpenVPN\"," <newline>+      "        \"OpenVPN\": {" <newline>+      "          \"AuthRetry\": \"interact\"," <newline>+      "          \"CompLZO\": \"true\"," <newline>+      "          \"KeyDirection\": \"1\"," <newline>+      "          \"Port\": 443," <newline>+      "          \"Proto\": \"udp\"," <newline>+      "          \"PushPeerInfo\": true," <newline>+      "          \"RemoteCertEKU\": \"TLS Web Server Authentication\"," <newline>+      "          \"RemoteCertKU\": [" <newline>+      "            \"eo\"" <newline>+      "          ]," <newline>+      "          \"RemoteCertTLS\": \"server\"," <newline>+      "          \"RenegSec\": 0," <newline>+      "          \"ServerPollTimeout\": 10," <newline>+      "          \"StaticChallenge\": \"My static challenge\"," <newline>+      "          \"TLSAuthContents\": \"" <newline>+      "-----BEGIN OpenVPN Static key V1-----\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "END OpenVPN Static key V1-----\n\"," <newline>+      "          \"TLSRemote\": \"MyOpenVPNServer\"," <newline>+      "          \"SaveCredentials\": false," <newline>+      "          \"ServerCARef\": \"{55ca78f6-0842-4e1b-96a3-09a9e1a26ef5}\"," <newline>+      "          \"ClientCertType\": \"Pattern\"," <newline>+      "          \"ClientCertPattern\": {" <newline>+      "            \"IssuerRef\": \"{68a2ed90-13a1-4120-a1fe-282508320e18}\"," <newline>+      "            \"EnrollmentURI\": [" <newline>+      "              \"chrome-extension://abc/keygen-cert.html\"" <newline>+      "            ]" <newline>+      "          }," <newline>+      "        }" <newline>+      "      }" <newline>+      "    }"; <newline>+ <newline>+const char kCertificateWebAuthority[] = <newline>+      "        {" <newline>+      "            \"GUID\": \"{f998f760-272b-6939-4c2beffe428697ab}\"," <newline>+      "            \"Type\": \"Authority\"," <newline>+      "            \"Trust\": [\"Web\"]," <newline>+      "            \"X509\": \"MIIDojCCAwugAwIBAgIJAKGvi5ZgEWDVMA0GCSqGSIb3D" <newline>+      "QEBBAUAMIGTMRUwEwYDVQQKEwxHb29nbGUsIEluYy4xETAPBgNVBAsTCENocm9tZU9TMS" <newline>+      "IwIAYJKoZIhvcNAQkBFhNnc3BlbmNlckBnb29nbGUuY29tMRowGAYDVQQHExFNb3VudGF" <newline>+      "pbiBWaWV3LCBDQTELMAkGA1UECBMCQ0ExCzAJBgNVBAYTAlVTMQ0wCwYDVQQDEwRsbWFv" <newline>+      "MB4XDTExMDMxNjIzNDcxMFoXDTEyMDMxNTIzNDcxMFowgZMxFTATBgNVBAoTDEdvb2dsZ" <newline>+      "SwgSW5jLjERMA8GA1UECxMIQ2hyb21lT1MxIjAgBgkqhkiG9w0BCQEWE2dzcGVuY2VyQG" <newline>+      "dvb2dsZS5jb20xGjAYBgNVBAcTEU1vdW50YWluIFZpZXcsIENBMQswCQYDVQQIEwJDQTE" <newline>+      "LMAkGA1UEBhMCVVMxDTALBgNVBAMTBGxtYW8wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJ" <newline>+      "AoGBAMDX6BQz2JUzIAVjetiXxDznd2wdqVqVHfNkbSRW+xBywgqUaIXmFEGUol7VzPfme" <newline>+      "FV8o8ok/eFlQB0h6ycqgwwMd0KjtJs2ys/k0F5GuN0G7fsgr+NRnhVgxj21yF6gYTN/8a" <newline>+      "9kscla/svdmp8ekexbALFnghbLBx3CgcqUxT+tAgMBAAGjgfswgfgwDAYDVR0TBAUwAwE" <newline>+      "B/zAdBgNVHQ4EFgQUbYygbSkl4kpjCNuxoezFGupA97UwgcgGA1UdIwSBwDCBvYAUbYyg" <newline>+      "bSkl4kpjCNuxoezFGupA97WhgZmkgZYwgZMxFTATBgNVBAoTDEdvb2dsZSwgSW5jLjERM" <newline>+      "A8GA1UECxMIQ2hyb21lT1MxIjAgBgkqhkiG9w0BCQEWE2dzcGVuY2VyQGdvb2dsZS5jb2" <newline>+      "0xGjAYBgNVBAcTEU1vdW50YWluIFZpZXcsIENBMQswCQYDVQQIEwJDQTELMAkGA1UEBhM" <newline>+      "CVVMxDTALBgNVBAMTBGxtYW+CCQChr4uWYBFg1TANBgkqhkiG9w0BAQQFAAOBgQCDq9wi" <newline>+      "Q4uVuf1CQU3sXfXCy1yqi5m8AsO9FxHvah5/SVFNwKllqTfedpCaWEswJ55YAojW9e+pY" <newline>+      "2Fh3Fo/Y9YkF88KCtLuBjjqDKCRLxF4LycjHODKyQQ7mN/t5AtP9yKOsNvWF+M4IfReg5" <newline>+      "1kohau6FauQx87by5NIRPdkNPvkQ==\"" <newline>+      "        }"; <newline>+ <newline>+ <newline> class OncNetworkParserTest : public testing::Test { <newline>  public: <newline>   static void SetUpTestCase() { <newline>@@ -52,6 +136,16 @@ class OncNetworkParserTest : public testing::Test { <newline>     EXPECT_EQ(0U, ListCertsInSlot(slot_->os_module_handle()).size()); <newline>   } <newline>+  const base::Value* GetExpectedProperty(const Network* network, <newline>+                                         PropertyIndex index, <newline>+                                         base::Value::Type expected_type); <newline>+  void CheckStringProperty(const Network* network, <newline>+                           PropertyIndex index, <newline>+                           const char* expected); <newline>+  void CheckBooleanProperty(const Network* network, <newline>+                            PropertyIndex index, <newline>+                            bool expected); <newline>+ <newline>  protected: <newline>   scoped_refptr<net::CryptoModule> slot_; <newline>   net::CertDatabase cert_db_; <newline>@@ -86,6 +180,48 @@ class OncNetworkParserTest : public testing::Test { <newline>   static base::LazyInstance<ScopedTempDir> temp_db_dir_; <newline> }; <newline>+const base::Value* OncNetworkParserTest::GetExpectedProperty( <newline>+    const Network* network, <newline>+    PropertyIndex index, <newline>+    base::Value::Type expected_type) { <newline>+  const base::Value* value; <newline>+  if (!network->GetProperty(index, &value)) { <newline>+    ADD_FAILURE() << "Property " << index << " does not exist"; <newline>+    return NULL; <newline>+  } <newline>+  if (!value->IsType(expected_type)) { <newline>+    ADD_FAILURE() << "Property " << index << " expected type " <newline>+                  << expected_type << " actual type " <newline>+                  << value->GetType(); <newline>+    return NULL; <newline>+  } <newline>+  return value; <newline>+} <newline>+ <newline>+void OncNetworkParserTest::CheckStringProperty(const Network* network, <newline>+                                               PropertyIndex index, <newline>+                                               const char* expected) { <newline>+  const base::Value* value = <newline>+    GetExpectedProperty(network, index, base::Value::TYPE_STRING); <newline>+  if (!value) <newline>+    return; <newline>+  std::string string_value; <newline>+  value->GetAsString(&string_value); <newline>+  EXPECT_EQ(expected, string_value); <newline>+} <newline>+ <newline>+void OncNetworkParserTest::CheckBooleanProperty(const Network* network, <newline>+                                                PropertyIndex index, <newline>+                                                bool expected) { <newline>+  const base::Value* value = <newline>+    GetExpectedProperty(network, index, base::Value::TYPE_BOOLEAN); <newline>+  if (!value) <newline>+    return; <newline>+  bool bool_value = false; <newline>+  value->GetAsBoolean(&bool_value); <newline>+  EXPECT_EQ(expected, bool_value); <newline>+} <newline>+ <newline> // static <newline> base::LazyInstance<ScopedTempDir> OncNetworkParserTest::temp_db_dir_ = <newline>     LAZY_INSTANCE_INITIALIZER; <newline>@@ -97,7 +233,7 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifi1) { <newline>       "    \"GUID\": \"{485d6076-dd44-6b6d-69787465725f5045}\"," <newline>       "    \"Type\": \"WiFi\"," <newline>       "    \"WiFi\": {" <newline>-      "      \"Security\": \"WEP\"," <newline>+      "      \"Security\": \"WEP-PSK\"," <newline>       "      \"SSID\": \"ssid\"," <newline>       "      \"Passphrase\": \"pass\"," <newline>       "    }" <newline>@@ -108,15 +244,18 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifi1) { <newline>   EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>   EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>   EXPECT_FALSE(parser.ParseNetwork(1)); <newline>-  Network* network = parser.ParseNetwork(0); <newline>-  ASSERT_TRUE(network); <newline>+  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>+  ASSERT_TRUE(network.get()); <newline>   EXPECT_EQ(network->type(), chromeos::TYPE_WIFI); <newline>-  WifiNetwork* wifi = static_cast<WifiNetwork*>(network); <newline>+  WifiNetwork* wifi = static_cast<WifiNetwork*>(network.get()); <newline>   EXPECT_EQ(wifi->encryption(), chromeos::SECURITY_WEP); <newline>+  CheckStringProperty(wifi, PROPERTY_INDEX_SECURITY, flimflam::kSecurityWep); <newline>   EXPECT_EQ(wifi->name(), "ssid"); <newline>+  CheckStringProperty(wifi, PROPERTY_INDEX_SSID, "ssid"); <newline>   EXPECT_EQ(wifi->auto_connect(), false); <newline>   EXPECT_EQ(wifi->passphrase(), "pass"); <newline>+  CheckStringProperty(wifi, PROPERTY_INDEX_PASSPHRASE, "pass"); <newline> } <newline> TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP1) { <newline>@@ -126,7 +265,7 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP1) { <newline>       "    \"GUID\": \"{485d6076-dd44-6b6d-69787465725f5045}\"," <newline>       "    \"Type\": \"WiFi\"," <newline>       "    \"WiFi\": {" <newline>-      "      \"Security\": \"WPA2\"," <newline>+      "      \"Security\": \"WPA-EAP\"," <newline>       "      \"SSID\": \"ssid\"," <newline>       "      \"AutoConnect\": true," <newline>       "      \"EAP\": {" <newline>@@ -141,15 +280,19 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP1) { <newline>   EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>   EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>   EXPECT_FALSE(parser.ParseNetwork(1)); <newline>-  Network* network = parser.ParseNetwork(0); <newline>-  ASSERT_TRUE(network); <newline>+  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>+  ASSERT_TRUE(network.get()); <newline>   EXPECT_EQ(network->type(), chromeos::TYPE_WIFI); <newline>-  WifiNetwork* wifi = static_cast<WifiNetwork*>(network); <newline>+  WifiNetwork* wifi = static_cast<WifiNetwork*>(network.get()); <newline>   EXPECT_EQ(wifi->encryption(), chromeos::SECURITY_8021X); <newline>+  CheckStringProperty(wifi, PROPERTY_INDEX_SECURITY, flimflam::kSecurity8021x); <newline>   EXPECT_EQ(wifi->name(), "ssid"); <newline>   EXPECT_EQ(wifi->auto_connect(), true); <newline>+  CheckBooleanProperty(wifi, PROPERTY_INDEX_AUTO_CONNECT, true); <newline>   EXPECT_EQ(wifi->eap_method(), EAP_METHOD_PEAP); <newline>+  CheckStringProperty(wifi, PROPERTY_INDEX_EAP_METHOD, <newline>+                      flimflam::kEapMethodPEAP); <newline>   EXPECT_EQ(wifi->eap_use_system_cas(), false); <newline> } <newline>@@ -160,7 +303,7 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP2) { <newline>       "    \"GUID\": \"{485d6076-dd44-6b6d-69787465725f5045}\"," <newline>       "    \"Type\": \"WiFi\"," <newline>       "    \"WiFi\": {" <newline>-      "      \"Security\": \"WPA2\"," <newline>+      "      \"Security\": \"WPA-EAP\"," <newline>       "      \"SSID\": \"ssid\"," <newline>       "      \"AutoConnect\": false," <newline>       "      \"EAP\": {" <newline>@@ -177,19 +320,130 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP2) { <newline>   EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>   EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>   EXPECT_FALSE(parser.ParseNetwork(1)); <newline>-  Network* network = parser.ParseNetwork(0); <newline>-  ASSERT_TRUE(network); <newline>+  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>+  ASSERT_TRUE(network.get()); <newline>   EXPECT_EQ(network->type(), chromeos::TYPE_WIFI); <newline>-  WifiNetwork* wifi = static_cast<WifiNetwork*>(network); <newline>+  WifiNetwork* wifi = static_cast<WifiNetwork*>(network.get()); <newline>   EXPECT_EQ(wifi->encryption(), chromeos::SECURITY_8021X); <newline>   EXPECT_EQ(wifi->name(), "ssid"); <newline>   EXPECT_EQ(wifi->auto_connect(), false); <newline>   EXPECT_EQ(wifi->eap_method(), EAP_METHOD_LEAP); <newline>   EXPECT_EQ(wifi->eap_use_system_cas(), true); <newline>   EXPECT_EQ(wifi->eap_identity(), "user"); <newline>+  CheckStringProperty(wifi, PROPERTY_INDEX_EAP_IDENTITY, "user"); <newline>   EXPECT_EQ(wifi->eap_passphrase(), "pass"); <newline>+  CheckStringProperty(wifi, PROPERTY_INDEX_EAP_PASSWORD, "pass"); <newline>   EXPECT_EQ(wifi->eap_anonymous_identity(), "anon"); <newline>+  CheckStringProperty(wifi, PROPERTY_INDEX_EAP_ANONYMOUS_IDENTITY, "anon"); <newline>+} <newline>+ <newline>+TEST_F(OncNetworkParserTest, TestCreateNetworkOpenVPN) { <newline>+  std::string test_blob(std::string( <newline>+      "{" <newline>+      "  \"NetworkConfigurations\": [") + <newline>+      std::string(kNetworkConfigurationOpenVPN) + std::string( <newline>+      "  ]}")); <newline>+  OncNetworkParser parser(test_blob); <newline>+ <newline>+  EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>+  EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>+  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>+  ASSERT_TRUE(network.get() != NULL); <newline>+ <newline>+  EXPECT_EQ(network->type(), chromeos::TYPE_VPN); <newline>+  CheckStringProperty(network.get(), PROPERTY_INDEX_TYPE, flimflam::kTypeVPN); <newline>+  VirtualNetwork* vpn = static_cast<VirtualNetwork*>(network.get()); <newline>+  EXPECT_EQ("MyVPN", vpn->name()); <newline>+  EXPECT_EQ(PROVIDER_TYPE_OPEN_VPN, vpn->provider_type()); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_PROVIDER_TYPE, <newline>+                      flimflam::kProviderOpenVpn); <newline>+  EXPECT_EQ("vpn.acme.org", vpn->server_hostname()); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_PROVIDER_HOST, "vpn.acme.org"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_VPN_DOMAIN, ""); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_AUTHRETRY, "interact"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_CACERT, <newline>+                      "{55ca78f6-0842-4e1b-96a3-09a9e1a26ef5}"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_COMPLZO, "true"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_KEYDIRECTION, "1"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_PORT, "443"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_PROTO, "udp"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_PUSHPEERINFO, "true"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_REMOTECERTEKU, <newline>+                      "TLS Web Server Authentication"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_REMOTECERTKU, "eo"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_REMOTECERTTLS, "server"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_RENEGSEC, "0"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_SERVERPOLLTIMEOUT, "10"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_STATICCHALLENGE, <newline>+                      "My static challenge"); <newline>+  // Check the default properties are set. <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_AUTHUSERPASS, ""); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_MGMT_ENABLE, ""); <newline>+ <newline>+  std::string tls_auth_contents; <newline>+  const Value* tls_auth_value = <newline>+    GetExpectedProperty(vpn, PROPERTY_INDEX_OPEN_VPN_TLSAUTHCONTENTS, <newline>+                        base::Value::TYPE_STRING); <newline>+  if (tls_auth_value != NULL) { <newline>+    tls_auth_value->GetAsString(&tls_auth_contents); <newline>+    EXPECT_NE(std::string::npos, <newline>+              tls_auth_contents.find("END OpenVPN Static key V1-----\n")); <newline>+    EXPECT_NE(std::string::npos, <newline>+              tls_auth_contents.find( <newline>+                  "-----BEGIN OpenVPN Static key V1-----\n")); <newline>+  } <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_TLSREMOTE, <newline>+                      "MyOpenVPNServer"); <newline>+  EXPECT_FALSE(vpn->save_credentials()); <newline>+  EXPECT_EQ("{55ca78f6-0842-4e1b-96a3-09a9e1a26ef5}", vpn->ca_cert_nss()); <newline>+} <newline>+ <newline>+TEST_F(OncNetworkParserTest, TestCreateNetworkL2TPIPsec) { <newline>+  std::string test_blob( <newline>+      "{" <newline>+      "  \"NetworkConfigurations\": [" <newline>+      "    {" <newline>+      "      \"GUID\": \"{926b84e4-f2c5-0972-b9bbb8f44c4316f5}\"," <newline>+      "      \"Name\": \"MyL2TPVPN\"," <newline>+      "      \"Type\": \"VPN\"," <newline>+      "      \"VPN\": {" <newline>+      "        \"Host\": \"l2tp.acme.org\"," <newline>+      "        \"Type\": \"L2TP-IPsec\"," <newline>+      "        \"IPsec\": {" <newline>+      "          \"IKEVersion\": 1," <newline>+      "          \"AuthenticationType\": \"PSK\"," <newline>+      "          \"PSK\": \"passphrase\"" <newline>+      "        }," <newline>+      "        \"L2TP\": {" <newline>+      "          \"SaveCredentials\": false" <newline>+      "        }" <newline>+      "      }" <newline>+      "    }" <newline>+      "  ]," <newline>+      "  \"Certificates\": []" <newline>+      "}"); <newline>+  OncNetworkParser parser(test_blob); <newline>+ <newline>+  EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>+  EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>+  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>+  ASSERT_TRUE(network != NULL); <newline>+ <newline>+  EXPECT_EQ(network->type(), chromeos::TYPE_VPN); <newline>+  CheckStringProperty(network.get(), PROPERTY_INDEX_TYPE, flimflam::kTypeVPN); <newline>+  VirtualNetwork* vpn = static_cast<VirtualNetwork*>(network.get()); <newline>+  EXPECT_EQ("MyL2TPVPN", vpn->name()); <newline>+  EXPECT_EQ(PROVIDER_TYPE_L2TP_IPSEC_PSK, vpn->provider_type()); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_PROVIDER_TYPE, <newline>+                      flimflam::kProviderL2tpIpsec); <newline>+  EXPECT_EQ("l2tp.acme.org", vpn->server_hostname()); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_PROVIDER_HOST, "l2tp.acme.org"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_VPN_DOMAIN, ""); <newline>+  EXPECT_EQ("passphrase", vpn->psk_passphrase()); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_L2TPIPSEC_PSK, "passphrase"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_IPSEC_IKEVERSION, "1"); <newline>+  EXPECT_FALSE(vpn->save_credentials()); <newline> } <newline> TEST_F(OncNetworkParserTest, TestAddServerCertificate) { <newline>@@ -222,34 +476,11 @@ TEST_F(OncNetworkParserTest, TestAddServerCertificate) { <newline> } <newline> TEST_F(OncNetworkParserTest, TestAddAuthorityCertificate) { <newline>-  const std::string test_blob("{" <newline>-      "    \"Certificates\": [" <newline>-      "        {" <newline>-      "            \"GUID\": \"{f998f760-272b-6939-4c2beffe428697ab}\"," <newline>-      "            \"Type\": \"Authority\"," <newline>-      "            \"Trust\": [\"Web\"]," <newline>-      "            \"X509\": \"MIIDojCCAwugAwIBAgIJAKGvi5ZgEWDVMA0GCSqGSIb3D" <newline>-      "QEBBAUAMIGTMRUwEwYDVQQKEwxHb29nbGUsIEluYy4xETAPBgNVBAsTCENocm9tZU9TMS" <newline>-      "IwIAYJKoZIhvcNAQkBFhNnc3BlbmNlckBnb29nbGUuY29tMRowGAYDVQQHExFNb3VudGF" <newline>-      "pbiBWaWV3LCBDQTELMAkGA1UECBMCQ0ExCzAJBgNVBAYTAlVTMQ0wCwYDVQQDEwRsbWFv" <newline>-      "MB4XDTExMDMxNjIzNDcxMFoXDTEyMDMxNTIzNDcxMFowgZMxFTATBgNVBAoTDEdvb2dsZ" <newline>-      "SwgSW5jLjERMA8GA1UECxMIQ2hyb21lT1MxIjAgBgkqhkiG9w0BCQEWE2dzcGVuY2VyQG" <newline>-      "dvb2dsZS5jb20xGjAYBgNVBAcTEU1vdW50YWluIFZpZXcsIENBMQswCQYDVQQIEwJDQTE" <newline>-      "LMAkGA1UEBhMCVVMxDTALBgNVBAMTBGxtYW8wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJ" <newline>-      "AoGBAMDX6BQz2JUzIAVjetiXxDznd2wdqVqVHfNkbSRW+xBywgqUaIXmFEGUol7VzPfme" <newline>-      "FV8o8ok/eFlQB0h6ycqgwwMd0KjtJs2ys/k0F5GuN0G7fsgr+NRnhVgxj21yF6gYTN/8a" <newline>-      "9kscla/svdmp8ekexbALFnghbLBx3CgcqUxT+tAgMBAAGjgfswgfgwDAYDVR0TBAUwAwE" <newline>-      "B/zAdBgNVHQ4EFgQUbYygbSkl4kpjCNuxoezFGupA97UwgcgGA1UdIwSBwDCBvYAUbYyg" <newline>-      "bSkl4kpjCNuxoezFGupA97WhgZmkgZYwgZMxFTATBgNVBAoTDEdvb2dsZSwgSW5jLjERM" <newline>-      "A8GA1UECxMIQ2hyb21lT1MxIjAgBgkqhkiG9w0BCQEWE2dzcGVuY2VyQGdvb2dsZS5jb2" <newline>-      "0xGjAYBgNVBAcTEU1vdW50YWluIFZpZXcsIENBMQswCQYDVQQIEwJDQTELMAkGA1UEBhM" <newline>-      "CVVMxDTALBgNVBAMTBGxtYW+CCQChr4uWYBFg1TANBgkqhkiG9w0BAQQFAAOBgQCDq9wi" <newline>-      "Q4uVuf1CQU3sXfXCy1yqi5m8AsO9FxHvah5/SVFNwKllqTfedpCaWEswJ55YAojW9e+pY" <newline>-      "2Fh3Fo/Y9YkF88KCtLuBjjqDKCRLxF4LycjHODKyQQ7mN/t5AtP9yKOsNvWF+M4IfReg5" <newline>-      "1kohau6FauQx87by5NIRPdkNPvkQ==\"" <newline>-      "        }" <newline>+  const std::string test_blob(std::string("{" <newline>+      "    \"Certificates\": [") + <newline>+      std::string(kCertificateWebAuthority) + std::string( <newline>       "    ]," <newline>-      "}"); <newline>+      "}")); <newline>   OncNetworkParser parser(test_blob); <newline>   EXPECT_EQ(1, parser.GetCertificatesSize()); <newline>@@ -304,4 +535,27 @@ TEST_F(OncNetworkParserTest, TestAddClientCertificate) { <newline>   EXPECT_TRUE(parser.ParseCertificate(0)); <newline> } <newline>+TEST_F(OncNetworkParserTest, TestNetworkAndCertificate) { <newline>+  std::string test_blob(std::string( <newline>+      "{" <newline>+      "  \"NetworkConfigurations\": [") + <newline>+      std::string(kNetworkConfigurationOpenVPN) + std::string( <newline>+      "  ]," <newline>+      "  \"Certificates\": [") + <newline>+      std::string(kCertificateWebAuthority) + std::string( <newline>+      "  ]," <newline>+      "}")); <newline>+  OncNetworkParser parser(test_blob); <newline>+ <newline>+  EXPECT_EQ(1, parser.GetCertificatesSize()); <newline>+  EXPECT_TRUE(parser.ParseCertificate(0)); <newline>+ <newline>+  EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>+  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>+  ASSERT_TRUE(network.get() != NULL); <newline>+  EXPECT_EQ(network->type(), chromeos::TYPE_VPN); <newline>+  VirtualNetwork* vpn = static_cast<VirtualNetwork*>(network.get()); <newline>+  EXPECT_EQ(PROVIDER_TYPE_OPEN_VPN, vpn->provider_type()); <newline>+} <newline>+ <newline> }  // namespace chromeos																								
Chromium	1	2	55c796ac0596c9083481075ba0c15b046fff65a	kmixter@chromium.org <kmixter@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Dec 6 06:14:18 2011 +0000	Add ONC VPN support for OpenVPN and L2TP/IPsec VPNs Also simplifies some of the parsing code, adds type validation, brings the WiFi security parsing up to spec, and improves the unit tests for wifi so that they all verify the property_map_ fields (the only ones actually used to configure the network).  Also fixed a general parser problem where certificates wouldn't be parsed if network configs were. TEST=manual import of ONC file with openvpn network, unit_tests	chromium-os:23476 chromium-os:23477		http://codereview.chromium.org/8759014	svn://svn.chromium.org/chrome/trunk/src@113120 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/chromeos/cros/onc_network_parser_unittest.cc b/chrome/browser/chromeos/cros/onc_network_parser_unittest.cc <newline>index 24e656b..b2a2486 100644 <newline>--- a/chrome/browser/chromeos/cros/onc_network_parser_unittest.cc <newline>+++ b/chrome/browser/chromeos/cros/onc_network_parser_unittest.cc <newline>@@ -16,9 +16,93 @@ <newline> #include "net/base/crypto_module.h" <newline> #include "net/base/x509_certificate.h" <newline> #include "testing/gtest/include/gtest/gtest.h" <newline>+#include "third_party/cros_system_api/dbus/service_constants.h" <newline> namespace chromeos { <newline>+const char kNetworkConfigurationOpenVPN[] = <newline>+      "    {" <newline>+      "      \"GUID\": \"{408290ea-9299-4757-ab04-8957d55f0f13}\"," <newline>+      "      \"Type\": \"VPN\"," <newline>+      "      \"Name\": \"MyVPN\"," <newline>+      "      \"VPN\": {" <newline>+      "        \"Host\": \"vpn.acme.org\"," <newline>+      "        \"Type\": \"OpenVPN\"," <newline>+      "        \"OpenVPN\": {" <newline>+      "          \"AuthRetry\": \"interact\"," <newline>+      "          \"CompLZO\": \"true\"," <newline>+      "          \"KeyDirection\": \"1\"," <newline>+      "          \"Port\": 443," <newline>+      "          \"Proto\": \"udp\"," <newline>+      "          \"PushPeerInfo\": true," <newline>+      "          \"RemoteCertEKU\": \"TLS Web Server Authentication\"," <newline>+      "          \"RemoteCertKU\": [" <newline>+      "            \"eo\"" <newline>+      "          ]," <newline>+      "          \"RemoteCertTLS\": \"server\"," <newline>+      "          \"RenegSec\": 0," <newline>+      "          \"ServerPollTimeout\": 10," <newline>+      "          \"StaticChallenge\": \"My static challenge\"," <newline>+      "          \"TLSAuthContents\": \"" <newline>+      "-----BEGIN OpenVPN Static key V1-----\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n" <newline>+      "END OpenVPN Static key V1-----\n\"," <newline>+      "          \"TLSRemote\": \"MyOpenVPNServer\"," <newline>+      "          \"SaveCredentials\": false," <newline>+      "          \"ServerCARef\": \"{55ca78f6-0842-4e1b-96a3-09a9e1a26ef5}\"," <newline>+      "          \"ClientCertType\": \"Pattern\"," <newline>+      "          \"ClientCertPattern\": {" <newline>+      "            \"IssuerRef\": \"{68a2ed90-13a1-4120-a1fe-282508320e18}\"," <newline>+      "            \"EnrollmentURI\": [" <newline>+      "              \"chrome-extension://abc/keygen-cert.html\"" <newline>+      "            ]" <newline>+      "          }," <newline>+      "        }" <newline>+      "      }" <newline>+      "    }"; <newline>+ <newline>+const char kCertificateWebAuthority[] = <newline>+      "        {" <newline>+      "            \"GUID\": \"{f998f760-272b-6939-4c2beffe428697ab}\"," <newline>+      "            \"Type\": \"Authority\"," <newline>+      "            \"Trust\": [\"Web\"]," <newline>+      "            \"X509\": \"MIIDojCCAwugAwIBAgIJAKGvi5ZgEWDVMA0GCSqGSIb3D" <newline>+      "QEBBAUAMIGTMRUwEwYDVQQKEwxHb29nbGUsIEluYy4xETAPBgNVBAsTCENocm9tZU9TMS" <newline>+      "IwIAYJKoZIhvcNAQkBFhNnc3BlbmNlckBnb29nbGUuY29tMRowGAYDVQQHExFNb3VudGF" <newline>+      "pbiBWaWV3LCBDQTELMAkGA1UECBMCQ0ExCzAJBgNVBAYTAlVTMQ0wCwYDVQQDEwRsbWFv" <newline>+      "MB4XDTExMDMxNjIzNDcxMFoXDTEyMDMxNTIzNDcxMFowgZMxFTATBgNVBAoTDEdvb2dsZ" <newline>+      "SwgSW5jLjERMA8GA1UECxMIQ2hyb21lT1MxIjAgBgkqhkiG9w0BCQEWE2dzcGVuY2VyQG" <newline>+      "dvb2dsZS5jb20xGjAYBgNVBAcTEU1vdW50YWluIFZpZXcsIENBMQswCQYDVQQIEwJDQTE" <newline>+      "LMAkGA1UEBhMCVVMxDTALBgNVBAMTBGxtYW8wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJ" <newline>+      "AoGBAMDX6BQz2JUzIAVjetiXxDznd2wdqVqVHfNkbSRW+xBywgqUaIXmFEGUol7VzPfme" <newline>+      "FV8o8ok/eFlQB0h6ycqgwwMd0KjtJs2ys/k0F5GuN0G7fsgr+NRnhVgxj21yF6gYTN/8a" <newline>+      "9kscla/svdmp8ekexbALFnghbLBx3CgcqUxT+tAgMBAAGjgfswgfgwDAYDVR0TBAUwAwE" <newline>+      "B/zAdBgNVHQ4EFgQUbYygbSkl4kpjCNuxoezFGupA97UwgcgGA1UdIwSBwDCBvYAUbYyg" <newline>+      "bSkl4kpjCNuxoezFGupA97WhgZmkgZYwgZMxFTATBgNVBAoTDEdvb2dsZSwgSW5jLjERM" <newline>+      "A8GA1UECxMIQ2hyb21lT1MxIjAgBgkqhkiG9w0BCQEWE2dzcGVuY2VyQGdvb2dsZS5jb2" <newline>+      "0xGjAYBgNVBAcTEU1vdW50YWluIFZpZXcsIENBMQswCQYDVQQIEwJDQTELMAkGA1UEBhM" <newline>+      "CVVMxDTALBgNVBAMTBGxtYW+CCQChr4uWYBFg1TANBgkqhkiG9w0BAQQFAAOBgQCDq9wi" <newline>+      "Q4uVuf1CQU3sXfXCy1yqi5m8AsO9FxHvah5/SVFNwKllqTfedpCaWEswJ55YAojW9e+pY" <newline>+      "2Fh3Fo/Y9YkF88KCtLuBjjqDKCRLxF4LycjHODKyQQ7mN/t5AtP9yKOsNvWF+M4IfReg5" <newline>+      "1kohau6FauQx87by5NIRPdkNPvkQ==\"" <newline>+      "        }"; <newline>+ <newline>+ <newline> class OncNetworkParserTest : public testing::Test { <newline>  public: <newline>   static void SetUpTestCase() { <newline>@@ -52,6 +136,16 @@ class OncNetworkParserTest : public testing::Test { <newline>     EXPECT_EQ(0U, ListCertsInSlot(slot_->os_module_handle()).size()); <newline>   } <newline>+  const base::Value* GetExpectedProperty(const Network* network, <newline>+                                         PropertyIndex index, <newline>+                                         base::Value::Type expected_type); <newline>+  void CheckStringProperty(const Network* network, <newline>+                           PropertyIndex index, <newline>+                           const char* expected); <newline>+  void CheckBooleanProperty(const Network* network, <newline>+                            PropertyIndex index, <newline>+                            bool expected); <newline>+ <newline>  protected: <newline>   scoped_refptr<net::CryptoModule> slot_; <newline>   net::CertDatabase cert_db_; <newline>@@ -86,6 +180,48 @@ class OncNetworkParserTest : public testing::Test { <newline>   static base::LazyInstance<ScopedTempDir> temp_db_dir_; <newline> }; <newline>+const base::Value* OncNetworkParserTest::GetExpectedProperty( <newline>+    const Network* network, <newline>+    PropertyIndex index, <newline>+    base::Value::Type expected_type) { <newline>+  const base::Value* value; <newline>+  if (!network->GetProperty(index, &value)) { <newline>+    ADD_FAILURE() << "Property " << index << " does not exist"; <newline>+    return NULL; <newline>+  } <newline>+  if (!value->IsType(expected_type)) { <newline>+    ADD_FAILURE() << "Property " << index << " expected type " <newline>+                  << expected_type << " actual type " <newline>+                  << value->GetType(); <newline>+    return NULL; <newline>+  } <newline>+  return value; <newline>+} <newline>+ <newline>+void OncNetworkParserTest::CheckStringProperty(const Network* network, <newline>+                                               PropertyIndex index, <newline>+                                               const char* expected) { <newline>+  const base::Value* value = <newline>+    GetExpectedProperty(network, index, base::Value::TYPE_STRING); <newline>+  if (!value) <newline>+    return; <newline>+  std::string string_value; <newline>+  value->GetAsString(&string_value); <newline>+  EXPECT_EQ(expected, string_value); <newline>+} <newline>+ <newline>+void OncNetworkParserTest::CheckBooleanProperty(const Network* network, <newline>+                                                PropertyIndex index, <newline>+                                                bool expected) { <newline>+  const base::Value* value = <newline>+    GetExpectedProperty(network, index, base::Value::TYPE_BOOLEAN); <newline>+  if (!value) <newline>+    return; <newline>+  bool bool_value = false; <newline>+  value->GetAsBoolean(&bool_value); <newline>+  EXPECT_EQ(expected, bool_value); <newline>+} <newline>+ <newline> // static <newline> base::LazyInstance<ScopedTempDir> OncNetworkParserTest::temp_db_dir_ = <newline>     LAZY_INSTANCE_INITIALIZER; <newline>@@ -97,7 +233,7 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifi1) { <newline>       "    \"GUID\": \"{485d6076-dd44-6b6d-69787465725f5045}\"," <newline>       "    \"Type\": \"WiFi\"," <newline>       "    \"WiFi\": {" <newline>-      "      \"Security\": \"WEP\"," <newline>+      "      \"Security\": \"WEP-PSK\"," <newline>       "      \"SSID\": \"ssid\"," <newline>       "      \"Passphrase\": \"pass\"," <newline>       "    }" <newline>@@ -108,15 +244,18 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifi1) { <newline>   EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>   EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>   EXPECT_FALSE(parser.ParseNetwork(1)); <newline>-  Network* network = parser.ParseNetwork(0); <newline>-  ASSERT_TRUE(network); <newline>+  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>+  ASSERT_TRUE(network.get()); <newline>   EXPECT_EQ(network->type(), chromeos::TYPE_WIFI); <newline>-  WifiNetwork* wifi = static_cast<WifiNetwork*>(network); <newline>+  WifiNetwork* wifi = static_cast<WifiNetwork*>(network.get()); <newline>   EXPECT_EQ(wifi->encryption(), chromeos::SECURITY_WEP); <newline>+  CheckStringProperty(wifi, PROPERTY_INDEX_SECURITY, flimflam::kSecurityWep); <newline>   EXPECT_EQ(wifi->name(), "ssid"); <newline>+  CheckStringProperty(wifi, PROPERTY_INDEX_SSID, "ssid"); <newline>   EXPECT_EQ(wifi->auto_connect(), false); <newline>   EXPECT_EQ(wifi->passphrase(), "pass"); <newline>+  CheckStringProperty(wifi, PROPERTY_INDEX_PASSPHRASE, "pass"); <newline> } <newline> TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP1) { <newline>@@ -126,7 +265,7 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP1) { <newline>       "    \"GUID\": \"{485d6076-dd44-6b6d-69787465725f5045}\"," <newline>       "    \"Type\": \"WiFi\"," <newline>       "    \"WiFi\": {" <newline>-      "      \"Security\": \"WPA2\"," <newline>+      "      \"Security\": \"WPA-EAP\"," <newline>       "      \"SSID\": \"ssid\"," <newline>       "      \"AutoConnect\": true," <newline>       "      \"EAP\": {" <newline>@@ -141,15 +280,19 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP1) { <newline>   EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>   EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>   EXPECT_FALSE(parser.ParseNetwork(1)); <newline>-  Network* network = parser.ParseNetwork(0); <newline>-  ASSERT_TRUE(network); <newline>+  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>+  ASSERT_TRUE(network.get()); <newline>   EXPECT_EQ(network->type(), chromeos::TYPE_WIFI); <newline>-  WifiNetwork* wifi = static_cast<WifiNetwork*>(network); <newline>+  WifiNetwork* wifi = static_cast<WifiNetwork*>(network.get()); <newline>   EXPECT_EQ(wifi->encryption(), chromeos::SECURITY_8021X); <newline>+  CheckStringProperty(wifi, PROPERTY_INDEX_SECURITY, flimflam::kSecurity8021x); <newline>   EXPECT_EQ(wifi->name(), "ssid"); <newline>   EXPECT_EQ(wifi->auto_connect(), true); <newline>+  CheckBooleanProperty(wifi, PROPERTY_INDEX_AUTO_CONNECT, true); <newline>   EXPECT_EQ(wifi->eap_method(), EAP_METHOD_PEAP); <newline>+  CheckStringProperty(wifi, PROPERTY_INDEX_EAP_METHOD, <newline>+                      flimflam::kEapMethodPEAP); <newline>   EXPECT_EQ(wifi->eap_use_system_cas(), false); <newline> } <newline>@@ -160,7 +303,7 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP2) { <newline>       "    \"GUID\": \"{485d6076-dd44-6b6d-69787465725f5045}\"," <newline>       "    \"Type\": \"WiFi\"," <newline>       "    \"WiFi\": {" <newline>-      "      \"Security\": \"WPA2\"," <newline>+      "      \"Security\": \"WPA-EAP\"," <newline>       "      \"SSID\": \"ssid\"," <newline>       "      \"AutoConnect\": false," <newline>       "      \"EAP\": {" <newline>@@ -177,19 +320,130 @@ TEST_F(OncNetworkParserTest, TestCreateNetworkWifiEAP2) { <newline>   EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>   EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>   EXPECT_FALSE(parser.ParseNetwork(1)); <newline>-  Network* network = parser.ParseNetwork(0); <newline>-  ASSERT_TRUE(network); <newline>+  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>+  ASSERT_TRUE(network.get()); <newline>   EXPECT_EQ(network->type(), chromeos::TYPE_WIFI); <newline>-  WifiNetwork* wifi = static_cast<WifiNetwork*>(network); <newline>+  WifiNetwork* wifi = static_cast<WifiNetwork*>(network.get()); <newline>   EXPECT_EQ(wifi->encryption(), chromeos::SECURITY_8021X); <newline>   EXPECT_EQ(wifi->name(), "ssid"); <newline>   EXPECT_EQ(wifi->auto_connect(), false); <newline>   EXPECT_EQ(wifi->eap_method(), EAP_METHOD_LEAP); <newline>   EXPECT_EQ(wifi->eap_use_system_cas(), true); <newline>   EXPECT_EQ(wifi->eap_identity(), "user"); <newline>+  CheckStringProperty(wifi, PROPERTY_INDEX_EAP_IDENTITY, "user"); <newline>   EXPECT_EQ(wifi->eap_passphrase(), "pass"); <newline>+  CheckStringProperty(wifi, PROPERTY_INDEX_EAP_PASSWORD, "pass"); <newline>   EXPECT_EQ(wifi->eap_anonymous_identity(), "anon"); <newline>+  CheckStringProperty(wifi, PROPERTY_INDEX_EAP_ANONYMOUS_IDENTITY, "anon"); <newline>+} <newline>+ <newline>+TEST_F(OncNetworkParserTest, TestCreateNetworkOpenVPN) { <newline>+  std::string test_blob(std::string( <newline>+      "{" <newline>+      "  \"NetworkConfigurations\": [") + <newline>+      std::string(kNetworkConfigurationOpenVPN) + std::string( <newline>+      "  ]}")); <newline>+  OncNetworkParser parser(test_blob); <newline>+ <newline>+  EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>+  EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>+  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>+  ASSERT_TRUE(network.get() != NULL); <newline>+ <newline>+  EXPECT_EQ(network->type(), chromeos::TYPE_VPN); <newline>+  CheckStringProperty(network.get(), PROPERTY_INDEX_TYPE, flimflam::kTypeVPN); <newline>+  VirtualNetwork* vpn = static_cast<VirtualNetwork*>(network.get()); <newline>+  EXPECT_EQ("MyVPN", vpn->name()); <newline>+  EXPECT_EQ(PROVIDER_TYPE_OPEN_VPN, vpn->provider_type()); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_PROVIDER_TYPE, <newline>+                      flimflam::kProviderOpenVpn); <newline>+  EXPECT_EQ("vpn.acme.org", vpn->server_hostname()); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_PROVIDER_HOST, "vpn.acme.org"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_VPN_DOMAIN, ""); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_AUTHRETRY, "interact"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_CACERT, <newline>+                      "{55ca78f6-0842-4e1b-96a3-09a9e1a26ef5}"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_COMPLZO, "true"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_KEYDIRECTION, "1"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_PORT, "443"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_PROTO, "udp"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_PUSHPEERINFO, "true"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_REMOTECERTEKU, <newline>+                      "TLS Web Server Authentication"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_REMOTECERTKU, "eo"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_REMOTECERTTLS, "server"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_RENEGSEC, "0"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_SERVERPOLLTIMEOUT, "10"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_STATICCHALLENGE, <newline>+                      "My static challenge"); <newline>+  // Check the default properties are set. <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_AUTHUSERPASS, ""); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_MGMT_ENABLE, ""); <newline>+ <newline>+  std::string tls_auth_contents; <newline>+  const Value* tls_auth_value = <newline>+    GetExpectedProperty(vpn, PROPERTY_INDEX_OPEN_VPN_TLSAUTHCONTENTS, <newline>+                        base::Value::TYPE_STRING); <newline>+  if (tls_auth_value != NULL) { <newline>+    tls_auth_value->GetAsString(&tls_auth_contents); <newline>+    EXPECT_NE(std::string::npos, <newline>+              tls_auth_contents.find("END OpenVPN Static key V1-----\n")); <newline>+    EXPECT_NE(std::string::npos, <newline>+              tls_auth_contents.find( <newline>+                  "-----BEGIN OpenVPN Static key V1-----\n")); <newline>+  } <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_OPEN_VPN_TLSREMOTE, <newline>+                      "MyOpenVPNServer"); <newline>+  EXPECT_FALSE(vpn->save_credentials()); <newline>+  EXPECT_EQ("{55ca78f6-0842-4e1b-96a3-09a9e1a26ef5}", vpn->ca_cert_nss()); <newline>+} <newline>+ <newline>+TEST_F(OncNetworkParserTest, TestCreateNetworkL2TPIPsec) { <newline>+  std::string test_blob( <newline>+      "{" <newline>+      "  \"NetworkConfigurations\": [" <newline>+      "    {" <newline>+      "      \"GUID\": \"{926b84e4-f2c5-0972-b9bbb8f44c4316f5}\"," <newline>+      "      \"Name\": \"MyL2TPVPN\"," <newline>+      "      \"Type\": \"VPN\"," <newline>+      "      \"VPN\": {" <newline>+      "        \"Host\": \"l2tp.acme.org\"," <newline>+      "        \"Type\": \"L2TP-IPsec\"," <newline>+      "        \"IPsec\": {" <newline>+      "          \"IKEVersion\": 1," <newline>+      "          \"AuthenticationType\": \"PSK\"," <newline>+      "          \"PSK\": \"passphrase\"" <newline>+      "        }," <newline>+      "        \"L2TP\": {" <newline>+      "          \"SaveCredentials\": false" <newline>+      "        }" <newline>+      "      }" <newline>+      "    }" <newline>+      "  ]," <newline>+      "  \"Certificates\": []" <newline>+      "}"); <newline>+  OncNetworkParser parser(test_blob); <newline>+ <newline>+  EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>+  EXPECT_EQ(0, parser.GetCertificatesSize()); <newline>+  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>+  ASSERT_TRUE(network != NULL); <newline>+ <newline>+  EXPECT_EQ(network->type(), chromeos::TYPE_VPN); <newline>+  CheckStringProperty(network.get(), PROPERTY_INDEX_TYPE, flimflam::kTypeVPN); <newline>+  VirtualNetwork* vpn = static_cast<VirtualNetwork*>(network.get()); <newline>+  EXPECT_EQ("MyL2TPVPN", vpn->name()); <newline>+  EXPECT_EQ(PROVIDER_TYPE_L2TP_IPSEC_PSK, vpn->provider_type()); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_PROVIDER_TYPE, <newline>+                      flimflam::kProviderL2tpIpsec); <newline>+  EXPECT_EQ("l2tp.acme.org", vpn->server_hostname()); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_PROVIDER_HOST, "l2tp.acme.org"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_VPN_DOMAIN, ""); <newline>+  EXPECT_EQ("passphrase", vpn->psk_passphrase()); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_L2TPIPSEC_PSK, "passphrase"); <newline>+  CheckStringProperty(vpn, PROPERTY_INDEX_IPSEC_IKEVERSION, "1"); <newline>+  EXPECT_FALSE(vpn->save_credentials()); <newline> } <newline> TEST_F(OncNetworkParserTest, TestAddServerCertificate) { <newline>@@ -222,34 +476,11 @@ TEST_F(OncNetworkParserTest, TestAddServerCertificate) { <newline> } <newline> TEST_F(OncNetworkParserTest, TestAddAuthorityCertificate) { <newline>-  const std::string test_blob("{" <newline>-      "    \"Certificates\": [" <newline>-      "        {" <newline>-      "            \"GUID\": \"{f998f760-272b-6939-4c2beffe428697ab}\"," <newline>-      "            \"Type\": \"Authority\"," <newline>-      "            \"Trust\": [\"Web\"]," <newline>-      "            \"X509\": \"MIIDojCCAwugAwIBAgIJAKGvi5ZgEWDVMA0GCSqGSIb3D" <newline>-      "QEBBAUAMIGTMRUwEwYDVQQKEwxHb29nbGUsIEluYy4xETAPBgNVBAsTCENocm9tZU9TMS" <newline>-      "IwIAYJKoZIhvcNAQkBFhNnc3BlbmNlckBnb29nbGUuY29tMRowGAYDVQQHExFNb3VudGF" <newline>-      "pbiBWaWV3LCBDQTELMAkGA1UECBMCQ0ExCzAJBgNVBAYTAlVTMQ0wCwYDVQQDEwRsbWFv" <newline>-      "MB4XDTExMDMxNjIzNDcxMFoXDTEyMDMxNTIzNDcxMFowgZMxFTATBgNVBAoTDEdvb2dsZ" <newline>-      "SwgSW5jLjERMA8GA1UECxMIQ2hyb21lT1MxIjAgBgkqhkiG9w0BCQEWE2dzcGVuY2VyQG" <newline>-      "dvb2dsZS5jb20xGjAYBgNVBAcTEU1vdW50YWluIFZpZXcsIENBMQswCQYDVQQIEwJDQTE" <newline>-      "LMAkGA1UEBhMCVVMxDTALBgNVBAMTBGxtYW8wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJ" <newline>-      "AoGBAMDX6BQz2JUzIAVjetiXxDznd2wdqVqVHfNkbSRW+xBywgqUaIXmFEGUol7VzPfme" <newline>-      "FV8o8ok/eFlQB0h6ycqgwwMd0KjtJs2ys/k0F5GuN0G7fsgr+NRnhVgxj21yF6gYTN/8a" <newline>-      "9kscla/svdmp8ekexbALFnghbLBx3CgcqUxT+tAgMBAAGjgfswgfgwDAYDVR0TBAUwAwE" <newline>-      "B/zAdBgNVHQ4EFgQUbYygbSkl4kpjCNuxoezFGupA97UwgcgGA1UdIwSBwDCBvYAUbYyg" <newline>-      "bSkl4kpjCNuxoezFGupA97WhgZmkgZYwgZMxFTATBgNVBAoTDEdvb2dsZSwgSW5jLjERM" <newline>-      "A8GA1UECxMIQ2hyb21lT1MxIjAgBgkqhkiG9w0BCQEWE2dzcGVuY2VyQGdvb2dsZS5jb2" <newline>-      "0xGjAYBgNVBAcTEU1vdW50YWluIFZpZXcsIENBMQswCQYDVQQIEwJDQTELMAkGA1UEBhM" <newline>-      "CVVMxDTALBgNVBAMTBGxtYW+CCQChr4uWYBFg1TANBgkqhkiG9w0BAQQFAAOBgQCDq9wi" <newline>-      "Q4uVuf1CQU3sXfXCy1yqi5m8AsO9FxHvah5/SVFNwKllqTfedpCaWEswJ55YAojW9e+pY" <newline>-      "2Fh3Fo/Y9YkF88KCtLuBjjqDKCRLxF4LycjHODKyQQ7mN/t5AtP9yKOsNvWF+M4IfReg5" <newline>-      "1kohau6FauQx87by5NIRPdkNPvkQ==\"" <newline>-      "        }" <newline>+  const std::string test_blob(std::string("{" <newline>+      "    \"Certificates\": [") + <newline>+      std::string(kCertificateWebAuthority) + std::string( <newline>       "    ]," <newline>-      "}"); <newline>+      "}")); <newline>   OncNetworkParser parser(test_blob); <newline>   EXPECT_EQ(1, parser.GetCertificatesSize()); <newline>@@ -304,4 +535,27 @@ TEST_F(OncNetworkParserTest, TestAddClientCertificate) { <newline>   EXPECT_TRUE(parser.ParseCertificate(0)); <newline> } <newline>+TEST_F(OncNetworkParserTest, TestNetworkAndCertificate) { <newline>+  std::string test_blob(std::string( <newline>+      "{" <newline>+      "  \"NetworkConfigurations\": [") + <newline>+      std::string(kNetworkConfigurationOpenVPN) + std::string( <newline>+      "  ]," <newline>+      "  \"Certificates\": [") + <newline>+      std::string(kCertificateWebAuthority) + std::string( <newline>+      "  ]," <newline>+      "}")); <newline>+  OncNetworkParser parser(test_blob); <newline>+ <newline>+  EXPECT_EQ(1, parser.GetCertificatesSize()); <newline>+  EXPECT_TRUE(parser.ParseCertificate(0)); <newline>+ <newline>+  EXPECT_EQ(1, parser.GetNetworkConfigsSize()); <newline>+  scoped_ptr<Network> network(parser.ParseNetwork(0)); <newline>+  ASSERT_TRUE(network.get() != NULL); <newline>+  EXPECT_EQ(network->type(), chromeos::TYPE_VPN); <newline>+  VirtualNetwork* vpn = static_cast<VirtualNetwork*>(network.get()); <newline>+  EXPECT_EQ(PROVIDER_TYPE_OPEN_VPN, vpn->provider_type()); <newline>+} <newline>+ <newline> }  // namespace chromeos																								
Chromium	3	1	8d92ceb494db603cc13fc47e788bea498a280b5	abarth@chromium.org <abarth@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Dec 2 08:02:10 2011 +0000	Allow extenions to override the default content_security_policy, but require the explicit policy to meet a minimum security threshold.			http://codereview.chromium.org/8773028	svn://svn.chromium.org/chrome/trunk/src@112656 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/test/data/extensions/api_test/content_security_policy/manifest.json b/chrome/test/data/extensions/api_test/content_security_policy/manifest.json <newline>index 8bafd41..2c35cd9 100644 <newline>--- a/chrome/test/data/extensions/api_test/content_security_policy/manifest.json <newline>+++ b/chrome/test/data/extensions/api_test/content_security_policy/manifest.json <newline>@@ -4,5 +4,5 @@ <newline>   "manifest_version": 2, <newline>   "description": "Sanity check that content_security_policy works for extensions. The majority of this is implemented (and tested) in WebKit, but we have a sanity test here just to make sure the integration with Chromium keeps working.", <newline>   "background_page": "test.html", <newline>-  "content_security_policy": "script-src 'self'" <newline>+  "content_security_policy": "script-src 'self'; object-src 'none'" <newline> }																								
Chromium	3	1	e0be77ab281bdf7bf806a76ddf721abc8668864	abarth@chromium.org <abarth@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Dec 2 08:02:10 2011 +0000	Allow extenions to override the default content_security_policy, but require the explicit policy to meet a minimum security threshold.			http://codereview.chromium.org/8773028	svn://svn.chromium.org/chrome/trunk/src@112656 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/test/data/extensions/api_test/content_security_policy/manifest.json b/chrome/test/data/extensions/api_test/content_security_policy/manifest.json <newline>index 8bafd41..2c35cd9 100644 <newline>--- a/chrome/test/data/extensions/api_test/content_security_policy/manifest.json <newline>+++ b/chrome/test/data/extensions/api_test/content_security_policy/manifest.json <newline>@@ -4,5 +4,5 @@ <newline>   "manifest_version": 2, <newline>   "description": "Sanity check that content_security_policy works for extensions. The majority of this is implemented (and tested) in WebKit, but we have a sanity test here just to make sure the integration with Chromium keeps working.", <newline>   "background_page": "test.html", <newline>-  "content_security_policy": "script-src 'self'" <newline>+  "content_security_policy": "script-src 'self'; object-src 'none'" <newline> }																								
Chromium	5		c0a61a76734259dfd166387684b81f0d8464ddb	thakis@chromium.org <thakis@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Dec 1 21:24:48 2011 +0000	Remove all 192 static initializers from transport_security_state.cc This is necessary for gcc 4.4.3, see the comments on http://codereview.chromium.org/8687014 TEST=none TBR=willchan	94925		http://codereview.chromium.org/8776012	svn://svn.chromium.org/chrome/trunk/src@112537 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/base/transport_security_state.cc b/net/base/transport_security_state.cc <newline>index 6cc2252..ce9cd43 100644 <newline>--- a/net/base/transport_security_state.cc <newline>+++ b/net/base/transport_security_state.cc <newline>@@ -923,10 +923,10 @@ static const char* const kGoogleRejectedCerts[] = { <newline>   kSPKIHash_Vodafone, <newline>   NULL, <newline> }; <newline>-static const PublicKeyPins kGooglePins = { <newline>-  kGoogleAcceptableCerts, <newline>-  kGoogleRejectedCerts, <newline>-}; <newline>+#define kGooglePins { \ <newline>+  kGoogleAcceptableCerts, \ <newline>+  kGoogleRejectedCerts, \ <newline>+} <newline> static const char* const kTorAcceptableCerts[] = { <newline>   kSPKIHash_RapidSSL, <newline>@@ -936,10 +936,10 @@ static const char* const kTorAcceptableCerts[] = { <newline>   kSPKIHash_Tor3, <newline>   NULL, <newline> }; <newline>-static const PublicKeyPins kTorPins = { <newline>-  kTorAcceptableCerts, <newline>-  kNoRejectedPublicKeys, <newline>-}; <newline>+#define kTorPins { \ <newline>+  kTorAcceptableCerts, \ <newline>+  kNoRejectedPublicKeys, \ <newline>+} <newline> static const char* const kTwitterComAcceptableCerts[] = { <newline>   kSPKIHash_VeriSignClass1, <newline>@@ -963,10 +963,10 @@ static const char* const kTwitterComAcceptableCerts[] = { <newline>   kSPKIHash_Twitter1, <newline>   NULL, <newline> }; <newline>-static const PublicKeyPins kTwitterComPins = { <newline>-  kTwitterComAcceptableCerts, <newline>-  kNoRejectedPublicKeys, <newline>-}; <newline>+#define kTwitterComPins { \ <newline>+  kTwitterComAcceptableCerts, \ <newline>+  kNoRejectedPublicKeys, \ <newline>+} <newline> // kTestAcceptableCerts doesn't actually match any public keys and is used <newline> // with "pinningtest.appspot.com", below, to test if pinning is active. <newline>@@ -974,14 +974,14 @@ static const char* const kTestAcceptableCerts[] = { <newline>   "sha1/AAAAAAAAAAAAAAAAAAAAAAAAAAA=", <newline>   NULL, <newline> }; <newline>-static const PublicKeyPins kTestPins = { <newline>-  kTestAcceptableCerts, <newline>-  kNoRejectedPublicKeys, <newline>-}; <newline>+#define kTestPins { \ <newline>+  kTestAcceptableCerts, \ <newline>+  kNoRejectedPublicKeys, \ <newline>+} <newline>-static const PublicKeyPins kNoPins = { <newline>-  NULL, NULL, <newline>-}; <newline>+#define kNoPins { \ <newline>+  NULL, NULL, \ <newline>+} <newline> #if defined(OS_CHROMEOS) <newline>   static const bool kTwitterHSTS = true;																								
Chromium	5		98fd9a83e2d807b313680aead96edecf78616e5	thakis@chromium.org <thakis@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Dec 1 21:24:48 2011 +0000	Remove all 192 static initializers from transport_security_state.cc This is necessary for gcc 4.4.3, see the comments on http://codereview.chromium.org/8687014 TEST=none TBR=willchan	94925		http://codereview.chromium.org/8776012	svn://svn.chromium.org/chrome/trunk/src@112537 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/base/transport_security_state.cc b/net/base/transport_security_state.cc <newline>index 6cc2252..ce9cd43 100644 <newline>--- a/net/base/transport_security_state.cc <newline>+++ b/net/base/transport_security_state.cc <newline>@@ -923,10 +923,10 @@ static const char* const kGoogleRejectedCerts[] = { <newline>   kSPKIHash_Vodafone, <newline>   NULL, <newline> }; <newline>-static const PublicKeyPins kGooglePins = { <newline>-  kGoogleAcceptableCerts, <newline>-  kGoogleRejectedCerts, <newline>-}; <newline>+#define kGooglePins { \ <newline>+  kGoogleAcceptableCerts, \ <newline>+  kGoogleRejectedCerts, \ <newline>+} <newline> static const char* const kTorAcceptableCerts[] = { <newline>   kSPKIHash_RapidSSL, <newline>@@ -936,10 +936,10 @@ static const char* const kTorAcceptableCerts[] = { <newline>   kSPKIHash_Tor3, <newline>   NULL, <newline> }; <newline>-static const PublicKeyPins kTorPins = { <newline>-  kTorAcceptableCerts, <newline>-  kNoRejectedPublicKeys, <newline>-}; <newline>+#define kTorPins { \ <newline>+  kTorAcceptableCerts, \ <newline>+  kNoRejectedPublicKeys, \ <newline>+} <newline> static const char* const kTwitterComAcceptableCerts[] = { <newline>   kSPKIHash_VeriSignClass1, <newline>@@ -963,10 +963,10 @@ static const char* const kTwitterComAcceptableCerts[] = { <newline>   kSPKIHash_Twitter1, <newline>   NULL, <newline> }; <newline>-static const PublicKeyPins kTwitterComPins = { <newline>-  kTwitterComAcceptableCerts, <newline>-  kNoRejectedPublicKeys, <newline>-}; <newline>+#define kTwitterComPins { \ <newline>+  kTwitterComAcceptableCerts, \ <newline>+  kNoRejectedPublicKeys, \ <newline>+} <newline> // kTestAcceptableCerts doesn't actually match any public keys and is used <newline> // with "pinningtest.appspot.com", below, to test if pinning is active. <newline>@@ -974,14 +974,14 @@ static const char* const kTestAcceptableCerts[] = { <newline>   "sha1/AAAAAAAAAAAAAAAAAAAAAAAAAAA=", <newline>   NULL, <newline> }; <newline>-static const PublicKeyPins kTestPins = { <newline>-  kTestAcceptableCerts, <newline>-  kNoRejectedPublicKeys, <newline>-}; <newline>+#define kTestPins { \ <newline>+  kTestAcceptableCerts, \ <newline>+  kNoRejectedPublicKeys, \ <newline>+} <newline>-static const PublicKeyPins kNoPins = { <newline>-  NULL, NULL, <newline>-}; <newline>+#define kNoPins { \ <newline>+  NULL, NULL, \ <newline>+} <newline> #if defined(OS_CHROMEOS) <newline>   static const bool kTwitterHSTS = true;																								
Chromium	3	1	f6a3cec1457eb953f4df20e3f327df5580fd02a	dpolukhin@chromium.org <dpolukhin@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Dec 1 11:46:04 2011 +0000	Update HelpApp manifest file with new content_security_policy TEST=none	chromium-os:16101		http://codereview.chromium.org/8746016	svn://svn.chromium.org/chrome/trunk/src@112451 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/resources/help_app/manifest.json b/chrome/browser/resources/help_app/manifest.json <newline>index 11cd22a..e8cf1c9 100644 <newline>--- a/chrome/browser/resources/help_app/manifest.json <newline>+++ b/chrome/browser/resources/help_app/manifest.json <newline>@@ -1,7 +1,7 @@ <newline> { <newline>   "key": "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqtHjbcvWT9Kbcapi0SaG28I66eRQHQvOqngCizm87qMb9RTgrftaUAGwPmxFLy4gBwO572N5ACpxsR6m2fRg9PSjeqaEojiFd28KY/b4VPoq/ukNOy97Ns7lPv4gmtNB8txuFIFuNw3s1k8nEJVAp659d7SnMsL4O1uXkW1huGQIDAQAB", <newline>   "name": "Help", <newline>-  "version": "2.4", <newline>+  "version": "2.5", <newline>   "icons": {"16": "images/Help_16.png", <newline>             "24": "images/Help_24.png", <newline>             "48": "images/Help_48.png", <newline>@@ -22,5 +22,5 @@ <newline>       "all_frames": true <newline>     } <newline>   ], <newline>-  "content_security_policy": "default-src 'self' https://ssl.google-analytics.com 'unsafe-inline'; frame-src https://www.google.com; connect-src https://www.google.com;" <newline>+  "content_security_policy": "default-src 'self' https://ssl.google-analytics.com http://www.google-analytics.com; frame-src https://www.google.com; connect-src https://www.google.com; style-src 'self' 'unsafe-inline'" <newline> }																								
Chromium	3	1	ccebd09f6cb174d7a1e8090cad3f7e03b05f5e2	dpolukhin@chromium.org <dpolukhin@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Dec 1 11:46:04 2011 +0000	Update HelpApp manifest file with new content_security_policy TEST=none	chromium-os:16101		http://codereview.chromium.org/8746016	svn://svn.chromium.org/chrome/trunk/src@112451 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/resources/help_app/manifest.json b/chrome/browser/resources/help_app/manifest.json <newline>index 11cd22a..e8cf1c9 100644 <newline>--- a/chrome/browser/resources/help_app/manifest.json <newline>+++ b/chrome/browser/resources/help_app/manifest.json <newline>@@ -1,7 +1,7 @@ <newline> { <newline>   "key": "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCqtHjbcvWT9Kbcapi0SaG28I66eRQHQvOqngCizm87qMb9RTgrftaUAGwPmxFLy4gBwO572N5ACpxsR6m2fRg9PSjeqaEojiFd28KY/b4VPoq/ukNOy97Ns7lPv4gmtNB8txuFIFuNw3s1k8nEJVAp659d7SnMsL4O1uXkW1huGQIDAQAB", <newline>   "name": "Help", <newline>-  "version": "2.4", <newline>+  "version": "2.5", <newline>   "icons": {"16": "images/Help_16.png", <newline>             "24": "images/Help_24.png", <newline>             "48": "images/Help_48.png", <newline>@@ -22,5 +22,5 @@ <newline>       "all_frames": true <newline>     } <newline>   ], <newline>-  "content_security_policy": "default-src 'self' https://ssl.google-analytics.com 'unsafe-inline'; frame-src https://www.google.com; connect-src https://www.google.com;" <newline>+  "content_security_policy": "default-src 'self' https://ssl.google-analytics.com http://www.google-analytics.com; frame-src https://www.google.com; connect-src https://www.google.com; style-src 'self' 'unsafe-inline'" <newline> }																								
Chromium	5		7048a02857ceb7aed90856e71f0b3ddbd0d6b08	kaznacheev@chromium.org <kaznacheev@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Nov 30 13:56:35 2011 +0000	Eliminate use of assignments to innerHTML in File Browser Also removed obsolete files to minimize security audit efforts. TEST=	chromium-os:23502		http://codereview.chromium.org/8727028	svn://svn.chromium.org/chrome/trunk/src@112215 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/resources/file_manager/playlist.html b/chrome/browser/resources/file_manager/playlist.html <newline>index 5c7ff31..56a6ffa 100644 <newline>--- a/chrome/browser/resources/file_manager/playlist.html <newline>+++ b/chrome/browser/resources/file_manager/playlist.html <newline>@@ -105,7 +105,7 @@ function setPlaylistOffset(offset) { <newline> function updateUI() { <newline>   var main = $('main'); <newline>   if (currentPlaylist) { <newline>-    main.innerHTML = ''; <newline>+    main.textContent = ''; <newline>     var main = $('main'); <newline>     for (var x = 0; x < currentPlaylist.length; x++) { <newline>       var rowdiv = document.createElement('div');																								
Chromium	5		f3c00aa1126fbc7c1e0c9cbc3c5a495b88451bc	kaznacheev@chromium.org <kaznacheev@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Nov 30 13:56:35 2011 +0000	Eliminate use of assignments to innerHTML in File Browser Also removed obsolete files to minimize security audit efforts. TEST=	chromium-os:23502		http://codereview.chromium.org/8727028	svn://svn.chromium.org/chrome/trunk/src@112215 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/resources/file_manager/playlist.html b/chrome/browser/resources/file_manager/playlist.html <newline>index 5c7ff31..56a6ffa 100644 <newline>--- a/chrome/browser/resources/file_manager/playlist.html <newline>+++ b/chrome/browser/resources/file_manager/playlist.html <newline>@@ -105,7 +105,7 @@ function setPlaylistOffset(offset) { <newline> function updateUI() { <newline>   var main = $('main'); <newline>   if (currentPlaylist) { <newline>-    main.innerHTML = ''; <newline>+    main.textContent = ''; <newline>     var main = $('main'); <newline>     for (var x = 0; x < currentPlaylist.length; x++) { <newline>       var rowdiv = document.createElement('div');																								
Chromium	3	2	ea8e1086585bdc0f374c2de15bea534268b6e2d	mkwst@chromium.org <mkwst@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Nov 25 11:19:28 2011 +0000	Adding `content_security_policy` to Speech Input API sample. As a drive-by, this CL also regenerates the `experimental.settings` docs, which someone apparently forgot to do after committing. :) TEST=	92644		http://codereview.chromium.org/8698003	svn://svn.chromium.org/chrome/trunk/src@111588 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/common/extensions/docs/samples.json b/chrome/common/extensions/docs/samples.json <newline>index 649ba2e..de90eb7 100644 <newline>--- a/chrome/common/extensions/docs/samples.json <newline>+++ b/chrome/common/extensions/docs/samples.json <newline>@@ -2162,9 +2162,10 @@ <newline>       "search_string": "SPEECH RECOGNIZER RECOGNIZES YOUR SPEECH AND TELLS YOU THE MOST LIKELY RESULT. BACKGROUND_PAGE BROWSER_ACTION EXPERIMENTAL CHROME.BROWSERACTION.ONCLICKED CHROME.BROWSERACTION.SETICON CHROME.EXPERIMENTAL.SPEECHINPUT.ISRECORDING CHROME.EXPERIMENTAL.SPEECHINPUT.ONERROR CHROME.EXPERIMENTAL.SPEECHINPUT.ONRESULT CHROME.EXPERIMENTAL.SPEECHINPUT.START CHROME.EXPERIMENTAL.SPEECHINPUT.STOP", <newline>       "source_files": [ <newline>         "background.html", <newline>+        "background.js", <newline>         "manifest.json" <newline>       ], <newline>-      "source_hash": "b092b58c922e769c003eb83e6ef4a63557ddc7f2", <newline>+      "source_hash": "a3e7e6d7c8fee17bd14a56b855d40bca0c10015d", <newline>       "zip_path": "examples\/api\/speechInput\/basic.zip" <newline>     }, <newline>     {																								
Chromium	3	2	ba31633bccd99b21ede99797d77933c673fe136	mkwst@chromium.org <mkwst@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Nov 25 11:19:28 2011 +0000	Adding `content_security_policy` to Speech Input API sample. As a drive-by, this CL also regenerates the `experimental.settings` docs, which someone apparently forgot to do after committing. :) TEST=	92644		http://codereview.chromium.org/8698003	svn://svn.chromium.org/chrome/trunk/src@111588 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/common/extensions/docs/samples.json b/chrome/common/extensions/docs/samples.json <newline>index 649ba2e..de90eb7 100644 <newline>--- a/chrome/common/extensions/docs/samples.json <newline>+++ b/chrome/common/extensions/docs/samples.json <newline>@@ -2162,9 +2162,10 @@ <newline>       "search_string": "SPEECH RECOGNIZER RECOGNIZES YOUR SPEECH AND TELLS YOU THE MOST LIKELY RESULT. BACKGROUND_PAGE BROWSER_ACTION EXPERIMENTAL CHROME.BROWSERACTION.ONCLICKED CHROME.BROWSERACTION.SETICON CHROME.EXPERIMENTAL.SPEECHINPUT.ISRECORDING CHROME.EXPERIMENTAL.SPEECHINPUT.ONERROR CHROME.EXPERIMENTAL.SPEECHINPUT.ONRESULT CHROME.EXPERIMENTAL.SPEECHINPUT.START CHROME.EXPERIMENTAL.SPEECHINPUT.STOP", <newline>       "source_files": [ <newline>         "background.html", <newline>+        "background.js", <newline>         "manifest.json" <newline>       ], <newline>-      "source_hash": "b092b58c922e769c003eb83e6ef4a63557ddc7f2", <newline>+      "source_hash": "a3e7e6d7c8fee17bd14a56b855d40bca0c10015d", <newline>       "zip_path": "examples\/api\/speechInput\/basic.zip" <newline>     }, <newline>     {																								
Chromium	5		81223bd53a715c0cbce83352de2213d93933d31	jingzhao@chromium.org <jingzhao@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Nov 23 10:12:02 2011 +0000	Allow POST method when converting file protocol to http protocol for layout tests. When running layout tests on Android, we host test files on a Linux/Mac machine, convert file requests to http requests, and forward http requests from Android to the same port on the host machine. The following tests use POST method and failed at  DCHECK(params->method == "GET" || params->method.empty()): fast/events/popup-allowed-from-gesture-initiated-form-submit.html fast/forms/document-write.html fast/forms/form-and-frame-interaction-retains-values.html fast/forms/form-data-encoding-normalization-overrun.html fast/forms/form-post-urlencoded.html fast/forms/formmethod-attribute-button-html.html fast/forms/formmethod-attribute-input-html.html fast/forms/submit-to-url-fragment.html fast/forms/xss-auditor-doesnt-crash-on-post-submit.html fast/history/form-submit-in-frame-via-onclick.html fast/history/form-submit-in-frame.html fast/loader/form-submission-after-beforeunload-cancel.html fast/loader/form-submit-aborts-parsing.html fast/loader/submit-form-while-parsing-1.xhtml The following test loads an image referred by the test page, and failed at DCHECK(params->referrer.is_empty()): http/tests/security/local-image-from-remote-whitelisted.html	http://b/5655809		http://codereview.chromium.org/8632006	svn://svn.chromium.org/chrome/trunk/src@111342 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/webkit/tools/test_shell/simple_resource_loader_bridge.cc b/webkit/tools/test_shell/simple_resource_loader_bridge.cc <newline>index 4b15a5b..6ce3e9c 100644 <newline>--- a/webkit/tools/test_shell/simple_resource_loader_bridge.cc <newline>+++ b/webkit/tools/test_shell/simple_resource_loader_bridge.cc <newline>@@ -585,15 +585,13 @@ class RequestProxy : public net::URLRequest::Delegate, <newline>     if (!g_file_over_http_params || !params->url.SchemeIsFile()) <newline>       return; <newline>-    // For file protocol, method must be GET or NULL. <newline>-    DCHECK(params->method == "GET" || params->method.empty()); <newline>-    // File protocol doesn't support upload. <newline>-    DCHECK(!params->upload); <newline>-    DCHECK(params->referrer.is_empty()); <newline>+    // For file protocol, method must be GET, POST or NULL. <newline>+    DCHECK(params->method == "GET" || params->method == "POST" || <newline>+           params->method.empty()); <newline>     DCHECK(!params->download_to_file); <newline>-    // "GET" is the only method we allow. <newline>-    params->method = "GET"; <newline>+    if (params->method.empty()) <newline>+      params->method = "GET"; <newline>     std::string original_request = params->url.spec(); <newline>     std::string::size_type found = <newline>         original_request.find(g_file_over_http_params->file_path_template);																								
Chromium	5		0a0171891a1528d6ae7f441affb8d04d3c93935	jingzhao@chromium.org <jingzhao@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Nov 23 10:12:02 2011 +0000	Allow POST method when converting file protocol to http protocol for layout tests. When running layout tests on Android, we host test files on a Linux/Mac machine, convert file requests to http requests, and forward http requests from Android to the same port on the host machine. The following tests use POST method and failed at  DCHECK(params->method == "GET" || params->method.empty()): fast/events/popup-allowed-from-gesture-initiated-form-submit.html fast/forms/document-write.html fast/forms/form-and-frame-interaction-retains-values.html fast/forms/form-data-encoding-normalization-overrun.html fast/forms/form-post-urlencoded.html fast/forms/formmethod-attribute-button-html.html fast/forms/formmethod-attribute-input-html.html fast/forms/submit-to-url-fragment.html fast/forms/xss-auditor-doesnt-crash-on-post-submit.html fast/history/form-submit-in-frame-via-onclick.html fast/history/form-submit-in-frame.html fast/loader/form-submission-after-beforeunload-cancel.html fast/loader/form-submit-aborts-parsing.html fast/loader/submit-form-while-parsing-1.xhtml The following test loads an image referred by the test page, and failed at DCHECK(params->referrer.is_empty()): http/tests/security/local-image-from-remote-whitelisted.html	http://b/5655809		http://codereview.chromium.org/8632006	svn://svn.chromium.org/chrome/trunk/src@111342 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/webkit/tools/test_shell/simple_resource_loader_bridge.cc b/webkit/tools/test_shell/simple_resource_loader_bridge.cc <newline>index 4b15a5b..6ce3e9c 100644 <newline>--- a/webkit/tools/test_shell/simple_resource_loader_bridge.cc <newline>+++ b/webkit/tools/test_shell/simple_resource_loader_bridge.cc <newline>@@ -585,15 +585,13 @@ class RequestProxy : public net::URLRequest::Delegate, <newline>     if (!g_file_over_http_params || !params->url.SchemeIsFile()) <newline>       return; <newline>-    // For file protocol, method must be GET or NULL. <newline>-    DCHECK(params->method == "GET" || params->method.empty()); <newline>-    // File protocol doesn't support upload. <newline>-    DCHECK(!params->upload); <newline>-    DCHECK(params->referrer.is_empty()); <newline>+    // For file protocol, method must be GET, POST or NULL. <newline>+    DCHECK(params->method == "GET" || params->method == "POST" || <newline>+           params->method.empty()); <newline>     DCHECK(!params->download_to_file); <newline>-    // "GET" is the only method we allow. <newline>-    params->method = "GET"; <newline>+    if (params->method.empty()) <newline>+      params->method = "GET"; <newline>     std::string original_request = params->url.spec(); <newline>     std::string::size_type found = <newline>         original_request.find(g_file_over_http_params->file_path_template);																								
Chromium	1	2	b1ab8a3d950b86be8007dfbbf49c2d650933cd2	derat@chromium.org <derat@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Nov 17 16:37:18 2011 +0000	aura: Touch state file after first browser is ready. This creates a chromeos::InitialBrowserWindowObserver class for Aura that replicates some behavior for tests that's currently performed by the X window manager: when the first browser window is created, /var/run/state/windowmanager/initial-chrome-window-mapped is touched (the window manager actually writes the window's ID to the file, but that doesn't make sense under Aura and luckily doesn't appear to be depended on by any tests). This fixes Chrome OS's security_ProfilePermissions.BWSI and security_ProfilePermissions.login autotests, which otherwise time out when run against an Aura build. I'm also moving existing X-window-manager-related files that are currently in the chromeos/ directory to chromeos/legacy_window_manager/. TEST=manual: observed that tests no longer time out	chromium-os:22974,chromium-os:22896		http://codereview.chromium.org/8539051	svn://svn.chromium.org/chrome/trunk/src@110508 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/chrome_browser.gypi b/chrome/chrome_browser.gypi <newline>index 65423b5..2d2ec1d 100644 <newline>--- a/chrome/chrome_browser.gypi <newline>+++ b/chrome/chrome_browser.gypi <newline>@@ -510,6 +510,12 @@ <newline>         'browser/chromeos/input_method/xkeyboard.h', <newline>         'browser/chromeos/language_preferences.cc', <newline>         'browser/chromeos/language_preferences.h', <newline>+        'browser/chromeos/legacy_window_manager/initial_browser_window_observer.cc', <newline>+        'browser/chromeos/legacy_window_manager/initial_browser_window_observer.h', <newline>+        'browser/chromeos/legacy_window_manager/wm_ipc.cc', <newline>+        'browser/chromeos/legacy_window_manager/wm_ipc.h', <newline>+        'browser/chromeos/legacy_window_manager/wm_message_listener.cc', <newline>+        'browser/chromeos/legacy_window_manager/wm_message_listener.h', <newline>         'browser/chromeos/locale_change_guard.cc', <newline>         'browser/chromeos/locale_change_guard.h', <newline>         'browser/chromeos/login/auth_attempt_state.cc', <newline>@@ -797,10 +803,6 @@ <newline>         'browser/chromeos/web_socket_proxy.h', <newline>         'browser/chromeos/web_socket_proxy_controller.cc', <newline>         'browser/chromeos/web_socket_proxy_controller.h', <newline>-        'browser/chromeos/wm_ipc.cc', <newline>-        'browser/chromeos/wm_ipc.h', <newline>-        'browser/chromeos/wm_message_listener.cc', <newline>-        'browser/chromeos/wm_message_listener.h', <newline>         'browser/chromeos/xinput_hierarchy_changed_event_listener.cc', <newline>         'browser/chromeos/xinput_hierarchy_changed_event_listener.h', <newline>         'browser/command_updater.cc', <newline>@@ -5042,6 +5044,8 @@ <newline>                 ['exclude', '^browser/notifications/balloon_collection_impl.cc'], <newline>                 ['exclude', '^browser/notifications/balloon_collection_impl.h'], <newline>                 ['exclude', '^browser/notifications/balloon_collection_views.cc'], <newline>+                ['exclude', '^chromeos/legacy_window_manager/initial_browser_window_observer.cc'], <newline>+                ['exclude', '^chromeos/legacy_window_manager/initial_browser_window_observer.h'], <newline>               ], <newline>             }], <newline>             ['chromeos==1',{ <newline>@@ -5157,6 +5161,8 @@ <newline>           'sources/': [ <newline>             ['exclude', '^browser/chromeos/browser/chromeos/login/screen_locker.cc'], <newline>             ['exclude', '^browser/chromeos/frame/'], <newline>+            ['exclude', '^browser/chromeos/legacy_window_manager/wm_ipc.cc'], <newline>+            ['exclude', '^browser/chromeos/legacy_window_manager/wm_message_listener.cc'], <newline>             ['exclude', '^browser/chromeos/login/background_view.cc'], <newline>             ['exclude', '^browser/chromeos/login/screen_locker_browsertest.cc'], <newline>             ['exclude', '^browser/chromeos/login/screen_locker_views.cc'], <newline>@@ -5170,8 +5176,6 @@ <newline>             ['exclude', '^browser/chromeos/login/webui_screen_locker.cc'], <newline>             ['exclude', '^browser/chromeos/login/wizard_in_process_browser_test.cc'], <newline>             ['exclude', '^browser/chromeos/notifications/'], <newline>-            ['exclude', '^browser/chromeos/wm_ipc.cc'], <newline>-            ['exclude', '^browser/chromeos/wm_message_listener.cc'], <newline>             ['exclude', '^browser/chromeos/xinput_hierarchy_changed_event_listener.cc'], <newline>             ['include', '^browser/ui/views/handle_web_keyboard_event_aura.cc'], <newline>             ['include', '^browser/ui/views/handle_web_keyboard_event.h'],																								
Chromium	1	2	9ad4bbdfc458e607e0cf068857d6fb4b44a8711	derat@chromium.org <derat@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Nov 17 16:37:18 2011 +0000	aura: Touch state file after first browser is ready. This creates a chromeos::InitialBrowserWindowObserver class for Aura that replicates some behavior for tests that's currently performed by the X window manager: when the first browser window is created, /var/run/state/windowmanager/initial-chrome-window-mapped is touched (the window manager actually writes the window's ID to the file, but that doesn't make sense under Aura and luckily doesn't appear to be depended on by any tests). This fixes Chrome OS's security_ProfilePermissions.BWSI and security_ProfilePermissions.login autotests, which otherwise time out when run against an Aura build. I'm also moving existing X-window-manager-related files that are currently in the chromeos/ directory to chromeos/legacy_window_manager/. TEST=manual: observed that tests no longer time out	chromium-os:22974,chromium-os:22896		http://codereview.chromium.org/8539051	svn://svn.chromium.org/chrome/trunk/src@110508 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/chrome_browser.gypi b/chrome/chrome_browser.gypi <newline>index 65423b5..2d2ec1d 100644 <newline>--- a/chrome/chrome_browser.gypi <newline>+++ b/chrome/chrome_browser.gypi <newline>@@ -510,6 +510,12 @@ <newline>         'browser/chromeos/input_method/xkeyboard.h', <newline>         'browser/chromeos/language_preferences.cc', <newline>         'browser/chromeos/language_preferences.h', <newline>+        'browser/chromeos/legacy_window_manager/initial_browser_window_observer.cc', <newline>+        'browser/chromeos/legacy_window_manager/initial_browser_window_observer.h', <newline>+        'browser/chromeos/legacy_window_manager/wm_ipc.cc', <newline>+        'browser/chromeos/legacy_window_manager/wm_ipc.h', <newline>+        'browser/chromeos/legacy_window_manager/wm_message_listener.cc', <newline>+        'browser/chromeos/legacy_window_manager/wm_message_listener.h', <newline>         'browser/chromeos/locale_change_guard.cc', <newline>         'browser/chromeos/locale_change_guard.h', <newline>         'browser/chromeos/login/auth_attempt_state.cc', <newline>@@ -797,10 +803,6 @@ <newline>         'browser/chromeos/web_socket_proxy.h', <newline>         'browser/chromeos/web_socket_proxy_controller.cc', <newline>         'browser/chromeos/web_socket_proxy_controller.h', <newline>-        'browser/chromeos/wm_ipc.cc', <newline>-        'browser/chromeos/wm_ipc.h', <newline>-        'browser/chromeos/wm_message_listener.cc', <newline>-        'browser/chromeos/wm_message_listener.h', <newline>         'browser/chromeos/xinput_hierarchy_changed_event_listener.cc', <newline>         'browser/chromeos/xinput_hierarchy_changed_event_listener.h', <newline>         'browser/command_updater.cc', <newline>@@ -5042,6 +5044,8 @@ <newline>                 ['exclude', '^browser/notifications/balloon_collection_impl.cc'], <newline>                 ['exclude', '^browser/notifications/balloon_collection_impl.h'], <newline>                 ['exclude', '^browser/notifications/balloon_collection_views.cc'], <newline>+                ['exclude', '^chromeos/legacy_window_manager/initial_browser_window_observer.cc'], <newline>+                ['exclude', '^chromeos/legacy_window_manager/initial_browser_window_observer.h'], <newline>               ], <newline>             }], <newline>             ['chromeos==1',{ <newline>@@ -5157,6 +5161,8 @@ <newline>           'sources/': [ <newline>             ['exclude', '^browser/chromeos/browser/chromeos/login/screen_locker.cc'], <newline>             ['exclude', '^browser/chromeos/frame/'], <newline>+            ['exclude', '^browser/chromeos/legacy_window_manager/wm_ipc.cc'], <newline>+            ['exclude', '^browser/chromeos/legacy_window_manager/wm_message_listener.cc'], <newline>             ['exclude', '^browser/chromeos/login/background_view.cc'], <newline>             ['exclude', '^browser/chromeos/login/screen_locker_browsertest.cc'], <newline>             ['exclude', '^browser/chromeos/login/screen_locker_views.cc'], <newline>@@ -5170,8 +5176,6 @@ <newline>             ['exclude', '^browser/chromeos/login/webui_screen_locker.cc'], <newline>             ['exclude', '^browser/chromeos/login/wizard_in_process_browser_test.cc'], <newline>             ['exclude', '^browser/chromeos/notifications/'], <newline>-            ['exclude', '^browser/chromeos/wm_ipc.cc'], <newline>-            ['exclude', '^browser/chromeos/wm_message_listener.cc'], <newline>             ['exclude', '^browser/chromeos/xinput_hierarchy_changed_event_listener.cc'], <newline>             ['include', '^browser/ui/views/handle_web_keyboard_event_aura.cc'], <newline>             ['include', '^browser/ui/views/handle_web_keyboard_event.h'],																								
Chromium	3	2	9baad3695c1234dc8a88fb16404d8500ae96b9f	tsepez@chromium.org <tsepez@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Nov 7 23:52:20 2011 +0000	Turn on content-security-policy for chrome://syncpromo webui page. This recent page was nearly in the correct form as-is, but needed a small number of changes about how it includes script resources before it could be removed from the list of excluded entryponts.			http://codereview.chromium.org/8412009	svn://svn.chromium.org/chrome/trunk/src@108944 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/ui/webui/chrome_url_data_manager_backend.cc b/chrome/browser/ui/webui/chrome_url_data_manager_backend.cc <newline>index 51ddb00..594c415 100644 <newline>--- a/chrome/browser/ui/webui/chrome_url_data_manager_backend.cc <newline>+++ b/chrome/browser/ui/webui/chrome_url_data_manager_backend.cc <newline>@@ -71,8 +71,6 @@ class ChromeURLContentSecurityPolicyExceptionSet <newline>     insert(chrome::kChromeUIRegisterPageHost); <newline>     insert(chrome::kChromeUISimUnlockHost); <newline>     insert(chrome::kChromeUISystemInfoHost); <newline>-#else <newline>-    insert(chrome::kChromeUISyncPromoHost); <newline> #endif <newline> #if defined(TOUCH_UI) <newline>     insert(chrome::kChromeUIKeyboardHost);																								
Chromium	3	2	4c352a3896ac89c906a71d2a6fc6c0b08dd3eb8	tsepez@chromium.org <tsepez@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Mon Nov 7 23:52:20 2011 +0000	Turn on content-security-policy for chrome://syncpromo webui page. This recent page was nearly in the correct form as-is, but needed a small number of changes about how it includes script resources before it could be removed from the list of excluded entryponts.			http://codereview.chromium.org/8412009	svn://svn.chromium.org/chrome/trunk/src@108944 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/ui/webui/chrome_url_data_manager_backend.cc b/chrome/browser/ui/webui/chrome_url_data_manager_backend.cc <newline>index 51ddb00..594c415 100644 <newline>--- a/chrome/browser/ui/webui/chrome_url_data_manager_backend.cc <newline>+++ b/chrome/browser/ui/webui/chrome_url_data_manager_backend.cc <newline>@@ -71,8 +71,6 @@ class ChromeURLContentSecurityPolicyExceptionSet <newline>     insert(chrome::kChromeUIRegisterPageHost); <newline>     insert(chrome::kChromeUISimUnlockHost); <newline>     insert(chrome::kChromeUISystemInfoHost); <newline>-#else <newline>-    insert(chrome::kChromeUISyncPromoHost); <newline> #endif <newline> #if defined(TOUCH_UI) <newline>     insert(chrome::kChromeUIKeyboardHost);																								
Chromium	3	1	650ba8555971006172c2d350dbe3b2d15ae8bed	dcheng@chromium.org <dcheng@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Nov 4 22:10:02 2011 +0000	Switch notifications to use the security origin. TEST=browser_tests --gtest_filter=ExtensionApiTest.Notification*	94399		http://codereview.chromium.org/8480009	svn://svn.chromium.org/chrome/trunk/src@108726 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/renderer/notification_provider.h b/content/renderer/notification_provider.h <newline>index 2d7188e..6664388 100644 <newline>--- a/content/renderer/notification_provider.h <newline>+++ b/content/renderer/notification_provider.h <newline>@@ -34,6 +34,9 @@ class NotificationProvider : public content::RenderViewObserver, <newline>   virtual void cancel(const WebKit::WebNotification& proxy); <newline>   virtual void objectDestroyed(const WebKit::WebNotification& proxy); <newline>   virtual WebKit::WebNotificationPresenter::Permission checkPermission( <newline>+      const WebKit::WebSecurityOrigin& origin); <newline>+  // Deprecated, and will be removed after the WebKit roll. <newline>+  virtual WebKit::WebNotificationPresenter::Permission checkPermission( <newline>       const WebKit::WebURL& origin); <newline>   virtual void requestPermission(const WebKit::WebSecurityOrigin& origin, <newline>       WebKit::WebNotificationPermissionCallback* callback);																								
Chromium	3	1	c6095e0836185ca5fdb3ecf5686ac9b44bff190	dcheng@chromium.org <dcheng@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Nov 4 22:10:02 2011 +0000	Switch notifications to use the security origin. TEST=browser_tests --gtest_filter=ExtensionApiTest.Notification*	94399		http://codereview.chromium.org/8480009	svn://svn.chromium.org/chrome/trunk/src@108726 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/content/renderer/notification_provider.h b/content/renderer/notification_provider.h <newline>index 2d7188e..6664388 100644 <newline>--- a/content/renderer/notification_provider.h <newline>+++ b/content/renderer/notification_provider.h <newline>@@ -34,6 +34,9 @@ class NotificationProvider : public content::RenderViewObserver, <newline>   virtual void cancel(const WebKit::WebNotification& proxy); <newline>   virtual void objectDestroyed(const WebKit::WebNotification& proxy); <newline>   virtual WebKit::WebNotificationPresenter::Permission checkPermission( <newline>+      const WebKit::WebSecurityOrigin& origin); <newline>+  // Deprecated, and will be removed after the WebKit roll. <newline>+  virtual WebKit::WebNotificationPresenter::Permission checkPermission( <newline>       const WebKit::WebURL& origin); <newline>   virtual void requestPermission(const WebKit::WebSecurityOrigin& origin, <newline>       WebKit::WebNotificationPermissionCallback* callback);																								
Chromium	5		e3787e30e0e011c801a5bd307c895da96943522	jochen@chromium.org <jochen@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Nov 4 13:28:02 2011 +0000	Apply exemptions to content settings based on the primary url the primary url is the cookie's security origin or, for all other content types, the main frame url TEST=HostContentSettingsMapTest.ShouldAllowAllContent	none		http://codereview.chromium.org/8457009	svn://svn.chromium.org/chrome/trunk/src@108644 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/content_settings/host_content_settings_map_unittest.cc b/chrome/browser/content_settings/host_content_settings_map_unittest.cc <newline>index aff5b58..0965bc3 100644 <newline>--- a/chrome/browser/content_settings/host_content_settings_map_unittest.cc <newline>+++ b/chrome/browser/content_settings/host_content_settings_map_unittest.cc <newline>@@ -1065,3 +1065,26 @@ TEST_F(HostContentSettingsMapTest, SettingDefaultContentSettingsWhenManaged) { <newline>             host_content_settings_map->GetDefaultContentSetting( <newline>                 CONTENT_SETTINGS_TYPE_PLUGINS, NULL)); <newline> } <newline>+ <newline>+TEST_F(HostContentSettingsMapTest, ShouldAllowAllContent) { <newline>+  TestingProfile profile; <newline>+  HostContentSettingsMap* host_content_settings_map = <newline>+      profile.GetHostContentSettingsMap(); <newline>+ <newline>+  GURL host("http://example.com/"); <newline>+  GURL embedder("chrome://foo"); <newline>+  ContentSettingsPattern pattern = <newline>+       ContentSettingsPattern::FromString("[*.]example.com"); <newline>+  host_content_settings_map->SetContentSetting( <newline>+      pattern, <newline>+      ContentSettingsPattern::Wildcard(), <newline>+      CONTENT_SETTINGS_TYPE_IMAGES, <newline>+      std::string(), <newline>+      CONTENT_SETTING_BLOCK); <newline>+  EXPECT_EQ(CONTENT_SETTING_BLOCK, <newline>+            host_content_settings_map->GetContentSetting( <newline>+                host, host, CONTENT_SETTINGS_TYPE_IMAGES, "")); <newline>+  EXPECT_EQ(CONTENT_SETTING_ALLOW, <newline>+            host_content_settings_map->GetContentSetting( <newline>+                embedder, host, CONTENT_SETTINGS_TYPE_IMAGES, "")); <newline>+}																								
Chromium	5		a2d643cca5d23ea866042c3af04f55f44195d09	jochen@chromium.org <jochen@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Nov 4 13:28:02 2011 +0000	Apply exemptions to content settings based on the primary url the primary url is the cookie's security origin or, for all other content types, the main frame url TEST=HostContentSettingsMapTest.ShouldAllowAllContent	none		http://codereview.chromium.org/8457009	svn://svn.chromium.org/chrome/trunk/src@108644 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/content_settings/host_content_settings_map_unittest.cc b/chrome/browser/content_settings/host_content_settings_map_unittest.cc <newline>index aff5b58..0965bc3 100644 <newline>--- a/chrome/browser/content_settings/host_content_settings_map_unittest.cc <newline>+++ b/chrome/browser/content_settings/host_content_settings_map_unittest.cc <newline>@@ -1065,3 +1065,26 @@ TEST_F(HostContentSettingsMapTest, SettingDefaultContentSettingsWhenManaged) { <newline>             host_content_settings_map->GetDefaultContentSetting( <newline>                 CONTENT_SETTINGS_TYPE_PLUGINS, NULL)); <newline> } <newline>+ <newline>+TEST_F(HostContentSettingsMapTest, ShouldAllowAllContent) { <newline>+  TestingProfile profile; <newline>+  HostContentSettingsMap* host_content_settings_map = <newline>+      profile.GetHostContentSettingsMap(); <newline>+ <newline>+  GURL host("http://example.com/"); <newline>+  GURL embedder("chrome://foo"); <newline>+  ContentSettingsPattern pattern = <newline>+       ContentSettingsPattern::FromString("[*.]example.com"); <newline>+  host_content_settings_map->SetContentSetting( <newline>+      pattern, <newline>+      ContentSettingsPattern::Wildcard(), <newline>+      CONTENT_SETTINGS_TYPE_IMAGES, <newline>+      std::string(), <newline>+      CONTENT_SETTING_BLOCK); <newline>+  EXPECT_EQ(CONTENT_SETTING_BLOCK, <newline>+            host_content_settings_map->GetContentSetting( <newline>+                host, host, CONTENT_SETTINGS_TYPE_IMAGES, "")); <newline>+  EXPECT_EQ(CONTENT_SETTING_ALLOW, <newline>+            host_content_settings_map->GetContentSetting( <newline>+                embedder, host, CONTENT_SETTINGS_TYPE_IMAGES, "")); <newline>+}																								
Chromium	5		ed80207a4306a4ba17dcba7474b3103130bb0c2	agl@chromium.org <agl@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Nov 3 17:04:09 2011 +0000	net: expand upon the comment for IsChainOfPublicKeysPermitted This is a follow up to http://codereview.chromium.org/8372032/diff/6001/net/base/transport_security_state.cc#newcode1399 Comment only change. No code touched. TEST=none	none		http://codereview.chromium.org/8423054	svn://svn.chromium.org/chrome/trunk/src@108481 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/base/transport_security_state.h b/net/base/transport_security_state.h <newline>index 3791d7c..07e7aa0 100644 <newline>--- a/net/base/transport_security_state.h <newline>+++ b/net/base/transport_security_state.h <newline>@@ -61,11 +61,17 @@ class NET_EXPORT TransportSecurityState <newline>     //      OR <newline>     //   3) |hashes| and |public_key_hashes| are not disjoint. <newline>     // <newline>-    // |public_key_hashes| is intended to contain a number of trust roots for <newline>-    // the chain in question, any one of which is sufficient. <newline>+    // |public_key_hashes| is intended to contain a number of trusted public <newline>+    // keys for the chain in question, any one of which is sufficient. The <newline>+    // public keys could be of a root CA, intermediate CA or leaf certificate, <newline>+    // depending on the security vs disaster recovery tradeoff selected. <newline>+    // (Pinning only to leaf certifiates increases security because you no <newline>+    // longer trust any CAs, but it hampers disaster recovery because you can't <newline>+    // just get a new certificate signed by the CA.) <newline>+    // <newline>     // |bad_public_key_hashes| is intended to contain unwanted intermediate CA <newline>-    // certifciates that those trust roots may have issued but that we don't <newline>-    // want to trust. <newline>+    // certifciates that those trusted public keys may have issued but that we <newline>+    // don't want to trust. <newline>     bool IsChainOfPublicKeysPermitted( <newline>         const std::vector<SHA1Fingerprint>& hashes);																								
Chromium	5		1461f6536ef0c1f959fab91810e3f5f338c0be7	agl@chromium.org <agl@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Nov 3 17:04:09 2011 +0000	net: expand upon the comment for IsChainOfPublicKeysPermitted This is a follow up to http://codereview.chromium.org/8372032/diff/6001/net/base/transport_security_state.cc#newcode1399 Comment only change. No code touched. TEST=none	none		http://codereview.chromium.org/8423054	svn://svn.chromium.org/chrome/trunk/src@108481 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/net/base/transport_security_state.h b/net/base/transport_security_state.h <newline>index 3791d7c..07e7aa0 100644 <newline>--- a/net/base/transport_security_state.h <newline>+++ b/net/base/transport_security_state.h <newline>@@ -61,11 +61,17 @@ class NET_EXPORT TransportSecurityState <newline>     //      OR <newline>     //   3) |hashes| and |public_key_hashes| are not disjoint. <newline>     // <newline>-    // |public_key_hashes| is intended to contain a number of trust roots for <newline>-    // the chain in question, any one of which is sufficient. <newline>+    // |public_key_hashes| is intended to contain a number of trusted public <newline>+    // keys for the chain in question, any one of which is sufficient. The <newline>+    // public keys could be of a root CA, intermediate CA or leaf certificate, <newline>+    // depending on the security vs disaster recovery tradeoff selected. <newline>+    // (Pinning only to leaf certifiates increases security because you no <newline>+    // longer trust any CAs, but it hampers disaster recovery because you can't <newline>+    // just get a new certificate signed by the CA.) <newline>+    // <newline>     // |bad_public_key_hashes| is intended to contain unwanted intermediate CA <newline>-    // certifciates that those trust roots may have issued but that we don't <newline>-    // want to trust. <newline>+    // certifciates that those trusted public keys may have issued but that we <newline>+    // don't want to trust. <newline>     bool IsChainOfPublicKeysPermitted( <newline>         const std::vector<SHA1Fingerprint>& hashes);																								
Chromium	3	1	72d09f408bd0200c6f9972e8f8a558fae878e44	tsepez@chromium.org <tsepez@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Nov 2 20:09:43 2011 +0000	Hosts opting in to strict-transport-security get mixed content blocking.	100136		http://codereview.chromium.org/8341031	svn://svn.chromium.org/chrome/trunk/src@108337 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/renderer/chrome_render_view_observer.h b/chrome/renderer/chrome_render_view_observer.h <newline>index a8d08f9..f0d8e82 100644 <newline>--- a/chrome/renderer/chrome_render_view_observer.h <newline>+++ b/chrome/renderer/chrome_render_view_observer.h <newline>@@ -6,6 +6,7 @@ <newline> #define CHROME_RENDERER_CHROME_RENDER_VIEW_OBSERVER_H_ <newline> #pragma once <newline>+#include <set> <newline> #include <string> <newline> #include <vector> <newline>@@ -127,6 +128,7 @@ class ChromeRenderViewObserver : public content::RenderViewObserver, <newline>   void OnSetClientSidePhishingDetection(bool enable_phishing_detection); <newline>   void OnStartFrameSniffer(const string16& frame_name); <newline>   void OnGetFPS(); <newline>+  void OnAddStrictSecurityHost(const std::string& host); <newline>   // Captures the thumbnail and text contents for indexing for the given load <newline>   // ID. If the view's load ID is different than the parameter, this call is <newline>@@ -174,6 +176,9 @@ class ChromeRenderViewObserver : public content::RenderViewObserver, <newline>   // Decodes a data: URL image or returns an empty image in case of failure. <newline>   SkBitmap ImageFromDataUrl(const GURL&) const; <newline>+  // Determines if a host is in the strict security host set. <newline>+  bool IsStrictSecurityHost(const std::string& host); <newline>+ <newline>   // Save the JavaScript to preload if a ViewMsg_WebUIJavaScript is received. <newline>   scoped_ptr<WebUIJavaScript> webui_javascript_; <newline>@@ -197,6 +202,7 @@ class ChromeRenderViewObserver : public content::RenderViewObserver, <newline>   // Insecure content may be permitted for the duration of this render view. <newline>   bool allow_displaying_insecure_content_; <newline>   bool allow_running_insecure_content_; <newline>+  std::set<std::string> strict_security_hosts_; <newline>   // Allows JS to access DOM automation. The JS object is only exposed when the <newline>   // DOM automation bindings are enabled.																								
Chromium	3	1	2d213847a203e5135aa1d746e97ff11925f77cc	tsepez@chromium.org <tsepez@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Nov 2 20:09:43 2011 +0000	Hosts opting in to strict-transport-security get mixed content blocking.	100136		http://codereview.chromium.org/8341031	svn://svn.chromium.org/chrome/trunk/src@108337 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/renderer/chrome_render_view_observer.h b/chrome/renderer/chrome_render_view_observer.h <newline>index a8d08f9..f0d8e82 100644 <newline>--- a/chrome/renderer/chrome_render_view_observer.h <newline>+++ b/chrome/renderer/chrome_render_view_observer.h <newline>@@ -6,6 +6,7 @@ <newline> #define CHROME_RENDERER_CHROME_RENDER_VIEW_OBSERVER_H_ <newline> #pragma once <newline>+#include <set> <newline> #include <string> <newline> #include <vector> <newline>@@ -127,6 +128,7 @@ class ChromeRenderViewObserver : public content::RenderViewObserver, <newline>   void OnSetClientSidePhishingDetection(bool enable_phishing_detection); <newline>   void OnStartFrameSniffer(const string16& frame_name); <newline>   void OnGetFPS(); <newline>+  void OnAddStrictSecurityHost(const std::string& host); <newline>   // Captures the thumbnail and text contents for indexing for the given load <newline>   // ID. If the view's load ID is different than the parameter, this call is <newline>@@ -174,6 +176,9 @@ class ChromeRenderViewObserver : public content::RenderViewObserver, <newline>   // Decodes a data: URL image or returns an empty image in case of failure. <newline>   SkBitmap ImageFromDataUrl(const GURL&) const; <newline>+  // Determines if a host is in the strict security host set. <newline>+  bool IsStrictSecurityHost(const std::string& host); <newline>+ <newline>   // Save the JavaScript to preload if a ViewMsg_WebUIJavaScript is received. <newline>   scoped_ptr<WebUIJavaScript> webui_javascript_; <newline>@@ -197,6 +202,7 @@ class ChromeRenderViewObserver : public content::RenderViewObserver, <newline>   // Insecure content may be permitted for the duration of this render view. <newline>   bool allow_displaying_insecure_content_; <newline>   bool allow_running_insecure_content_; <newline>+  std::set<std::string> strict_security_hosts_; <newline>   // Allows JS to access DOM automation. The JS object is only exposed when the <newline>   // DOM automation bindings are enabled.																								
Chromium	5		c4a17c880f61b745c6697b899d0dcd8453ce0dd	brettw@chromium.org <brettw@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Oct 26 21:48:00 2011 +0000	Replace most LOG/CHECK statements with DLOG/DCHECK statements in base. [ Reland of 107042 http://codereview.chromium.org/8368009 ] I tried hard not to change CHECKs that had side effects. I kept fatal checks that seemed security or debugging-info (in crash reports) sensitive, and ones that seems particularly well-conceived.			http://codereview.chromium.org/8341026	svn://svn.chromium.org/chrome/trunk/src@107434 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/base/win/i18n.cc b/base/win/i18n.cc <newline>index 59480f2..9e523a1 100644 <newline>--- a/base/win/i18n.cc <newline>+++ b/base/win/i18n.cc <newline>@@ -75,7 +75,7 @@ bool GetMUIPreferredUILanguageList(LanguageFunction function, ULONG flags, <newline>             << "Failed getting size of preferred UI languages."; <newline>       } <newline>     } else { <newline>-      VLOG(2) << "MUI not available."; <newline>+      DVLOG(2) << "MUI not available."; <newline>     } <newline>   } else { <newline>     NOTREACHED() << "kernel32.dll not found.";																								
Chromium	5		42d4638f0335dbfd14c1c9f6b05a7b09703a78e	brettw@chromium.org <brettw@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Oct 26 21:48:00 2011 +0000	Replace most LOG/CHECK statements with DLOG/DCHECK statements in base. [ Reland of 107042 http://codereview.chromium.org/8368009 ] I tried hard not to change CHECKs that had side effects. I kept fatal checks that seemed security or debugging-info (in crash reports) sensitive, and ones that seems particularly well-conceived.			http://codereview.chromium.org/8341026	svn://svn.chromium.org/chrome/trunk/src@107434 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/base/win/i18n.cc b/base/win/i18n.cc <newline>index 59480f2..9e523a1 100644 <newline>--- a/base/win/i18n.cc <newline>+++ b/base/win/i18n.cc <newline>@@ -75,7 +75,7 @@ bool GetMUIPreferredUILanguageList(LanguageFunction function, ULONG flags, <newline>             << "Failed getting size of preferred UI languages."; <newline>       } <newline>     } else { <newline>-      VLOG(2) << "MUI not available."; <newline>+      DVLOG(2) << "MUI not available."; <newline>     } <newline>   } else { <newline>     NOTREACHED() << "kernel32.dll not found.";																								
Chromium	1	2	45aa397519926afdfc2ea19effb7c7cd396a3fa	mkwst@chromium.org <mkwst@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Oct 25 10:32:32 2011 +0000	Adding `content_security_policy` to 5 sample extensions Touched: * tabs/screenshot * webNavigation/basic * windows/merge_windows * browserAction/make_page_red * extensions/ttsdebug TEST=	92644		http://codereview.chromium.org/8318001	svn://svn.chromium.org/chrome/trunk/src@107094 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/common/extensions/docs/samples.json b/chrome/common/extensions/docs/samples.json <newline>index f77b23b..709bfeb 100644 <newline>--- a/chrome/common/extensions/docs/samples.json <newline>+++ b/chrome/common/extensions/docs/samples.json <newline>@@ -285,9 +285,10 @@ <newline>       "search_string": "A BROWSER ACTION WITH NO ICON THAT MAKES THE PAGE RED  BACKGROUND_PAGE BROWSER_ACTION TABS CHROME.BROWSERACTION.ONCLICKED CHROME.BROWSERACTION.SETBADGEBACKGROUNDCOLOR CHROME.BROWSERACTION.SETBADGETEXT CHROME.TABS.EXECUTESCRIPT", <newline>       "source_files": [ <newline>         "background.html", <newline>+        "background.js", <newline>         "manifest.json" <newline>       ], <newline>-      "source_hash": "174cf55b15678010dff3a18983b940ef9091b115", <newline>+      "source_hash": "e01ddafb8290fe885fd5df25699909bcf0036c51", <newline>       "zip_path": "examples\/api\/browserAction\/make_page_red.zip" <newline>     }, <newline>     { <newline>@@ -377,7 +378,7 @@ <newline>         "popup.html", <newline>         "popup.js" <newline>       ], <newline>-      "source_hash": "62a69b77d59cda0b038c2e5acdbcae289b3f5176", <newline>+      "source_hash": "a557cefb7b3f3036cb65ff77b03538b6c6cdedf6", <newline>       "zip_path": "examples\/extensions\/app_launcher.zip" <newline>     }, <newline>     { <newline>@@ -891,7 +892,7 @@ <newline>         "background.js", <newline>         "manifest.json" <newline>       ], <newline>-      "source_hash": "4c779b160a04cb4264eee14d7969f665953699a7", <newline>+      "source_hash": "c294cbd813e4a59b3ee8270892f10c68aa3f53b3", <newline>       "zip_path": "examples\/api\/omnibox\/extension-docs.zip" <newline>     }, <newline>     { <newline>@@ -927,7 +928,7 @@ <newline>         "devtools.js", <newline>         "manifest.json" <newline>       ], <newline>-      "source_hash": "259e28743c1aa6d8778f92fa1af001299f7ad774", <newline>+      "source_hash": "b967625a22f6c961a8d3296824fc589ca1314d3a", <newline>       "zip_path": "examples\/api\/devtools\/network\/chrome-firephp.zip" <newline>     }, <newline>     { <newline>@@ -1477,9 +1478,10 @@ <newline>       "search_string": "MERGE WINDOWS MERGES ALL OF THE BROWSERS WINDOWS INTO THE CURRENT WINDOW BACKGROUND_PAGE BROWSER_ACTION TABS CHROME.BROWSERACTION.ONCLICKED CHROME.TABS.GET CHROME.TABS.GETALLINWINDOW CHROME.TABS.MOVE CHROME.WINDOWS.GET CHROME.WINDOWS.GETALL CHROME.WINDOWS.GETCURRENT", <newline>       "source_files": [ <newline>         "background.html", <newline>+        "background.js", <newline>         "manifest.json" <newline>       ], <newline>-      "source_hash": "4b5fe52788e0bef2f3871b36105eb53cc760c454", <newline>+      "source_hash": "0dec37bcc5aa0af5c4e04c305ff90869a9502fa1", <newline>       "zip_path": "examples\/api\/windows\/merge_windows.zip" <newline>     }, <newline>     { <newline>@@ -2004,13 +2006,17 @@ <newline>       "name": "Show Tabs in Process", <newline>       "packaged_app": false, <newline>       "path": "examples\/api\/processes\/show_tabs\/", <newline>-      "protocols": [], <newline>+      "protocols": [ <newline>+        "chrome:\/\/" <newline>+      ], <newline>       "search_string": "SHOW TABS IN PROCESS ADDS A BROWSER ACTION SHOWING WHICH TABS SHARE THE CURRENT TABS PROCESS. BROWSER_ACTION EXPERIMENTAL POPUP TABS CHROME.TABS.GET CHROME.TABS.GETSELECTED CHROME.TABS.UPDATE CHROME.WINDOWS.GET CHROME.WINDOWS.GETALL CHROME.WINDOWS.GETCURRENT CHROME.WINDOWS.UPDATE", <newline>       "source_files": [ <newline>         "manifest.json", <newline>-        "popup.html" <newline>+        "popup.css", <newline>+        "popup.html", <newline>+        "popup.js" <newline>       ], <newline>-      "source_hash": "c9818c3c4c2e4fae0a7cc29588514e050356fd52", <newline>+      "source_hash": "c71a35cc8266d8cbe800e48cf3366c27dbffb3fa", <newline>       "zip_path": "examples\/api\/processes\/show_tabs.zip" <newline>     }, <newline>     { <newline>@@ -2174,11 +2180,12 @@ <newline>       "search_string": "TEST SCREENSHOT EXTENSION DEMONSTRATE SCREENSHOT FUNCTIONALITY IN THE CHROME.TABS API. NOTE: ONLY WORKS FOR CODE.GOOGLE.COM BACKGROUND_PAGE BROWSER_ACTION TABS CHROME.BROWSERACTION.ONCLICKED CHROME.EXTENSION.GETURL CHROME.EXTENSION.GETVIEWS CHROME.TABS.CAPTUREVISIBLETAB CHROME.TABS.CREATE CHROME.TABS.ONUPDATED", <newline>       "source_files": [ <newline>         "background.html", <newline>+        "background.js", <newline>         "manifest.json", <newline>         "screenshot.html", <newline>         "screenshot.js" <newline>       ], <newline>-      "source_hash": "559684528065aa7782e802bfba6ebf3ec238d7cc", <newline>+      "source_hash": "59a96f4201e09897b65f219cd664119f94f3fdb5", <newline>       "zip_path": "examples\/api\/tabs\/screenshot.zip" <newline>     }, <newline>     { <newline>@@ -2234,10 +2241,11 @@ <newline>       "search_string": "TTS DEBUG TOOL FOR DEVELOPERS OF CHROME TTS ENGINE EXTENSIONS TO HELP THEM TEST THEIR ENGINES ARE IMPLEMENTING THE API CORRECTLY. TTS CHROME.TTS.GETVOICES CHROME.TTS.SPEAK CHROME.TTS.STOP", <newline>       "source_files": [ <newline>         "manifest.json", <newline>+        "ttsdebug.css", <newline>         "ttsdebug.html", <newline>         "ttsdebug.js" <newline>       ], <newline>-      "source_hash": "e81705ac4dd9a820b403e2b77d07e72b5de0198e", <newline>+      "source_hash": "0806af7ee646f2bae8dacd4f9fae16336e3e6807", <newline>       "zip_path": "examples\/extensions\/ttsdebug.zip" <newline>     }, <newline>     { <newline>@@ -2326,11 +2334,14 @@ <newline>       "source_files": [ <newline>         "_locales\/en\/messages.json", <newline>         "background.html", <newline>+        "background.js", <newline>         "manifest.json", <newline>         "navigation_collector.js", <newline>-        "popup.html" <newline>+        "popup.css", <newline>+        "popup.html", <newline>+        "popup.js" <newline>       ], <newline>-      "source_hash": "b6cda534937998343a093fdb74313a85edbc771e", <newline>+      "source_hash": "449424bf09813438d65a988ef3249d59c01462e2", <newline>       "zip_path": "examples\/api\/webNavigation\/basic.zip" <newline>     }, <newline>     {																								
Chromium	1	2	09556162f48063210ec8d5525641ef6a4a8c6c2	mkwst@chromium.org <mkwst@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Oct 25 10:32:32 2011 +0000	Adding `content_security_policy` to 5 sample extensions Touched: * tabs/screenshot * webNavigation/basic * windows/merge_windows * browserAction/make_page_red * extensions/ttsdebug TEST=	92644		http://codereview.chromium.org/8318001	svn://svn.chromium.org/chrome/trunk/src@107094 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/common/extensions/docs/samples.json b/chrome/common/extensions/docs/samples.json <newline>index f77b23b..709bfeb 100644 <newline>--- a/chrome/common/extensions/docs/samples.json <newline>+++ b/chrome/common/extensions/docs/samples.json <newline>@@ -285,9 +285,10 @@ <newline>       "search_string": "A BROWSER ACTION WITH NO ICON THAT MAKES THE PAGE RED  BACKGROUND_PAGE BROWSER_ACTION TABS CHROME.BROWSERACTION.ONCLICKED CHROME.BROWSERACTION.SETBADGEBACKGROUNDCOLOR CHROME.BROWSERACTION.SETBADGETEXT CHROME.TABS.EXECUTESCRIPT", <newline>       "source_files": [ <newline>         "background.html", <newline>+        "background.js", <newline>         "manifest.json" <newline>       ], <newline>-      "source_hash": "174cf55b15678010dff3a18983b940ef9091b115", <newline>+      "source_hash": "e01ddafb8290fe885fd5df25699909bcf0036c51", <newline>       "zip_path": "examples\/api\/browserAction\/make_page_red.zip" <newline>     }, <newline>     { <newline>@@ -377,7 +378,7 @@ <newline>         "popup.html", <newline>         "popup.js" <newline>       ], <newline>-      "source_hash": "62a69b77d59cda0b038c2e5acdbcae289b3f5176", <newline>+      "source_hash": "a557cefb7b3f3036cb65ff77b03538b6c6cdedf6", <newline>       "zip_path": "examples\/extensions\/app_launcher.zip" <newline>     }, <newline>     { <newline>@@ -891,7 +892,7 @@ <newline>         "background.js", <newline>         "manifest.json" <newline>       ], <newline>-      "source_hash": "4c779b160a04cb4264eee14d7969f665953699a7", <newline>+      "source_hash": "c294cbd813e4a59b3ee8270892f10c68aa3f53b3", <newline>       "zip_path": "examples\/api\/omnibox\/extension-docs.zip" <newline>     }, <newline>     { <newline>@@ -927,7 +928,7 @@ <newline>         "devtools.js", <newline>         "manifest.json" <newline>       ], <newline>-      "source_hash": "259e28743c1aa6d8778f92fa1af001299f7ad774", <newline>+      "source_hash": "b967625a22f6c961a8d3296824fc589ca1314d3a", <newline>       "zip_path": "examples\/api\/devtools\/network\/chrome-firephp.zip" <newline>     }, <newline>     { <newline>@@ -1477,9 +1478,10 @@ <newline>       "search_string": "MERGE WINDOWS MERGES ALL OF THE BROWSERS WINDOWS INTO THE CURRENT WINDOW BACKGROUND_PAGE BROWSER_ACTION TABS CHROME.BROWSERACTION.ONCLICKED CHROME.TABS.GET CHROME.TABS.GETALLINWINDOW CHROME.TABS.MOVE CHROME.WINDOWS.GET CHROME.WINDOWS.GETALL CHROME.WINDOWS.GETCURRENT", <newline>       "source_files": [ <newline>         "background.html", <newline>+        "background.js", <newline>         "manifest.json" <newline>       ], <newline>-      "source_hash": "4b5fe52788e0bef2f3871b36105eb53cc760c454", <newline>+      "source_hash": "0dec37bcc5aa0af5c4e04c305ff90869a9502fa1", <newline>       "zip_path": "examples\/api\/windows\/merge_windows.zip" <newline>     }, <newline>     { <newline>@@ -2004,13 +2006,17 @@ <newline>       "name": "Show Tabs in Process", <newline>       "packaged_app": false, <newline>       "path": "examples\/api\/processes\/show_tabs\/", <newline>-      "protocols": [], <newline>+      "protocols": [ <newline>+        "chrome:\/\/" <newline>+      ], <newline>       "search_string": "SHOW TABS IN PROCESS ADDS A BROWSER ACTION SHOWING WHICH TABS SHARE THE CURRENT TABS PROCESS. BROWSER_ACTION EXPERIMENTAL POPUP TABS CHROME.TABS.GET CHROME.TABS.GETSELECTED CHROME.TABS.UPDATE CHROME.WINDOWS.GET CHROME.WINDOWS.GETALL CHROME.WINDOWS.GETCURRENT CHROME.WINDOWS.UPDATE", <newline>       "source_files": [ <newline>         "manifest.json", <newline>-        "popup.html" <newline>+        "popup.css", <newline>+        "popup.html", <newline>+        "popup.js" <newline>       ], <newline>-      "source_hash": "c9818c3c4c2e4fae0a7cc29588514e050356fd52", <newline>+      "source_hash": "c71a35cc8266d8cbe800e48cf3366c27dbffb3fa", <newline>       "zip_path": "examples\/api\/processes\/show_tabs.zip" <newline>     }, <newline>     { <newline>@@ -2174,11 +2180,12 @@ <newline>       "search_string": "TEST SCREENSHOT EXTENSION DEMONSTRATE SCREENSHOT FUNCTIONALITY IN THE CHROME.TABS API. NOTE: ONLY WORKS FOR CODE.GOOGLE.COM BACKGROUND_PAGE BROWSER_ACTION TABS CHROME.BROWSERACTION.ONCLICKED CHROME.EXTENSION.GETURL CHROME.EXTENSION.GETVIEWS CHROME.TABS.CAPTUREVISIBLETAB CHROME.TABS.CREATE CHROME.TABS.ONUPDATED", <newline>       "source_files": [ <newline>         "background.html", <newline>+        "background.js", <newline>         "manifest.json", <newline>         "screenshot.html", <newline>         "screenshot.js" <newline>       ], <newline>-      "source_hash": "559684528065aa7782e802bfba6ebf3ec238d7cc", <newline>+      "source_hash": "59a96f4201e09897b65f219cd664119f94f3fdb5", <newline>       "zip_path": "examples\/api\/tabs\/screenshot.zip" <newline>     }, <newline>     { <newline>@@ -2234,10 +2241,11 @@ <newline>       "search_string": "TTS DEBUG TOOL FOR DEVELOPERS OF CHROME TTS ENGINE EXTENSIONS TO HELP THEM TEST THEIR ENGINES ARE IMPLEMENTING THE API CORRECTLY. TTS CHROME.TTS.GETVOICES CHROME.TTS.SPEAK CHROME.TTS.STOP", <newline>       "source_files": [ <newline>         "manifest.json", <newline>+        "ttsdebug.css", <newline>         "ttsdebug.html", <newline>         "ttsdebug.js" <newline>       ], <newline>-      "source_hash": "e81705ac4dd9a820b403e2b77d07e72b5de0198e", <newline>+      "source_hash": "0806af7ee646f2bae8dacd4f9fae16336e3e6807", <newline>       "zip_path": "examples\/extensions\/ttsdebug.zip" <newline>     }, <newline>     { <newline>@@ -2326,11 +2334,14 @@ <newline>       "source_files": [ <newline>         "_locales\/en\/messages.json", <newline>         "background.html", <newline>+        "background.js", <newline>         "manifest.json", <newline>         "navigation_collector.js", <newline>-        "popup.html" <newline>+        "popup.css", <newline>+        "popup.html", <newline>+        "popup.js" <newline>       ], <newline>-      "source_hash": "b6cda534937998343a093fdb74313a85edbc771e", <newline>+      "source_hash": "449424bf09813438d65a988ef3249d59c01462e2", <newline>       "zip_path": "examples\/api\/webNavigation\/basic.zip" <newline>     }, <newline>     {																								
Chromium	1	2	5505650d60a86b3d564c2be14e15e0cc69efbe2	mkwst@chromium.org <mkwst@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Oct 25 09:25:46 2011 +0000	Adding `content_security_policy` to 10 sample extensions. Touched: * contentSettings * contextMenus/basic * browserAction/set_icon_path * app_launcher * devtools/network/chrome-firephp * extension/isAllowedAccess * news_a11y * notifications * omnibox/extension-docs * pageAction/pageaction_by_url As a drive-by, fixed the broken `contentscript_xhr` by changing to Twitter's new API endpoint TEST=	92644		http://codereview.chromium.org/8309001	svn://svn.chromium.org/chrome/trunk/src@107084 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/common/extensions/docs/samples.json b/chrome/common/extensions/docs/samples.json <newline>index 8920cd6..f77b23b 100644 <newline>--- a/chrome/common/extensions/docs/samples.json <newline>+++ b/chrome/common/extensions/docs/samples.json <newline>@@ -70,6 +70,7 @@ <newline>     "chrome.experimental.savePage.saveAsMHTML": "experimental.savePage.html#method-saveAsMHTML", <newline>     "chrome.experimental.settings.clear": "experimental.settings.html#method-clear", <newline>     "chrome.experimental.settings.get": "experimental.settings.html#method-get", <newline>+    "chrome.experimental.settings.onChanged": "experimental.settings.html#event-onChanged", <newline>     "chrome.experimental.settings.remove": "experimental.settings.html#method-remove", <newline>     "chrome.experimental.settings.set": "experimental.settings.html#method-set", <newline>     "chrome.experimental.speechInput.isRecording": "experimental.speechInput.html#method-isRecording", <newline>@@ -225,9 +226,10 @@ <newline>       "search_string": "A BROWSER ACTION WHICH CHANGES ITS ICON WHEN CLICKED.  BACKGROUND_PAGE BROWSER_ACTION TABS CHROME.BROWSERACTION.ONCLICKED CHROME.BROWSERACTION.SETICON", <newline>       "source_files": [ <newline>         "background.html", <newline>+        "background.js", <newline>         "manifest.json" <newline>       ], <newline>-      "source_hash": "c5752555642e89340c57657b48440b0dcd74ee99", <newline>+      "source_hash": "ac932922a2fa7769791cf7fabefa95307d45153f", <newline>       "zip_path": "examples\/api\/browserAction\/set_icon_path.zip" <newline>     }, <newline>     { <newline>@@ -375,7 +377,7 @@ <newline>         "popup.html", <newline>         "popup.js" <newline>       ], <newline>-      "source_hash": "4cb1348cfca9c990117d52290f93eb5fc5081bc2", <newline>+      "source_hash": "62a69b77d59cda0b038c2e5acdbcae289b3f5176", <newline>       "zip_path": "examples\/extensions\/app_launcher.zip" <newline>     }, <newline>     { <newline>@@ -704,7 +706,7 @@ <newline>         "contentscript.js", <newline>         "manifest.json" <newline>       ], <newline>-      "source_hash": "749314ae399dfc5f6759358b384bc55997fed455", <newline>+      "source_hash": "419d1480250cc6fece78798fdfe99e4e1b4e28fd", <newline>       "zip_path": "examples\/howto\/contentscript_xhr.zip" <newline>     }, <newline>     { <newline>@@ -729,9 +731,10 @@ <newline>       "search_string": "CONTENT SETTINGS SHOWS THE CONTENT SETTINGS FOR THE CURRENT SITE. BROWSER_ACTION CONTENTSETTINGS POPUP TABS CHROME.TABS.GET CHROME.TABS.GETSELECTED", <newline>       "source_files": [ <newline>         "manifest.json", <newline>-        "popup.html" <newline>+        "popup.html", <newline>+        "popup.js" <newline>       ], <newline>-      "source_hash": "14d647a5ea1fa8551089fdb8810b6acaf16530cf", <newline>+      "source_hash": "95619d1c264bb65ac6f8ff105d34830ec87af284", <newline>       "zip_path": "examples\/api\/contentSettings.zip" <newline>     }, <newline>     { <newline>@@ -756,7 +759,7 @@ <newline>         "manifest.json", <newline>         "sample.js" <newline>       ], <newline>-      "source_hash": "0e35ce268b3b2cf3d9830e6411c85c5dfef2ffdf", <newline>+      "source_hash": "a42707be0ca36201f6e903858a8b3cd044c4eb25", <newline>       "zip_path": "examples\/api\/contextMenus\/basic.zip" <newline>     }, <newline>     { <newline>@@ -880,14 +883,15 @@ <newline>       "packaged_app": false, <newline>       "path": "examples\/api\/omnibox\/extension-docs\/", <newline>       "protocols": [ <newline>-        "http:\/\/" <newline>+        "https:\/\/" <newline>       ], <newline>       "search_string": "EXTENSION DOCS SEARCH SEARCH THE CHROME EXTENSIONS DOCUMENTATION.  TO USE, TYPE CRDOC PLUS A SEARCH TERM INTO THE OMNIBOX. BACKGROUND_PAGE TABS CHROME.OMNIBOX.ONINPUTCHANGED CHROME.OMNIBOX.ONINPUTENTERED CHROME.TABS.CREATE CHROME.TABS.GET CHROME.TABS.ONREMOVED CHROME.TABS.UPDATE", <newline>       "source_files": [ <newline>         "background.html", <newline>+        "background.js", <newline>         "manifest.json" <newline>       ], <newline>-      "source_hash": "0aa8ec9a2c091e227661ca5010d08f6823e643a7", <newline>+      "source_hash": "4c779b160a04cb4264eee14d7969f665953699a7", <newline>       "zip_path": "examples\/api\/omnibox\/extension-docs.zip" <newline>     }, <newline>     { <newline>@@ -918,11 +922,12 @@ <newline>       "search_string": "FIREPHP FOR CHROME EXTENDS THE DEVELOPER TOOLS, ADDING SUPPORT FOR PARSING FIREPHP MESSAGES FROM SERVER BACKGROUND_PAGE DEVTOOLS_PAGE EXPERIMENTAL TABS CHROME.EXPERIMENTAL.DEVTOOLS.NETWORK.GETHAR CHROME.EXPERIMENTAL.DEVTOOLS.NETWORK.ONREQUESTFINISHED CHROME.EXTENSION.ONREQUEST CHROME.EXTENSION.SENDREQUEST CHROME.TABS.EXECUTESCRIPT", <newline>       "source_files": [ <newline>         "background.html", <newline>+        "background.js", <newline>         "devtools.html", <newline>         "devtools.js", <newline>         "manifest.json" <newline>       ], <newline>-      "source_hash": "b607f6ca8f1ccf4343766b480ae21bb220dd949c", <newline>+      "source_hash": "259e28743c1aa6d8778f92fa1af001299f7ad774", <newline>       "zip_path": "examples\/api\/devtools\/network\/chrome-firephp.zip" <newline>     }, <newline>     { <newline>@@ -1560,10 +1565,14 @@ <newline>       ], <newline>       "search_string": "NEWS READER DISPLAYS THE FIRST 5 ITEMS FROM THE GOOGLE NEWS - TOP NEWS RSS FEED IN A POPUP. BROWSER_ACTION POPUP TABS CHROME.TABS.CREATE", <newline>       "source_files": [ <newline>+        "feed.css", <newline>         "feed.html", <newline>+        "feed.js", <newline>+        "feed_iframe.css", <newline>+        "feed_iframe.js", <newline>         "manifest.json" <newline>       ], <newline>-      "source_hash": "af7474bf0d3ef1a407f27ae0900167a1408ead35", <newline>+      "source_hash": "800a1cfe78a6ff8a82c85ef3bc52e71a42e9c664", <newline>       "zip_path": "examples\/extensions\/news_a11y.zip" <newline>     }, <newline>     { <newline>@@ -1638,9 +1647,7 @@ <newline>       "zip_path": "examples\/extensions\/news.zip" <newline>     }, <newline>     { <newline>-      "api_calls": [ <newline>-        "chrome.tabs.create" <newline>-      ], <newline>+      "api_calls": [], <newline>       "crx_path": null, <newline>       "description": "Shows off desktop notifications, which are \"toast\" windows that pop up on the desktop.", <newline>       "features": [ <newline>@@ -1655,14 +1662,16 @@ <newline>       "packaged_app": false, <newline>       "path": "examples\/api\/notifications\/", <newline>       "protocols": [], <newline>-      "search_string": "NOTIFICATION DEMO SHOWS OFF DESKTOP NOTIFICATIONS, WHICH ARE TOAST WINDOWS THAT POP UP ON THE DESKTOP. BACKGROUND_PAGE NOTIFICATIONS OPTIONS_PAGE TABS CHROME.TABS.CREATE", <newline>+      "search_string": "NOTIFICATION DEMO SHOWS OFF DESKTOP NOTIFICATIONS, WHICH ARE TOAST WINDOWS THAT POP UP ON THE DESKTOP. BACKGROUND_PAGE NOTIFICATIONS OPTIONS_PAGE TABS", <newline>       "source_files": [ <newline>         "background.html", <newline>-        "error.html", <newline>+        "background.js", <newline>         "manifest.json", <newline>-        "options.html" <newline>+        "options.html", <newline>+        "options.js", <newline>+        "style.css" <newline>       ], <newline>-      "source_hash": "bc2985ef75d717779cb6e1e523a3e063067c3494", <newline>+      "source_hash": "e816c895b8ee88a42187bf0734ef828d0d5f375f", <newline>       "zip_path": "examples\/api\/notifications.zip" <newline>     }, <newline>     { <newline>@@ -1737,9 +1746,10 @@ <newline>       "search_string": "PAGE ACTION BY URL SHOWS A PAGE ACTION FOR URLS WHICH HAVE THE LETTER G IN THEM. BACKGROUND_PAGE PAGE_ACTION TABS CHROME.PAGEACTION.SHOW CHROME.TABS.ONUPDATED", <newline>       "source_files": [ <newline>         "background.html", <newline>+        "background.js", <newline>         "manifest.json" <newline>       ], <newline>-      "source_hash": "732ef0951e1d6ff4afedb884b0e63cb342bb1499", <newline>+      "source_hash": "e027d9a9748719a4c216fa258a1623910509ac41", <newline>       "zip_path": "examples\/api\/pageAction\/pageaction_by_url.zip" <newline>     }, <newline>     { <newline>@@ -2329,25 +2339,26 @@ <newline>         "chrome.extension.isAllowedIncognitoAccess" <newline>       ], <newline>       "crx_path": null, <newline>-      "description": "Demonstrates the `extension.isAllowed???Access` APIs", <newline>+      "description": "Demonstrates the `extension.isAllowedFileSchemeAccess` and `extesion.isAllowedIncognitoAccess` APIs", <newline>       "features": [ <newline>         "browser_action" <newline>       ], <newline>       "icon": "sample-128.png", <newline>       "id": "0fa4abe6545f0316fea7cfa07c53aa48c4f3d018", <newline>-      "name": "`extension.isAllowed???Access` Example", <newline>+      "name": "`extension.isAllowedFileSchemeAccess` and `extension.isAllowedIncognitoAccess` Example", <newline>       "packaged_app": false, <newline>       "path": "examples\/api\/extension\/isAllowedAccess\/", <newline>       "protocols": [ <newline>         "file:\/\/" <newline>       ], <newline>-      "search_string": "`EXTENSION.ISALLOWED???ACCESS` EXAMPLE DEMONSTRATES THE `EXTENSION.ISALLOWED???ACCESS` APIS BROWSER_ACTION CHROME.EXTENSION.ISALLOWEDFILESCHEMEACCESS CHROME.EXTENSION.ISALLOWEDINCOGNITOACCESS", <newline>+      "search_string": "`EXTENSION.ISALLOWEDFILESCHEMEACCESS` AND `EXTENSION.ISALLOWEDINCOGNITOACCESS` EXAMPLE DEMONSTRATES THE `EXTENSION.ISALLOWEDFILESCHEMEACCESS` AND `EXTESION.ISALLOWEDINCOGNITOACCESS` APIS BROWSER_ACTION CHROME.EXTENSION.ISALLOWEDFILESCHEMEACCESS CHROME.EXTENSION.ISALLOWEDINCOGNITOACCESS", <newline>       "source_files": [ <newline>         "manifest.json", <newline>         "popup.html", <newline>+        "popup.js", <newline>         "sample.css" <newline>       ], <newline>-      "source_hash": "c8bfc2b60f25c24dc3c5aaf75dd635c9419df66d", <newline>+      "source_hash": "62ca453d8d1551ff63dd7c78b49d546bc3af17c6", <newline>       "zip_path": "examples\/api\/extension\/isAllowedAccess.zip" <newline>     } <newline>   ]																								
Chromium	1	2	6fed6f6a7c18e547ef547bdb7356c8a9988a81c	mkwst@chromium.org <mkwst@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Oct 25 09:25:46 2011 +0000	Adding `content_security_policy` to 10 sample extensions. Touched: * contentSettings * contextMenus/basic * browserAction/set_icon_path * app_launcher * devtools/network/chrome-firephp * extension/isAllowedAccess * news_a11y * notifications * omnibox/extension-docs * pageAction/pageaction_by_url As a drive-by, fixed the broken `contentscript_xhr` by changing to Twitter's new API endpoint TEST=	92644		http://codereview.chromium.org/8309001	svn://svn.chromium.org/chrome/trunk/src@107084 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/common/extensions/docs/samples.json b/chrome/common/extensions/docs/samples.json <newline>index 8920cd6..f77b23b 100644 <newline>--- a/chrome/common/extensions/docs/samples.json <newline>+++ b/chrome/common/extensions/docs/samples.json <newline>@@ -70,6 +70,7 @@ <newline>     "chrome.experimental.savePage.saveAsMHTML": "experimental.savePage.html#method-saveAsMHTML", <newline>     "chrome.experimental.settings.clear": "experimental.settings.html#method-clear", <newline>     "chrome.experimental.settings.get": "experimental.settings.html#method-get", <newline>+    "chrome.experimental.settings.onChanged": "experimental.settings.html#event-onChanged", <newline>     "chrome.experimental.settings.remove": "experimental.settings.html#method-remove", <newline>     "chrome.experimental.settings.set": "experimental.settings.html#method-set", <newline>     "chrome.experimental.speechInput.isRecording": "experimental.speechInput.html#method-isRecording", <newline>@@ -225,9 +226,10 @@ <newline>       "search_string": "A BROWSER ACTION WHICH CHANGES ITS ICON WHEN CLICKED.  BACKGROUND_PAGE BROWSER_ACTION TABS CHROME.BROWSERACTION.ONCLICKED CHROME.BROWSERACTION.SETICON", <newline>       "source_files": [ <newline>         "background.html", <newline>+        "background.js", <newline>         "manifest.json" <newline>       ], <newline>-      "source_hash": "c5752555642e89340c57657b48440b0dcd74ee99", <newline>+      "source_hash": "ac932922a2fa7769791cf7fabefa95307d45153f", <newline>       "zip_path": "examples\/api\/browserAction\/set_icon_path.zip" <newline>     }, <newline>     { <newline>@@ -375,7 +377,7 @@ <newline>         "popup.html", <newline>         "popup.js" <newline>       ], <newline>-      "source_hash": "4cb1348cfca9c990117d52290f93eb5fc5081bc2", <newline>+      "source_hash": "62a69b77d59cda0b038c2e5acdbcae289b3f5176", <newline>       "zip_path": "examples\/extensions\/app_launcher.zip" <newline>     }, <newline>     { <newline>@@ -704,7 +706,7 @@ <newline>         "contentscript.js", <newline>         "manifest.json" <newline>       ], <newline>-      "source_hash": "749314ae399dfc5f6759358b384bc55997fed455", <newline>+      "source_hash": "419d1480250cc6fece78798fdfe99e4e1b4e28fd", <newline>       "zip_path": "examples\/howto\/contentscript_xhr.zip" <newline>     }, <newline>     { <newline>@@ -729,9 +731,10 @@ <newline>       "search_string": "CONTENT SETTINGS SHOWS THE CONTENT SETTINGS FOR THE CURRENT SITE. BROWSER_ACTION CONTENTSETTINGS POPUP TABS CHROME.TABS.GET CHROME.TABS.GETSELECTED", <newline>       "source_files": [ <newline>         "manifest.json", <newline>-        "popup.html" <newline>+        "popup.html", <newline>+        "popup.js" <newline>       ], <newline>-      "source_hash": "14d647a5ea1fa8551089fdb8810b6acaf16530cf", <newline>+      "source_hash": "95619d1c264bb65ac6f8ff105d34830ec87af284", <newline>       "zip_path": "examples\/api\/contentSettings.zip" <newline>     }, <newline>     { <newline>@@ -756,7 +759,7 @@ <newline>         "manifest.json", <newline>         "sample.js" <newline>       ], <newline>-      "source_hash": "0e35ce268b3b2cf3d9830e6411c85c5dfef2ffdf", <newline>+      "source_hash": "a42707be0ca36201f6e903858a8b3cd044c4eb25", <newline>       "zip_path": "examples\/api\/contextMenus\/basic.zip" <newline>     }, <newline>     { <newline>@@ -880,14 +883,15 @@ <newline>       "packaged_app": false, <newline>       "path": "examples\/api\/omnibox\/extension-docs\/", <newline>       "protocols": [ <newline>-        "http:\/\/" <newline>+        "https:\/\/" <newline>       ], <newline>       "search_string": "EXTENSION DOCS SEARCH SEARCH THE CHROME EXTENSIONS DOCUMENTATION.  TO USE, TYPE CRDOC PLUS A SEARCH TERM INTO THE OMNIBOX. BACKGROUND_PAGE TABS CHROME.OMNIBOX.ONINPUTCHANGED CHROME.OMNIBOX.ONINPUTENTERED CHROME.TABS.CREATE CHROME.TABS.GET CHROME.TABS.ONREMOVED CHROME.TABS.UPDATE", <newline>       "source_files": [ <newline>         "background.html", <newline>+        "background.js", <newline>         "manifest.json" <newline>       ], <newline>-      "source_hash": "0aa8ec9a2c091e227661ca5010d08f6823e643a7", <newline>+      "source_hash": "4c779b160a04cb4264eee14d7969f665953699a7", <newline>       "zip_path": "examples\/api\/omnibox\/extension-docs.zip" <newline>     }, <newline>     { <newline>@@ -918,11 +922,12 @@ <newline>       "search_string": "FIREPHP FOR CHROME EXTENDS THE DEVELOPER TOOLS, ADDING SUPPORT FOR PARSING FIREPHP MESSAGES FROM SERVER BACKGROUND_PAGE DEVTOOLS_PAGE EXPERIMENTAL TABS CHROME.EXPERIMENTAL.DEVTOOLS.NETWORK.GETHAR CHROME.EXPERIMENTAL.DEVTOOLS.NETWORK.ONREQUESTFINISHED CHROME.EXTENSION.ONREQUEST CHROME.EXTENSION.SENDREQUEST CHROME.TABS.EXECUTESCRIPT", <newline>       "source_files": [ <newline>         "background.html", <newline>+        "background.js", <newline>         "devtools.html", <newline>         "devtools.js", <newline>         "manifest.json" <newline>       ], <newline>-      "source_hash": "b607f6ca8f1ccf4343766b480ae21bb220dd949c", <newline>+      "source_hash": "259e28743c1aa6d8778f92fa1af001299f7ad774", <newline>       "zip_path": "examples\/api\/devtools\/network\/chrome-firephp.zip" <newline>     }, <newline>     { <newline>@@ -1560,10 +1565,14 @@ <newline>       ], <newline>       "search_string": "NEWS READER DISPLAYS THE FIRST 5 ITEMS FROM THE GOOGLE NEWS - TOP NEWS RSS FEED IN A POPUP. BROWSER_ACTION POPUP TABS CHROME.TABS.CREATE", <newline>       "source_files": [ <newline>+        "feed.css", <newline>         "feed.html", <newline>+        "feed.js", <newline>+        "feed_iframe.css", <newline>+        "feed_iframe.js", <newline>         "manifest.json" <newline>       ], <newline>-      "source_hash": "af7474bf0d3ef1a407f27ae0900167a1408ead35", <newline>+      "source_hash": "800a1cfe78a6ff8a82c85ef3bc52e71a42e9c664", <newline>       "zip_path": "examples\/extensions\/news_a11y.zip" <newline>     }, <newline>     { <newline>@@ -1638,9 +1647,7 @@ <newline>       "zip_path": "examples\/extensions\/news.zip" <newline>     }, <newline>     { <newline>-      "api_calls": [ <newline>-        "chrome.tabs.create" <newline>-      ], <newline>+      "api_calls": [], <newline>       "crx_path": null, <newline>       "description": "Shows off desktop notifications, which are \"toast\" windows that pop up on the desktop.", <newline>       "features": [ <newline>@@ -1655,14 +1662,16 @@ <newline>       "packaged_app": false, <newline>       "path": "examples\/api\/notifications\/", <newline>       "protocols": [], <newline>-      "search_string": "NOTIFICATION DEMO SHOWS OFF DESKTOP NOTIFICATIONS, WHICH ARE TOAST WINDOWS THAT POP UP ON THE DESKTOP. BACKGROUND_PAGE NOTIFICATIONS OPTIONS_PAGE TABS CHROME.TABS.CREATE", <newline>+      "search_string": "NOTIFICATION DEMO SHOWS OFF DESKTOP NOTIFICATIONS, WHICH ARE TOAST WINDOWS THAT POP UP ON THE DESKTOP. BACKGROUND_PAGE NOTIFICATIONS OPTIONS_PAGE TABS", <newline>       "source_files": [ <newline>         "background.html", <newline>-        "error.html", <newline>+        "background.js", <newline>         "manifest.json", <newline>-        "options.html" <newline>+        "options.html", <newline>+        "options.js", <newline>+        "style.css" <newline>       ], <newline>-      "source_hash": "bc2985ef75d717779cb6e1e523a3e063067c3494", <newline>+      "source_hash": "e816c895b8ee88a42187bf0734ef828d0d5f375f", <newline>       "zip_path": "examples\/api\/notifications.zip" <newline>     }, <newline>     { <newline>@@ -1737,9 +1746,10 @@ <newline>       "search_string": "PAGE ACTION BY URL SHOWS A PAGE ACTION FOR URLS WHICH HAVE THE LETTER G IN THEM. BACKGROUND_PAGE PAGE_ACTION TABS CHROME.PAGEACTION.SHOW CHROME.TABS.ONUPDATED", <newline>       "source_files": [ <newline>         "background.html", <newline>+        "background.js", <newline>         "manifest.json" <newline>       ], <newline>-      "source_hash": "732ef0951e1d6ff4afedb884b0e63cb342bb1499", <newline>+      "source_hash": "e027d9a9748719a4c216fa258a1623910509ac41", <newline>       "zip_path": "examples\/api\/pageAction\/pageaction_by_url.zip" <newline>     }, <newline>     { <newline>@@ -2329,25 +2339,26 @@ <newline>         "chrome.extension.isAllowedIncognitoAccess" <newline>       ], <newline>       "crx_path": null, <newline>-      "description": "Demonstrates the `extension.isAllowed???Access` APIs", <newline>+      "description": "Demonstrates the `extension.isAllowedFileSchemeAccess` and `extesion.isAllowedIncognitoAccess` APIs", <newline>       "features": [ <newline>         "browser_action" <newline>       ], <newline>       "icon": "sample-128.png", <newline>       "id": "0fa4abe6545f0316fea7cfa07c53aa48c4f3d018", <newline>-      "name": "`extension.isAllowed???Access` Example", <newline>+      "name": "`extension.isAllowedFileSchemeAccess` and `extension.isAllowedIncognitoAccess` Example", <newline>       "packaged_app": false, <newline>       "path": "examples\/api\/extension\/isAllowedAccess\/", <newline>       "protocols": [ <newline>         "file:\/\/" <newline>       ], <newline>-      "search_string": "`EXTENSION.ISALLOWED???ACCESS` EXAMPLE DEMONSTRATES THE `EXTENSION.ISALLOWED???ACCESS` APIS BROWSER_ACTION CHROME.EXTENSION.ISALLOWEDFILESCHEMEACCESS CHROME.EXTENSION.ISALLOWEDINCOGNITOACCESS", <newline>+      "search_string": "`EXTENSION.ISALLOWEDFILESCHEMEACCESS` AND `EXTENSION.ISALLOWEDINCOGNITOACCESS` EXAMPLE DEMONSTRATES THE `EXTENSION.ISALLOWEDFILESCHEMEACCESS` AND `EXTESION.ISALLOWEDINCOGNITOACCESS` APIS BROWSER_ACTION CHROME.EXTENSION.ISALLOWEDFILESCHEMEACCESS CHROME.EXTENSION.ISALLOWEDINCOGNITOACCESS", <newline>       "source_files": [ <newline>         "manifest.json", <newline>         "popup.html", <newline>+        "popup.js", <newline>         "sample.css" <newline>       ], <newline>-      "source_hash": "c8bfc2b60f25c24dc3c5aaf75dd635c9419df66d", <newline>+      "source_hash": "62ca453d8d1551ff63dd7c78b49d546bc3af17c6", <newline>       "zip_path": "examples\/api\/extension\/isAllowedAccess.zip" <newline>     } <newline>   ]																								
Chromium	5		daecceece28e5a67b47424276c94b3b87f3f5ff	brettw@chromium.org <brettw@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Oct 25 03:06:12 2011 +0000	Revert 107042 - Replace most LOG/CHECK statements with DLOG/DCHECK statements in base. I tried hard not to change CHECKs that had side effects. I kept fatal checks that seemed security or debugging-info (in crash reports) sensitive, and ones that seems particularly well-conceived. TBR=brettw@chromium.org			http://codereview.chromium.org/8351025	svn://svn.chromium.org/chrome/trunk/src@107051 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/base/win/i18n.cc b/base/win/i18n.cc <newline>index 9e523a1..59480f2 100644 <newline>--- a/base/win/i18n.cc <newline>+++ b/base/win/i18n.cc <newline>@@ -75,7 +75,7 @@ bool GetMUIPreferredUILanguageList(LanguageFunction function, ULONG flags, <newline>             << "Failed getting size of preferred UI languages."; <newline>       } <newline>     } else { <newline>-      DVLOG(2) << "MUI not available."; <newline>+      VLOG(2) << "MUI not available."; <newline>     } <newline>   } else { <newline>     NOTREACHED() << "kernel32.dll not found.";																								
Chromium	5		f4a8e1220d91ba95c2c46ec232dd53d27807ecd	brettw@chromium.org <brettw@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Oct 25 03:06:12 2011 +0000	Revert 107042 - Replace most LOG/CHECK statements with DLOG/DCHECK statements in base. I tried hard not to change CHECKs that had side effects. I kept fatal checks that seemed security or debugging-info (in crash reports) sensitive, and ones that seems particularly well-conceived. TBR=brettw@chromium.org			http://codereview.chromium.org/8351025	svn://svn.chromium.org/chrome/trunk/src@107051 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/base/win/i18n.cc b/base/win/i18n.cc <newline>index 9e523a1..59480f2 100644 <newline>--- a/base/win/i18n.cc <newline>+++ b/base/win/i18n.cc <newline>@@ -75,7 +75,7 @@ bool GetMUIPreferredUILanguageList(LanguageFunction function, ULONG flags, <newline>             << "Failed getting size of preferred UI languages."; <newline>       } <newline>     } else { <newline>-      DVLOG(2) << "MUI not available."; <newline>+      VLOG(2) << "MUI not available."; <newline>     } <newline>   } else { <newline>     NOTREACHED() << "kernel32.dll not found.";																								
Chromium	5		eda16399a9f5e1a7c1c3d52aae9d63c54f5e42b	brettw@chromium.org <brettw@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Oct 25 02:12:09 2011 +0000	Replace most LOG/CHECK statements with DLOG/DCHECK statements in base. I tried hard not to change CHECKs that had side effects. I kept fatal checks that seemed security or debugging-info (in crash reports) sensitive, and ones that seems particularly well-conceived.			http://codereview.chromium.org/8368009	svn://svn.chromium.org/chrome/trunk/src@107042 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/base/win/i18n.cc b/base/win/i18n.cc <newline>index 59480f2..9e523a1 100644 <newline>--- a/base/win/i18n.cc <newline>+++ b/base/win/i18n.cc <newline>@@ -75,7 +75,7 @@ bool GetMUIPreferredUILanguageList(LanguageFunction function, ULONG flags, <newline>             << "Failed getting size of preferred UI languages."; <newline>       } <newline>     } else { <newline>-      VLOG(2) << "MUI not available."; <newline>+      DVLOG(2) << "MUI not available."; <newline>     } <newline>   } else { <newline>     NOTREACHED() << "kernel32.dll not found.";																								
Chromium	5		a7d86e75fe4a37ef12f3ae4bd28b043932d2aa0	brettw@chromium.org <brettw@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Oct 25 02:12:09 2011 +0000	Replace most LOG/CHECK statements with DLOG/DCHECK statements in base. I tried hard not to change CHECKs that had side effects. I kept fatal checks that seemed security or debugging-info (in crash reports) sensitive, and ones that seems particularly well-conceived.			http://codereview.chromium.org/8368009	svn://svn.chromium.org/chrome/trunk/src@107042 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/base/win/i18n.cc b/base/win/i18n.cc <newline>index 59480f2..9e523a1 100644 <newline>--- a/base/win/i18n.cc <newline>+++ b/base/win/i18n.cc <newline>@@ -75,7 +75,7 @@ bool GetMUIPreferredUILanguageList(LanguageFunction function, ULONG flags, <newline>             << "Failed getting size of preferred UI languages."; <newline>       } <newline>     } else { <newline>-      VLOG(2) << "MUI not available."; <newline>+      DVLOG(2) << "MUI not available."; <newline>     } <newline>   } else { <newline>     NOTREACHED() << "kernel32.dll not found.";																								
Chromium	5		74636a8a7f39846afea7c8a6041990814510557	estade@chromium.org <estade@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Oct 19 20:42:22 2011 +0000	options: fix up vertical spacing issues: 1. there is extraneous padding between sections in some cases (i.e. when the top or bottom element has top or bottom margin). Solution: don't apply top margin for top element or bottom margin for bottom element. 2. the top section h3 on each top level options page jiggles when you switch to that page (each has a different vertical alignment relative to the page title). Solution: set vertical alignment of sections on the section h3 rather than section content (content will in turn align to h3 baseline). 3. the security button on the advanced page is too close to the checkbox. Solution: add .section-group div. TEST=manual	none		http://codereview.chromium.org/8344027	svn://svn.chromium.org/chrome/trunk/src@106378 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/resources/options/options_page.css b/chrome/browser/resources/options/options_page.css <newline>index fa009f6..d6dc054 100644 <newline>--- a/chrome/browser/resources/options/options_page.css <newline>+++ b/chrome/browser/resources/options/options_page.css <newline>@@ -268,6 +268,14 @@ section > div:only-of-type { <newline>   -webkit-box-flex: 1; <newline> } <newline>+/* Don't allow edge margin on the first/last child of a section. */ <newline>+section > h3 + * > *:last-child { <newline>+  margin-bottom: 0; <newline>+} <newline>+section > h3 + * > *:first-child { <newline>+  margin-top: 0; <newline>+} <newline>+ <newline> .option { <newline>   margin-top: 0; <newline> } <newline>@@ -580,10 +588,15 @@ html[flashPluginSupportsClearSiteData] .clear-plugin-lso-data-disabled { <newline> /* right table column containing settable options */ <newline> .displaytable > section > h3 + div, <newline> .displaytable > section > h3 + table { <newline>-  padding-top: 17px; <newline>   padding-bottom: 20px; <newline> } <newline>+/* Setting the padding on the header so the alignment doesn't depend on the <newline>+ * contents of the right table column.  */ <newline>+.displaytable > section > h3 { <newline>+  padding-top: 17px; <newline>+} <newline>+ <newline> .displaytable > section > * { <newline>   display: table-cell; <newline>   vertical-align: baseline;																								
Chromium	5		6680f0a2f230d3897f34dd385ead90848bc1265	estade@chromium.org <estade@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Wed Oct 19 20:42:22 2011 +0000	options: fix up vertical spacing issues: 1. there is extraneous padding between sections in some cases (i.e. when the top or bottom element has top or bottom margin). Solution: don't apply top margin for top element or bottom margin for bottom element. 2. the top section h3 on each top level options page jiggles when you switch to that page (each has a different vertical alignment relative to the page title). Solution: set vertical alignment of sections on the section h3 rather than section content (content will in turn align to h3 baseline). 3. the security button on the advanced page is too close to the checkbox. Solution: add .section-group div. TEST=manual	none		http://codereview.chromium.org/8344027	svn://svn.chromium.org/chrome/trunk/src@106378 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/resources/options/options_page.css b/chrome/browser/resources/options/options_page.css <newline>index fa009f6..d6dc054 100644 <newline>--- a/chrome/browser/resources/options/options_page.css <newline>+++ b/chrome/browser/resources/options/options_page.css <newline>@@ -268,6 +268,14 @@ section > div:only-of-type { <newline>   -webkit-box-flex: 1; <newline> } <newline>+/* Don't allow edge margin on the first/last child of a section. */ <newline>+section > h3 + * > *:last-child { <newline>+  margin-bottom: 0; <newline>+} <newline>+section > h3 + * > *:first-child { <newline>+  margin-top: 0; <newline>+} <newline>+ <newline> .option { <newline>   margin-top: 0; <newline> } <newline>@@ -580,10 +588,15 @@ html[flashPluginSupportsClearSiteData] .clear-plugin-lso-data-disabled { <newline> /* right table column containing settable options */ <newline> .displaytable > section > h3 + div, <newline> .displaytable > section > h3 + table { <newline>-  padding-top: 17px; <newline>   padding-bottom: 20px; <newline> } <newline>+/* Setting the padding on the header so the alignment doesn't depend on the <newline>+ * contents of the right table column.  */ <newline>+.displaytable > section > h3 { <newline>+  padding-top: 17px; <newline>+} <newline>+ <newline> .displaytable > section > * { <newline>   display: table-cell; <newline>   vertical-align: baseline;																								
Chromium	3	1	843876488c43c6f3321014d6dbdbf23e93d42e0	mkwst@chromium.org <mkwst@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Oct 18 13:47:31 2011 +0000	Samples for `enableReferrer` and `allowThirdPartyCookies` should use the `privacy` namespace. While fixing these samples, I've also added `content_security_policy` as a drive-by. TEST=	92644		http://codereview.chromium.org/8341010	svn://svn.chromium.org/chrome/trunk/src@106059 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/common/extensions/docs/samples.json b/chrome/common/extensions/docs/samples.json <newline>index e6d1a9a..8920cd6 100644 <newline>--- a/chrome/common/extensions/docs/samples.json <newline>+++ b/chrome/common/extensions/docs/samples.json <newline>@@ -407,9 +407,37 @@ <newline>       "description": "Sample extension which demonstrates how to access a preference.", <newline>       "features": [ <newline>         "browser_action", <newline>-        "contentSettings", <newline>         "experimental", <newline>-        "popup" <newline>+        "popup", <newline>+        "privacy" <newline>+      ], <newline>+      "icon": null, <newline>+      "id": "0bf0930a32829dfb77170535ecb27adc2de3998a", <newline>+      "name": "Block\/allow referrer API example extension", <newline>+      "packaged_app": false, <newline>+      "path": "examples\/api\/preferences\/enableReferrer\/", <newline>+      "protocols": [], <newline>+      "search_string": "BLOCK\/ALLOW REFERRER API EXAMPLE EXTENSION SAMPLE EXTENSION WHICH DEMONSTRATES HOW TO ACCESS A PREFERENCE. BROWSER_ACTION EXPERIMENTAL POPUP PRIVACY CHROME.EXTENSION.ISALLOWEDINCOGNITOACCESS", <newline>+      "source_files": [ <newline>+        "manifest.json", <newline>+        "popup.css", <newline>+        "popup.html", <newline>+        "popup.js" <newline>+      ], <newline>+      "source_hash": "c2114f2faf51a5fdc08002cab3a5bdaefb2073cd", <newline>+      "zip_path": "examples\/api\/preferences\/enableReferrer.zip" <newline>+    }, <newline>+    { <newline>+      "api_calls": [ <newline>+        "chrome.extension.isAllowedIncognitoAccess" <newline>+      ], <newline>+      "crx_path": null, <newline>+      "description": "Sample extension which demonstrates how to access a preference.", <newline>+      "features": [ <newline>+        "browser_action", <newline>+        "experimental", <newline>+        "popup", <newline>+        "privacy" <newline>       ], <newline>       "icon": null, <newline>       "id": "7da105f28e200d42510aff3591dfa5aeb0b82605", <newline>@@ -417,12 +445,14 @@ <newline>       "packaged_app": false, <newline>       "path": "examples\/api\/preferences\/allowThirdPartyCookies\/", <newline>       "protocols": [], <newline>-      "search_string": "BLOCK\/ALLOW THIRD-PARTY COOKIES API EXAMPLE EXTENSION SAMPLE EXTENSION WHICH DEMONSTRATES HOW TO ACCESS A PREFERENCE. BROWSER_ACTION CONTENTSETTINGS EXPERIMENTAL POPUP CHROME.EXTENSION.ISALLOWEDINCOGNITOACCESS", <newline>+      "search_string": "BLOCK\/ALLOW THIRD-PARTY COOKIES API EXAMPLE EXTENSION SAMPLE EXTENSION WHICH DEMONSTRATES HOW TO ACCESS A PREFERENCE. BROWSER_ACTION EXPERIMENTAL POPUP PRIVACY CHROME.EXTENSION.ISALLOWEDINCOGNITOACCESS", <newline>       "source_files": [ <newline>         "manifest.json", <newline>-        "popup.html" <newline>+        "popup.css", <newline>+        "popup.html", <newline>+        "popup.js" <newline>       ], <newline>-      "source_hash": "67648790a6ee68e071627e870868d5582e1ef2b5", <newline>+      "source_hash": "7ccf3f2ab08bbde36f62df34e93fc57eaff2fa3a", <newline>       "zip_path": "examples\/api\/preferences\/allowThirdPartyCookies.zip" <newline>     }, <newline>     { <newline>@@ -805,32 +835,6 @@ <newline>       "zip_path": "examples\/extensions\/email_this_page.zip" <newline>     }, <newline>     { <newline>-      "api_calls": [ <newline>-        "chrome.extension.isAllowedIncognitoAccess" <newline>-      ], <newline>-      "crx_path": null, <newline>-      "description": "Sample extension which demonstrates how to access a preference.", <newline>-      "features": [ <newline>-        "browser_action", <newline>-        "contentSettings", <newline>-        "experimental", <newline>-        "popup" <newline>-      ], <newline>-      "icon": null, <newline>-      "id": "0bf0930a32829dfb77170535ecb27adc2de3998a", <newline>-      "name": "Enable\/disable referrers API example extension", <newline>-      "packaged_app": false, <newline>-      "path": "examples\/api\/preferences\/enableReferrer\/", <newline>-      "protocols": [], <newline>-      "search_string": "ENABLE\/DISABLE REFERRERS API EXAMPLE EXTENSION SAMPLE EXTENSION WHICH DEMONSTRATES HOW TO ACCESS A PREFERENCE. BROWSER_ACTION CONTENTSETTINGS EXPERIMENTAL POPUP CHROME.EXTENSION.ISALLOWEDINCOGNITOACCESS", <newline>-      "source_files": [ <newline>-        "manifest.json", <newline>-        "popup.html" <newline>-      ], <newline>-      "source_hash": "e3514a32b04876d79e64f31ffe7beb4bbae98d33", <newline>-      "zip_path": "examples\/api\/preferences\/enableReferrer.zip" <newline>-    }, <newline>-    { <newline>       "api_calls": [], <newline>       "crx_path": null, <newline>       "description": "A sample extension which uses Google Analytics to track usage.", <newline>@@ -1439,7 +1443,7 @@ <newline>         "popup.html", <newline>         "popup.js" <newline>       ], <newline>-      "source_hash": "175f010b7eacb72207b7018732d3e6dca4e8d164", <newline>+      "source_hash": "8446b89f4eb2d8cb6b49e306e87845b9dd385af5", <newline>       "zip_path": "examples\/extensions\/mappy.zip" <newline>     }, <newline>     {																								
Chromium	3	1	8ae297434a9e33d1006c52b6d13d8a78e3b7e5e	mkwst@chromium.org <mkwst@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Oct 18 13:47:31 2011 +0000	Samples for `enableReferrer` and `allowThirdPartyCookies` should use the `privacy` namespace. While fixing these samples, I've also added `content_security_policy` as a drive-by. TEST=	92644		http://codereview.chromium.org/8341010	svn://svn.chromium.org/chrome/trunk/src@106059 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/common/extensions/docs/samples.json b/chrome/common/extensions/docs/samples.json <newline>index e6d1a9a..8920cd6 100644 <newline>--- a/chrome/common/extensions/docs/samples.json <newline>+++ b/chrome/common/extensions/docs/samples.json <newline>@@ -407,9 +407,37 @@ <newline>       "description": "Sample extension which demonstrates how to access a preference.", <newline>       "features": [ <newline>         "browser_action", <newline>-        "contentSettings", <newline>         "experimental", <newline>-        "popup" <newline>+        "popup", <newline>+        "privacy" <newline>+      ], <newline>+      "icon": null, <newline>+      "id": "0bf0930a32829dfb77170535ecb27adc2de3998a", <newline>+      "name": "Block\/allow referrer API example extension", <newline>+      "packaged_app": false, <newline>+      "path": "examples\/api\/preferences\/enableReferrer\/", <newline>+      "protocols": [], <newline>+      "search_string": "BLOCK\/ALLOW REFERRER API EXAMPLE EXTENSION SAMPLE EXTENSION WHICH DEMONSTRATES HOW TO ACCESS A PREFERENCE. BROWSER_ACTION EXPERIMENTAL POPUP PRIVACY CHROME.EXTENSION.ISALLOWEDINCOGNITOACCESS", <newline>+      "source_files": [ <newline>+        "manifest.json", <newline>+        "popup.css", <newline>+        "popup.html", <newline>+        "popup.js" <newline>+      ], <newline>+      "source_hash": "c2114f2faf51a5fdc08002cab3a5bdaefb2073cd", <newline>+      "zip_path": "examples\/api\/preferences\/enableReferrer.zip" <newline>+    }, <newline>+    { <newline>+      "api_calls": [ <newline>+        "chrome.extension.isAllowedIncognitoAccess" <newline>+      ], <newline>+      "crx_path": null, <newline>+      "description": "Sample extension which demonstrates how to access a preference.", <newline>+      "features": [ <newline>+        "browser_action", <newline>+        "experimental", <newline>+        "popup", <newline>+        "privacy" <newline>       ], <newline>       "icon": null, <newline>       "id": "7da105f28e200d42510aff3591dfa5aeb0b82605", <newline>@@ -417,12 +445,14 @@ <newline>       "packaged_app": false, <newline>       "path": "examples\/api\/preferences\/allowThirdPartyCookies\/", <newline>       "protocols": [], <newline>-      "search_string": "BLOCK\/ALLOW THIRD-PARTY COOKIES API EXAMPLE EXTENSION SAMPLE EXTENSION WHICH DEMONSTRATES HOW TO ACCESS A PREFERENCE. BROWSER_ACTION CONTENTSETTINGS EXPERIMENTAL POPUP CHROME.EXTENSION.ISALLOWEDINCOGNITOACCESS", <newline>+      "search_string": "BLOCK\/ALLOW THIRD-PARTY COOKIES API EXAMPLE EXTENSION SAMPLE EXTENSION WHICH DEMONSTRATES HOW TO ACCESS A PREFERENCE. BROWSER_ACTION EXPERIMENTAL POPUP PRIVACY CHROME.EXTENSION.ISALLOWEDINCOGNITOACCESS", <newline>       "source_files": [ <newline>         "manifest.json", <newline>-        "popup.html" <newline>+        "popup.css", <newline>+        "popup.html", <newline>+        "popup.js" <newline>       ], <newline>-      "source_hash": "67648790a6ee68e071627e870868d5582e1ef2b5", <newline>+      "source_hash": "7ccf3f2ab08bbde36f62df34e93fc57eaff2fa3a", <newline>       "zip_path": "examples\/api\/preferences\/allowThirdPartyCookies.zip" <newline>     }, <newline>     { <newline>@@ -805,32 +835,6 @@ <newline>       "zip_path": "examples\/extensions\/email_this_page.zip" <newline>     }, <newline>     { <newline>-      "api_calls": [ <newline>-        "chrome.extension.isAllowedIncognitoAccess" <newline>-      ], <newline>-      "crx_path": null, <newline>-      "description": "Sample extension which demonstrates how to access a preference.", <newline>-      "features": [ <newline>-        "browser_action", <newline>-        "contentSettings", <newline>-        "experimental", <newline>-        "popup" <newline>-      ], <newline>-      "icon": null, <newline>-      "id": "0bf0930a32829dfb77170535ecb27adc2de3998a", <newline>-      "name": "Enable\/disable referrers API example extension", <newline>-      "packaged_app": false, <newline>-      "path": "examples\/api\/preferences\/enableReferrer\/", <newline>-      "protocols": [], <newline>-      "search_string": "ENABLE\/DISABLE REFERRERS API EXAMPLE EXTENSION SAMPLE EXTENSION WHICH DEMONSTRATES HOW TO ACCESS A PREFERENCE. BROWSER_ACTION CONTENTSETTINGS EXPERIMENTAL POPUP CHROME.EXTENSION.ISALLOWEDINCOGNITOACCESS", <newline>-      "source_files": [ <newline>-        "manifest.json", <newline>-        "popup.html" <newline>-      ], <newline>-      "source_hash": "e3514a32b04876d79e64f31ffe7beb4bbae98d33", <newline>-      "zip_path": "examples\/api\/preferences\/enableReferrer.zip" <newline>-    }, <newline>-    { <newline>       "api_calls": [], <newline>       "crx_path": null, <newline>       "description": "A sample extension which uses Google Analytics to track usage.", <newline>@@ -1439,7 +1443,7 @@ <newline>         "popup.html", <newline>         "popup.js" <newline>       ], <newline>-      "source_hash": "175f010b7eacb72207b7018732d3e6dca4e8d164", <newline>+      "source_hash": "8446b89f4eb2d8cb6b49e306e87845b9dd385af5", <newline>       "zip_path": "examples\/extensions\/mappy.zip" <newline>     }, <newline>     {																								
Chromium	5		f2269aa7e89b1ed27a964b5c212e4cb5fb9a96a	mkwst@chromium.org <mkwst@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Oct 18 08:42:56 2011 +0000	Adding `content_security_policy` to the "Mappy" sample. This involved pretty much rewriting the popup code to avoid a script injected via `document.write` in the Maps API code. TEST=	92644		http://codereview.chromium.org/8311007	svn://svn.chromium.org/chrome/trunk/src@106043 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/common/extensions/docs/samples.json b/chrome/common/extensions/docs/samples.json <newline>index dd2b4cb..e6d1a9a 100644 <newline>--- a/chrome/common/extensions/docs/samples.json <newline>+++ b/chrome/common/extensions/docs/samples.json <newline>@@ -1426,16 +1426,20 @@ <newline>       "packaged_app": false, <newline>       "path": "examples\/extensions\/mappy\/", <newline>       "protocols": [ <newline>-        "http:\/\/" <newline>+        "https:\/\/", <newline>+        "https:\/\/" <newline>       ], <newline>       "search_string": "MAPPY FINDS ADDRESSES IN THE WEB PAGE YOURE ON AND POPS UP A MAP WINDOW. BACKGROUND_PAGE PAGE_ACTION POPUP TABS CHROME.EXTENSION.GETBACKGROUNDPAGE CHROME.EXTENSION.ONREQUEST CHROME.PAGEACTION.HIDE CHROME.PAGEACTION.SETTITLE CHROME.PAGEACTION.SHOW CHROME.TABS.GET CHROME.TABS.GETSELECTED CHROME.TABS.ONSELECTIONCHANGED CHROME.TABS.ONUPDATED CHROME.TABS.SENDREQUEST", <newline>       "source_files": [ <newline>         "background.html", <newline>+        "background.js", <newline>         "manifest.json", <newline>         "mappy_content_script.js", <newline>-        "popup.html" <newline>+        "popup.css", <newline>+        "popup.html", <newline>+        "popup.js" <newline>       ], <newline>-      "source_hash": "81cf2d3975d7df8b58e5226c5b2b6df026446511", <newline>+      "source_hash": "175f010b7eacb72207b7018732d3e6dca4e8d164", <newline>       "zip_path": "examples\/extensions\/mappy.zip" <newline>     }, <newline>     {																								
Chromium	5		c806dff522222f36dfc1345c7f1c20a2c54dfe1	mkwst@chromium.org <mkwst@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Tue Oct 18 08:42:56 2011 +0000	Adding `content_security_policy` to the "Mappy" sample. This involved pretty much rewriting the popup code to avoid a script injected via `document.write` in the Maps API code. TEST=	92644		http://codereview.chromium.org/8311007	svn://svn.chromium.org/chrome/trunk/src@106043 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/common/extensions/docs/samples.json b/chrome/common/extensions/docs/samples.json <newline>index dd2b4cb..e6d1a9a 100644 <newline>--- a/chrome/common/extensions/docs/samples.json <newline>+++ b/chrome/common/extensions/docs/samples.json <newline>@@ -1426,16 +1426,20 @@ <newline>       "packaged_app": false, <newline>       "path": "examples\/extensions\/mappy\/", <newline>       "protocols": [ <newline>-        "http:\/\/" <newline>+        "https:\/\/", <newline>+        "https:\/\/" <newline>       ], <newline>       "search_string": "MAPPY FINDS ADDRESSES IN THE WEB PAGE YOURE ON AND POPS UP A MAP WINDOW. BACKGROUND_PAGE PAGE_ACTION POPUP TABS CHROME.EXTENSION.GETBACKGROUNDPAGE CHROME.EXTENSION.ONREQUEST CHROME.PAGEACTION.HIDE CHROME.PAGEACTION.SETTITLE CHROME.PAGEACTION.SHOW CHROME.TABS.GET CHROME.TABS.GETSELECTED CHROME.TABS.ONSELECTIONCHANGED CHROME.TABS.ONUPDATED CHROME.TABS.SENDREQUEST", <newline>       "source_files": [ <newline>         "background.html", <newline>+        "background.js", <newline>         "manifest.json", <newline>         "mappy_content_script.js", <newline>-        "popup.html" <newline>+        "popup.css", <newline>+        "popup.html", <newline>+        "popup.js" <newline>       ], <newline>-      "source_hash": "81cf2d3975d7df8b58e5226c5b2b6df026446511", <newline>+      "source_hash": "175f010b7eacb72207b7018732d3e6dca4e8d164", <newline>       "zip_path": "examples\/extensions\/mappy.zip" <newline>     }, <newline>     {																								
Chromium	3	2	1b0dd2e7df7f23a0f58452a581ca7dcdc8a9556	mkwst@chromium.org <mkwst@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Sun Oct 16 08:45:29 2011 +0000	Adding `content_security_policy` to imageinfo extension. TEST=	92644		http://codereview.chromium.org/8310002	svn://svn.chromium.org/chrome/trunk/src@105725 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/common/extensions/docs/samples.json b/chrome/common/extensions/docs/samples.json <newline>index 82a1d31..d9eb155 100644 <newline>--- a/chrome/common/extensions/docs/samples.json <newline>+++ b/chrome/common/extensions/docs/samples.json <newline>@@ -1277,13 +1277,16 @@ <newline>       "search_string": "IMAGEINFO GET IMAGE INFO FOR IMAGES, INCLUDING EXIF DATA BACKGROUND_PAGE CONTEXTMENUS TABS CHROME.CONTEXTMENUS.CREATE CHROME.TABS.GET CHROME.TABS.GETCURRENT CHROME.WINDOWS.CREATE CHROME.WINDOWS.UPDATE", <newline>       "source_files": [ <newline>         "background.html", <newline>+        "background.js", <newline>         "imageinfo\/binaryajax.js", <newline>         "imageinfo\/exif.js", <newline>         "imageinfo\/imageinfo.js", <newline>+        "info.css", <newline>         "info.html", <newline>+        "info.js", <newline>         "manifest.json" <newline>       ], <newline>-      "source_hash": "c746d9114348f4b414c1ec05e988e2807feb963a", <newline>+      "source_hash": "3a61d1ad772ef01e0d3cc01a8bedbe7da452dd0b", <newline>       "zip_path": "examples\/extensions\/imageinfo.zip" <newline>     }, <newline>     {																								
Chromium	3	2	184b405ca9797c7e8d74f70c7c91f4e8c2d7313	mkwst@chromium.org <mkwst@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Sun Oct 16 08:45:29 2011 +0000	Adding `content_security_policy` to imageinfo extension. TEST=	92644		http://codereview.chromium.org/8310002	svn://svn.chromium.org/chrome/trunk/src@105725 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/common/extensions/docs/samples.json b/chrome/common/extensions/docs/samples.json <newline>index 82a1d31..d9eb155 100644 <newline>--- a/chrome/common/extensions/docs/samples.json <newline>+++ b/chrome/common/extensions/docs/samples.json <newline>@@ -1277,13 +1277,16 @@ <newline>       "search_string": "IMAGEINFO GET IMAGE INFO FOR IMAGES, INCLUDING EXIF DATA BACKGROUND_PAGE CONTEXTMENUS TABS CHROME.CONTEXTMENUS.CREATE CHROME.TABS.GET CHROME.TABS.GETCURRENT CHROME.WINDOWS.CREATE CHROME.WINDOWS.UPDATE", <newline>       "source_files": [ <newline>         "background.html", <newline>+        "background.js", <newline>         "imageinfo\/binaryajax.js", <newline>         "imageinfo\/exif.js", <newline>         "imageinfo\/imageinfo.js", <newline>+        "info.css", <newline>         "info.html", <newline>+        "info.js", <newline>         "manifest.json" <newline>       ], <newline>-      "source_hash": "c746d9114348f4b414c1ec05e988e2807feb963a", <newline>+      "source_hash": "3a61d1ad772ef01e0d3cc01a8bedbe7da452dd0b", <newline>       "zip_path": "examples\/extensions\/imageinfo.zip" <newline>     }, <newline>     {																								
Chromium	3	2	d6ab1db36f1621952bf4ac1bbb9b6463bb8cc14	mkwst@chromium.org <mkwst@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Oct 14 19:33:43 2011 +0000	Adding `content_security_policy` to proxy sample extension. TEST=	92644		http://codereview.chromium.org/8273036	svn://svn.chromium.org/chrome/trunk/src@105542 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/common/extensions/docs/samples.json b/chrome/common/extensions/docs/samples.json <newline>index d5f6dea..82a1d31 100644 <newline>--- a/chrome/common/extensions/docs/samples.json <newline>+++ b/chrome/common/extensions/docs/samples.json <newline>@@ -1873,8 +1873,11 @@ <newline>       "source_files": [ <newline>         "_locales\/en\/messages.json", <newline>         "background.html", <newline>+        "background.js", <newline>         "manifest.json", <newline>+        "popup.css", <newline>         "popup.html", <newline>+        "popup.js", <newline>         "proxy_error_handler.js", <newline>         "proxy_form_controller.js", <newline>         "test\/jsunittest.js", <newline>@@ -1882,7 +1885,7 @@ <newline>         "test\/proxy_form_controller_test.js", <newline>         "test\/unittest.css" <newline>       ], <newline>-      "source_hash": "9378cbaff5c4aa3def4a92824b88146335feac44", <newline>+      "source_hash": "10dfb898ef11aa9507bb07bcaa7cca5c51879f19", <newline>       "zip_path": "examples\/extensions\/proxy_configuration.zip" <newline>     }, <newline>     {																								
Chromium	3	2	658a090424e4ac55e4ac3671ea1efb3c3de64d1	mkwst@chromium.org <mkwst@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Fri Oct 14 19:33:43 2011 +0000	Adding `content_security_policy` to proxy sample extension. TEST=	92644		http://codereview.chromium.org/8273036	svn://svn.chromium.org/chrome/trunk/src@105542 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/common/extensions/docs/samples.json b/chrome/common/extensions/docs/samples.json <newline>index d5f6dea..82a1d31 100644 <newline>--- a/chrome/common/extensions/docs/samples.json <newline>+++ b/chrome/common/extensions/docs/samples.json <newline>@@ -1873,8 +1873,11 @@ <newline>       "source_files": [ <newline>         "_locales\/en\/messages.json", <newline>         "background.html", <newline>+        "background.js", <newline>         "manifest.json", <newline>+        "popup.css", <newline>         "popup.html", <newline>+        "popup.js", <newline>         "proxy_error_handler.js", <newline>         "proxy_form_controller.js", <newline>         "test\/jsunittest.js", <newline>@@ -1882,7 +1885,7 @@ <newline>         "test\/proxy_form_controller_test.js", <newline>         "test\/unittest.css" <newline>       ], <newline>-      "source_hash": "9378cbaff5c4aa3def4a92824b88146335feac44", <newline>+      "source_hash": "10dfb898ef11aa9507bb07bcaa7cca5c51879f19", <newline>       "zip_path": "examples\/extensions\/proxy_configuration.zip" <newline>     }, <newline>     {																								
Chromium	3	2	1e12a3731d7d7907374432d3de56b3dc2f8864e	tsepez@chromium.org <tsepez@chromium.org@0039d316-1c4b-4281-b951-d872f2087c98>	Thu Oct 13 17:43:02 2011 +0000	Add Content-security-policy to chrome://imageburner			http://codereview.chromium.org/8221023	svn://svn.chromium.org/chrome/trunk/src@105326 0039d316-1c4b-4281-b951-d872f2087c98	diff --git a/chrome/browser/ui/webui/chromeos/imageburner/imageburner_ui.cc b/chrome/browser/ui/webui/chromeos/imageburner/imageburner_ui.cc <newline>index f038f55..4ff9ba9 100644 <newline>--- a/chrome/browser/ui/webui/chromeos/imageburner/imageburner_ui.cc <newline>+++ b/chrome/browser/ui/webui/chromeos/imageburner/imageburner_ui.cc <newline>@@ -14,6 +14,7 @@ <newline> #include "base/values.h" <newline> #include "chrome/browser/chromeos/system/statistics_provider.h" <newline> #include "chrome/browser/profiles/profile.h" <newline>+#include "chrome/browser/ui/webui/chrome_web_ui_data_source.h" <newline> #include "chrome/common/jstemplate_builder.h" <newline> #include "chrome/common/time_format.h" <newline> #include "chrome/common/url_constants.h" <newline>@@ -25,114 +26,75 @@ <newline> #include "ui/base/resource/resource_bundle.h" <newline> #include "ui/base/text/bytes_formatting.h" <newline>-namespace imageburner { <newline>+namespace { <newline>-static const char kPropertyDevicePath[] = "devicePath"; <newline>-static const char kPropertyFilePath[] = "filePath"; <newline>-static const char kPropertyLabel[] = "label"; <newline>-static const char kPropertyPath[] = "path"; <newline>+const char kPropertyDevicePath[] = "devicePath"; <newline>+const char kPropertyFilePath[] = "filePath"; <newline>+const char kPropertyLabel[] = "label"; <newline>+const char kPropertyPath[] = "path"; <newline> // Name for hwid in machine statistics. <newline> const std::string kHwidStatistic = "hardware_class"; <newline>- <newline>-static const char kImageZipFileName[] = "chromeos_image.bin.zip"; <newline>+const char kImageZipFileName[] = "chromeos_image.bin.zip"; <newline> // 3.9GB. It is less than 4GB because true device size ussually varies a little. <newline>-static const uint64 kMinDeviceSize = <newline>-    static_cast<uint64>(3.9) * 1000 * 1000 * 1000; <newline>+const uint64 kMinDeviceSize = static_cast<uint64>(3.9) * 1000 * 1000 * 1000; <newline> // Link displayed on imageburner ui. <newline>-static const std::string kMoreInfoLink = <newline>+const std::string kMoreInfoLink = <newline>     "http://www.chromium.org/chromium-os/chromiumos-design-docs/recovery-mode"; <newline>-//////////////////////////////////////////////////////////////////////////////// <newline>-// <newline>-// UIHTMLSource <newline>-// <newline>-//////////////////////////////////////////////////////////////////////////////// <newline>- <newline>-class UIHTMLSource : public ChromeURLDataManager::DataSource { <newline>- public: <newline>-  UIHTMLSource() <newline>-      : DataSource(chrome::kChromeUIImageBurnerHost, MessageLoop::current()) { <newline>-  } <newline>+ChromeWebUIDataSource *CreateImageburnerUIHTMLSource() { <newline>+  ChromeWebUIDataSource *source = <newline>+      new ChromeWebUIDataSource(chrome::kChromeUIImageBurnerHost); <newline>+ <newline>+    source->AddLocalizedString("headerTitle", IDS_IMAGEBURN_HEADER_TITLE); <newline>+    source->AddLocalizedString("headerDescription", <newline>+                               IDS_IMAGEBURN_HEADER_DESCRIPTION); <newline>+    source->AddLocalizedString("headerLink", IDS_IMAGEBURN_HEADER_LINK); <newline>+    source->AddLocalizedString("statusDevicesNone", <newline>+                               IDS_IMAGEBURN_NO_DEVICES_STATUS); <newline>+    source->AddLocalizedString("warningDevicesNone", <newline>+                               IDS_IMAGEBURN_NO_DEVICES_WARNING); <newline>+    source->AddLocalizedString("statusDevicesMultiple", <newline>+                               IDS_IMAGEBURN_MUL_DEVICES_STATUS); <newline>+    source->AddLocalizedString("statusDeviceUSB", <newline>+                               IDS_IMAGEBURN_USB_DEVICE_STATUS); <newline>+    source->AddLocalizedString("statusDeviceSD", <newline>+                               IDS_IMAGEBURN_SD_DEVICE_STATUS); <newline>+    source->AddLocalizedString("warningDevices", <newline>+                               IDS_IMAGEBURN_DEVICES_WARNING); <newline>+    source->AddLocalizedString("statusNoConnection", <newline>+                               IDS_IMAGEBURN_NO_CONNECTION_STATUS); <newline>+    source->AddLocalizedString("warningNoConnection", <newline>+                               IDS_IMAGEBURN_NO_CONNECTION_WARNING); <newline>+    source->AddLocalizedString("statusNoSpace", <newline>+                               IDS_IMAGEBURN_INSUFFICIENT_SPACE_STATUS); <newline>+    source->AddLocalizedString("warningNoSpace", <newline>+                               IDS_IMAGEBURN_INSUFFICIENT_SPACE_WARNING); <newline>+    source->AddLocalizedString("statusDownloading", <newline>+                               IDS_IMAGEBURN_DOWNLOADING_STATUS); <newline>+    source->AddLocalizedString("statusUnzip", IDS_IMAGEBURN_UNZIP_STATUS); <newline>+    source->AddLocalizedString("statusBurn", IDS_IMAGEBURN_BURN_STATUS); <newline>+    source->AddLocalizedString("statusError", IDS_IMAGEBURN_ERROR_STATUS); <newline>+    source->AddLocalizedString("statusSuccess", IDS_IMAGEBURN_SUCCESS_STATUS); <newline>+    source->AddLocalizedString("warningSuccess", IDS_IMAGEBURN_SUCCESS_DESC); <newline>+    source->AddLocalizedString("title", IDS_IMAGEBURN_PAGE_TITLE); <newline>+    source->AddLocalizedString("confirmButton", IDS_IMAGEBURN_CONFIRM_BUTTON); <newline>+    source->AddLocalizedString("cancelButton", IDS_IMAGEBURN_CANCEL_BUTTON); <newline>+    source->AddLocalizedString("retryButton", IDS_IMAGEBURN_RETRY_BUTTON); <newline>+    source->AddString("moreInfoLink", ASCIIToUTF16(kMoreInfoLink)); <newline>+ <newline>+    source->set_json_path("strings.js"); <newline>+    source->add_resource_path("image_burner.js", IDR_IMAGEBURNER_JS); <newline>+    source->set_default_resource(IDR_IMAGEBURNER_HTML); <newline>+    return source; <newline>+} <newline>+ <newline>+}  // namespace <newline>-  // Called when the network layer has requested a resource underneath <newline>-  // the path we registered. <newline>-  virtual void StartDataRequest(const std::string& path, <newline>-                                bool is_incognito, <newline>-                                int request_id) { <newline>-    DictionaryValue localized_strings; <newline>-    localized_strings.SetString("headerTitle", <newline>-        l10n_util::GetStringUTF16(IDS_IMAGEBURN_HEADER_TITLE)); <newline>-    localized_strings.SetString("headerDescription", <newline>-        l10n_util::GetStringUTF16(IDS_IMAGEBURN_HEADER_DESCRIPTION)); <newline>-    localized_strings.SetString("headerLink", <newline>-        l10n_util::GetStringUTF16(IDS_IMAGEBURN_HEADER_LINK)); <newline>-    localized_strings.SetString("statusDevicesNone", <newline>-        l10n_util::GetStringUTF16(IDS_IMAGEBURN_NO_DEVICES_STATUS)); <newline>-    localized_strings.SetString("warningDevicesNone", <newline>-        l10n_util::GetStringUTF16(IDS_IMAGEBURN_NO_DEVICES_WARNING)); <newline>-    localized_strings.SetString("statusDevicesMultiple", <newline>-        l10n_util::GetStringUTF16(IDS_IMAGEBURN_MUL_DEVICES_STATUS)); <newline>-    localized_strings.SetString("statusDeviceUSB", <newline>-        l10n_util::GetStringUTF16(IDS_IMAGEBURN_USB_DEVICE_STATUS)); <newline>-    localized_strings.SetString("statusDeviceSD", <newline>-        l10n_util::GetStringUTF16(IDS_IMAGEBURN_SD_DEVICE_STATUS)); <newline>-    localized_strings.SetString("warningDevices", <newline>-        l10n_util::GetStringUTF16(IDS_IMAGEBURN_DEVICES_WARNING)); <newline>-    localized_strings.SetString("statusNoConnection", <newline>-        l10n_util::GetStringUTF16(IDS_IMAGEBURN_NO_CONNECTION_STATUS)); <newline>-    localized_strings.SetString("warningNoConnection", <newline>-        l10n_util::GetStringUTF16(IDS_IMAGEBURN_NO_CONNECTION_WARNING)); <newline>-    localized_strings.SetString("statusNoSpace", <newline>-        l10n_util::GetStringUTF16(IDS_IMAGEBURN_INSUFFICIENT_SPACE_STATUS)); <newline>-    localized_strings.SetString("warningNoSpace", <newline>-        l10n_util::GetStringUTF16(IDS_IMAGEBURN_INSUFFICIENT_SPACE_WARNING)); <newline>-    localized_strings.SetString("statusDownloading", <newline>-        l10n_util::GetStringUTF16(IDS_IMAGEBURN_DOWNLOADING_STATUS)); <newline>-    localized_strings.SetString("statusUnzip", <newline>-        l10n_util::GetStringUTF16(IDS_IMAGEBURN_UNZIP_STATUS)); <newline>-    localized_strings.SetString("statusBurn", <newline>-        l10n_util::GetStringUTF16(IDS_IMAGEBURN_BURN_STATUS)); <newline>-    localized_strings.SetString("statusError", <newline>-        l10n_util::GetStringUTF16(IDS_IMAGEBURN_ERROR_STATUS)); <newline>-    localized_strings.SetString("statusSuccess", <newline>-        l10n_util::GetStringUTF16(IDS_IMAGEBURN_SUCCESS_STATUS)); <newline>-    localized_strings.SetString("warningSuccess", <newline>-        l10n_util::GetStringUTF16(IDS_IMAGEBURN_SUCCESS_DESC)); <newline>-    localized_strings.SetString("title", <newline>-        l10n_util::GetStringUTF16(IDS_IMAGEBURN_PAGE_TITLE)); <newline>-    localized_strings.SetString("confirmButton", <newline>-        l10n_util::GetStringUTF16(IDS_IMAGEBURN_CONFIRM_BUTTON)); <newline>-    localized_strings.SetString("cancelButton", <newline>-        l10n_util::GetStringUTF16(IDS_IMAGEBURN_CANCEL_BUTTON)); <newline>-    localized_strings.SetString("retryButton", <newline>-        l10n_util::GetStringUTF16(IDS_IMAGEBURN_RETRY_BUTTON)); <newline>- <newline>-    localized_strings.SetString("moreInfoLink", kMoreInfoLink); <newline>- <newline>-    SetFontAndTextDirection(&localized_strings); <newline>- <newline>-    static const base::StringPiece imageburn_html( <newline>-        ResourceBundle::GetSharedInstance().GetRawDataResource( <newline>-        IDR_IMAGEBURNER_HTML)); <newline>-    std::string full_html = jstemplate_builder::GetTemplatesHtml( <newline>-        imageburn_html, &localized_strings, "more-info-link"); <newline>- <newline>-    SendResponse(request_id, base::RefCountedString::TakeString(&full_html)); <newline>-  } <newline>- <newline>-  virtual std::string GetMimeType(const std::string&) const { <newline>-    return "text/html"; <newline>-  } <newline>- <newline>- private: <newline>-  virtual ~UIHTMLSource() {} <newline>- <newline>-  DISALLOW_COPY_AND_ASSIGN(UIHTMLSource); <newline>-}; <newline>+namespace imageburner { <newline> //////////////////////////////////////////////////////////////////////////////// <newline> // <newline>@@ -670,7 +632,8 @@ bool WebUIHandler::CheckNetwork() { <newline> ImageBurnUI::ImageBurnUI(TabContents* contents) : ChromeWebUI(contents) { <newline>   imageburner::WebUIHandler* handler = new imageburner::WebUIHandler(contents); <newline>   AddMessageHandler((handler)->Attach(this)); <newline>-  imageburner::UIHTMLSource* html_source = new imageburner::UIHTMLSource(); <newline>+ <newline>   Profile* profile = Profile::FromBrowserContext(contents->browser_context()); <newline>-  profile->GetChromeURLDataManager()->AddDataSource(html_source); <newline>+  profile->GetChromeURLDataManager()->AddDataSource( <newline>+      CreateImageburnerUIHTMLSource()); <newline> }																								
Tomcat	5		9a61f97d45636de0be8cd8b4c5289a4ed1e5bbd	Mark Thomas <markt@apache.org>	Thu Nov 5 21:06:00 2015 +0000	Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=58585 Fix security exceptions when starting with a security manager.				https://svn.apache.org/repos/asf/tomcat/trunk@1712866 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/coyote/http2/Stream.java b/java/org/apache/coyote/http2/Stream.java <newline>index 8753404..fb807d8 100644 <newline>--- a/java/org/apache/coyote/http2/Stream.java <newline>+++ b/java/org/apache/coyote/http2/Stream.java <newline>@@ -18,6 +18,9 @@ package org.apache.coyote.http2; <newline> import java.io.IOException; <newline> import java.nio.ByteBuffer; <newline>+import java.security.AccessController; <newline>+import java.security.PrivilegedActionException; <newline>+import java.security.PrivilegedExceptionAction; <newline> import java.util.Iterator; <newline> import org.apache.coyote.ActionCode; <newline>@@ -387,10 +390,36 @@ public class Stream extends AbstractStream implements HeaderEmitter { <newline>         // TODO: Handle default ports <newline>         request.getMimeHeaders().addValue(":authority").setString( <newline>                 request.serverName().getString() + ":" + request.getServerPort()); <newline>-        handler.push(request, this); <newline>+        push (handler, request, this); <newline>     } <newline>+    private static void push(Http2UpgradeHandler handler, Request request, Stream stream) <newline>+            throws IOException { <newline>+        if (org.apache.coyote.Constants.IS_SECURITY_ENABLED) { <newline>+            try { <newline>+                AccessController.doPrivileged( <newline>+                        new PrivilegedExceptionAction<Void>() { <newline>+                            @Override <newline>+                            public Void run() throws IOException { <newline>+                                handler.push(request, stream); <newline>+                                return null; <newline>+                            } <newline>+                        }); <newline>+            } catch (PrivilegedActionException ex) { <newline>+                Exception e = ex.getException(); <newline>+                if (e instanceof IOException) { <newline>+                    throw (IOException) e; <newline>+                } else { <newline>+                    throw new IOException(ex); <newline>+                } <newline>+            } <newline>+ <newline>+        } else { <newline>+            handler.push(request, stream); <newline>+        } <newline>+    } <newline>+ <newline>     class StreamOutputBuffer implements OutputBuffer { <newline>         private final ByteBuffer buffer = ByteBuffer.allocate(8 * 1024);																								
Tomcat	5		e331815405615b1c729c7bdc9898cfed9ae14dc	Mark Thomas <markt@apache.org>	Thu Jul 30 14:12:17 2015 +0000	Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=58125 Avoid a possible ClassCircularityError when running under a security manager				https://svn.apache.org/repos/asf/tomcat/trunk@1693429 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/loader/WebappClassLoaderBase.java b/java/org/apache/catalina/loader/WebappClassLoaderBase.java <newline>index b21a50e..c1fbd63 100644 <newline>--- a/java/org/apache/catalina/loader/WebappClassLoaderBase.java <newline>+++ b/java/org/apache/catalina/loader/WebappClassLoaderBase.java <newline>@@ -1228,8 +1228,25 @@ public abstract class WebappClassLoaderBase extends URLClassLoader <newline>             //       the webapp from overriding Java SE classes. This implements <newline>             //       SRV.10.7.2 <newline>             String resourceName = binaryNameToPath(name, false); <newline>+ <newline>             ClassLoader javaseLoader = getJavaseClassLoader(); <newline>-            if (javaseLoader.getResource(resourceName) != null) { <newline>+            boolean tryLoadingFromJavaseLoader; <newline>+            try { <newline>+                // Use getResource as it won't trigger an expensive <newline>+                // ClassNotFoundException if the resource is not available from <newline>+                // the Java SE class loader. However (see <newline>+                // https://bz.apache.org/bugzilla/show_bug.cgi?id=58125 for <newline>+                // details) when running under a security manager in rare cases <newline>+                // this call may trigger a ClassCircularityError. <newline>+                tryLoadingFromJavaseLoader = (javaseLoader.getResource(resourceName) != null); <newline>+            } catch (ClassCircularityError cce) { <newline>+                // The getResource() trick won't work for this class. We have to <newline>+                // try loading it directly and accept that we might get a <newline>+                // ClassNotFoundException. <newline>+                tryLoadingFromJavaseLoader = true; <newline>+            } <newline>+ <newline>+            if (tryLoadingFromJavaseLoader) { <newline>                 try { <newline>                     clazz = javaseLoader.loadClass(name); <newline>                     if (clazz != null) {																								
Tomcat	5		2db186aff0fefdd235e71d9fc30a02281928a87	Mark Thomas <markt@apache.org>	Fri Jun 26 07:46:48 2015 +0000	Remove realm name and authentication type from security messages, this information is set up per module now Patch by fjodorver				https://svn.apache.org/repos/asf/tomcat/trunk@1687700 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/authenticator/jaspic/provider/modules/TomcatAuthModule.java b/java/org/apache/catalina/authenticator/jaspic/provider/modules/TomcatAuthModule.java <newline>index bab8cc2..cf24279 100644 <newline>--- a/java/org/apache/catalina/authenticator/jaspic/provider/modules/TomcatAuthModule.java <newline>+++ b/java/org/apache/catalina/authenticator/jaspic/provider/modules/TomcatAuthModule.java <newline>@@ -16,7 +16,13 @@ <newline>  */ <newline> package org.apache.catalina.authenticator.jaspic.provider.modules; <newline>+import java.util.Map; <newline>+import java.util.Optional; <newline>+ <newline>+import javax.security.auth.callback.CallbackHandler; <newline>+import javax.security.auth.message.AuthException; <newline> import javax.security.auth.message.MessageInfo; <newline>+import javax.security.auth.message.MessagePolicy; <newline> import javax.security.auth.message.module.ServerAuthModule; <newline> import org.apache.catalina.authenticator.jaspic.MessageInfoImpl; <newline>@@ -24,17 +30,21 @@ import org.apache.tomcat.util.res.StringManager; <newline> public abstract class TomcatAuthModule implements ServerAuthModule { <newline>+    public static final String REALM_NAME = "javax.servlet.http.realmName"; <newline>+    public static final String DEFAULT_REALM_NAME = "Authentication required"; <newline>+ <newline>     protected static final String AUTH_HEADER_NAME = "WWW-Authenticate"; <newline>     protected static final String AUTHORIZATION_HEADER = "authorization"; <newline>-    /** <newline>-     * Default authentication realm name. <newline>-     */ <newline>-    protected static final String REALM_NAME = "Authentication required"; <newline>+ <newline>     /** <newline>      * The string manager for this package. <newline>      */ <newline>     protected static final StringManager sm = StringManager.getManager(TomcatAuthModule.class); <newline>+    protected String realmName; <newline>+ <newline>+    protected CallbackHandler handler; <newline>+ <newline>     protected boolean isMandatory(MessageInfo messageInfo) { <newline>         String mandatory = (String) messageInfo.getMap().get(MessageInfoImpl.IS_MANDATORY); <newline>@@ -42,11 +52,23 @@ public abstract class TomcatAuthModule implements ServerAuthModule { <newline>     } <newline>-    @SuppressWarnings("unchecked") <newline>-    protected static String getRealmName(MessageInfo messageInfo) { <newline>-        if (messageInfo == null) { <newline>-            return REALM_NAME; <newline>-        } <newline>-        return (String) messageInfo.getMap().getOrDefault(MessageInfoImpl.REALM_NAME, REALM_NAME); <newline>+     @SuppressWarnings("rawtypes") <newline>+     @Override <newline>+     public final void initialize(MessagePolicy requestPolicy, MessagePolicy responsePolicy, <newline>+             CallbackHandler handler, Map options) throws AuthException { <newline>+         this.handler = handler; <newline>+         this.realmName = (String) options.get(REALM_NAME); <newline>+         initializeModule(requestPolicy, responsePolicy, handler, options); <newline>+    } <newline>+ <newline>+ <newline>+    public String getRealmName() { <newline>+        return Optional.of(realmName).orElse(DEFAULT_REALM_NAME); <newline>     } <newline>+ <newline>+ <newline>+     @SuppressWarnings("rawtypes") <newline>+     public abstract void initializeModule(MessagePolicy requestPolicy, <newline>+             MessagePolicy responsePolicy, CallbackHandler handler, Map options) <newline>+             throws AuthException; <newline> }																								
Tomcat	3	1	9a6bd00a49a01711b3e47b8f45725b399b2ba0f	Mark Thomas <markt@apache.org>	Tue Jun 23 09:30:08 2015 +0000	Store JASPIC auth method in security message Patch by fjodorver				https://svn.apache.org/repos/asf/tomcat/trunk@1687005 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/authenticator/jaspic/MessageInfoImpl.java b/java/org/apache/catalina/authenticator/jaspic/MessageInfoImpl.java <newline>index 0946256..8d210a0 100644 <newline>--- a/java/org/apache/catalina/authenticator/jaspic/MessageInfoImpl.java <newline>+++ b/java/org/apache/catalina/authenticator/jaspic/MessageInfoImpl.java <newline>@@ -26,7 +26,8 @@ import javax.servlet.http.HttpServletResponse; <newline> import org.apache.catalina.connector.Request; <newline> public class MessageInfoImpl implements MessageInfo { <newline>-    private static final String IS_MANDATORY = "javax.security.auth.message.MessagePolicy.isMandatory"; <newline>+    public static final String IS_MANDATORY = "javax.security.auth.message.MessagePolicy.isMandatory"; <newline>+    public static final String AUTH_METHOD = "javax.servlet.http.authType"; <newline>     private final Map<String, Object> map = new HashMap<>(); <newline>     private HttpServletRequest request; <newline>@@ -35,10 +36,12 @@ public class MessageInfoImpl implements MessageInfo { <newline>     public MessageInfoImpl() { <newline>     } <newline>-    public MessageInfoImpl(Request request, HttpServletResponse response, boolean authMandatory) { <newline>+    public MessageInfoImpl(Request request, HttpServletResponse response, boolean authMandatory, <newline>+            String authMethod) { <newline>         this.request = request; <newline>         this.response = response; <newline>         map.put(IS_MANDATORY, Boolean.toString(authMandatory)); <newline>+        map.put(AUTH_METHOD, authMethod); <newline>     } <newline>     @Override																								
Tomcat	5		564fc963484ec2585ed48fc9b0c952d53fcc105	Mark Thomas <markt@apache.org>	Sat May 16 09:37:26 2015 +0000	set the headers rather than add them Add header names to the docs and make clear that any existing headers will be replaced. Add the filter tot he security howto				https://svn.apache.org/repos/asf/tomcat/trunk@1679716 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/security-howto.xml b/webapps/docs/security-howto.xml <newline>index 5a124f8..af700d8 100644 <newline>--- a/webapps/docs/security-howto.xml <newline>+++ b/webapps/docs/security-howto.xml <newline>@@ -468,6 +468,13 @@ <newline>     can be configured and used to reject requests that had errors during <newline>     request parameter parsing. Without the filter the default behaviour is <newline>     to ignore invalid or excessive parameters.</p> <newline>+ <newline>+    <p><a href="config/filter.html">HttpHeaderSecurityFilter</a> can be <newline>+    used to add headers to responses to improve security. If clients access <newline>+    Tomcat directly, then you probably want to enable this filter and all the <newline>+    headers it sets unless your application is already setting them. If Tomcat <newline>+    is accessed via a reverse proxy, then the configuration of this filter needs <newline>+    to be co-ordinated with any headers that the reverse proxy sets.</p> <newline>   </section> <newline>   <section name="General">																								
Tomcat	3	1	1fa48f0eb411c39e6873705c5ff9bf2723fb266	Mark Thomas <markt@apache.org>	Tue Apr 28 21:28:26 2015 +0000	Use a new object every time for security. Review by schultz.				https://svn.apache.org/repos/asf/tomcat/trunk@1676634 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/el/parser/AstValue.java b/java/org/apache/el/parser/AstValue.java <newline>index acb0d92..06e10c3 100644 <newline>--- a/java/org/apache/el/parser/AstValue.java <newline>+++ b/java/org/apache/el/parser/AstValue.java <newline>@@ -42,7 +42,6 @@ import org.apache.el.util.ReflectionUtil; <newline> public final class AstValue extends SimpleNode { <newline>     private static final Object[] EMPTY_ARRAY = new Object[0]; <newline>-    private static final Object[] ARRAY_OF_SINGLE_NULL = new Object[1]; <newline>     protected static class Target { <newline>         protected Object base; <newline>@@ -292,7 +291,9 @@ public final class AstValue extends SimpleNode { <newline>         if (src == null) { <newline>             // Must be a varargs method with a single parameter. <newline>-            return ARRAY_OF_SINGLE_NULL; <newline>+            // Use a new array every time since the called code could modify the <newline>+            // contents of the array <newline>+            return new Object[1]; <newline>         } <newline>         Object[] dest = new Object[paramCount];																								
Tomcat	5		9e8ce05676a34773a60f7e61d321c85f2e9cdbd	Mark Thomas <markt@apache.org>	Thu Dec 18 13:01:41 2014 +0000	Servlet API requires java.security.cert.X509Certificate[] so be explicit about this in the support class.				https://svn.apache.org/repos/asf/tomcat/trunk@1646449 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/tomcat/util/net/jsse/JSSESupport.java b/java/org/apache/tomcat/util/net/jsse/JSSESupport.java <newline>index 9f032c7..31d49ef 100644 <newline>--- a/java/org/apache/tomcat/util/net/jsse/JSSESupport.java <newline>+++ b/java/org/apache/tomcat/util/net/jsse/JSSESupport.java <newline>@@ -126,7 +126,7 @@ class JSSESupport implements SSLSupport, SSLSessionManager { <newline>     } <newline>     @Override <newline>-    public Object[] getPeerCertificateChain(boolean force) <newline>+    public java.security.cert.X509Certificate[] getPeerCertificateChain(boolean force) <newline>         throws IOException { <newline>         // Look up the current SSLSession <newline>         if (session == null)																								
Tomcat	5		19985fbf7995521acb1477877fee41d9a54a295	Mark Thomas <markt@apache.org>	Tue Dec 9 10:29:51 2014 +0000	Fix potential issue with BeanELresolver when running under a security manager. Some classes may not be accessible but may have accessible interfaces.				https://svn.apache.org/repos/asf/tomcat/trunk@1644017 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/javax/el/BeanELResolver.java b/java/javax/el/BeanELResolver.java <newline>index 3b40e8c..032662a 100644 <newline>--- a/java/javax/el/BeanELResolver.java <newline>+++ b/java/javax/el/BeanELResolver.java <newline>@@ -229,15 +229,39 @@ public class BeanELResolver extends ELResolver { <newline>             try { <newline>                 BeanInfo info = Introspector.getBeanInfo(this.type); <newline>                 PropertyDescriptor[] pds = info.getPropertyDescriptors(); <newline>-                for (int i = 0; i < pds.length; i++) { <newline>-                    this.properties.put(pds[i].getName(), new BeanProperty( <newline>-                            type, pds[i])); <newline>+                for (PropertyDescriptor pd: pds) { <newline>+                    this.properties.put(pd.getName(), new BeanProperty(type, pd)); <newline>+                } <newline>+                if (System.getSecurityManager() != null) { <newline>+                    // When running with SecurityManager, some classes may be <newline>+                    // not accessible, but have accessible interfaces. <newline>+                    populateFromInterfaces(type); <newline>                 } <newline>             } catch (IntrospectionException ie) { <newline>                 throw new ELException(ie); <newline>             } <newline>         } <newline>+        private void populateFromInterfaces(Class<?> aClass) throws IntrospectionException { <newline>+            Class<?> interfaces[] = aClass.getInterfaces(); <newline>+            if (interfaces.length > 0) { <newline>+                for (Class<?> ifs : interfaces) { <newline>+                    BeanInfo info = Introspector.getBeanInfo(ifs); <newline>+                    PropertyDescriptor[] pds = info.getPropertyDescriptors(); <newline>+                    for (PropertyDescriptor pd : pds) { <newline>+                        if (!this.properties.containsKey(pd.getName())) { <newline>+                            this.properties.put(pd.getName(), new BeanProperty( <newline>+                                    this.type, pd)); <newline>+                        } <newline>+                    } <newline>+                } <newline>+            } <newline>+            Class<?> superclass = aClass.getSuperclass(); <newline>+            if (superclass != null) { <newline>+                populateFromInterfaces(superclass); <newline>+            } <newline>+        } <newline>+ <newline>         private BeanProperty get(ELContext ctx, String name) { <newline>             BeanProperty property = this.properties.get(name); <newline>             if (property == null) {																								
Tomcat	5		3750df7b408527ba1718f1d175d6abf40024353	Mark Thomas <markt@apache.org>	Fri Dec 5 13:58:58 2014 +0000	Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=57281 Use interfaces rather than implementations to call Filter and Servlet methods when running under a security manager.				https://svn.apache.org/repos/asf/tomcat/trunk@1643283 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/security/SecurityUtil.java b/java/org/apache/catalina/security/SecurityUtil.java <newline>index b8c8dd0..cc2e0b1 100644 <newline>--- a/java/org/apache/catalina/security/SecurityUtil.java <newline>+++ b/java/org/apache/catalina/security/SecurityUtil.java <newline>@@ -67,10 +67,9 @@ public final class SecurityUtil{ <newline>     private static final String DESTROY_METHOD = "destroy"; <newline>     /** <newline>-     * Cache every object for which we are creating method on it. <newline>+     * Cache every class for which we are creating methods. <newline>      */ <newline>-    private static final Map<Object,Method[]> objectCache = <newline>-            new ConcurrentHashMap<>(); <newline>+    private static final Map<Class<?>,Method[]> classCache = new ConcurrentHashMap<>(); <newline>     private static final org.apache.juli.logging.Log log= <newline>         org.apache.juli.logging.LogFactory.getLog( SecurityUtil.class ); <newline>@@ -133,7 +132,7 @@ public final class SecurityUtil{ <newline>      * @param methodName the method to apply the security restriction <newline>      * @param targetObject the <code>Servlet</code> on which the method will <newline>      * be called. <newline>-     * @param targetType <code>Class</code> array used to instantiate a <newline>+     * @param targetParameterTypes <code>Class</code> array used to instantiate a <newline>      * <code>Method</code> object. <newline>      * @param targetArguments <code>Object</code> array contains the <newline>      * runtime parameters instance. <newline>@@ -142,25 +141,25 @@ public final class SecurityUtil{ <newline>      */ <newline>     public static void doAsPrivilege(final String methodName, <newline>                                      final Servlet targetObject, <newline>-                                     final Class<?>[] targetType, <newline>+                                     final Class<?>[] targetParameterTypes, <newline>                                      final Object[] targetArguments, <newline>                                      Principal principal) <newline>         throws java.lang.Exception{ <newline>         Method method = null; <newline>-        Method[] methodsCache = objectCache.get(targetObject); <newline>+        Method[] methodsCache = classCache.get(Servlet.class); <newline>         if(methodsCache == null) { <newline>             method = createMethodAndCacheIt(methodsCache, <newline>+                                            Servlet.class, <newline>                                             methodName, <newline>-                                            targetObject, <newline>-                                            targetType); <newline>+                                            targetParameterTypes); <newline>         } else { <newline>             method = findMethod(methodsCache, methodName); <newline>             if (method == null) { <newline>                 method = createMethodAndCacheIt(methodsCache, <newline>+                                                Servlet.class, <newline>                                                 methodName, <newline>-                                                targetObject, <newline>-                                                targetType); <newline>+                                                targetParameterTypes); <newline>             } <newline>         } <newline>@@ -213,38 +212,38 @@ public final class SecurityUtil{ <newline>      * @param methodName the method to apply the security restriction <newline>      * @param targetObject the <code>Filter</code> on which the method will <newline>      * be called. <newline>-     * @param targetType <code>Class</code> array used to instantiate a <newline>+     * @param targetParameterTypes <code>Class</code> array used to instantiate a <newline>      * <code>Method</code> object. <newline>-     * @param targetArguments <code>Object</code> array contains the <newline>+     * @param targetParameterValues <code>Object</code> array contains the <newline>      * runtime parameters instance. <newline>      * @param principal the <code>Principal</code> to which the security <newline>      * privilege apply <newline>      */ <newline>     public static void doAsPrivilege(final String methodName, <newline>                                      final Filter targetObject, <newline>-                                     final Class<?>[] targetType, <newline>-                                     final Object[] targetArguments, <newline>+                                     final Class<?>[] targetParameterTypes, <newline>+                                     final Object[] targetParameterValues, <newline>                                      Principal principal) <newline>         throws java.lang.Exception{ <newline>         Method method = null; <newline>-        Method[] methodsCache = objectCache.get(targetObject); <newline>+        Method[] methodsCache = classCache.get(Filter.class); <newline>         if(methodsCache == null) { <newline>             method = createMethodAndCacheIt(methodsCache, <newline>+                                            Filter.class, <newline>                                             methodName, <newline>-                                            targetObject, <newline>-                                            targetType); <newline>+                                            targetParameterTypes); <newline>         } else { <newline>             method = findMethod(methodsCache, methodName); <newline>             if (method == null) { <newline>                 method = createMethodAndCacheIt(methodsCache, <newline>+                                                Filter.class, <newline>                                                 methodName, <newline>-                                                targetObject, <newline>-                                                targetType); <newline>+                                                targetParameterTypes); <newline>             } <newline>         } <newline>-        execute(method, targetObject, targetArguments, principal); <newline>+        execute(method, targetObject, targetParameterValues, principal); <newline>     } <newline>@@ -360,25 +359,23 @@ public final class SecurityUtil{ <newline>     /** <newline>      * Create the method and cache it for further re-use. <newline>      * @param methodsCache the cache used to store method instance <newline>+     * @param targetType the class on which the method will be called. <newline>      * @param methodName the method to apply the security restriction <newline>-     * @param targetObject the <code>Servlet</code> on which the method will <newline>-     * be called. <newline>-     * @param targetType <code>Class</code> array used to instantiate a <newline>+     * @param parameterTypes <code>Class</code> array used to instantiate a <newline>      * <code>Method</code> object. <newline>      * @return the method instance. <newline>      */ <newline>     private static Method createMethodAndCacheIt(Method[] methodsCache, <newline>+                                                 Class<?> targetType, <newline>                                                  String methodName, <newline>-                                                 Object targetObject, <newline>-                                                 Class<?>[] targetType) <newline>-            throws Exception{ <newline>+                                                 Class<?>[] parameterTypes) <newline>+            throws Exception { <newline>-        if ( methodsCache == null){ <newline>+        if (methodsCache == null) { <newline>             methodsCache = new Method[4]; <newline>         } <newline>-        Method method = <newline>-            targetObject.getClass().getMethod(methodName, targetType); <newline>+        Method method = targetType.getMethod(methodName, parameterTypes); <newline>         if (methodName.equals(INIT_METHOD)){ <newline>             methodsCache[INIT] = method; <newline>@@ -394,7 +391,7 @@ public final class SecurityUtil{ <newline>             methodsCache[DOFILTEREVENT] = method; <newline>         } <newline>-        objectCache.put(targetObject, methodsCache ); <newline>+        classCache.put(targetType, methodsCache); <newline>         return method; <newline>     } <newline>@@ -406,7 +403,7 @@ public final class SecurityUtil{ <newline>      * @param cachedObject The object to remove <newline>      */ <newline>     public static void remove(Object cachedObject){ <newline>-        objectCache.remove(cachedObject); <newline>+        classCache.remove(cachedObject); <newline>     }																								
Tomcat	3	1	34c8c7eec93512d061366e0d7b3c11c4db723ad	Konstantin Kolinko <kkolinko@apache.org>	Tue Oct 21 11:35:35 2014 +0000	Update changelog for BZ 47919 per r1630407 It logs not just key env vars, but all of them, and logs command line arguments. I am emphasizing CATALINA_OPTS, JAVA_OPTS, as that may be a security concern for somebody.				https://svn.apache.org/repos/asf/tomcat/trunk@1633346 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/changelog.xml b/webapps/docs/changelog.xml <newline>index f9ff601..1f88eb6 100644 <newline>--- a/webapps/docs/changelog.xml <newline>+++ b/webapps/docs/changelog.xml <newline>@@ -60,8 +60,10 @@ <newline>       </add> <newline>       <add> <newline>         <bug>47919</bug>: Extend the information logged when Tomcat starts to <newline>-        optionally include (disabled by default) the values of key environment <newline>-        variables. (markt) <newline>+        optionally log the values of command line arguments (enabled by <newline>+        default) and environment variables (disabled by default). Note that <newline>+        the values added to CATALINA_OPTS and JAVA_OPTS environment variables <newline>+        will be logged, as they are used to build up the command line. (markt) <newline>       </add> <newline>       <add> <newline>         <bug>49939</bug>: Expose the method that clears the static resource																								
Tomcat	5		9b3a857e1264dfbee1842ed9903782522c78efe	Mark Emlyn David Thomas <markt@apache.org>	Tue Sep 30 20:10:18 2014 +0000	Update docs as automatically setting the system property javax.security.auth.useSubjectCredsOnly was removed since it broke SPNEGO on IBM JREs.				https://svn.apache.org/repos/asf/tomcat/trunk@1628541 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/windows-auth-howto.xml b/webapps/docs/windows-auth-howto.xml <newline>index 27b873e..e521b58 100644 <newline>--- a/webapps/docs/windows-auth-howto.xml <newline>+++ b/webapps/docs/windows-auth-howto.xml <newline>@@ -172,9 +172,6 @@ com.sun.security.jgss.krb5.accept { <newline>   the JVM being used. The name of the login configuration must match the <newline>   value used by the <a href="config/valve.html#SPNEGO_Valve">authentication <newline>   valve</a>.</li> <newline>-  <li>The system property <code>javax.security.auth.useSubjectCredsOnly</code> <newline>-  is automatically set to the required value of false if a web application is <newline>-  configured to use the SPNEGO authentication method.</li> <newline>   </ul> <newline>   <p>The SPNEGO authenticator will work with any <a href="config/realm.html"> <newline>   Realm</a> but if used with the JNDI Realm, by default the JNDI Realm will use																								
Tomcat	5		2b8e9d3607dadb54c2fffd425a1cb081dfccc59	Mark Emlyn David Thomas <markt@apache.org>	Tue Sep 9 08:22:28 2014 +0000	Move MessageDigest utility classes from o.a.catalina.util to o.a.tomcat.util.security so they are more widely available.				https://svn.apache.org/repos/asf/tomcat/trunk@1623685 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/test/org/apache/catalina/authenticator/TesterDigestAuthenticatorPerformance.java b/test/org/apache/catalina/authenticator/TesterDigestAuthenticatorPerformance.java <newline>index a432d2f..2873e5d 100644 <newline>--- a/test/org/apache/catalina/authenticator/TesterDigestAuthenticatorPerformance.java <newline>+++ b/test/org/apache/catalina/authenticator/TesterDigestAuthenticatorPerformance.java <newline>@@ -31,9 +31,9 @@ import org.apache.catalina.connector.Request; <newline> import org.apache.catalina.core.StandardContext; <newline> import org.apache.catalina.filters.TesterHttpServletResponse; <newline> import org.apache.catalina.startup.TesterMapRealm; <newline>-import org.apache.catalina.util.ConcurrentMessageDigest; <newline>-import org.apache.catalina.util.MD5Encoder; <newline> import org.apache.tomcat.util.descriptor.web.LoginConfig; <newline>+import org.apache.tomcat.util.security.ConcurrentMessageDigest; <newline>+import org.apache.tomcat.util.security.MD5Encoder; <newline> public class TesterDigestAuthenticatorPerformance {																								
Tomcat	5		c6c27f99e543ee7a2ab4f9b4f1763ba8df1406f	Mark Emlyn David Thomas <markt@apache.org>	Fri Aug 15 12:54:37 2014 +0000	Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56857 Fix thread safety issue when calling ServletContext methods while running under a security manager.				https://svn.apache.org/repos/asf/tomcat/trunk@1618169 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/changelog.xml b/webapps/docs/changelog.xml <newline>index 99699ba..ef6e8b8 100644 <newline>--- a/webapps/docs/changelog.xml <newline>+++ b/webapps/docs/changelog.xml <newline>@@ -145,6 +145,10 @@ <newline>         <bug>56848</bug>: Improve handling of <code>accept-language</code> <newline>         headers. (markt) <newline>       </fix> <newline>+      <fix> <newline>+        <bug>56857</bug>: Fix thread safety issue when calling ServletContext <newline>+        methods while running under a security manager. (markt) <newline>+      </fix> <newline>     </changelog> <newline>   </subsection> <newline>   <subsection name="Coyote">																								
Tomcat	1	2	88e75305e198f500ffd626a5b1275dc3ad46553	Mark Emlyn David Thomas <markt@apache.org>	Mon Jun 16 09:52:49 2014 +0000	Attempt to obfuscate session cookie values associated with other web applications when viewing HTTP request headers with the Request Header example from the examples web application. This reduces the opportunity to use this example for malicious purposes should the advice to remove the examples web application from security sensitive systems be ignored.				https://svn.apache.org/repos/asf/tomcat/trunk@1602831 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/examples/WEB-INF/classes/util/CookieFilter.java b/webapps/examples/WEB-INF/classes/util/CookieFilter.java <newline>new file mode 100644 <newline>index 0000000..1e156db <newline>--- /dev/null <newline>+++ b/webapps/examples/WEB-INF/classes/util/CookieFilter.java <newline>@@ -0,0 +1,81 @@ <newline>+/* <newline>+ * Licensed to the Apache Software Foundation (ASF) under one or more <newline>+ * contributor license agreements.  See the NOTICE file distributed with <newline>+ * this work for additional information regarding copyright ownership. <newline>+ * The ASF licenses this file to You under the Apache License, Version 2.0 <newline>+ * (the "License"); you may not use this file except in compliance with <newline>+ * the License.  You may obtain a copy of the License at <newline>+ * <newline>+ *     http://www.apache.org/licenses/LICENSE-2.0 <newline>+ * <newline>+ * Unless required by applicable law or agreed to in writing, software <newline>+ * distributed under the License is distributed on an "AS IS" BASIS, <newline>+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. <newline>+ * See the License for the specific language governing permissions and <newline>+ * limitations under the License. <newline>+ */ <newline>+package util; <newline>+ <newline>+import java.util.Locale; <newline>+import java.util.StringTokenizer; <newline>+ <newline>+/** <newline>+ * Processes a cookie header and attempts to obfuscate any cookie values that <newline>+ * represent session IDs from other web applications. Since session cookie names <newline>+ * are configurable, as are session ID lengths, this filter is not expected to <newline>+ * be 100% effective. <newline>+ * <newline>+ * It is required that the examples web application is removed in security <newline>+ * conscious environments as documented in the Security How-To. This filter is <newline>+ * intended to reduce the impact of failing to follow that advice. A failure by <newline>+ * this filter to obfuscate a session ID or similar value is not a security <newline>+ * vulnerability. In such instances the vulnerability is the failure to remove <newline>+ * the examples web application. <newline>+ */ <newline>+public class CookieFilter { <newline>+ <newline>+    private static final String OBFUSCATED = "[obfuscated]"; <newline>+ <newline>+    private CookieFilter() { <newline>+        // Hide default constructor <newline>+    } <newline>+ <newline>+    public static String filter(String input, String sessionId) { <newline>+ <newline>+        StringBuilder sb = new StringBuilder(input.length()); <newline>+ <newline>+        // Cookie name value pairs are ';' separated. <newline>+        // Session IDs don't use ; in the value so don't worry about quoted <newline>+        // values that contain ; <newline>+        StringTokenizer st = new StringTokenizer(input, ";"); <newline>+ <newline>+        boolean first = true; <newline>+        while (st.hasMoreTokens()) { <newline>+            if (first) { <newline>+                first = false; <newline>+            } else { <newline>+                sb.append(';'); <newline>+            } <newline>+            sb.append(filterNameValuePair(st.nextToken(), sessionId)); <newline>+        } <newline>+ <newline>+ <newline>+        return sb.toString(); <newline>+    } <newline>+ <newline>+    private static String filterNameValuePair(String input, String sessionId) { <newline>+        int i = input.indexOf('='); <newline>+        if (i == -1) { <newline>+            return input; <newline>+        } <newline>+        String name = input.substring(0, i); <newline>+        String value = input.substring(i + 1, input.length()); <newline>+ <newline>+        if (name.toLowerCase(Locale.ENGLISH).contains("jsessionid") && <newline>+                (sessionId == null || !value.contains(sessionId))) { <newline>+            value = OBFUSCATED; <newline>+        } <newline>+ <newline>+        return name + "=" + value; <newline>+    } <newline>+}																								
Tomcat	1	2	069009815608ea4867bdf12428384a2f71d0bf9	Mark Emlyn David Thomas <markt@apache.org>	Fri Jun 13 21:04:05 2014 +0000	Set the path for cookies created by the examples web app This reduces the opportunity for using such cookies for malicious purposes should the advice to remove the examples web application from security sensitive systems be ignored.				https://svn.apache.org/repos/asf/tomcat/trunk@1602521 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/examples/WEB-INF/classes/CookieExample.java b/webapps/examples/WEB-INF/classes/CookieExample.java <newline>index 7d053de..2790909 100644 <newline>--- a/webapps/examples/WEB-INF/classes/CookieExample.java <newline>+++ b/webapps/examples/WEB-INF/classes/CookieExample.java <newline>@@ -50,6 +50,7 @@ public class CookieExample extends HttpServlet { <newline>         Cookie aCookie = null; <newline>         if (cookieName != null && cookieValue != null) { <newline>             aCookie = new Cookie(cookieName, cookieValue); <newline>+            aCookie.setPath(request.getServletContext().getContextPath()); <newline>             response.addCookie(aCookie); <newline>         }																								
Tomcat	5		2126ac5db78cd582ff1c107f6e5f2fae309f236	Mark Emlyn David Thomas <markt@apache.org>	Tue May 20 11:26:02 2014 +0000	Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56545 Pre-load two more classes to avoid exceptions when running under a security manager				https://svn.apache.org/repos/asf/tomcat/trunk@1596201 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/changelog.xml b/webapps/docs/changelog.xml <newline>index 65ea898..bd8d199 100644 <newline>--- a/webapps/docs/changelog.xml <newline>+++ b/webapps/docs/changelog.xml <newline>@@ -67,6 +67,11 @@ <newline>         optionally interrupt stuck threads to attempt to unblock them. <newline>         (slaurent) <newline>       </add> <newline>+      <fix> <newline>+        <bug>56545</bug>: Pre-load two additional classes, the loading of which <newline>+        may otherwise be triggered by a web application which in turn would <newline>+        trigger an exception when running under a security manager. (markt) <newline>+      </fix> <newline>       <update> <newline>         <bug>56546</bug>: Reduce logging level for stack traces of stuck web <newline>         application threads printed by WebappClassLoader.clearReferencesThreads()																								
Tomcat	5		24d70d3421306c4a06b1d90645d06f3fc686863	Mark Emlyn David Thomas <markt@apache.org>	Tue May 20 08:49:35 2014 +0000	Partial fix for https://issues.apache.org/bugzilla/show_bug.cgi?id=56545 Pre-load an additional class if running under a security manager				https://svn.apache.org/repos/asf/tomcat/trunk@1596141 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/security/SecurityClassLoad.java b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>index 95e985d..e62177e 100644 <newline>--- a/java/org/apache/catalina/security/SecurityClassLoad.java <newline>+++ b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>@@ -275,6 +275,7 @@ public final class SecurityClassLoad { <newline>         clazz.newInstance(); <newline>         loader.loadClass(basePackage + "util.http.HttpMessages"); <newline>         loader.loadClass(basePackage + "util.http.parser.HttpParser"); <newline>+        loader.loadClass(basePackage + "util.http.parser.HttpParser$SkipConstantResult"); <newline>         loader.loadClass(basePackage + "util.http.parser.MediaType"); <newline>         loader.loadClass(basePackage + "util.http.parser.MediaTypeCache"); <newline>         // net																								
Tomcat	5		f18751f30b34556f065c4f7ce61e98108a9ef46	Violeta Georgieva Georgieva <violetagg@apache.org>	Thu May 8 07:55:35 2014 +0000	Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56383 Document ErrorReportValve's new property 'showReport' on the "security HowTO" page.				https://svn.apache.org/repos/asf/tomcat/trunk@1593200 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/security-howto.xml b/webapps/docs/security-howto.xml <newline>index 67c2717..d1979a6 100644 <newline>--- a/webapps/docs/security-howto.xml <newline>+++ b/webapps/docs/security-howto.xml <newline>@@ -362,7 +362,9 @@ <newline>       <p>The default ErrorReportValve can display stack traces and/or JSP <newline>       source code to clients when an error occurs. To avoid this, custom error <newline>-      handling can be configured within each web application.</p> <newline>+      handling can be configured within each web application. Alternatively, you <newline>+      can explicitly configure an <a href="config/valve.html">ErrorReportValve</a> <newline>+      and set its <strong>showReport</strong> attribute to <code>false</code>.</p> <newline>     </subsection> <newline>     <subsection name="Realms">																								
Tomcat	5		d126eec714a30fc335c793d0b820810abc2e82a	Konstantin Kolinko <kkolinko@apache.org>	Sun Apr 27 18:43:58 2014 +0000	Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56383 Document the new feature on the "security HowTO" page. Move error valve documentation lower in the valves list (access log valves and access control valves should be the first ones there).				https://svn.apache.org/repos/asf/tomcat/trunk@1590451 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/security-howto.xml b/webapps/docs/security-howto.xml <newline>index 463bca5..84ddc7a 100644 <newline>--- a/webapps/docs/security-howto.xml <newline>+++ b/webapps/docs/security-howto.xml <newline>@@ -348,8 +348,10 @@ <newline>       <p>The default ErrorReportValve includes the Tomcat version number in the <newline>       response sent to clients. To avoid this, custom error handling can be <newline>-      configured within each web application. Alternatively, the version number <newline>-      can be changed by creating the file <newline>+      configured within each web application. Alternatively, you can explicitly <newline>+      configure an <a href="config/valve.html">ErrorReportValve</a> and set its <newline>+      <strong>showServerInfo</strong> attribute to <code>false</code>. <newline>+      Alternatively, the version number can be changed by creating the file <newline>       CATALINA_BASE/lib/org/apache/catalina/util/ServerInfo.properties with <newline>       content as follows:</p> <newline>       <source>server.info=Apache Tomcat/<version-major-minor/>.x</source>																								
Tomcat	5		e70ee6b8fe437a498a375215011056702b0c481	Mark Emlyn David Thomas <markt@apache.org>	Thu Apr 17 09:56:26 2014 +0000	Small optimisation. The resolver and the factory are only used when running under a security manager so only load them in this case. Also avoid a possible memory leak when creating these objects.				https://svn.apache.org/repos/asf/tomcat/trunk@1588193 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/servlets/DefaultServlet.java b/java/org/apache/catalina/servlets/DefaultServlet.java <newline>index a8b47ee..0c678eb 100644 <newline>--- a/java/org/apache/catalina/servlets/DefaultServlet.java <newline>+++ b/java/org/apache/catalina/servlets/DefaultServlet.java <newline>@@ -132,8 +132,7 @@ public class DefaultServlet extends HttpServlet { <newline>     private static final DocumentBuilderFactory factory; <newline>-    private static final SecureEntityResolver secureEntityResolver = <newline>-            new SecureEntityResolver(); <newline>+    private static final SecureEntityResolver secureEntityResolver; <newline>     /** <newline>      * Full range marker. <newline>@@ -166,9 +165,15 @@ public class DefaultServlet extends HttpServlet { <newline>         urlEncoder.addSafeCharacter('*'); <newline>         urlEncoder.addSafeCharacter('/'); <newline>-        factory = DocumentBuilderFactory.newInstance(); <newline>-        factory.setNamespaceAware(true); <newline>-        factory.setValidating(false); <newline>+        if (Globals.IS_SECURITY_ENABLED) { <newline>+            factory = DocumentBuilderFactory.newInstance(); <newline>+            factory.setNamespaceAware(true); <newline>+            factory.setValidating(false); <newline>+            secureEntityResolver = new SecureEntityResolver(); <newline>+        } else { <newline>+            factory = null; <newline>+            secureEntityResolver = null; <newline>+        } <newline>     }																								
Tomcat	5		1c0827a50192a12843bddbaa0b62a348c5115c1	Konstantin Kolinko <kkolinko@apache.org>	Fri Feb 21 15:13:15 2014 +0000	Allow to limit JUnit test run to a number of selected test case methods. BUILDING.txt says that Ant 1.8.x is needed. If we require a later version of Ant, e.g. 1.9.3 due to javadoc task security fixes, then Ant 1.8.2 comment in BUILDING.txt can be removed.				https://svn.apache.org/repos/asf/tomcat/trunk@1570601 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/build.xml b/build.xml <newline>index 4838fb6..6ba78fe 100644 <newline>--- a/build.xml <newline>+++ b/build.xml <newline>@@ -1367,7 +1367,12 @@ <newline>                    extension="@{extension}${junit.formatter.extension}" /> <newline>         <!-- If test.entry is defined, run a single test, otherwise run all valid tests --> <newline>-        <test todir="${tomcat.build}/logs" name="${test.entry}" if="test.entry"/> <newline>+        <test todir="${tomcat.build}/logs" name="${test.entry}" <newline>+              if="test.entry" unless="test.entry.methods" <newline>+           /> <newline>+        <test todir="${tomcat.build}/logs" name="${test.entry}" methods="${test.entry.methods}" <newline>+              if="test.entry.methods" <newline>+           /> <newline>         <batchtest todir="${tomcat.build}/logs" unless="test.entry"> <newline>           <fileset dir="test" > <newline>             <!-- Include all by default -->																								
Tomcat	5		b3934c8c6eb20039157b25da01bd8ab9906a614	Konstantin Kolinko <kkolinko@apache.org>	Fri Jan 24 19:53:00 2014 +0000	Remove svn:keywords property from catalina/(mapper|mbeans|realm|security|servlets|session)/** svn propdel svn:keywords --depth infinity				https://svn.apache.org/repos/asf/tomcat/trunk@1561135 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/build.xml b/build.xml <newline>index 4838fb6..6ba78fe 100644 <newline>--- a/build.xml <newline>+++ b/build.xml <newline>@@ -1367,7 +1367,12 @@ <newline>                    extension="@{extension}${junit.formatter.extension}" /> <newline>         <!-- If test.entry is defined, run a single test, otherwise run all valid tests --> <newline>-        <test todir="${tomcat.build}/logs" name="${test.entry}" if="test.entry"/> <newline>+        <test todir="${tomcat.build}/logs" name="${test.entry}" <newline>+              if="test.entry" unless="test.entry.methods" <newline>+           /> <newline>+        <test todir="${tomcat.build}/logs" name="${test.entry}" methods="${test.entry.methods}" <newline>+              if="test.entry.methods" <newline>+           /> <newline>         <batchtest todir="${tomcat.build}/logs" unless="test.entry"> <newline>           <fileset dir="test" > <newline>             <!-- Include all by default -->																								
Tomcat	5		37b2168927ca530162b8ac876d103b627fea89c	Mark Emlyn David Thomas <markt@apache.org>	Fri Jan 10 16:34:46 2014 +0000	Follow up to r1557113 - fix failure when running under a security manager				https://svn.apache.org/repos/asf/tomcat/trunk@1557180 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/security/SecurityClassLoad.java b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>index c08d926..8c22195 100644 <newline>--- a/java/org/apache/catalina/security/SecurityClassLoad.java <newline>+++ b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>@@ -153,7 +153,7 @@ public final class SecurityClassLoad { <newline>     private static final void loadValvesPackage(ClassLoader loader) <newline>             throws Exception { <newline>         final String basePackage = "org.apache.catalina.valves."; <newline>-        loader.loadClass(basePackage + "AccessLogValve$3"); <newline>+        loader.loadClass(basePackage + "AbstractAccessLogValve$3"); <newline>     }																								
Tomcat	5		e39008e220ffc3d39d3820601a2642445ce69b4	Mark Emlyn David Thomas <markt@apache.org>	Tue Dec 17 18:47:49 2013 +0000	Fix a reported issue when running under a security manager. Refactor to enable some basic unit testing to hopefully avoid some of these issues in future.				https://svn.apache.org/repos/asf/tomcat/trunk@1551652 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/security/SecurityClassLoad.java b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>index 7a632ad..74eff12 100644 <newline>--- a/java/org/apache/catalina/security/SecurityClassLoad.java <newline>+++ b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>@@ -30,10 +30,15 @@ package org.apache.catalina.security; <newline> public final class SecurityClassLoad { <newline>-    public static void securityClassLoad(ClassLoader loader) <newline>-        throws Exception { <newline>+    public static void securityClassLoad(ClassLoader loader) throws Exception { <newline>+        securityClassLoad(loader, true); <newline>+    } <newline>+ <newline>+ <newline>+    static void securityClassLoad(ClassLoader loader, boolean requireSecurityManager) <newline>+            throws Exception { <newline>-        if( System.getSecurityManager() == null ){ <newline>+        if (requireSecurityManager && System.getSecurityManager() == null) { <newline>             return; <newline>         } <newline>@@ -280,8 +285,9 @@ public final class SecurityClassLoad { <newline>         loader.loadClass(basePackage + <newline>                 "util.net.NioBlockingSelector$BlockPoller$3"); <newline>         loader.loadClass(basePackage + "util.net.SSLSupport$CipherData"); <newline>+        // threads <newline>         loader.loadClass <newline>-            (basePackage + "util.net.AbstractEndpoint$PrivilegedSetTccl"); <newline>+            (basePackage + "util.threads.TaskThreadFactory$PrivilegedSetTccl"); <newline>     } <newline> }																								
Tomcat	1	2	d10732ec868df4bd66b14a173d3f37a87c55917	Mark Emlyn David Thomas <markt@apache.org>	Mon Nov 25 14:06:06 2013 +0000	Prevent a web application from deploying if it contains a context.xml, deployXML is false and there is no explicit descriptor as the descriptor may contain necessary security information.				https://svn.apache.org/repos/asf/tomcat/trunk@1545288 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/startup/LocalStrings.properties b/java/org/apache/catalina/startup/LocalStrings.properties <newline>index 2e04459..5b884e4 100644 <newline>--- a/java/org/apache/catalina/startup/LocalStrings.properties <newline>+++ b/java/org/apache/catalina/startup/LocalStrings.properties <newline>@@ -86,6 +86,7 @@ hostConfig.context.remove=Error while removing context [{0}] <newline> hostConfig.context.restart=Error during context [{0}] restart <newline> hostConfig.createDirs=Unable to create directory for deployment: {0} <newline> hostConfig.deployDescriptor=Deploying configuration descriptor {0} <newline>+hostConfig.deployDescriptor.blocked=The web application with context path [{0}] was not deployed because it contained a deployment descriptor [{1}] which may include configuration necessary for the secure deployment of the application but processing of deployment descriptors is prevented by the deloyXML setting of this host. An appropriate descriptor should be created at [{2}] to deploy this application. <newline> hostConfig.deployDescriptor.error=Error deploying configuration descriptor {0} <newline> hostConfig.deployDescriptor.threaded.error=Error waiting for multi-thread deployment of context descriptors to complete <newline> hostConfig.deployDescriptor.localDocBaseSpecified=A docBase {0} inside the host appBase has been specified, and will be ignored																								
Tomcat	5		83d975c5873c327b20a68862216b8b55602cf7d	Mark Emlyn David Thomas <markt@apache.org>	Mon Nov 25 10:26:26 2013 +0000	When running under a security manager disabled deployXML by default.				https://svn.apache.org/repos/asf/tomcat/trunk@1545213 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/security-howto.xml b/webapps/docs/security-howto.xml <newline>index c80ba95..44132c9 100644 <newline>--- a/webapps/docs/security-howto.xml <newline>+++ b/webapps/docs/security-howto.xml <newline>@@ -173,6 +173,13 @@ <newline>     manager should be introduced at the start of the development cycle as it can <newline>     be time-consuming to track down and fix issues caused by enabling a security <newline>     manager for a mature application.</p> <newline>+ <newline>+    <p>Enabling the security manager changes the defaults for the following <newline>+    settings:</p> <newline>+    <ul> <newline>+      <li>The default value for the <strong>deployXML</strong> attribute of the <newline>+      <strong>Host</strong> element is changed to <code>false</code>.</li> <newline>+    </ul> <newline>   </section> <newline>   <section name="server.xml"> <newline>@@ -293,9 +300,11 @@ <newline>       </p> <newline>       <p>In a hosted environment where web applications may not be trusted, set <newline>-      the <strong>deployXML</strong> attribute to <code>false</code> to ignore any <newline>-      context.xml packaged with the web application that may try to assign <newline>-      increased privileges to the web application. </p> <newline>+      the <strong>deployXML</strong> attribute to <code>false</code> to ignore <newline>+      any context.xml packaged with the web application that may try to assign <newline>+      increased privileges to the web application. Note that if the security <newline>+      manager is enabled that the <strong>deployXML</strong> attribute will <newline>+      default to <code>false</code>.</p> <newline>     </subsection> <newline>     <subsection name="Context">																								
Tomcat	3	1	7806aa373fb25c125036198d802d59936aef1b2	Mark Emlyn David Thomas <markt@apache.org>	Fri Nov 15 17:39:05 2013 +0000	Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55778 Make value used for javax.security.sasl.qop with SPNEGO configurable.				https://svn.apache.org/repos/asf/tomcat/trunk@1542339 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/config/realm.xml b/webapps/docs/config/realm.xml <newline>index 3b8d256..5cd6cd7 100644 <newline>--- a/webapps/docs/config/realm.xml <newline>+++ b/webapps/docs/config/realm.xml <newline>@@ -551,6 +551,17 @@ <newline>         <code>0</code> is used which indicates no limit.</p> <newline>       </attribute> <newline>+      <attribute mame="spengoDelegationQop" requireed="false"> <newline>+        <p>When the JNDI Realm is used with the SPNEGO authenticator and <newline>+        <code>useDelegatedCredential</code> is <code>true</code> this attribute <newline>+        controls the QOP that should be used for the connection to the LDAP <newline>+        server after authentication. This value is used to set the <newline>+        <code>javax.security.sasl.qop</code> environment property for the LDAP <newline>+        connection. This attribute should be a comma-separated list of values <newline>+        selected from <code>auth-conf</code>, <code>auth-int</code> and <newline>+        <code>auth</code>. The default value is <code>auth-conf</code>.</p> <newline>+      </attribute> <newline>+ <newline>       <attribute name="stripRealmForGss" required="false"> <newline>         <p>When processing users authenticated via the GSS-API, this attribute <newline>         controls if any &quot;@...&quot; is removed from the end of the user <newline>@@ -565,7 +576,7 @@ <newline>       </attribute> <newline>       <attribute name="useDelegatedCredential" required="false"> <newline>-        <p>When the JNIRealm is used with the SPNEGO authenticator, delegated <newline>+        <p>When the JNDIRealm is used with the SPNEGO authenticator, delegated <newline>         credentials for the user may be available. If such credentials are <newline>         present, this attribute controls whether are not they are used to <newline>         connect to the directory. If not specified, the default value of																								
Tomcat	5		fb7439a77a7e719df8203d826431c3d7ca3b537	Mark Emlyn David Thomas <markt@apache.org>	Mon Nov 11 11:25:50 2013 +0000	Add more detail to the security how-to				https://svn.apache.org/repos/asf/tomcat/trunk@1540670 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/security-howto.xml b/webapps/docs/security-howto.xml <newline>index 21a59ff..58f489e 100644 <newline>--- a/webapps/docs/security-howto.xml <newline>+++ b/webapps/docs/security-howto.xml <newline>@@ -72,10 +72,74 @@ <newline>   </section> <newline>   <section name="Default web applications"> <newline>-    <p>Tomcat ships with a number of web applications by default. <newline>-    Vulnerabilities have been discovered in these applications in the past. <newline>-    Applications that are not required should be removed so the system will not <newline>-    be at risk if another vulnerability is discovered.</p> <newline>+ <newline>+    <subsection name="General"> <newline>+      <p>Tomcat ships with a number of web applications that are enabled by <newline>+      default. Vulnerabilities have been discovered in these applications in the <newline>+      past. Applications that are not required should be removed so the system <newline>+      will not be at risk if another vulnerability is discovered.</p> <newline>+    </subsection> <newline>+ <newline>+    <subsection name="ROOT"> <newline>+      <p>The ROOT web application presents a very low security risk but it does <newline>+      include the version of Tomcat that is being used. The ROOT web application <newline>+      should normally be removed from a publicly accessible Tomcat instance, not <newline>+      for security reasons, but so that a more appropriate default page is shown <newline>+      to users.</p> <newline>+    </subsection> <newline>+ <newline>+    <subsection name="Documentation"> <newline>+      <p>The documentation web application presents a very low security risk but <newline>+      it does identify the version of Tomcat that is being used. It should <newline>+      normally be removed from a publicly accessible Tomcat instance.</p> <newline>+    </subsection> <newline>+ <newline>+    <subsection name="Examples"> <newline>+      <p>The examples web application should always be removed from any security <newline>+      sensitive installation. While the examples web application does not <newline>+      contain any known vulnerabilities, it is known to contain features <newline>+      (particularly the cookie examples that display the contents of all <newline>+      received and allow new cookies to be set) that may be used by an attacker <newline>+      in conjunction with a vulnerability in another application deployed on the <newline>+      Tomcat instance to obtain additional information that would otherwise be <newline>+      unavailable.</p> <newline>+    </subsection> <newline>+ <newline>+    <subsection name="Manager"> <newline>+      <p>The Manager application allows the remote deployment of web <newline>+      applications and is frequently targeted by attackers due to the widespread <newline>+      use of weak passwords and publicly accessible Tomcat instances with the <newline>+      Manager application enabled. The Manager application is not accessible by <newline>+      default as no users are configured with the necessary access. If the <newline>+      Manager application is enabled then guidance in the section <newline>+      <strong>Securing Management Applications</strong> section should be <newline>+      followed.</p> <newline>+    </subsection> <newline>+ <newline>+    <subsection name="Host Manager"> <newline>+      <p>The Host Manager application allows the creation and management of <newline>+      virtual hosts - including the enabling of the Manager application for a <newline>+      virtual host. The Host Manager application is not accessible by default a <newline>+      no users are configured with the necessary access. If the Manager <newline>+      application is enabled then guidance in the section <strong>Securing <newline>+      Management Applications</strong> section should be followed.</p> <newline>+    </subsection> <newline>+ <newline>+   <subsection name="Securing Management Applications"> <newline>+     <p>When deploying a web application that provides management functions for <newline>+     the Tomcat instance, the following guidelines should be followed:</p> <newline>+     <ul> <newline>+       <ol>Ensure that any users permitted to access the management application <newline>+           have strong passwords.</ol> <newline>+       <ol>Do not remove the use of the <a <newline>+           href="config/realm.html#LockOut_Realm_-_org.apache.catalina.realm.LockOutRealm">LockOutRealm</a> <newline>+           which prevents brute force attacks against user passwords.</ol> <newline>+       <ol>Uncomment the <a href="config/valve.html#Remote_Address_Filter">RemoteAddrValve</a> <newline>+           in <code>/META-INF/context.xml</code> which limits access to <newline>+           localhost. If remote access is required, limit it to specific IP <newline>+           addresses using this valve.</ol> <newline>+     </ul> <newline>+   </subsection> <newline>   </section> <newline>   <section name="Security manager">																								
Tomcat	5		470216479bbfed93941a54768960198a0d01981	Mark Emlyn David Thomas <markt@apache.org>	Tue Oct 15 20:15:03 2013 +0000	Fix Servlet 3.1 non-blocking when running with a security manager				https://svn.apache.org/repos/asf/tomcat/trunk@1532511 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/security/SecurityClassLoad.java b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>index 8423ede..7a632ad 100644 <newline>--- a/java/org/apache/catalina/security/SecurityClassLoad.java <newline>+++ b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>@@ -272,6 +272,7 @@ public final class SecurityClassLoad { <newline>         loader.loadClass(basePackage + "util.http.parser.MediaTypeCache"); <newline>         // net <newline>         loader.loadClass(basePackage + "util.net.Constants"); <newline>+        loader.loadClass(basePackage + "util.net.DispatchType"); <newline>         loader.loadClass(basePackage + <newline>                 "util.net.NioBlockingSelector$BlockPoller$1"); <newline>         loader.loadClass(basePackage +																								
Tomcat	5		e819efa7810c5a8b4eb41ad615d9d2a0c45243b	Mark Emlyn David Thomas <markt@apache.org>	Tue Oct 15 20:00:14 2013 +0000	Fix WebSocket when running under a security manager				https://svn.apache.org/repos/asf/tomcat/trunk@1532506 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/conf/catalina.policy b/conf/catalina.policy <newline>index a90ea3a..cf69af9 100644 <newline>--- a/conf/catalina.policy <newline>+++ b/conf/catalina.policy <newline>@@ -191,8 +191,9 @@ grant { <newline>     // Applications using Comet need to be able to access this package <newline>     permission java.lang.RuntimePermission "accessClassInPackage.org.apache.catalina.comet"; <newline>-    // Applications using WebSocket need to be able to access this package <newline>-    permission java.lang.RuntimePermission "accessClassInPackage.org.apache.catalina.websocket"; <newline>+    // Applications using WebSocket need to be able to access these packages <newline>+    permission java.lang.RuntimePermission "accessClassInPackage.org.apache.tomcat.websocket"; <newline>+    permission java.lang.RuntimePermission "accessClassInPackage.org.apache.tomcat.websocket.server"; <newline> };																								
Tomcat	1	2	a5f2dec07dcb82b551b2eb39467b19298268376	Konstantin Preißer <kpreisser@apache.org>	Thu Sep 26 15:21:06 2013 +0000	Improve Snake Websocket example: - Fix invalid JSON syntax (Strings always need to be in double-quotes) - In JavaScript, use JSON.parse() instead of eval() to parse JSON strings, to avoid potential security problems.				https://svn.apache.org/repos/asf/tomcat/trunk@1526565 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/examples/websocket/snake.xhtml b/webapps/examples/websocket/snake.xhtml <newline>index fdc3e97..a65f27f 100644 <newline>--- a/webapps/examples/websocket/snake.xhtml <newline>+++ b/webapps/examples/websocket/snake.xhtml <newline>@@ -209,8 +209,7 @@ <newline>             }; <newline>             Game.socket.onmessage = function (message) { <newline>-                // _Potential_ security hole, consider using json lib to parse data in production. <newline>-                var packet = eval('(' + message.data + ')'); <newline>+                var packet = JSON.parse(message.data); <newline>                 switch (packet.type) { <newline>                     case 'update': <newline>                         for (var i = 0; i < packet.data.length; i++) {																								
Tomcat	5		b010025639a37c94160e01d2ccf971ee1cf0675	Mark Emlyn David Thomas <markt@apache.org>	Wed Sep 18 20:24:02 2013 +0000	Fix starting with a security manager				https://svn.apache.org/repos/asf/tomcat/trunk@1524557 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/security/SecurityClassLoad.java b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>index c7c6482..8423ede 100644 <newline>--- a/java/org/apache/catalina/security/SecurityClassLoad.java <newline>+++ b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>@@ -280,9 +280,7 @@ public final class SecurityClassLoad { <newline>                 "util.net.NioBlockingSelector$BlockPoller$3"); <newline>         loader.loadClass(basePackage + "util.net.SSLSupport$CipherData"); <newline>         loader.loadClass <newline>-            (basePackage + "util.net.JIoEndpoint$PrivilegedSetTccl"); <newline>-        loader.loadClass <newline>-            (basePackage + "util.net.AprEndpoint$PrivilegedSetTccl"); <newline>+            (basePackage + "util.net.AbstractEndpoint$PrivilegedSetTccl"); <newline>     } <newline> }																								
Tomcat	5		710b05e708361eb00e0abad11ecd801dbce1c28	Mark Emlyn David Thomas <markt@apache.org>	Wed Aug 7 09:16:31 2013 +0000	When using a security manager always use the same method inside the doPrivileged call as triggered the call. This fixes an startup failure when running 8.0.x under a security manager as it uses a listener that does not have a zero arg constructor.				https://svn.apache.org/repos/asf/tomcat/trunk@1511217 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/core/ApplicationContextFacade.java b/java/org/apache/catalina/core/ApplicationContextFacade.java <newline>index a361939..1dd59c4 100644 <newline>--- a/java/org/apache/catalina/core/ApplicationContextFacade.java <newline>+++ b/java/org/apache/catalina/core/ApplicationContextFacade.java <newline>@@ -462,7 +462,8 @@ public class ApplicationContextFacade implements ServletContext { <newline>             Class<? extends Filter> filterClass) { <newline>         if (SecurityUtil.isPackageProtectionEnabled()) { <newline>             return (FilterRegistration.Dynamic) doPrivileged("addFilter", <newline>-                    new Object[]{filterName, filterClass.getName()}); <newline>+                    new Class[]{String.class, Class.class}, <newline>+                    new Object[]{filterName, filterClass}); <newline>         } else { <newline>             return context.addFilter(filterName, filterClass); <newline>         } <newline>@@ -530,7 +531,8 @@ public class ApplicationContextFacade implements ServletContext { <newline>             Class<? extends Servlet> servletClass) { <newline>         if (SecurityUtil.isPackageProtectionEnabled()) { <newline>             return (ServletRegistration.Dynamic) doPrivileged("addServlet", <newline>-                    new Object[]{servletName, servletClass.getName()}); <newline>+                    new Class[]{String.class, Class.class}, <newline>+                    new Object[]{servletName, servletClass}); <newline>         } else { <newline>             return context.addServlet(servletName, servletClass); <newline>         } <newline>@@ -630,7 +632,8 @@ public class ApplicationContextFacade implements ServletContext { <newline>     public void addListener(Class<? extends EventListener> listenerClass) { <newline>         if (SecurityUtil.isPackageProtectionEnabled()) { <newline>             doPrivileged("addListener", <newline>-                    new Object[]{listenerClass.getName()}); <newline>+                    new Class[]{Class.class}, <newline>+                    new Object[]{listenerClass}); <newline>         } else { <newline>             context.addListener(listenerClass); <newline>         } <newline>@@ -652,7 +655,8 @@ public class ApplicationContextFacade implements ServletContext { <newline>     public <T extends EventListener> void addListener(T t) { <newline>         if (SecurityUtil.isPackageProtectionEnabled()) { <newline>             doPrivileged("addListener", <newline>-                    new Object[]{t.getClass().getName()}); <newline>+                    new Class[]{EventListener.class}, <newline>+                    new Object[]{t}); <newline>         } else { <newline>             context.addListener(t); <newline>         } <newline>@@ -683,9 +687,7 @@ public class ApplicationContextFacade implements ServletContext { <newline>     @Override <newline>     public void declareRoles(String... roleNames) { <newline>         if (SecurityUtil.isPackageProtectionEnabled()) { <newline>-//FIXME <newline>-            doPrivileged("declareRoles", <newline>-                    new Object[]{roleNames}); <newline>+            doPrivileged("declareRoles", new Object[]{roleNames}); <newline>         } else { <newline>             context.declareRoles(roleNames); <newline>         }																								
Tomcat	5		682a4f48a62b007af3a709c9ee5b91a5aab1872	Mark Emlyn David Thomas <markt@apache.org>	Fri Jun 21 12:41:13 2013 +0000	Expand test cases for servlet security annotations to include deny uncovered http methods. Fix the failure identified by violetagg				https://svn.apache.org/repos/asf/tomcat/trunk@1495414 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/test/org/apache/catalina/core/TestStandardWrapper.java b/test/org/apache/catalina/core/TestStandardWrapper.java <newline>index 3ce457e..f381eba 100644 <newline>--- a/test/org/apache/catalina/core/TestStandardWrapper.java <newline>+++ b/test/org/apache/catalina/core/TestStandardWrapper.java <newline>@@ -62,37 +62,89 @@ public class TestStandardWrapper extends TomcatBaseTest { <newline>     @Test <newline>     public void testSecurityAnnotationsSimple() throws Exception { <newline>-        doTest(DenyAllServlet.class.getName(), false, false, false); <newline>+        doTest(DenyAllServlet.class.getName(), false, false, false, false); <newline>     } <newline>     @Test <newline>     public void testSecurityAnnotationsSubclass1() throws Exception { <newline>-        doTest(SubclassDenyAllServlet.class.getName(), false, false, false); <newline>+        doTest(SubclassDenyAllServlet.class.getName(), <newline>+                false, false, false,false); <newline>     } <newline>     @Test <newline>     public void testSecurityAnnotationsSubclass2() throws Exception { <newline>-        doTest(SubclassAllowAllServlet.class.getName(), false, false, true); <newline>+        doTest(SubclassAllowAllServlet.class.getName(), <newline>+                false, false, true, false); <newline>     } <newline>     @Test <newline>     public void testSecurityAnnotationsMethods1() throws Exception { <newline>-        doTest(MethodConstraintServlet.class.getName(), false, false, false); <newline>+        doTest(MethodConstraintServlet.class.getName(), <newline>+                false, false, false, false); <newline>     } <newline>     @Test <newline>     public void testSecurityAnnotationsMethods2() throws Exception { <newline>-        doTest(MethodConstraintServlet.class.getName(), true, false, true); <newline>+        doTest(MethodConstraintServlet.class.getName(), <newline>+                true, false, true, false); <newline>     } <newline>     @Test <newline>     public void testSecurityAnnotationsRole1() throws Exception { <newline>-        doTest(RoleAllowServlet.class.getName(), false, true, true); <newline>+        doTest(RoleAllowServlet.class.getName(), false, true, true, false); <newline>     } <newline>     @Test <newline>     public void testSecurityAnnotationsRole2() throws Exception { <newline>-        doTest(RoleDenyServlet.class.getName(), false, true, false); <newline>+        doTest(RoleDenyServlet.class.getName(), false, true, false, false); <newline>+    } <newline>+ <newline>+    @Test <newline>+    public void testSecurityAnnotationsUncoveredGet01() throws Exception { <newline>+        // Use a POST with role - should be allowed <newline>+        doTest(UncoveredGetServlet.class.getName(), true, true, true, false); <newline>+    } <newline>+ <newline>+    @Test <newline>+    public void testSecurityAnnotationsUncoveredGet02() throws Exception { <newline>+        // Use a POST with role - should be allowed <newline>+        doTest(UncoveredGetServlet.class.getName(), true, true, true, true); <newline>+    } <newline>+ <newline>+    @Test <newline>+    public void testSecurityAnnotationsUncoveredGet03() throws Exception { <newline>+        // Use a POST no role - should be blocked <newline>+        doTest(UncoveredGetServlet.class.getName(), true, false, false, false); <newline>+    } <newline>+ <newline>+    @Test <newline>+    public void testSecurityAnnotationsUncoveredGet04() throws Exception { <newline>+        // Use a POST no role - should be blocked <newline>+        doTest(UncoveredGetServlet.class.getName(), true, false, false, true); <newline>+    } <newline>+ <newline>+    @Test <newline>+    public void testSecurityAnnotationsUncoveredGet05() throws Exception { <newline>+        // Use a GET with role - should be allowed as denyUncovered is false <newline>+        doTest(UncoveredGetServlet.class.getName(), false, true, true, false); <newline>+    } <newline>+ <newline>+    @Test <newline>+    public void testSecurityAnnotationsUncoveredGet06() throws Exception { <newline>+        // Use a GET with role - should be blocked as denyUncovered is true <newline>+        doTest(UncoveredGetServlet.class.getName(), false, true, false, true); <newline>+    } <newline>+ <newline>+    @Test <newline>+    public void testSecurityAnnotationsUncoveredGet07() throws Exception { <newline>+        // Use a GET no role - should be allowed as denyUncovered is false <newline>+        doTest(UncoveredGetServlet.class.getName(), false, false, true, false); <newline>+    } <newline>+ <newline>+    @Test <newline>+    public void testSecurityAnnotationsUncoveredGet08() throws Exception { <newline>+        // Use a GET no role - should be blocked as denyUncovered is true <newline>+        doTest(UncoveredGetServlet.class.getName(), true, false, false, true); <newline>     } <newline>     @Test <newline>@@ -223,7 +275,8 @@ public class TestStandardWrapper extends TomcatBaseTest { <newline>     } <newline>     private void doTest(String servletClassName, boolean usePost, <newline>-            boolean useRole, boolean expect200) throws Exception { <newline>+            boolean useRole, boolean expect200, boolean denyUncovered) <newline>+            throws Exception { <newline>         // Setup Tomcat instance <newline>         Tomcat tomcat = getTomcatInstance(); <newline>@@ -231,6 +284,7 @@ public class TestStandardWrapper extends TomcatBaseTest { <newline>         // Must have a real docBase - just use temp <newline>         Context ctx = <newline>             tomcat.addContext("", System.getProperty("java.io.tmpdir")); <newline>+        ctx.setDenyUncoveredHttpMethods(denyUncovered); <newline>         Wrapper wrapper = Tomcat.addServlet(ctx, "servlet", servletClassName); <newline>         wrapper.setAsyncSupported(true); <newline>@@ -318,6 +372,14 @@ public class TestStandardWrapper extends TomcatBaseTest { <newline>         private static final long serialVersionUID = 1L; <newline>     } <newline>+    @ServletSecurity(httpMethodConstraints = { <newline>+            @HttpMethodConstraint(value="POST",rolesAllowed = "testRole") <newline>+        } <newline>+    ) <newline>+    public static class UncoveredGetServlet extends TestServlet { <newline>+        private static final long serialVersionUID = 1L; <newline>+    } <newline>+ <newline>     @ServletSecurity(@HttpConstraint(rolesAllowed = "testRole")) <newline>     public static class RoleAllowServlet extends TestServlet { <newline>         private static final long serialVersionUID = 1L;																								
Tomcat	3	1	c685a094147703b683092ce896d83014b4f4291	Mark Emlyn David Thomas <markt@apache.org>	Tue Jun 18 20:46:53 2013 +0000	Add tests for security constraint role combination		rMapRealm mapRealm = new TesterMapRealm();		https://svn.apache.org/repos/asf/tomcat/trunk@1494295 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/test/org/apache/catalina/realm/TestRealmBase.java b/test/org/apache/catalina/realm/TestRealmBase.java <newline>index 0b238ec..8d40689 100644 <newline>--- a/test/org/apache/catalina/realm/TestRealmBase.java <newline>+++ b/test/org/apache/catalina/realm/TestRealmBase.java <newline>@@ -28,7 +28,6 @@ import org.apache.catalina.connector.Request; <newline> import org.apache.catalina.connector.Response; <newline> import org.apache.catalina.connector.TesterResponse; <newline> import org.apache.catalina.core.TesterContext; <newline>-import org.apache.catalina.deploy.SecurityCollection; <newline> import org.apache.catalina.deploy.SecurityConstraint; <newline> import org.apache.catalina.startup.TesterMapRealm; <newline>@@ -37,6 +36,9 @@ public class TestRealmBase { <newline>     private static final String USER1 = "user1"; <newline>     private static final String PWD1 = "password1"; <newline>     private static final String ROLE1 = "role1"; <newline>+    private static final String ROLE2 = "role2"; <newline>+    private static final String ROLE3 = "role3"; <newline>+    private static final String ROLE99 = "role99"; <newline>     @Test <newline>     public void testUserWithSingleRole() throws IOException { <newline>@@ -156,48 +158,398 @@ public class TestRealmBase { <newline>     @Test <newline>     public void testNoAuthConstraint() throws IOException { <newline>-        // No auth constraint == allow access <newline>+        // No auth constraint == allow access for all <newline>+        List<String> applicationRoles = new ArrayList<>(); <newline>+ <newline>+        doRoleTest(null, null, applicationRoles, true); <newline>+    } <newline>+ <newline>+ <newline>+    /* <newline>+     * The combining constraints tests are based on the scenarios described in <newline>+     * section <newline>+     */ <newline>+ <newline>+    @Test <newline>+    public void testCombineConstraints01() throws IOException { <newline>+        // Allowed roles should be the union of the roles in the constraints <newline>+        // User role is in first constraint <newline>+        List<String> userRoles = new ArrayList<>(); <newline>+        List<String> constraintOneRoles = new ArrayList<>(); <newline>+        List<String> constraintTwoRoles = new ArrayList<>(); <newline>+        List<String> applicationRoles = new ArrayList<>(); <newline>+ <newline>+        userRoles.add(ROLE1); <newline>+        constraintOneRoles.add(ROLE1); <newline>+        constraintTwoRoles.add(ROLE2); <newline>+        applicationRoles.add(ROLE1); <newline>+        applicationRoles.add(ROLE2); <newline>+ <newline>+        doRoleTest(userRoles, constraintOneRoles, constraintTwoRoles, <newline>+                applicationRoles, true); <newline>+    } <newline>+ <newline>+ <newline>+    @Test <newline>+    public void testCombineConstraints02() throws IOException { <newline>+        // Allowed roles should be the union of the roles in the constraints <newline>+        // User role is in last constraint <newline>+        List<String> userRoles = new ArrayList<>(); <newline>+        List<String> constraintOneRoles = new ArrayList<>(); <newline>+        List<String> constraintTwoRoles = new ArrayList<>(); <newline>+        List<String> applicationRoles = new ArrayList<>(); <newline>+ <newline>+        userRoles.add(ROLE2); <newline>+        constraintOneRoles.add(ROLE1); <newline>+        constraintTwoRoles.add(ROLE2); <newline>+        applicationRoles.add(ROLE1); <newline>+        applicationRoles.add(ROLE2); <newline>+ <newline>+        doRoleTest(userRoles, constraintOneRoles, constraintTwoRoles, <newline>+                applicationRoles, true); <newline>+    } <newline>+ <newline>+ <newline>+    @Test <newline>+    public void testCombineConstraints03() throws IOException { <newline>+        // Allowed roles should be the union of the roles in the constraints <newline>+        // User role is not in any constraint <newline>+        List<String> userRoles = new ArrayList<>(); <newline>+        List<String> constraintOneRoles = new ArrayList<>(); <newline>+        List<String> constraintTwoRoles = new ArrayList<>(); <newline>+        List<String> applicationRoles = new ArrayList<>(); <newline>+ <newline>+        userRoles.add(ROLE3); <newline>+        constraintOneRoles.add(ROLE1); <newline>+        constraintTwoRoles.add(ROLE2); <newline>+        applicationRoles.add(ROLE1); <newline>+        applicationRoles.add(ROLE2); <newline>+ <newline>+        doRoleTest(userRoles, constraintOneRoles, constraintTwoRoles, <newline>+                applicationRoles, false); <newline>+    } <newline>+ <newline>+ <newline>+    @Test <newline>+    public void testCombineConstraints04() throws IOException { <newline>+        // Allowed roles should be the union of the roles in the constraints <newline>+        // * is any app role <newline>+        // User role is not in any constraint <newline>+        List<String> userRoles = new ArrayList<>(); <newline>+        List<String> constraintOneRoles = new ArrayList<>(); <newline>+        List<String> constraintTwoRoles = new ArrayList<>(); <newline>+        List<String> applicationRoles = new ArrayList<>(); <newline>+ <newline>+        userRoles.add(ROLE99); <newline>+        constraintOneRoles.add(ROLE1); <newline>+        constraintTwoRoles.add(SecurityConstraint.ROLE_ALL_ROLES); <newline>+        applicationRoles.add(ROLE2); <newline>+        applicationRoles.add(ROLE3); <newline>+ <newline>+        doRoleTest(userRoles, constraintOneRoles, constraintTwoRoles, <newline>+                applicationRoles, false); <newline>+    } <newline>+ <newline>+ <newline>+    @Test <newline>+    public void testCombineConstraints05() throws IOException { <newline>+        // Allowed roles should be the union of the roles in the constraints <newline>+        // * is any app role <newline>+        // User role is a non-app constraint role <newline>+        List<String> userRoles = new ArrayList<>(); <newline>+        List<String> constraintOneRoles = new ArrayList<>(); <newline>+        List<String> constraintTwoRoles = new ArrayList<>(); <newline>+        List<String> applicationRoles = new ArrayList<>(); <newline>+ <newline>+        userRoles.add(ROLE1); <newline>+        constraintOneRoles.add(ROLE1); <newline>+        constraintTwoRoles.add(SecurityConstraint.ROLE_ALL_ROLES); <newline>+        applicationRoles.add(ROLE2); <newline>+        applicationRoles.add(ROLE3); <newline>+ <newline>+        doRoleTest(userRoles, constraintOneRoles, constraintTwoRoles, <newline>+                applicationRoles, true); <newline>+    } <newline>+ <newline>+ <newline>+    @Test <newline>+    public void testCombineConstraints06() throws IOException { <newline>+        // Allowed roles should be the union of the roles in the constraints <newline>+        // * is any app role <newline>+        // User role is an app role <newline>+        List<String> userRoles = new ArrayList<>(); <newline>+        List<String> constraintOneRoles = new ArrayList<>(); <newline>+        List<String> constraintTwoRoles = new ArrayList<>(); <newline>+        List<String> applicationRoles = new ArrayList<>(); <newline>+ <newline>+        userRoles.add(ROLE2); <newline>+        constraintOneRoles.add(ROLE1); <newline>+        constraintTwoRoles.add(SecurityConstraint.ROLE_ALL_ROLES); <newline>+        applicationRoles.add(ROLE2); <newline>+        applicationRoles.add(ROLE3); <newline>+ <newline>+        doRoleTest(userRoles, constraintOneRoles, constraintTwoRoles, <newline>+                applicationRoles, true); <newline>+    } <newline>+ <newline>+ <newline>+    @Test <newline>+    public void testCombineConstraints07() throws IOException { <newline>+        // Allowed roles should be the union of the roles in the constraints <newline>+        // * is any app role <newline>+        // User has no role <newline>+        List<String> userRoles = new ArrayList<>(); <newline>+        List<String> constraintOneRoles = new ArrayList<>(); <newline>+        List<String> constraintTwoRoles = new ArrayList<>(); <newline>+        List<String> applicationRoles = new ArrayList<>(); <newline>+ <newline>+        constraintOneRoles.add(ROLE1); <newline>+        constraintTwoRoles.add(SecurityConstraint.ROLE_ALL_ROLES); <newline>+        applicationRoles.add(ROLE2); <newline>+        applicationRoles.add(ROLE3); <newline>+ <newline>+        doRoleTest(userRoles, constraintOneRoles, constraintTwoRoles, <newline>+                applicationRoles, false); <newline>+    } <newline>+ <newline>+ <newline>+    @Test <newline>+    public void testCombineConstraints08() throws IOException { <newline>+        // Allowed roles should be the union of the roles in the constraints <newline>+        // ** is any authenticated user <newline>+        // User has no role <newline>+        List<String> userRoles = new ArrayList<>(); <newline>+        List<String> constraintOneRoles = new ArrayList<>(); <newline>+        List<String> constraintTwoRoles = new ArrayList<>(); <newline>+        List<String> applicationRoles = new ArrayList<>(); <newline>+ <newline>+        constraintOneRoles.add(ROLE1); <newline>+        constraintTwoRoles.add(SecurityConstraint.ROLE_ALL_AUTHENTICATED_USERS); <newline>+        applicationRoles.add(ROLE2); <newline>+        applicationRoles.add(ROLE3); <newline>+ <newline>+        doRoleTest(userRoles, constraintOneRoles, constraintTwoRoles, <newline>+                applicationRoles, true); <newline>+    } <newline>+ <newline>+ <newline>+    @Test <newline>+    public void testCombineConstraints09() throws IOException { <newline>+        // Allowed roles should be the union of the roles in the constraints <newline>+        // ** is any authenticated user <newline>+        // User has constraint role <newline>         List<String> userRoles = new ArrayList<>(); <newline>+        List<String> constraintOneRoles = new ArrayList<>(); <newline>+        List<String> constraintTwoRoles = new ArrayList<>(); <newline>         List<String> applicationRoles = new ArrayList<>(); <newline>-        doRoleTest(userRoles, null, applicationRoles, true); <newline>+        userRoles.add(ROLE1); <newline>+        constraintOneRoles.add(ROLE1); <newline>+        constraintTwoRoles.add(SecurityConstraint.ROLE_ALL_AUTHENTICATED_USERS); <newline>+        applicationRoles.add(ROLE2); <newline>+        applicationRoles.add(ROLE3); <newline>+ <newline>+        doRoleTest(userRoles, constraintOneRoles, constraintTwoRoles, <newline>+                applicationRoles, true); <newline>+    } <newline>+ <newline>+ <newline>+    @Test <newline>+    public void testCombineConstraints10() throws IOException { <newline>+        // Allowed roles should be the union of the roles in the constraints <newline>+        // ** is any authenticated user <newline>+        // User has app role <newline>+        List<String> userRoles = new ArrayList<>(); <newline>+        List<String> constraintOneRoles = new ArrayList<>(); <newline>+        List<String> constraintTwoRoles = new ArrayList<>(); <newline>+        List<String> applicationRoles = new ArrayList<>(); <newline>+ <newline>+        userRoles.add(ROLE2); <newline>+        constraintOneRoles.add(ROLE1); <newline>+        constraintTwoRoles.add(SecurityConstraint.ROLE_ALL_AUTHENTICATED_USERS); <newline>+        applicationRoles.add(ROLE2); <newline>+        applicationRoles.add(ROLE3); <newline>+ <newline>+        doRoleTest(userRoles, constraintOneRoles, constraintTwoRoles, <newline>+                applicationRoles, true); <newline>+    } <newline>+ <newline>+ <newline>+    @Test <newline>+    public void testCombineConstraints11() throws IOException { <newline>+        // Allowed roles should be the union of the roles in the constraints <newline>+        // ** is any authenticated user <newline>+        // User is not authenticated <newline>+        List<String> constraintOneRoles = new ArrayList<>(); <newline>+        List<String> constraintTwoRoles = new ArrayList<>(); <newline>+        List<String> applicationRoles = new ArrayList<>(); <newline>+ <newline>+        constraintOneRoles.add(ROLE1); <newline>+        constraintTwoRoles.add(SecurityConstraint.ROLE_ALL_AUTHENTICATED_USERS); <newline>+        applicationRoles.add(ROLE2); <newline>+        applicationRoles.add(ROLE3); <newline>+ <newline>+        doRoleTest(null, constraintOneRoles, constraintTwoRoles, <newline>+                applicationRoles, false); <newline>+    } <newline>+ <newline>+ <newline>+    @Test <newline>+    public void testCombineConstraints12() throws IOException { <newline>+        // Allowed roles should be the union of the roles in the constraints <newline>+        // Constraint without role or implied role permits unauthenticated users <newline>+        // User is not authenticated <newline>+        List<String> constraintTwoRoles = new ArrayList<>(); <newline>+        List<String> applicationRoles = new ArrayList<>(); <newline>+ <newline>+        constraintTwoRoles.add(ROLE1); <newline>+        applicationRoles.add(ROLE1); <newline>+ <newline>+        doRoleTest(null, null, constraintTwoRoles, <newline>+                applicationRoles, true); <newline>+    } <newline>+ <newline>+ <newline>+    @Test <newline>+    public void testCombineConstraints13() throws IOException { <newline>+        // Allowed roles should be the union of the roles in the constraints <newline>+        // Constraint without role or implied role permits unauthenticated users <newline>+        // User is not authenticated <newline>+        List<String> constraintTwoRoles = new ArrayList<>(); <newline>+        List<String> applicationRoles = new ArrayList<>(); <newline>+ <newline>+        constraintTwoRoles.add(SecurityConstraint.ROLE_ALL_ROLES); <newline>+        applicationRoles.add(ROLE1); <newline>+ <newline>+        doRoleTest(null, null, constraintTwoRoles, <newline>+                applicationRoles, true); <newline>+    } <newline>+ <newline>+ <newline>+    @Test <newline>+    public void testCombineConstraints14() throws IOException { <newline>+        // Allowed roles should be the union of the roles in the constraints <newline>+        // Constraint without role or implied role permits unauthenticated users <newline>+        // User is not authenticated <newline>+        List<String> constraintTwoRoles = new ArrayList<>(); <newline>+        List<String> applicationRoles = new ArrayList<>(); <newline>+ <newline>+        constraintTwoRoles.add(SecurityConstraint.ROLE_ALL_AUTHENTICATED_USERS); <newline>+        applicationRoles.add(ROLE1); <newline>+ <newline>+        doRoleTest(null, null, constraintTwoRoles, <newline>+                applicationRoles, true); <newline>+    } <newline>+ <newline>+ <newline>+    @Test <newline>+    public void testCombineConstraints15() throws IOException { <newline>+        // Allowed roles should be the union of the roles in the constraints <newline>+        // Constraint with empty auth section prevents all access <newline>+        // User has matching constraint role <newline>+        List<String> userRoles = new ArrayList<>(); <newline>+        List<String> constraintOneRoles = new ArrayList<>(); <newline>+        List<String> constraintTwoRoles = new ArrayList<>(); <newline>+        List<String> applicationRoles = new ArrayList<>(); <newline>+ <newline>+        userRoles.add(ROLE1); <newline>+        constraintTwoRoles.add(ROLE1); <newline>+        applicationRoles.add(ROLE1); <newline>+ <newline>+        doRoleTest(userRoles, constraintOneRoles, constraintTwoRoles, <newline>+                applicationRoles, false); <newline>+    } <newline>+ <newline>+ <newline>+    @Test <newline>+    public void testCombineConstraints16() throws IOException { <newline>+        // Allowed roles should be the union of the roles in the constraints <newline>+        // Constraint with empty auth section prevents all access <newline>+        // User has matching role <newline>+        List<String> userRoles = new ArrayList<>(); <newline>+        List<String> constraintOneRoles = new ArrayList<>(); <newline>+        List<String> constraintTwoRoles = new ArrayList<>(); <newline>+        List<String> applicationRoles = new ArrayList<>(); <newline>+ <newline>+        userRoles.add(ROLE1); <newline>+        constraintTwoRoles.add(SecurityConstraint.ROLE_ALL_ROLES); <newline>+        applicationRoles.add(ROLE1); <newline>+ <newline>+        doRoleTest(userRoles, constraintOneRoles, constraintTwoRoles, <newline>+                applicationRoles, false); <newline>+    } <newline>+ <newline>+ <newline>+    @Test <newline>+    public void testCombineConstraints17() throws IOException { <newline>+        // Allowed roles should be the union of the roles in the constraints <newline>+        // Constraint with empty auth section prevents all access <newline>+        // User matches all authenticated users <newline>+        List<String> userRoles = new ArrayList<>(); <newline>+        List<String> constraintOneRoles = new ArrayList<>(); <newline>+        List<String> constraintTwoRoles = new ArrayList<>(); <newline>+        List<String> applicationRoles = new ArrayList<>(); <newline>+ <newline>+        userRoles.add(ROLE1); <newline>+        constraintTwoRoles.add(SecurityConstraint.ROLE_ALL_AUTHENTICATED_USERS); <newline>+        applicationRoles.add(ROLE1); <newline>+ <newline>+        doRoleTest(userRoles, constraintOneRoles, constraintTwoRoles, <newline>+                applicationRoles, false); <newline>     } <newline>     /** <newline>-     * <newline>      * @param userRoles         <code>null</code> tests unauthenticated access <newline>      *                          otherwise access is tested with an authenticated <newline>      *                          user with the listed roles <newline>      * @param constraintRoles   <code>null</code> is equivalent to no auth <newline>      *                          constraint whereas an empty list is equivalent <newline>      *                          to an auth constraint that defines no roles. <newline>-     * @param applicationRoles <newline>-     * @param expected <newline>-     * @throws IOException <newline>      */ <newline>     private void doRoleTest(List<String> userRoles, <newline>             List<String> constraintRoles, List<String> applicationRoles, <newline>             boolean expected) throws IOException { <newline>+        List<String> constraintTwoRoles = new ArrayList<>(); <newline>+        constraintTwoRoles.add(ROLE99); <newline>+        doRoleTest(userRoles, constraintRoles, constraintTwoRoles, <newline>+                applicationRoles, expected); <newline>+    } <newline>+ <newline>+ <newline>+    private void doRoleTest(List<String> userRoles, <newline>+            List<String> constraintOneRoles, List<String> constraintTwoRoles, <newline>+            List<String> applicationRoles, boolean expected) <newline>+            throws IOException { <newline>+ <newline>         // Configure the security constraints for the resource <newline>-        SecurityConstraint constraint = new SecurityConstraint(); <newline>-        if (constraintRoles != null) { <newline>-            constraint.setAuthConstraint(true); <newline>-            for (String constraintRole : constraintRoles) { <newline>-                constraint.addAuthRole(constraintRole); <newline>+        SecurityConstraint constraintOne = new SecurityConstraint(); <newline>+        if (constraintOneRoles != null) { <newline>+            constraintOne.setAuthConstraint(true); <newline>+            for (String constraintRole : constraintOneRoles) { <newline>+                constraintOne.addAuthRole(constraintRole); <newline>+                if (applicationRoles.contains( <newline>+                        SecurityConstraint.ROLE_ALL_AUTHENTICATED_USERS)) { <newline>+                    constraintOne.treatAllAuthenticatedUsersAsApplicationRole(); <newline>+                } <newline>+            } <newline>+        } <newline>+        SecurityConstraint constraintTwo = new SecurityConstraint(); <newline>+        if (constraintTwoRoles != null) { <newline>+            constraintTwo.setAuthConstraint(true); <newline>+            for (String constraintRole : constraintTwoRoles) { <newline>+                constraintTwo.addAuthRole(constraintRole); <newline>                 if (applicationRoles.contains( <newline>                         SecurityConstraint.ROLE_ALL_AUTHENTICATED_USERS)) { <newline>-                    constraint.treatAllAuthenticatedUsersAsApplicationRole(); <newline>+                    constraintTwo.treatAllAuthenticatedUsersAsApplicationRole(); <newline>                 } <newline>             } <newline>         } <newline>-        SecurityCollection collection = new SecurityCollection(); <newline>-        collection.addPattern("/*"); <newline>         SecurityConstraint[] constraints = <newline>-                new SecurityConstraint[] {constraint}; <newline>+                new SecurityConstraint[] { constraintOne, constraintTwo }; <newline>         // Set up the mock request and response <newline>         Request request = new Request();																								
Tomcat	5		c0315befa173952427f6147bc701ef9271e82fc	Mark Emlyn David Thomas <markt@apache.org>	Fri Nov 16 19:35:42 2012 +0000	Fix some security exceptions when running with a security manager				https://svn.apache.org/repos/asf/tomcat/trunk@1410545 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/security/SecurityClassLoad.java b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>index d7fc114..c7c6482 100644 <newline>--- a/java/org/apache/catalina/security/SecurityClassLoad.java <newline>+++ b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>@@ -43,6 +43,7 @@ public final class SecurityClassLoad { <newline>         loadRealmPackage(loader); <newline>         loadSessionPackage(loader); <newline>         loadUtilPackage(loader); <newline>+        loadValvesPackage(loader); <newline>         loadJavaxPackage(loader); <newline>         loadConnectorPackage(loader); <newline>         loadTomcatPackage(loader); <newline>@@ -54,6 +55,9 @@ public final class SecurityClassLoad { <newline>         final String basePackage = "org.apache.catalina.core."; <newline>         loader.loadClass <newline>             (basePackage + <newline>+             "AccessLogAdapter"); <newline>+        loader.loadClass <newline>+            (basePackage + <newline>              "ApplicationContextFacade$1"); <newline>         loader.loadClass <newline>             (basePackage + <newline>@@ -72,6 +76,12 @@ public final class SecurityClassLoad { <newline>             "AsyncContextImpl$1"); <newline>         loader.loadClass <newline>             (basePackage + <newline>+            "AsyncContextImpl$PrivilegedGetTccl"); <newline>+        loader.loadClass <newline>+            (basePackage + <newline>+            "AsyncContextImpl$PrivilegedSetTccl"); <newline>+        loader.loadClass <newline>+            (basePackage + <newline>             "AsyncListenerWrapper"); <newline>         loader.loadClass <newline>             (basePackage + <newline>@@ -135,6 +145,13 @@ public final class SecurityClassLoad { <newline>     } <newline>+    private static final void loadValvesPackage(ClassLoader loader) <newline>+            throws Exception { <newline>+            final String basePackage = "org.apache.catalina.valves."; <newline>+            loader.loadClass(basePackage + "AccessLogValve$3"); <newline>+        } <newline>+ <newline>+ <newline>     private static final void loadCoyotePackage(ClassLoader loader) <newline>             throws Exception { <newline>         final String basePackage = "org.apache.coyote.";																								
Tomcat	5		d5a5411cf7c2a3bceb03adde0b40e715a9fcf02	Mark Emlyn David Thomas <markt@apache.org>	Fri Nov 16 16:56:47 2012 +0000	Make sure onComplete() works when running with a security manager				https://svn.apache.org/repos/asf/tomcat/trunk@1410466 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/core/AsyncContextImpl.java b/java/org/apache/catalina/core/AsyncContextImpl.java <newline>index 818e135..69ea65b 100644 <newline>--- a/java/org/apache/catalina/core/AsyncContextImpl.java <newline>+++ b/java/org/apache/catalina/core/AsyncContextImpl.java <newline>@@ -97,11 +97,22 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback { <newline>         List<AsyncListenerWrapper> listenersCopy = new ArrayList<>(); <newline>         listenersCopy.addAll(listeners); <newline>-        ClassLoader oldCL = Thread.currentThread().getContextClassLoader(); <newline>-        ClassLoader newCL = request.getContext().getLoader().getClassLoader(); <newline>+        ClassLoader oldCL; <newline>+        if (Globals.IS_SECURITY_ENABLED) { <newline>+            PrivilegedAction<ClassLoader> pa = new PrivilegedGetTccl(); <newline>+            oldCL = AccessController.doPrivileged(pa); <newline>+        } else { <newline>+            oldCL = Thread.currentThread().getContextClassLoader(); <newline>+        } <newline>+        ClassLoader newCL = context.getLoader().getClassLoader(); <newline>         try { <newline>-            Thread.currentThread().setContextClassLoader(newCL); <newline>+            if (Globals.IS_SECURITY_ENABLED) { <newline>+                PrivilegedAction<Void> pa = new PrivilegedSetTccl(newCL); <newline>+                AccessController.doPrivileged(pa); <newline>+            } else { <newline>+                Thread.currentThread().setContextClassLoader(newCL); <newline>+            } <newline>             for (AsyncListenerWrapper listener : listenersCopy) { <newline>                 try { <newline>                     listener.fireOnComplete(event); <newline>@@ -111,7 +122,12 @@ public class AsyncContextImpl implements AsyncContext, AsyncContextCallback { <newline>                 } <newline>             } <newline>         } finally { <newline>-            Thread.currentThread().setContextClassLoader(oldCL); <newline>+            if (Globals.IS_SECURITY_ENABLED) { <newline>+                PrivilegedAction<Void> pa = new PrivilegedSetTccl(oldCL); <newline>+                AccessController.doPrivileged(pa); <newline>+            } else { <newline>+                Thread.currentThread().setContextClassLoader(oldCL); <newline>+            } <newline>         } <newline>     }																								
Tomcat	5		5d7a0fb011c606b6278954abb296d0c61af682e	Mark Emlyn David Thomas <markt@apache.org>	Thu Aug 30 22:55:20 2012 +0000	Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=53801 Overlapping URL patterns were sometimes merged incorrectly in security constraints leading to incorrect 401 responses. Note: it was possible for access to be denied when it should have been granted but it was not possible for access to be granted when it should have been denied.				https://svn.apache.org/repos/asf/tomcat/trunk@1379206 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/realm/RealmBase.java b/java/org/apache/catalina/realm/RealmBase.java <newline>index 22fe2cd..d4b5995 100644 <newline>--- a/java/org/apache/catalina/realm/RealmBase.java <newline>+++ b/java/org/apache/catalina/realm/RealmBase.java <newline>@@ -629,14 +629,15 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm { <newline>                     } <newline>                 } <newline>                 if(matched) { <newline>-                    found = true; <newline>                     if(length > longest) { <newline>+                        found = false; <newline>                         if(results != null) { <newline>                             results.clear(); <newline>                         } <newline>                         longest = length; <newline>                     } <newline>                     if(collection[j].findMethod(method)) { <newline>+                        found = true; <newline>                         if(results == null) { <newline>                             results = new ArrayList<>(); <newline>                         } <newline>@@ -760,7 +761,7 @@ public abstract class RealmBase extends LifecycleMBeanBase implements Realm { <newline>      */ <newline>     private SecurityConstraint [] resultsToArray( <newline>             ArrayList<SecurityConstraint> results) { <newline>-        if(results == null) { <newline>+        if(results == null || results.size() == 0) { <newline>             return null; <newline>         } <newline>         SecurityConstraint [] array = new SecurityConstraint[results.size()];																								
Tomcat	5		0997627dee04638468c0802c8186b9f4e6fe00e	Mark Emlyn David Thomas <markt@apache.org>	Sun Jul 15 19:47:20 2012 +0000	Code clean-up for o.a.catalina.security - Add final prompted by UCDetector - Java 7 use of <>				https://svn.apache.org/repos/asf/tomcat/trunk@1361776 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/security/SecurityUtil.java b/java/org/apache/catalina/security/SecurityUtil.java <newline>index bd2e87d..3e64a20 100644 <newline>--- a/java/org/apache/catalina/security/SecurityUtil.java <newline>+++ b/java/org/apache/catalina/security/SecurityUtil.java <newline>@@ -69,12 +69,12 @@ public final class SecurityUtil{ <newline>      * Cache every object for which we are creating method on it. <newline>      */ <newline>     private static final Map<Object,Method[]> objectCache = <newline>-        new ConcurrentHashMap<Object,Method[]>(); <newline>+            new ConcurrentHashMap<>(); <newline>     private static final org.apache.juli.logging.Log log= <newline>         org.apache.juli.logging.LogFactory.getLog( SecurityUtil.class ); <newline>-    private static boolean packageDefinitionEnabled = <newline>+    private static final boolean packageDefinitionEnabled = <newline>          (System.getProperty("package.definition") == null && <newline>            System.getProperty("package.access")  == null) ? false : true;																								
Tomcat	5		12f112701e2cab17ea54d60db34e5521b1feb41	Mark Emlyn David Thomas <markt@apache.org>	Wed Jun 6 18:45:50 2012 +0000	Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=53368 Make WebSocket play nicely with a security manager (kkolinko)				https://svn.apache.org/repos/asf/tomcat/trunk@1347047 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/conf/catalina.policy b/conf/catalina.policy <newline>index b8f0ad6..f0944ac 100644 <newline>--- a/conf/catalina.policy <newline>+++ b/conf/catalina.policy <newline>@@ -188,6 +188,9 @@ grant { <newline>     // Applications using Comet need to be able to access this package <newline>     permission java.lang.RuntimePermission "accessClassInPackage.org.apache.catalina.comet"; <newline>+ <newline>+    // Applications using WebSocket need to be able to access this package <newline>+    permission java.lang.RuntimePermission "accessClassInPackage.org.apache.catalina.websocket"; <newline> };																								
Tomcat	5		a1123af7087019ad62de469ccfd00d198c4e892	Mark Emlyn David Thomas <markt@apache.org>	Wed Jun 6 18:29:53 2012 +0000	Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=53366 New http header parser needs to be pre-loaded when running under a security manager				https://svn.apache.org/repos/asf/tomcat/trunk@1347034 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/security/SecurityClassLoad.java b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>index fbcec4b..14fd381 100644 <newline>--- a/java/org/apache/catalina/security/SecurityClassLoad.java <newline>+++ b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>@@ -238,16 +238,36 @@ public final class SecurityClassLoad { <newline>     private static final void loadTomcatPackage(ClassLoader loader) <newline>         throws Exception { <newline>         final String basePackage = "org.apache.tomcat."; <newline>+        // buf <newline>         loader.loadClass(basePackage + "util.buf.HexUtils"); <newline>         loader.loadClass(basePackage + "util.buf.StringCache"); <newline>         loader.loadClass(basePackage + "util.buf.StringCache$ByteEntry"); <newline>         loader.loadClass(basePackage + "util.buf.StringCache$CharEntry"); <newline>+        // http <newline>         loader.loadClass(basePackage + "util.http.HttpMessages"); <newline>         // Make sure system property is read at this point <newline>         Class<?> clazz = loader.loadClass( <newline>                 basePackage + "util.http.FastHttpDateFormat"); <newline>         clazz.newInstance(); <newline>         loader.loadClass(basePackage + "util.http.HttpMessages"); <newline>+        loader.loadClass(basePackage + "util.http.parser.AstAttribute"); <newline>+        loader.loadClass(basePackage + "util.http.parser.AstMediaType"); <newline>+        loader.loadClass(basePackage + "util.http.parser.AstParameter"); <newline>+        loader.loadClass(basePackage + "util.http.parser.AstSubType"); <newline>+        loader.loadClass(basePackage + "util.http.parser.AstType"); <newline>+        loader.loadClass(basePackage + "util.http.parser.AstValue"); <newline>+        loader.loadClass(basePackage + "util.http.parser.HttpParser"); <newline>+        loader.loadClass(basePackage + "util.http.parser.HttpParserConstants"); <newline>+        loader.loadClass(basePackage + "util.http.parser.HttpParserTokenManager"); <newline>+        loader.loadClass(basePackage + "util.http.parser.HttpParserTreeConstants"); <newline>+        loader.loadClass(basePackage + "util.http.parser.JJTHttpParserState"); <newline>+        loader.loadClass(basePackage + "util.http.parser.Node"); <newline>+        loader.loadClass(basePackage + "util.http.parser.ParseException"); <newline>+        loader.loadClass(basePackage + "util.http.parser.SimpleCharStream"); <newline>+        loader.loadClass(basePackage + "util.http.parser.SimpleNode"); <newline>+        loader.loadClass(basePackage + "util.http.parser.Token"); <newline>+        loader.loadClass(basePackage + "util.http.parser.TokenMgrError"); <newline>+        // net <newline>         loader.loadClass(basePackage + "util.net.Constants"); <newline>         loader.loadClass(basePackage + <newline>                 "util.net.NioBlockingSelector$BlockPoller$1");																								
Tomcat	5		d3b503517ab7fefa2d5350a5036918a7f01d85a	Mark Emlyn David Thomas <markt@apache.org>	Fri Jun 1 09:40:59 2012 +0000	Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=53285 Modify how the digester processes security-role-ref since link is optional and null parameters are not handled by IntrospectionUtils				https://svn.apache.org/repos/asf/tomcat/trunk@1345029 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/startup/WebRuleSet.java b/java/org/apache/catalina/startup/WebRuleSet.java <newline>index 530ac9d..b3fe0ba 100644 <newline>--- a/java/org/apache/catalina/startup/WebRuleSet.java <newline>+++ b/java/org/apache/catalina/startup/WebRuleSet.java <newline>@@ -386,10 +386,15 @@ public class WebRuleSet extends RuleSetBase { <newline>         digester.addCallMethod(fullPrefix + "/servlet/run-as/role-name", <newline>                                "setRunAs", 0); <newline>-        digester.addCallMethod(fullPrefix + "/servlet/security-role-ref", <newline>-                               "addSecurityRoleRef", 2); <newline>-        digester.addCallParam(fullPrefix + "/servlet/security-role-ref/role-link", 1); <newline>-        digester.addCallParam(fullPrefix + "/servlet/security-role-ref/role-name", 0); <newline>+        digester.addObjectCreate(fullPrefix + "/servlet/security-role-ref", <newline>+                                 "org.apache.catalina.deploy.SecurityRoleRef"); <newline>+        digester.addSetNext(fullPrefix + "/servlet/security-role-ref", <newline>+                            "addSecurityRoleRef", <newline>+                            "org.apache.catalina.deploy.SecurityRoleRef"); <newline>+        digester.addCallMethod(fullPrefix + "/servlet/security-role-ref/role-link", <newline>+                               "setLink", 0); <newline>+        digester.addCallMethod(fullPrefix + "/servlet/security-role-ref/role-name", <newline>+                               "setName", 0); <newline>         digester.addCallMethod(fullPrefix + "/servlet/servlet-class", <newline>                               "setServletClass", 0);																								
Tomcat	1	2	8e1551284e76880cf16845efb241535d0ea825b	Mark Emlyn David Thomas <markt@apache.org>	Wed Oct 26 15:02:01 2011 +0000	Make configuration issues for security related valves and filters result in the failure of the valve or filter rather than just a warning message.				https://svn.apache.org/repos/asf/tomcat/trunk@1189256 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/valves/RequestFilterValve.java b/java/org/apache/catalina/valves/RequestFilterValve.java <newline>index 0338409..8172202 100644 <newline>--- a/java/org/apache/catalina/valves/RequestFilterValve.java <newline>+++ b/java/org/apache/catalina/valves/RequestFilterValve.java <newline>@@ -23,6 +23,7 @@ import java.util.regex.Pattern; <newline> import javax.servlet.ServletException; <newline> import javax.servlet.http.HttpServletResponse; <newline>+import org.apache.catalina.LifecycleException; <newline> import org.apache.catalina.connector.Request; <newline> import org.apache.catalina.connector.Response; <newline>@@ -71,12 +72,14 @@ public abstract class RequestFilterValve extends ValveBase { <newline>      * The regular expression used to test for allowed requests. <newline>      */ <newline>     protected volatile Pattern allow = null; <newline>+    protected volatile boolean allowValid = true; <newline>     /** <newline>      * The regular expression used to test for denied requests. <newline>      */ <newline>     protected volatile Pattern deny = null; <newline>+    protected volatile boolean denyValid = true; <newline>     // ------------------------------------------------------------- Properties <newline>@@ -105,8 +108,15 @@ public abstract class RequestFilterValve extends ValveBase { <newline>     public void setAllow(String allow) { <newline>         if (allow == null || allow.length() == 0) { <newline>             this.allow = null; <newline>+            allowValid = true; <newline>         } else { <newline>-            this.allow = Pattern.compile(allow); <newline>+            boolean success = false; <newline>+            try { <newline>+                this.allow = Pattern.compile(allow); <newline>+                success = true; <newline>+            } finally { <newline>+                allowValid = success; <newline>+            } <newline>         } <newline>     } <newline>@@ -134,8 +144,15 @@ public abstract class RequestFilterValve extends ValveBase { <newline>     public void setDeny(String deny) { <newline>         if (deny == null || deny.length() == 0) { <newline>             this.deny = null; <newline>+            denyValid = true; <newline>         } else { <newline>-            this.deny = Pattern.compile(deny); <newline>+            boolean success = false; <newline>+            try { <newline>+                this.deny = Pattern.compile(deny); <newline>+                success = true; <newline>+            } finally { <newline>+                denyValid = success; <newline>+            } <newline>         } <newline>     } <newline>@@ -162,6 +179,16 @@ public abstract class RequestFilterValve extends ValveBase { <newline>     // ------------------------------------------------------ Protected Methods <newline>+    @Override <newline>+    protected void initInternal() throws LifecycleException { <newline>+        super.initInternal(); <newline>+        if (!allowValid || !denyValid) { <newline>+            throw new LifecycleException( <newline>+                    sm.getString("requestFilterValve.configInvalid")); <newline>+        } <newline>+    } <newline>+ <newline>+ <newline>     /** <newline>      * Perform the filtering that has been configured for this Valve, matching <newline>      * against the specified request property.																								
Tomcat	5		226e51e96b2d8aaed8b86490b6cafcc535a9ab0	Mark Emlyn David Thomas <markt@apache.org>	Thu Sep 22 11:21:08 2011 +0000	Fix running under a security manager				https://svn.apache.org/repos/asf/tomcat/trunk@1174061 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/security/SecurityClassLoad.java b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>index 9723723..be52a48 100644 <newline>--- a/java/org/apache/catalina/security/SecurityClassLoad.java <newline>+++ b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>@@ -87,10 +87,10 @@ public final class SecurityClassLoad { <newline>              "DefaultInstanceManager$3"); <newline>         loader.loadClass <newline>             (basePackage + <newline>-             "DefaultInstanceManager$4"); <newline>+             "DefaultInstanceManager$AnnotationCacheEntry"); <newline>         loader.loadClass <newline>             (basePackage + <newline>-             "DefaultInstanceManager$5"); <newline>+             "DefaultInstanceManager$AnnotationCacheEntryType"); <newline>         loader.loadClass <newline>             (basePackage + <newline>              "ApplicationHttpRequest$AttributeNamesEnumerator");																								
Tomcat	5		e69497fa7b1444632c6dadb64a4a82e18478ee6	Mark Emlyn David Thomas <markt@apache.org>	Wed Jul 13 13:28:24 2011 +0000	When running under a security manager and using sendfile, validate sendfile attributes to prevent sendfile being used to bypass the security manager. Part of the fix for CVE-2011-2526				https://svn.apache.org/repos/asf/tomcat/trunk@1146005 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/connector/Request.java b/java/org/apache/catalina/connector/Request.java <newline>index 2d26be0..87ce690 100644 <newline>--- a/java/org/apache/catalina/connector/Request.java <newline>+++ b/java/org/apache/catalina/connector/Request.java <newline>@@ -1525,6 +1525,26 @@ public class Request <newline>             return; <newline>         } <newline>+        // Do the security check before any updates are made <newline>+        if (Globals.IS_SECURITY_ENABLED && <newline>+                name.equals("org.apache.tomcat.sendfile.filename")) { <newline>+            // Use the canonical file name to avoid any possible symlink and <newline>+            // relative path issues <newline>+            String canonicalPath; <newline>+            try { <newline>+                canonicalPath = new File(value.toString()).getCanonicalPath(); <newline>+            } catch (IOException e) { <newline>+                throw new SecurityException(sm.getString( <newline>+                        "coyoteRequest.sendfileNotCanonical", value), e); <newline>+            } <newline>+            // Sendfile is performed in Tomcat's security context so need to <newline>+            // check if the web app is permitted to access the file while still <newline>+            // in the web app's security context <newline>+            System.getSecurityManager().checkRead(canonicalPath); <newline>+            // Update the value so the canonical path is used <newline>+            value = canonicalPath; <newline>+        } <newline>+ <newline>         oldValue = attributes.put(name, value); <newline>         if (oldValue != null) { <newline>             replaced = true;																								
Tomcat	5		43ab2b2963b574723df87cf5fd89016d28806a0	Mark Emlyn David Thomas <markt@apache.org>	Thu Jul 7 20:53:51 2011 +0000	Use SecurityClassLoad to pre-load HexUtils to prevent a security exception				https://svn.apache.org/repos/asf/tomcat/trunk@1144031 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/coyote/http11/Http11Processor.java b/java/org/apache/coyote/http11/Http11Processor.java <newline>index e332e71..4e25608 100644 <newline>--- a/java/org/apache/coyote/http11/Http11Processor.java <newline>+++ b/java/org/apache/coyote/http11/Http11Processor.java <newline>@@ -14,7 +14,6 @@ <newline>  *  See the License for the specific language governing permissions and <newline>  *  limitations under the License. <newline>  */ <newline>- <newline> package org.apache.coyote.http11; <newline> import java.io.EOFException; <newline>@@ -29,7 +28,6 @@ import org.apache.coyote.http11.filters.BufferedInputFilter; <newline> import org.apache.juli.logging.Log; <newline> import org.apache.juli.logging.LogFactory; <newline> import org.apache.tomcat.util.ExceptionUtils; <newline>-import org.apache.tomcat.util.buf.HexUtils; <newline> import org.apache.tomcat.util.net.AbstractEndpoint.Handler.SocketState; <newline> import org.apache.tomcat.util.net.JIoEndpoint; <newline> import org.apache.tomcat.util.net.SSLSupport; <newline>@@ -66,10 +64,6 @@ public class Http11Processor extends AbstractHttp11Processor { <newline>         response.setOutputBuffer(outputBuffer); <newline>         initializeFilters(maxTrailerSize); <newline>- <newline>-        // Cause loading of HexUtils <newline>-        HexUtils.load(); <newline>- <newline>     }																								
Tomcat	5		cc808304f4f6b352656b2d4eeb0441da4f46ec7	Mark Emlyn David Thomas <markt@apache.org>	Wed Jun 8 22:20:22 2011 +0000	Refactoring triggered security exception when running TCKs				https://svn.apache.org/repos/asf/tomcat/trunk@1133586 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/security/SecurityClassLoad.java b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>index c8bb6ad..bc33271 100644 <newline>--- a/java/org/apache/catalina/security/SecurityClassLoad.java <newline>+++ b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>@@ -140,6 +140,7 @@ public final class SecurityClassLoad { <newline>             throws Exception { <newline>         final String basePackage = "org.apache.coyote."; <newline>         loader.loadClass(basePackage + "http11.AbstractOutputBuffer$1"); <newline>+        loader.loadClass(basePackage + "http11.Constants"); <newline>         // Make sure system property is read at this point <newline>         Class<?> clazz = loader.loadClass(basePackage + "Constants"); <newline>         clazz.newInstance();																								
Tomcat	5		5594914c87d13ac3f217b1aafc7f2eafacc3aee	Mark Emlyn David Thomas <markt@apache.org>	Thu May 5 12:38:44 2011 +0000	Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50950 Correct possible NotSerializableException for an authenticated session when running with a security manager.				https://svn.apache.org/repos/asf/tomcat/trunk@1099772 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/changelog.xml b/webapps/docs/changelog.xml <newline>index 762b5a3..506f1d6 100644 <newline>--- a/webapps/docs/changelog.xml <newline>+++ b/webapps/docs/changelog.xml <newline>@@ -187,6 +187,14 @@ <newline>       </add> <newline>     </changelog> <newline>   </subsection> <newline>+  <subsection name="Cluster"> <newline>+    <changelog> <newline>+      <fix> <newline>+        <bug>50950</bug>: Correct possible NotSerializableException for an <newline>+        authenticated session when running with a security manager. (markt) <newline>+      </fix> <newline>+    </changelog> <newline>+  </subsection> <newline>   <subsection name="Web applications"> <newline>     <changelog> <newline>       <update>																								
Tomcat	5		5b144773b81f6cdac65bb1091a4436c81262677	Mark Emlyn David Thomas <markt@apache.org>	Wed Mar 9 15:00:07 2011 +0000	Fix TCK test failure under a security Manager				https://svn.apache.org/repos/asf/tomcat/trunk@1079822 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/security/SecurityClassLoad.java b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>index 6bc480d..7b6ced6 100644 <newline>--- a/java/org/apache/catalina/security/SecurityClassLoad.java <newline>+++ b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>@@ -40,6 +40,7 @@ public final class SecurityClassLoad { <newline>         loadCorePackage(loader); <newline>         loadCoyotePackage(loader); <newline>         loadLoaderPackage(loader); <newline>+        loadRealmPackage(loader); <newline>         loadSessionPackage(loader); <newline>         loadUtilPackage(loader); <newline>         loadJavaxPackage(loader); <newline>@@ -105,6 +106,14 @@ public final class SecurityClassLoad { <newline>     } <newline>+    private static final void loadRealmPackage(ClassLoader loader) <newline>+            throws Exception { <newline>+        final String basePackage = "org.apache.catalina.realm."; <newline>+        loader.loadClass <newline>+            (basePackage + "LockOutRealm$LockRecord"); <newline>+    } <newline>+ <newline>+ <newline>     private static final void loadSessionPackage(ClassLoader loader) <newline>         throws Exception { <newline>         final String basePackage = "org.apache.catalina.session.";																								
Tomcat	5		8f47110847ef6d3ec672ecbce313f45f5ba07f4	Mark Emlyn David Thomas <markt@apache.org>	Wed Mar 9 11:38:38 2011 +0000	Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50854 Add additional permissions required by the Manager application when running under a security Manager and support a shared Manager installation when $CATALINA_HOME != CATALINA_BASE.				https://svn.apache.org/repos/asf/tomcat/trunk@1079755 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/changelog.xml b/webapps/docs/changelog.xml <newline>index e496673..fdb5197 100644 <newline>--- a/webapps/docs/changelog.xml <newline>+++ b/webapps/docs/changelog.xml <newline>@@ -30,7 +30,7 @@ <newline>     <author email="kkolinko@apache.org">Konstantin Kolinko</author> <newline>     <author email="pero@apache.org">Peter Rossbach</author> <newline>     <author email="kfujino@apache.org">Keiichi Fujino</author> <newline>-    <author email="timw@apache.org">Tim Whittington</author> <newline>+    <author email="timw@apache.org">Tim Whittington</author> <newline>     <author email="mturk@apache.org">Mladen Turk</author> <newline>     <author email="schultz@apache.org">Christopher Schultz</author> <newline>     <author email="slaurent@apache.org">Sylvain Laurent</author> <newline>@@ -69,6 +69,11 @@ <newline>         to make request data swallowing configurable for requests <newline>         that are too large. (rjung) <newline>       </add> <newline>+      <fix> <newline>+        <bug>50854</bug>: Add additional permissions required by the Manager <newline>+        application when running under a security Manager and support a shared <newline>+        Manager installation when $CATALINA_HOME != CATALINA_BASE. (markt) <newline>+      </fix> <newline>     </changelog> <newline>   </subsection> <newline>   <subsection name="Coyote">																								
Tomcat	1	1	ff4905158b77787a7f3aca55c9dec93456665dc	Mark Emlyn David Thomas <markt@apache.org>	Wed Mar 9 11:16:48 2011 +0000	CVE-2011-1088 Complete the fix for this issue. The optimisation not to configure an authenticator of there were no security constraints meant that in that case @ServletSecurity annotations had no effect. The unit tests did not pick this up since they added an authenticator directly. Add an explicit unit test for this scenario.				https://svn.apache.org/repos/asf/tomcat/trunk@1079752 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/changelog.xml b/webapps/docs/changelog.xml <newline>index 7741494..e496673 100644 <newline>--- a/webapps/docs/changelog.xml <newline>+++ b/webapps/docs/changelog.xml <newline>@@ -45,6 +45,10 @@ <newline> <section name="Tomcat 7.0.11 (markt)"> <newline>   <subsection name="Catalina"> <newline>     <changelog> <newline>+      <fix> <newline>+        CVE-2011-1088: Completed fix. Don&apos;t ignore @ServletSecurity <newline>+        annotations. (markt) <newline>+      </fix> <newline>       <add> <newline>         <bug>25060</bug>: Close Apache Commons DBCP datasources when the <newline>         associated JNDI naming context is stopped (e.g. for a non-global <newline>@@ -88,6 +92,10 @@ <newline>   <subsection name="Catalina"> <newline>     <changelog> <newline>       <fix> <newline>+        CVE-2011-1088: Partial fix. Don&apos;t ignore @ServletSecurity <newline>+        annotations. (markt) <newline>+      </fix> <newline>+      <fix> <newline>         <bug>27988</bug>: Improve reporting of missing files. (markt) <newline>       </fix> <newline>       <fix> <newline>@@ -103,10 +111,6 @@ <newline>         Improve shut down speed by not renewing threads during shut down when <newline>         the <code>ThreadLocalLeakPreventionListener</code> is enabled. (markt) <newline>       </fix> <newline>-      <fix> <newline>-        CVE-2011-1088: Partial fix. Don&apos;t ignore @ServletSecurity <newline>-        annotations. (markt) <newline>-      </fix> <newline>     </changelog> <newline>   </subsection> <newline>   <subsection name="Coyote">																								
Tomcat	1	1	fc86a014d4560fcc803f9533f08b0af93fc7deb	Mark Emlyn David Thomas <markt@apache.org>	Wed Feb 23 19:25:17 2011 +0000	Add security listener				https://svn.apache.org/repos/asf/tomcat/trunk@1073893 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/security-howto.xml b/webapps/docs/security-howto.xml <newline>index de65985..8a879d3 100644 <newline>--- a/webapps/docs/security-howto.xml <newline>+++ b/webapps/docs/security-howto.xml <newline>@@ -119,6 +119,9 @@ <newline>       <p>The APR Lifecycle Listener is not stable if compiled on Solaris using <newline>       gcc. If using the APR/native connector on Solaris, compile it with the <newline>       Sun Studio compiler.</p> <newline>+ <newline>+      <p>The Security Listener should be enabled and configured as appropriate. <newline>+      </p> <newline>     </subsection> <newline>     <subsection name="Connectors">																								
Tomcat	5		15b6c9501c8a35895c3c4d3acf5fd0aa5bc339a	Mark Emlyn David Thomas <markt@apache.org>	Fri Feb 4 11:07:18 2011 +0000	Fix security exception when running under a SecurityManager				https://svn.apache.org/repos/asf/tomcat/trunk@1067147 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/changelog.xml b/webapps/docs/changelog.xml <newline>index a11110f..418f27b 100644 <newline>--- a/webapps/docs/changelog.xml <newline>+++ b/webapps/docs/changelog.xml <newline>@@ -51,6 +51,10 @@ <newline>        <bug>50709</bug>: Make <code>ApplicationContextFacade</code> non-final to <newline>        enable extension. (markt) <newline>       </fix> <newline>+      <fix> <newline>+        When running under a security manager, user requests may fail with a <newline>+        security exception. (markt) <newline>+      </fix> <newline>     </changelog> <newline>   </subsection> <newline>   <subsection name="Coyote">																								
Tomcat	3	1	b768c0f232decbf85017b1110c05370290a73c7	Mark Emlyn David Thomas <markt@apache.org>	Mon Jan 17 17:31:45 2011 +0000	Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50599 Use correct names of security roles for Manager app				https://svn.apache.org/repos/asf/tomcat/trunk@1060015 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/realm-howto.xml b/webapps/docs/realm-howto.xml <newline>index f17590b..a25e3a7 100644 <newline>--- a/webapps/docs/realm-howto.xml <newline>+++ b/webapps/docs/realm-howto.xml <newline>@@ -250,15 +250,16 @@ and log on with one of the usernames and passwords described for the default <newline> <p>If you wish to use the <a href="manager-howto.html">Manager Application</a> <newline> to deploy and undeploy applications in a running Tomcat installation, you <newline>-MUST add the "manager" role to at least one username in your selected Realm <newline>-implementation.  This is because the manager web application itself uses a <newline>-security constraint that requires role "manager" to access ANY request URI <newline>-within that application.</p> <newline>+MUST add the "manager-gui" role to at least one username in your selected <newline>+Realm implementation.  This is because the manager web application itself uses a <newline>+security constraint that requires role "manager-gui" to access ANY request URI <newline>+within the HTML interface of that application.</p> <newline> <p>For security reasons, no username in the default Realm (i.e. using <newline>-<code>conf/tomcat-users.xml</code> is assigned the "manager" role.  Therefore, <newline>-no one will be able to utilize the features of this application until the <newline>-Tomcat administrator specifically assigns this role to one or more users.</p> <newline>+<code>conf/tomcat-users.xml</code> is assigned the "manager-gui" role. <newline>+Therefore, no one will be able to utilize the features of this application <newline>+until the Tomcat administrator specifically assigns this role to one or more <newline>+users.</p> <newline> </subsection>																								
Tomcat	5		ef5797dfa358d68a8a7ade8a672a38c4428a1c5	Mark Emlyn David Thomas <markt@apache.org>	Fri Jan 7 18:13:38 2011 +0000	Fix security exception when running Servlet TCK				https://svn.apache.org/repos/asf/tomcat/trunk@1056434 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/security/SecurityClassLoad.java b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>index abe484a..f444b9d 100644 <newline>--- a/java/org/apache/catalina/security/SecurityClassLoad.java <newline>+++ b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>@@ -231,6 +231,7 @@ public final class SecurityClassLoad { <newline>                 basePackage + "util.http.FastHttpDateFormat"); <newline>         clazz.newInstance(); <newline>         loader.loadClass(basePackage + "util.http.HttpMessages"); <newline>+        loader.loadClass(basePackage + "util.net.Constants"); <newline>         loader.loadClass(basePackage + "util.net.SSLSupport$CipherData"); <newline>         loader.loadClass <newline>             (basePackage + "util.net.JIoEndpoint$PrivilegedSetTccl");																								
Tomcat	5		075c4bb778f4514917caa0d9f1f225db8505652	Mark Emlyn David Thomas <markt@apache.org>	Fri Nov 12 18:29:12 2010 +0000	Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50192 Improve performance for EL when running under a security manager. Based on a patch by Robert Goff.				https://svn.apache.org/repos/asf/tomcat/trunk@1034500 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/changelog.xml b/webapps/docs/changelog.xml <newline>index 91785ec..cdd6f55 100644 <newline>--- a/webapps/docs/changelog.xml <newline>+++ b/webapps/docs/changelog.xml <newline>@@ -175,6 +175,10 @@ <newline>       <add> <newline>         Add logging and JMX support to JSP unloading. (rjung) <newline>       </add> <newline>+      <fix> <newline>+        <bug>50192</bug>: Improve performance for EL when running under a <newline>+        security manager. Based on a patch by Robert Goff. (markt) <newline>+      </fix> <newline>     </changelog> <newline>   </subsection> <newline>   <subsection name="Cluster">																								
Tomcat	5		898c50a126f18b8e8d2c83e8fb14e8d202bd20b	Konstantin Kolinko <kkolinko@apache.org>	Sun Oct 24 22:52:07 2010 +0000	Followup to r1026784 Print a stacktrace if an exception (e.g. IOException) happens when calling store.keys() and running under a security manager.				https://svn.apache.org/repos/asf/tomcat/trunk@1026912 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/session/PersistentManagerBase.java b/java/org/apache/catalina/session/PersistentManagerBase.java <newline>index 8a7d3c8..afa70c5 100644 <newline>--- a/java/org/apache/catalina/session/PersistentManagerBase.java <newline>+++ b/java/org/apache/catalina/session/PersistentManagerBase.java <newline>@@ -550,7 +550,7 @@ public abstract class PersistentManagerBase extends ManagerBase { <newline>                 }catch(PrivilegedActionException ex){ <newline>                     Exception exception = ex.getException(); <newline>                     log.error("Exception in the Store during load: " <newline>-                              + exception); <newline>+                              + exception, exception); <newline>                     return; <newline>                 } <newline>             } else {																								
Tomcat	5		1e513d5ff361f580767661ac0ee953c307ef8e7	Mark Emlyn David Thomas <markt@apache.org>	Fri Oct 8 13:22:04 2010 +0000	Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50015 Re-factor dynamic servlet security implementation to make extensions, such as JACC implementations, simpler. Patch provided by David Jencks.				https://svn.apache.org/repos/asf/tomcat/trunk@1005811 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/changelog.xml b/webapps/docs/changelog.xml <newline>index 4292836..ff02e3e 100644 <newline>--- a/webapps/docs/changelog.xml <newline>+++ b/webapps/docs/changelog.xml <newline>@@ -89,6 +89,11 @@ <newline>         <bug>49994</bug>: As per the Java EE 6 specification, return a new <newline>         object instance for each JNDI look up of a resource reference. (markt) <newline>       </fix> <newline>+      <fix> <newline>+        <bug>50015</bug>: Re-factor dynamic servlet security implementation to <newline>+        make extensions, such as JACC implementations, simpler. Patch provided <newline>+        by David Jencks. (markt) <newline>+      </fix> <newline>     </changelog> <newline>   </subsection> <newline>   <subsection name="Coyote">																								
Tomcat	5		0d4c756f2656012fc0b8de3923d0978fea14c3e	Mark Emlyn David Thomas <markt@apache.org>	Mon Sep 27 23:06:08 2010 +0000	Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49209 Prevent possible AccessControlException during undeployment when running with a security manager Patch provided by Sylvain Laurent				https://svn.apache.org/repos/asf/tomcat/trunk@1001955 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/loader/WebappClassLoader.java b/java/org/apache/catalina/loader/WebappClassLoader.java <newline>index 46c88a6..ce24da5 100644 <newline>--- a/java/org/apache/catalina/loader/WebappClassLoader.java <newline>+++ b/java/org/apache/catalina/loader/WebappClassLoader.java <newline>@@ -2022,7 +2022,7 @@ public class WebappClassLoader <newline>             } <newline>             Class<?> lpClass = <newline>                 defineClass("org.apache.catalina.loader.JdbcLeakPrevention", <newline>-                    classBytes, 0, offset); <newline>+                    classBytes, 0, offset, this.getClass().getProtectionDomain()); <newline>             Object obj = lpClass.newInstance(); <newline>             @SuppressWarnings("unchecked") // clearJdbcDriverRegistrations() returns List<String> <newline>             List<String> driverNames = (List<String>) obj.getClass().getMethod(																								
Tomcat	5		87b1a807129c2ab41623358281aa19ff2ff9950	Mark Emlyn David Thomas <markt@apache.org>	Mon Sep 27 12:13:32 2010 +0000	Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49884 This required a major re-factoring of the async implementation. In summary: - Moved state management to the Coyote Processor - Added a SocketWrapper to the APR socket - Added syncs to ensure only one async state change at a time - Added syncs to ensure only one thread changing a socket's state at a time A number of new bugs were also uncovered and fixed by this re-factoring: - delay processing complete() and dispatch() until request where startAsync() is called finished processing - onAsyncStart listener event Currently the test case for bug 49884 passes with the security manager enabled using "ab -n 5000 -c 150 -k ..." (it broke with "ab -n 50 -c 10 ..." previously) The unit tests pass for all three HTTP connectors. The AJP connectors have only been modified to ensure the code compiles. The following work remains: - Testing all connectors (HTTP and AJP) with TCK + security manager and fixing whatever is broken - Further clean-up - There is further scope for reducing code duplication between the connectors / aligning the code so it is easier to maintain.				https://svn.apache.org/repos/asf/tomcat/trunk@1001698 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/changelog.xml b/webapps/docs/changelog.xml <newline>index eab9ed7..a215599 100644 <newline>--- a/webapps/docs/changelog.xml <newline>+++ b/webapps/docs/changelog.xml <newline>@@ -125,6 +125,11 @@ <newline>         <code>UnsupportedOperationException</code>. (markt) <newline>       </fix> <newline>       <fix> <newline>+        <bug>49884</bug>: Fix occassional NullPointerException on async <newline>+        complete(). This resulted in a major refactoring of the async <newline>+        implementation to address a number of threading issues. (markt) <newline>+      </fix> <newline>+      <fix> <newline>         Update the version numbers in ServerInfo defaults to Tomcat 7.0.x. <newline>         (markt) <newline>       </fix>																								
Tomcat	5		07f77876cb106572212f0de27d64c891c7006ca	Mark Emlyn David Thomas <markt@apache.org>	Mon Aug 23 20:35:03 2010 +0000	Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49669 Another Java class triggering a memory leak. This time javax.security.auth.Policy				https://svn.apache.org/repos/asf/tomcat/trunk@988296 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/config/listeners.xml b/webapps/docs/config/listeners.xml <newline>index c15c03f..2890919 100644 <newline>--- a/webapps/docs/config/listeners.xml <newline>+++ b/webapps/docs/config/listeners.xml <newline>@@ -270,6 +270,16 @@ service:jmx:rmi://&lt;hostname&gt;:10002/jndi/rmi://&lt;hostname&gt;:10001/jmxrm <newline>         trigger a memory leak on reload. Defaults to <code>true</code>.</p> <newline>       </attribute> <newline>+      <attribute name="securityPolicyProtection" required="false"> <newline>+        <p>Enables protection so that usage of <newline>+        <code>javax.security.auth.Policy</code> by a web application does not <newline>+        result in a memory leak. The first access of this class will trigger the <newline>+        static initializer that will retain a static reference to the context <newline>+        class loader. The protection calls the <code>getPolicy()</code> method <newline>+        of this class to ensure that the static initializer is not triggered by <newline>+        a web application. Defaults to <code>true</code>.</p> <newline>+      </attribute> <newline>+ <newline>       <attribute name="tokenPollerProtection" required="false"> <newline>         <p>Enables protection so that any token poller thread initialized by <newline>         <code>sun.security.pkcs11.SunPKCS11.initToken()</code> does not																								
Tomcat	5		1b97ef87deb717eb946ce10d5d8914d3207b515	Mark Emlyn David Thomas <markt@apache.org>	Mon Aug 2 10:49:06 2010 +0000	Fix running with a security manager				https://svn.apache.org/repos/asf/tomcat/trunk@981448 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/changelog.xml b/webapps/docs/changelog.xml <newline>index 4906800..97f5488 100644 <newline>--- a/webapps/docs/changelog.xml <newline>+++ b/webapps/docs/changelog.xml <newline>@@ -35,7 +35,17 @@ <newline> <body> <newline> <!--  Catalina, Coyote, Jasper, Cluster, Web applications, Extras, Other --> <newline>-<section name="Tomcat 7.0.1 (markt)"> <newline>+<section name="Tomcat 7.0.2 (markt)"> <newline>+  <subsection name="Catalina"> <newline>+    <changelog> <newline>+      <fix> <newline>+        Fix repgrssion that prevented running with a security manager enabled. <newline>+        (markt) <newline>+      </fix> <newline>+    </changelog> <newline>+  </subsection> <newline>+</section> <newline>+<section name="Tomcat 7.0.1 (markt)" rtext="Not released"> <newline>   <subsection name="Catalina"> <newline>     <changelog> <newline>       <fix>																								
Tomcat	1	1	7bef46b54269a8daaee18bf096fe73c345774e9	Mark Emlyn David Thomas <markt@apache.org>	Thu Jul 1 09:57:07 2010 +0000	Improve default security settings. Enable the LockOutRealm by default.				https://svn.apache.org/repos/asf/tomcat/trunk@959580 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/changelog.xml b/webapps/docs/changelog.xml <newline>index af472be..da0bb0a 100644 <newline>--- a/webapps/docs/changelog.xml <newline>+++ b/webapps/docs/changelog.xml <newline>@@ -75,6 +75,10 @@ <newline>         Add support for <code>*.jar</code> pattern in VirtualWebappLoader. <newline>         (kkolinko) <newline>       </add> <newline>+      <add> <newline>+        Use a LockOutRealm in the default configuration to prevent attempts to <newline>+        guess user passwords by brute-force. (markt) <newline>+      </add> <newline>     </changelog> <newline>   </subsection> <newline>   <subsection name="Coyote">																								
Tomcat	5		50eff514eed9876d67e142c91086b9db2dbbc27	Konstantin Kolinko <kkolinko@apache.org>	Sat Jun 5 00:19:07 2010 +0000	Wrap long lines, so that this file could be copied to security-manager-howto.xml as is.				https://svn.apache.org/repos/asf/tomcat/trunk@951620 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/conf/catalina.policy b/conf/catalina.policy <newline>index 838758c..19b0530 100644 <newline>--- a/conf/catalina.policy <newline>+++ b/conf/catalina.policy <newline>@@ -169,9 +169,12 @@ grant { <newline>      "org.apache.el.parser.COERCE_TO_ZERO", "read"; <newline>     // The cookie code needs these. <newline>-    permission java.util.PropertyPermission "org.apache.catalina.STRICT_SERVLET_COMPLIANCE", "read"; <newline>-    permission java.util.PropertyPermission "org.apache.tomcat.util.http.ServerCookie.STRICT_NAMING", "read"; <newline>-    permission java.util.PropertyPermission "org.apache.tomcat.util.http.ServerCookie.FWD_SLASH_IS_SEPARATOR", "read"; <newline>+    permission java.util.PropertyPermission <newline>+     "org.apache.catalina.STRICT_SERVLET_COMPLIANCE", "read"; <newline>+    permission java.util.PropertyPermission <newline>+     "org.apache.tomcat.util.http.ServerCookie.STRICT_NAMING", "read"; <newline>+    permission java.util.PropertyPermission <newline>+     "org.apache.tomcat.util.http.ServerCookie.FWD_SLASH_IS_SEPARATOR", "read"; <newline>     // Applications using Comet need to be able to access this package <newline>     permission java.lang.RuntimePermission "accessClassInPackage.org.apache.catalina.comet";																								
Tomcat	5		1d81ca3b5133fcf05988cc2d0fe3d91ebe14311	Mark Emlyn David Thomas <markt@apache.org>	Thu Jun 3 07:56:23 2010 +0000	Clean up FastHttpDateFormat initialisation when using a security manager as prompted by Konstantin				https://svn.apache.org/repos/asf/tomcat/trunk@950905 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/coyote/http11/Http11Processor.java b/java/org/apache/coyote/http11/Http11Processor.java <newline>index f927e01..2dd853a 100644 <newline>--- a/java/org/apache/coyote/http11/Http11Processor.java <newline>+++ b/java/org/apache/coyote/http11/Http11Processor.java <newline>@@ -930,19 +930,7 @@ public class Http11Processor extends AbstractHttp11Processor implements ActionHo <newline>         } <newline>         // Add date header <newline>-        String date = null; <newline>-        if (isSecurityEnabled){ <newline>-            date = AccessController.doPrivileged( <newline>-                    new PrivilegedAction<String>() { <newline>-                        public String run(){ <newline>-                            return FastHttpDateFormat.getCurrentDate(); <newline>-                        } <newline>-                    } <newline>-            ); <newline>-        } else { <newline>-            date = FastHttpDateFormat.getCurrentDate(); <newline>-        } <newline>-        headers.setValue("Date").setString(date); <newline>+        headers.setValue("Date").setString(FastHttpDateFormat.getCurrentDate()); <newline>         // FIXME: Add transfer encoding header																								
Tomcat	5		8b460726d9739a6a2a1d006d35e0ec5338cc244	Mark Emlyn David Thomas <markt@apache.org>	Mon May 24 17:03:37 2010 +0000	Fix some TCK failures with the BIO AJP connector when using a security manager				https://svn.apache.org/repos/asf/tomcat/trunk@947717 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/security/SecurityClassLoad.java b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>index 5898067..be10606 100644 <newline>--- a/java/org/apache/catalina/security/SecurityClassLoad.java <newline>+++ b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>@@ -129,9 +129,9 @@ public final class SecurityClassLoad { <newline>     private final static void loadUtilPackage(ClassLoader loader) <newline>         throws Exception { <newline>-        String basePackage = "org.apache.catalina."; <newline>-        loader.loadClass(basePackage + "util.Enumerator"); <newline>-        loader.loadClass(basePackage + "util.ParameterMap"); <newline>+        String basePackage = "org.apache.catalina.util."; <newline>+        loader.loadClass(basePackage + "Enumerator"); <newline>+        loader.loadClass(basePackage + "ParameterMap"); <newline>     } <newline>@@ -237,6 +237,10 @@ public final class SecurityClassLoad { <newline>         loader.loadClass(basePackage + "util.net.SSLSupport$CipherData"); <newline>         loader.loadClass <newline>             (basePackage + "util.net.JIoEndpoint$PrivilegedSetTccl"); <newline>+        // Make sure system property is read at this point <newline>+        Class<?> clazz = loader.loadClass( <newline>+                basePackage + "util.http.FastHttpDateFormat"); <newline>+        clazz.newInstance(); <newline>     } <newline> }																								
Tomcat	5		f18a292e9d187ab60cff1b997dfe93e916cd31f	Mark Emlyn David Thomas <markt@apache.org>	Fri May 14 23:43:51 2010 +0000	TCK failures: Fix remaining failures with APR/native and a security Manager				https://svn.apache.org/repos/asf/tomcat/trunk@944518 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/tomcat/util/net/JIoEndpoint.java b/java/org/apache/tomcat/util/net/JIoEndpoint.java <newline>index 15f9453..28b3eb5 100644 <newline>--- a/java/org/apache/tomcat/util/net/JIoEndpoint.java <newline>+++ b/java/org/apache/tomcat/util/net/JIoEndpoint.java <newline>@@ -542,8 +542,7 @@ public class JIoEndpoint extends AbstractEndpoint { <newline>     protected ConcurrentLinkedQueue<SocketWrapper<Socket>> waitingRequests = <newline>         new ConcurrentLinkedQueue<SocketWrapper<Socket>>(); <newline>-    private static class PrivilegedSetTccl <newline>-    implements PrivilegedAction<Void> { <newline>+    private static class PrivilegedSetTccl implements PrivilegedAction<Void> { <newline>         private ClassLoader cl;																								
Tomcat	5		6e3ae58cb4da887a8c5482497072fa10ad9a60c	Filip Hanik <fhanik@apache.org>	Thu Apr 29 22:00:17 2010 +0000	Per documentation: http://java.sun.com/javase/6/docs/api/javax/security/auth/Subject.html Therefore all concrete Principal implementations associated with Subjects must implement Serializable.				https://svn.apache.org/repos/asf/tomcat/trunk@939491 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/connector/CoyotePrincipal.java b/java/org/apache/catalina/connector/CoyotePrincipal.java <newline>index c49d7d5..fd42092 100644 <newline>--- a/java/org/apache/catalina/connector/CoyotePrincipal.java <newline>+++ b/java/org/apache/catalina/connector/CoyotePrincipal.java <newline>@@ -18,6 +18,7 @@ <newline> package org.apache.catalina.connector; <newline>+import java.io.Serializable; <newline> import java.security.Principal; <newline> /** <newline>@@ -29,7 +30,7 @@ import java.security.Principal; <newline>  */ <newline> public class CoyotePrincipal <newline>-    implements Principal { <newline>+    implements Principal, Serializable { <newline>     // ----------------------------------------------------------- Constructors																								
Tomcat	5		3d0ffaa687182dfcbd0299880af543f9da96450	Mark Emlyn David Thomas <markt@apache.org>	Sun Apr 11 22:43:09 2010 +0000	TCK failures: EL TCK with security manager				https://svn.apache.org/repos/asf/tomcat/trunk@933007 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/el/parser/AstValue.java b/java/org/apache/el/parser/AstValue.java <newline>index a0ce1d7..94c3bdf 100644 <newline>--- a/java/org/apache/el/parser/AstValue.java <newline>+++ b/java/org/apache/el/parser/AstValue.java <newline>@@ -20,6 +20,8 @@ package org.apache.el.parser; <newline> import java.lang.reflect.InvocationTargetException; <newline> import java.lang.reflect.Method; <newline>+import java.security.AccessController; <newline>+import java.security.PrivilegedAction; <newline> import javax.el.ELException; <newline> import javax.el.ELResolver; <newline>@@ -39,10 +41,31 @@ import org.apache.el.util.ReflectionUtil; <newline>  */ <newline> public final class AstValue extends SimpleNode { <newline>-    protected static final boolean COERCE_TO_ZERO = <newline>-        Boolean.valueOf(System.getProperty( <newline>-                "org.apache.el.parser.COERCE_TO_ZERO", "true")).booleanValue(); <newline>+    private static final boolean IS_SECURITY_ENABLED = <newline>+        (System.getSecurityManager() != null); <newline>+ <newline>+    protected static final boolean COERCE_TO_ZERO; <newline>+    static { <newline>+        if (IS_SECURITY_ENABLED) { <newline>+            COERCE_TO_ZERO = AccessController.doPrivileged( <newline>+                    new PrivilegedAction<Boolean>(){ <newline>+                        @Override <newline>+                        public Boolean run() { <newline>+                            return Boolean.valueOf(System.getProperty( <newline>+                                    "org.apache.el.parser.COERCE_TO_ZERO", <newline>+                                    "true")); <newline>+                        } <newline>+ <newline>+                    } <newline>+            ).booleanValue(); <newline>+        } else { <newline>+            COERCE_TO_ZERO = Boolean.valueOf(System.getProperty( <newline>+                    "org.apache.el.parser.COERCE_TO_ZERO", <newline>+                    "true")).booleanValue(); <newline>+        } <newline>+    } <newline>+ <newline>     protected static class Target { <newline>         protected Object base;																								
Tomcat	5		6bb7c8354609b6b757bea0f104be6ceda254a1d	Rainer Jung <rjung@apache.org>	Sun Apr 11 18:26:20 2010 +0000	Reduce failures of new API when running under security manager.				https://svn.apache.org/repos/asf/tomcat/trunk@932969 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/core/ApplicationContextFacade.java b/java/org/apache/catalina/core/ApplicationContextFacade.java <newline>index 4948ef4..4e1f5f7 100644 <newline>--- a/java/org/apache/catalina/core/ApplicationContextFacade.java <newline>+++ b/java/org/apache/catalina/core/ApplicationContextFacade.java <newline>@@ -103,6 +103,15 @@ public final class ApplicationContextFacade <newline>         classCache.put("getRequestDispatcher", clazz); <newline>         classCache.put("getNamedDispatcher", clazz); <newline>         classCache.put("getServlet", clazz); <newline>+        classCache.put("setInitParameter", new Class[]{String.class, String.class}); <newline>+        classCache.put("createServlet", new Class[]{Class.class}); <newline>+        classCache.put("addServlet", new Class[]{String.class, String.class}); <newline>+        classCache.put("createFilter", new Class[]{Class.class}); <newline>+        classCache.put("addFilter", new Class[]{String.class, String.class}); <newline>+        classCache.put("createListener", new Class[]{Class.class}); <newline>+        classCache.put("addListener", clazz); <newline>+        classCache.put("getFilterRegistration", clazz); <newline>+        classCache.put("getServletRegistration", clazz); <newline>         classCache.put("getInitParameter", clazz); <newline>         classCache.put("setAttribute", new Class[]{String.class, Object.class}); <newline>         classCache.put("removeAttribute", clazz); <newline>@@ -110,8 +119,6 @@ public final class ApplicationContextFacade <newline>         classCache.put("getAttribute", clazz); <newline>         classCache.put("log", clazz); <newline>         classCache.put("setSessionTrackingModes", new Class[]{EnumSet.class} ); <newline>-        classCache.put("setSessionCookieConfig", <newline>-                new Class[]{SessionCookieConfig.class}); <newline>     } <newline>@@ -414,7 +421,7 @@ public final class ApplicationContextFacade <newline>             Filter filter) { <newline>         if (SecurityUtil.isPackageProtectionEnabled()) { <newline>             return (FilterRegistration.Dynamic) doPrivileged( <newline>-                    "addFilter", new Object[]{filterName, filter}); <newline>+                    "addFilter", new Class[]{String.class, Filter.class}, new Object[]{filterName, filter}); <newline>         } else { <newline>             return context.addFilter(filterName, filter); <newline>         } <newline>@@ -425,7 +432,7 @@ public final class ApplicationContextFacade <newline>             Class<? extends Filter> filterClass) { <newline>         if (SecurityUtil.isPackageProtectionEnabled()) { <newline>             return (FilterRegistration.Dynamic) doPrivileged( <newline>-                    "addFilter", new Object[]{filterName, filterClass}); <newline>+                    "addFilter", new Object[]{filterName, filterClass.getName()}); <newline>         } else { <newline>             return context.addFilter(filterName, filterClass); <newline>         } <newline>@@ -435,8 +442,15 @@ public final class ApplicationContextFacade <newline>     public <T extends Filter> T createFilter(Class<T> c) <newline>     throws ServletException { <newline>         if (SecurityUtil.isPackageProtectionEnabled()) { <newline>-            return (T) doPrivileged( <newline>-                    "createFilter", new Object[]{c}); <newline>+            try { <newline>+                return (T) invokeMethod(context, "createFilter", <newline>+                                              new Object[]{c}); <newline>+            } catch (Throwable t) { <newline>+                if (t instanceof ServletException) { <newline>+                    throw (ServletException) t; <newline>+                } <newline>+                return null; <newline>+            } <newline>         } else { <newline>             return context.createFilter(c); <newline>         } <newline>@@ -446,7 +460,7 @@ public final class ApplicationContextFacade <newline>     public FilterRegistration getFilterRegistration(String filterName) { <newline>         if (SecurityUtil.isPackageProtectionEnabled()) { <newline>             return (FilterRegistration) doPrivileged( <newline>-                    "findFilterRegistration", new Object[]{filterName}); <newline>+                    "getFilterRegistration", new Object[]{filterName}); <newline>         } else { <newline>             return context.getFilterRegistration(filterName); <newline>         } <newline>@@ -468,7 +482,7 @@ public final class ApplicationContextFacade <newline>             Servlet servlet) { <newline>         if (SecurityUtil.isPackageProtectionEnabled()) { <newline>             return (ServletRegistration.Dynamic) doPrivileged( <newline>-                    "addServlet", new Object[]{servletName, servlet}); <newline>+                    "addServlet", new Class[]{String.class, Servlet.class}, new Object[]{servletName, servlet}); <newline>         } else { <newline>             return context.addServlet(servletName, servlet); <newline>         } <newline>@@ -479,7 +493,7 @@ public final class ApplicationContextFacade <newline>             Class <? extends Servlet> servletClass) { <newline>         if (SecurityUtil.isPackageProtectionEnabled()) { <newline>             return (ServletRegistration.Dynamic) doPrivileged( <newline>-                    "addServlet", new Object[]{servletName, servletClass}); <newline>+                    "addServlet", new Object[]{servletName, servletClass.getName()}); <newline>         } else { <newline>             return context.addServlet(servletName, servletClass); <newline>         } <newline>@@ -490,8 +504,15 @@ public final class ApplicationContextFacade <newline>     public <T extends Servlet> T createServlet(Class<T> c) <newline>     throws ServletException { <newline>         if (SecurityUtil.isPackageProtectionEnabled()) { <newline>-            return (T) doPrivileged( <newline>-                    "createServlet", new Object[]{c}); <newline>+            try { <newline>+                return (T) invokeMethod(context, "createServlet", <newline>+                                              new Object[]{c}); <newline>+            } catch (Throwable t) { <newline>+                if (t instanceof ServletException) { <newline>+                    throw (ServletException) t; <newline>+                } <newline>+                return null; <newline>+            } <newline>         } else { <newline>             return context.createServlet(c); <newline>         } <newline>@@ -501,7 +522,7 @@ public final class ApplicationContextFacade <newline>     public ServletRegistration getServletRegistration(String servletName) { <newline>         if (SecurityUtil.isPackageProtectionEnabled()) { <newline>             return (ServletRegistration) doPrivileged( <newline>-                    "findServletRegistration", new Object[]{servletName}); <newline>+                    "getServletRegistration", new Object[]{servletName}); <newline>         } else { <newline>             return context.getServletRegistration(servletName); <newline>         } <newline>@@ -564,7 +585,7 @@ public final class ApplicationContextFacade <newline>     public void addListener(Class<? extends EventListener> listenerClass) { <newline>         if (SecurityUtil.isPackageProtectionEnabled()) { <newline>             doPrivileged("addListener", <newline>-                    new Object[]{listenerClass}); <newline>+                    new Object[]{listenerClass.getName()}); <newline>         } else { <newline>             context.addListener(listenerClass); <newline>         } <newline>@@ -586,7 +607,7 @@ public final class ApplicationContextFacade <newline>     public <T extends EventListener> void addListener(T t) { <newline>         if (SecurityUtil.isPackageProtectionEnabled()) { <newline>             doPrivileged("addListener", <newline>-                    new Object[]{t}); <newline>+                    new Object[]{t.getClass().getName()}); <newline>         } else { <newline>             context.addListener(t); <newline>         } <newline>@@ -598,7 +619,15 @@ public final class ApplicationContextFacade <newline>     public <T extends EventListener> T createListener(Class<T> c) <newline>             throws ServletException { <newline>         if (SecurityUtil.isPackageProtectionEnabled()) { <newline>-            return (T) doPrivileged("createListener", new Object[]{c}); <newline>+            try { <newline>+                return (T) invokeMethod(context, "createListener", <newline>+                                              new Object[]{c}); <newline>+            } catch (Throwable t) { <newline>+                if (t instanceof ServletException) { <newline>+                    throw (ServletException) t; <newline>+                } <newline>+                return null; <newline>+            } <newline>         } else { <newline>             return context.createListener(c); <newline>         } <newline>@@ -608,6 +637,7 @@ public final class ApplicationContextFacade <newline>     @Override <newline>     public void declareRoles(String... roleNames) { <newline>         if (SecurityUtil.isPackageProtectionEnabled()) { <newline>+//FIXME <newline>             doPrivileged("declareRoles", <newline>                     new Object[]{roleNames}); <newline>         } else { <newline>@@ -685,11 +715,10 @@ public final class ApplicationContextFacade <newline>     /** <newline>      * Use reflection to invoke the requested method. Cache the method object <newline>      * to speed up the process <newline>-     *                   will be invoked <newline>      * @param methodName The method to call. <newline>      * @param params The arguments passed to the called method. <newline>      */ <newline>-    private Object doPrivileged(final String methodName, final Object[] params){ <newline>+    private Object doPrivileged(final String methodName, final Object[] params) { <newline>         try{ <newline>             return invokeMethod(context, methodName, params); <newline>         }catch(Throwable t){ <newline>@@ -737,7 +766,7 @@ public final class ApplicationContextFacade <newline>      */ <newline>     private Object doPrivileged(final String methodName, <newline>                                 final Class<?>[] clazz, <newline>-                                Object[] params){ <newline>+                                Object[] params) { <newline>         try{ <newline>             Method method = context.getClass().getMethod(methodName, clazz);																								
Tomcat	5		02aab982bd98ebce522bb73fe5414ebca705a36	Rainer Jung <rjung@apache.org>	Sun Apr 11 17:47:00 2010 +0000	Allow JioEndpoint to switch context class loader under security manager. Code copied from standard session. Add two more classes to class pre-loading to improve security manager interoperability.				https://svn.apache.org/repos/asf/tomcat/trunk@932953 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/tomcat/util/net/JIoEndpoint.java b/java/org/apache/tomcat/util/net/JIoEndpoint.java <newline>index a4b6c02..ca09f7a 100644 <newline>--- a/java/org/apache/tomcat/util/net/JIoEndpoint.java <newline>+++ b/java/org/apache/tomcat/util/net/JIoEndpoint.java <newline>@@ -22,10 +22,13 @@ import java.net.BindException; <newline> import java.net.ServerSocket; <newline> import java.net.Socket; <newline> import java.net.SocketException; <newline>+import java.security.AccessController; <newline>+import java.security.PrivilegedAction; <newline> import java.util.Iterator; <newline> import java.util.concurrent.ConcurrentLinkedQueue; <newline> import java.util.concurrent.RejectedExecutionException; <newline>+import org.apache.catalina.Globals; <newline> import org.apache.juli.logging.Log; <newline> import org.apache.juli.logging.LogFactory; <newline> import org.apache.tomcat.util.IntrospectionUtils; <newline>@@ -507,10 +510,22 @@ public class JIoEndpoint extends AbstractEndpoint { <newline>                     ClassLoader loader = Thread.currentThread().getContextClassLoader(); <newline>                     try { <newline>                         //threads should not be created by the webapp classloader <newline>-                        Thread.currentThread().setContextClassLoader(getClass().getClassLoader()); <newline>+                        if (Globals.IS_SECURITY_ENABLED) { <newline>+                            PrivilegedAction<Void> pa = new PrivilegedSetTccl( <newline>+                                    getClass().getClassLoader()); <newline>+                            AccessController.doPrivileged(pa); <newline>+                        } else { <newline>+                            Thread.currentThread().setContextClassLoader( <newline>+                                    getClass().getClassLoader()); <newline>+                        } <newline>                         getExecutor().execute(proc); <newline>                     }finally { <newline>-                        Thread.currentThread().setContextClassLoader(loader); <newline>+                        if (Globals.IS_SECURITY_ENABLED) { <newline>+                            PrivilegedAction<Void> pa = new PrivilegedSetTccl(loader); <newline>+                            AccessController.doPrivileged(pa); <newline>+                        } else { <newline>+                            Thread.currentThread().setContextClassLoader(loader); <newline>+                        } <newline>                     } <newline>                 } <newline>             } <newline>@@ -524,5 +539,20 @@ public class JIoEndpoint extends AbstractEndpoint { <newline>     } <newline>     protected ConcurrentLinkedQueue<SocketWrapper> waitingRequests = new ConcurrentLinkedQueue<SocketWrapper>(); <newline>+ <newline>+    private static class PrivilegedSetTccl <newline>+    implements PrivilegedAction<Void> { <newline>+ <newline>+        private ClassLoader cl; <newline>+ <newline>+        PrivilegedSetTccl(ClassLoader cl) { <newline>+            this.cl = cl; <newline>+        } <newline>+ <newline>+        public Void run() { <newline>+            Thread.currentThread().setContextClassLoader(cl); <newline>+            return null; <newline>+        } <newline>+    } <newline> }																								
Tomcat	5		848f504dcbb3ec53df4e2533a2657b355dbeb50	Rainer Jung <rjung@apache.org>	Sun Apr 11 01:26:43 2010 +0000	Add another property access to our security policy.				https://svn.apache.org/repos/asf/tomcat/trunk@932823 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/conf/catalina.policy b/conf/catalina.policy <newline>index 625d4e5..5b9ae49 100644 <newline>--- a/conf/catalina.policy <newline>+++ b/conf/catalina.policy <newline>@@ -161,8 +161,9 @@ grant { <newline>     permission java.util.PropertyPermission <newline>      "org.apache.el.parser.COERCE_TO_ZERO", "read"; <newline>-    // E.g. the cookie code needs that. <newline>+    // E.g. the cookie code needs those. <newline>     permission java.util.PropertyPermission "org.apache.catalina.STRICT_SERVLET_COMPLIANCE", "read"; <newline>+    permission java.util.PropertyPermission "org.apache.tomcat.util.http.ServerCookie.FWD_SLASH_IS_SEPARATOR", "read"; <newline>     // Applications using Comet need to be able to access this package <newline>     permission java.lang.RuntimePermission "accessClassInPackage.org.apache.catalina.comet";																								
Tomcat	5		28deefeffafd6ad629effb577e065983c5f5d8b	Rainer Jung <rjung@apache.org>	Sun Apr 11 01:08:09 2010 +0000	Add permission to read the STRICT_SERVLET_COMPLIANCE property to our default policy for the security manager.				https://svn.apache.org/repos/asf/tomcat/trunk@932822 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/conf/catalina.policy b/conf/catalina.policy <newline>index 175dd5e..625d4e5 100644 <newline>--- a/conf/catalina.policy <newline>+++ b/conf/catalina.policy <newline>@@ -161,6 +161,9 @@ grant { <newline>     permission java.util.PropertyPermission <newline>      "org.apache.el.parser.COERCE_TO_ZERO", "read"; <newline>+    // E.g. the cookie code needs that. <newline>+    permission java.util.PropertyPermission "org.apache.catalina.STRICT_SERVLET_COMPLIANCE", "read"; <newline>+ <newline>     // Applications using Comet need to be able to access this package <newline>     permission java.lang.RuntimePermission "accessClassInPackage.org.apache.catalina.comet"; <newline> };																								
Tomcat	5		6ef910b645485beba798206c223bb4421516bf8	Mark Emlyn David Thomas <markt@apache.org>	Sat Apr 10 15:53:14 2010 +0000	TCK failure (with security manager): Preload required class.				https://svn.apache.org/repos/asf/tomcat/trunk@932751 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/security/SecurityClassLoad.java b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>index 01ddac3..0a9a83f 100644 <newline>--- a/java/org/apache/catalina/security/SecurityClassLoad.java <newline>+++ b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>@@ -62,6 +62,21 @@ public final class SecurityClassLoad { <newline>              "core.ApplicationDispatcher$PrivilegedInclude"); <newline>         loader.loadClass <newline>             (basePackage + <newline>+            "core.AsyncContextImpl"); <newline>+        loader.loadClass <newline>+            (basePackage + <newline>+            "core.AsyncContextImpl$AsyncState"); <newline>+        loader.loadClass <newline>+            (basePackage + <newline>+            "core.AsyncContextImpl$DebugException"); <newline>+        loader.loadClass <newline>+            (basePackage + <newline>+            "core.AsyncContextImpl$1"); <newline>+        loader.loadClass <newline>+            (basePackage + <newline>+            "core.AsyncContextImpl$2"); <newline>+        loader.loadClass <newline>+            (basePackage + <newline>              "core.ContainerBase$PrivilegedAddChild"); <newline>         loader.loadClass <newline>             (basePackage +																								
Tomcat	3	1	8c8750f39ec9927aab36a05a6093dc890439dec	Mark Emlyn David Thomas <markt@apache.org>	Mon Mar 22 21:00:24 2010 +0000	Provide the method expected by the digester for adding security-role-ref elements				https://svn.apache.org/repos/asf/tomcat/trunk@926332 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/deploy/ServletDef.java b/java/org/apache/catalina/deploy/ServletDef.java <newline>index 38b44c6..a6d3997 100644 <newline>--- a/java/org/apache/catalina/deploy/ServletDef.java <newline>+++ b/java/org/apache/catalina/deploy/ServletDef.java <newline>@@ -212,6 +212,17 @@ public class ServletDef implements Serializable { <newline>         securityRoleRefs.add(securityRoleRef); <newline>     } <newline>+    /** <newline>+     * Add a security-role-ref to the set of security-role-refs associated <newline>+     * with this servlet. <newline>+     */ <newline>+    public void addSecurityRoleRef(String roleName, String roleLink) { <newline>+        SecurityRoleRef srr = new SecurityRoleRef(); <newline>+        srr.setName(roleName); <newline>+        srr.setLink(roleLink); <newline>+        securityRoleRefs.add(srr); <newline>+    } <newline>+ <newline>     /** <newline>      * The multipart configuration, if any, for this servlet																								
Tomcat	5		f80ddaa399729c2c76072e2ad10d848110c67a5	Mark Emlyn David Thomas <markt@apache.org>	Thu Feb 11 12:23:36 2010 +0000	This is no longer security related as unsafe usage is blocked				https://svn.apache.org/repos/asf/tomcat/trunk@908942 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/config/systemprops.xml b/webapps/docs/config/systemprops.xml <newline>index 7446507..db41d39 100644 <newline>--- a/webapps/docs/config/systemprops.xml <newline>+++ b/webapps/docs/config/systemprops.xml <newline>@@ -200,15 +200,6 @@ <newline>       be used.</p> <newline>     </property> <newline>-    <property <newline>-    name="org.apache.coyote. USE_CUSTOM_STATUS_MSG_IN_HEADER"><p>If this is <newline>-      <code>true</code>, custom HTTP status messages will be used within HTTP <newline>-      headers. If a custom message is specified that is not valid for use in an <newline>-      HTTP header (as defined by RFC2616) then the custom message will be <newline>-      ignored and the default message used. If not specified, the default value <newline>-      of <code>false</code> will be used.</p> <newline>-    </property> <newline>- <newline>   </properties> <newline> </section> <newline>@@ -397,6 +388,15 @@ <newline>   <properties> <newline>+    <property <newline>+    name="org.apache.coyote. USE_CUSTOM_STATUS_MSG_IN_HEADER"><p>If this is <newline>+      <code>true</code>, custom HTTP status messages will be used within HTTP <newline>+      headers. If a custom message is specified that is not valid for use in an <newline>+      HTTP header (as defined by RFC2616) then the custom message will be <newline>+      ignored and the default message used. If not specified, the default value <newline>+      of <code>false</code> will be used.</p> <newline>+    </property> <newline>+ <newline>     <property name="catalina.useNaming"> <newline>       <p>If this is <code>false</code> it will override the <newline>       <code>useNaming</code> attribute for all <a href="context.html">																								
Tomcat	5		f05c25164b05b5735f26ce53fc5c9b93656335c	Mark Emlyn David Thomas <markt@apache.org>	Thu Jan 14 21:33:58 2010 +0000	Fix TCK failures with security manager due to fix for bug 47774				https://svn.apache.org/repos/asf/tomcat/trunk@899420 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/session/StandardSession.java b/java/org/apache/catalina/session/StandardSession.java <newline>index 19f0612..5236e27 100644 <newline>--- a/java/org/apache/catalina/session/StandardSession.java <newline>+++ b/java/org/apache/catalina/session/StandardSession.java <newline>@@ -710,8 +710,14 @@ public class StandardSession <newline>             if (context.getLoader() != null && <newline>                     context.getLoader().getClassLoader() != null) { <newline>                 oldTccl = Thread.currentThread().getContextClassLoader(); <newline>-                Thread.currentThread().setContextClassLoader( <newline>-                        context.getLoader().getClassLoader()); <newline>+                if (Globals.IS_SECURITY_ENABLED) { <newline>+                    PrivilegedAction<Void> pa = new PrivilegedSetTccl( <newline>+                            context.getLoader().getClassLoader()); <newline>+                    AccessController.doPrivileged(pa); <newline>+                } else { <newline>+                    Thread.currentThread().setContextClassLoader( <newline>+                            context.getLoader().getClassLoader()); <newline>+                } <newline>             } <newline>             try { <newline>                 Object listeners[] = context.getApplicationLifecycleListeners(); <newline>@@ -747,7 +753,13 @@ public class StandardSession <newline>                 } <newline>             } finally { <newline>                 if (oldTccl != null) { <newline>-                    Thread.currentThread().setContextClassLoader(oldTccl); <newline>+                    if (Globals.IS_SECURITY_ENABLED) { <newline>+                        PrivilegedAction<Void> pa = <newline>+                            new PrivilegedSetTccl(oldTccl); <newline>+                        AccessController.doPrivileged(pa); <newline>+                    } else { <newline>+                        Thread.currentThread().setContextClassLoader(oldTccl); <newline>+                    } <newline>                 } <newline>             } <newline>@@ -1732,6 +1744,21 @@ public class StandardSession <newline>     } <newline>+    private static class PrivilegedSetTccl <newline>+    implements PrivilegedAction<Void> { <newline>+ <newline>+        private ClassLoader cl; <newline>+ <newline>+        PrivilegedSetTccl(ClassLoader cl) { <newline>+            this.cl = cl; <newline>+        } <newline>+ <newline>+        public Void run() { <newline>+            Thread.currentThread().setContextClassLoader(cl); <newline>+            return null; <newline>+        } <newline>+    } <newline>+ <newline> }																								
Tomcat	5		1d5511dd33f82075207de11515235825544add8	Mark Emlyn David Thomas <markt@apache.org>	Mon Dec 14 14:53:00 2009 +0000	Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=47744 Prevent medium term memory leak when ussing SSL with a security manager Based on a patch by Greg Vanore				https://svn.apache.org/repos/asf/tomcat/trunk@890350 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/tomcat/util/net/jsse/JSSESupport.java b/java/org/apache/tomcat/util/net/jsse/JSSESupport.java <newline>index 30c72ff..8087435 100644 <newline>--- a/java/org/apache/tomcat/util/net/jsse/JSSESupport.java <newline>+++ b/java/org/apache/tomcat/util/net/jsse/JSSESupport.java <newline>@@ -23,6 +23,8 @@ import java.io.InputStream; <newline> import java.net.SocketException; <newline> import java.security.cert.Certificate; <newline> import java.security.cert.CertificateFactory; <newline>+import java.util.Map; <newline>+import java.util.WeakHashMap; <newline> import javax.net.ssl.HandshakeCompletedEvent; <newline> import javax.net.ssl.HandshakeCompletedListener; <newline>@@ -53,6 +55,9 @@ class JSSESupport implements SSLSupport, SSLSessionManager { <newline>     private static final org.apache.juli.logging.Log log = <newline>         org.apache.juli.logging.LogFactory.getLog(JSSESupport.class); <newline>+ <newline>+    private static final Map<SSLSession,Integer> keySizeCache = <newline>+        new WeakHashMap<SSLSession, Integer>(); <newline>     protected SSLSocket ssl; <newline>     protected SSLSession session; <newline>@@ -196,7 +201,12 @@ class JSSESupport implements SSLSupport, SSLSessionManager { <newline>         SSLSupport.CipherData c_aux[]=ciphers; <newline>         if (session == null) <newline>             return null; <newline>-        Integer keySize = (Integer) session.getValue(KEY_SIZE_KEY); <newline>+ <newline>+        Integer keySize = null; <newline>+        synchronized(keySizeCache) { <newline>+            keySize = keySizeCache.get(session); <newline>+        } <newline>+ <newline>         if (keySize == null) { <newline>             int size = 0; <newline>             String cipherSuite = session.getCipherSuite(); <newline>@@ -207,7 +217,9 @@ class JSSESupport implements SSLSupport, SSLSessionManager { <newline>                 } <newline>             } <newline>             keySize = new Integer(size); <newline>-            session.putValue(KEY_SIZE_KEY, keySize); <newline>+            synchronized(keySizeCache) { <newline>+                keySizeCache.put(session, keySize); <newline>+            } <newline>         } <newline>         return keySize; <newline>     }																								
Tomcat	1	2	f6feed1d22f68c63fd81206441bd11b09ccc9cd	Mark Emlyn David Thomas <markt@apache.org>	Mon Dec 14 14:51:12 2009 +0000	Pre-load a class required for apps to obtain the SSL key size when running under a security manager				https://svn.apache.org/repos/asf/tomcat/trunk@890349 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/security/SecurityClassLoad.java b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>index 3c3a5cf..483eac6 100644 <newline>--- a/java/org/apache/catalina/security/SecurityClassLoad.java <newline>+++ b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>@@ -44,6 +44,7 @@ public final class SecurityClassLoad { <newline>         loadJavaxPackage(loader); <newline>         loadCoyotePackage(loader); <newline>         loadHttp11Package(loader); <newline>+        loadTomcatPackage(loader); <newline>     } <newline>@@ -209,5 +210,10 @@ public final class SecurityClassLoad { <newline>              "Response$3"); <newline>     } <newline>+    private final static void loadTomcatPackage(ClassLoader loader) <newline>+        throws Exception { <newline>+        String basePackage = "org.apache.tomcat."; <newline>+        loader.loadClass(basePackage + "util.net.SSLSupport$CipherData"); <newline>+    } <newline> }																								
Tomcat	5		cb92e016ed9eabbe5456ef8d78f2ba1d2c70fc2	Konstantin Kolinko <kkolinko@apache.org>	Wed Nov 18 03:00:57 2009 +0000	Wrapped long lines. As the text of this file is copy-pasted into security-manager-howto.html, it will make it more readable. Added a comment regarding tomcat-juli.jar				https://svn.apache.org/repos/asf/tomcat/trunk@881654 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/conf/catalina.policy b/conf/catalina.policy <newline>index 2db96a1..175dd5e 100644 <newline>--- a/conf/catalina.policy <newline>+++ b/conf/catalina.policy <newline>@@ -62,22 +62,32 @@ grant codeBase "file:${catalina.home}/bin/commons-daemon.jar" { <newline> }; <newline> // These permissions apply to the logging API <newline>+// Note: If tomcat-juli.jar is in ${catalina.base} and not in ${catalina.home}, <newline>+// update this section accordingly. <newline> grant codeBase "file:${catalina.home}/bin/tomcat-juli.jar" { <newline>         permission java.util.PropertyPermission "java.util.logging.config.class", "read"; <newline>         permission java.util.PropertyPermission "java.util.logging.config.file", "read"; <newline>         permission java.util.PropertyPermission "catalina.base", "read"; <newline>-        permission java.io.FilePermission "${java.home}${file.separator}lib${file.separator}logging.properties", "read"; <newline>-        permission java.io.FilePermission "${catalina.base}${file.separator}conf${file.separator}logging.properties", "read"; <newline>-        permission java.io.FilePermission "${catalina.base}${file.separator}logs", "read, write"; <newline>-        permission java.io.FilePermission "${catalina.base}${file.separator}logs${file.separator}*", "read, write"; <newline>+        permission java.io.FilePermission <newline>+         "${java.home}${file.separator}lib${file.separator}logging.properties", "read"; <newline>+        permission java.io.FilePermission <newline>+         "${catalina.base}${file.separator}conf${file.separator}logging.properties", "read"; <newline>+        permission java.io.FilePermission <newline>+         "${catalina.base}${file.separator}logs", "read, write"; <newline>+        permission java.io.FilePermission <newline>+         "${catalina.base}${file.separator}logs${file.separator}*", "read, write"; <newline>         permission java.lang.RuntimePermission "shutdownHooks"; <newline>         permission java.lang.RuntimePermission "getClassLoader"; <newline>         permission java.lang.RuntimePermission "setContextClassLoader"; <newline>         permission java.util.logging.LoggingPermission "control"; <newline>-        // To enable per context logging configuration, permit read access to the appropriate file. <newline>-        // Be sure that the logging configuration is secure before enabling such access. <newline>-        // E.g. for the examples web application: <newline>-        // permission java.io.FilePermission "${catalina.base}${file.separator}webapps${file.separator}examples${file.separator}WEB-INF${file.separator}classes${file.separator}logging.properties", "read"; <newline>+ <newline>+        // To enable per context logging configuration, permit read access to <newline>+        // the appropriate file. Be sure that the logging configuration is <newline>+        // secure before enabling such access. E.g. for the examples web <newline>+        // application: <newline>+        // permission java.io.FilePermission "${catalina.base}${file.separator} <newline>+        //  webapps${file.separator}examples${file.separator} <newline>+        //  WEB-INF${file.separator}classes${file.separator}logging.properties", "read"; <newline> }; <newline> // These permissions apply to the server startup code <newline>@@ -142,11 +152,14 @@ grant { <newline>     // Precompiled JSPs need access to these packages. <newline>     permission java.lang.RuntimePermission "accessClassInPackage.org.apache.jasper.el"; <newline>     permission java.lang.RuntimePermission "accessClassInPackage.org.apache.jasper.runtime"; <newline>-    permission java.lang.RuntimePermission "accessClassInPackage.org.apache.jasper.runtime.*"; <newline>+    permission java.lang.RuntimePermission <newline>+     "accessClassInPackage.org.apache.jasper.runtime.*"; <newline>     // Precompiled JSPs need access to these system properties. <newline>-    permission java.util.PropertyPermission "org.apache.jasper.runtime.BodyContentImpl.LIMIT_BUFFER", "read"; <newline>-    permission java.util.PropertyPermission "org.apache.el.parser.COERCE_TO_ZERO", "read"; <newline>+    permission java.util.PropertyPermission <newline>+     "org.apache.jasper.runtime.BodyContentImpl.LIMIT_BUFFER", "read"; <newline>+    permission java.util.PropertyPermission <newline>+     "org.apache.el.parser.COERCE_TO_ZERO", "read"; <newline>     // Applications using Comet need to be able to access this package <newline>     permission java.lang.RuntimePermission "accessClassInPackage.org.apache.catalina.comet";																								
Tomcat	5		99ee02b332b7b0499ab79bc2acd2a434c325ceb	Mark Emlyn David Thomas <markt@apache.org>	Fri Nov 6 18:26:39 2009 +0000	Comet didn't work at all under a security manger. Need to allow web apps access to the comet interfaces so move those interfaces to a separate package so we can grant access.				https://svn.apache.org/repos/asf/tomcat/trunk@833510 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/examples/WEB-INF/classes/chat/ChatServlet.java b/webapps/examples/WEB-INF/classes/chat/ChatServlet.java <newline>index 8028f40..8e24cbf 100644 <newline>--- a/webapps/examples/WEB-INF/classes/chat/ChatServlet.java <newline>+++ b/webapps/examples/WEB-INF/classes/chat/ChatServlet.java <newline>@@ -24,8 +24,8 @@ import java.io.InputStream; <newline> import java.io.PrintWriter; <newline> import java.util.ArrayList; <newline>-import org.apache.catalina.CometEvent; <newline>-import org.apache.catalina.CometProcessor; <newline>+import org.apache.catalina.comet.CometEvent; <newline>+import org.apache.catalina.comet.CometProcessor; <newline> import javax.servlet.ServletException; <newline> import javax.servlet.http.HttpServlet;																								
Tomcat	5		bf9abbb1c2f6824d076003d0f8720ce20db9f4b	Mark Emlyn David Thomas <markt@apache.org>	Sat Oct 3 16:20:49 2009 +0000	Fix BASE/HOME swap and add note re security manager.				https://svn.apache.org/repos/asf/tomcat/trunk@821353 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/logging.xml b/webapps/docs/logging.xml <newline>index 4d2666e..8b4ff9f 100644 <newline>--- a/webapps/docs/logging.xml <newline>+++ b/webapps/docs/logging.xml <newline>@@ -302,11 +302,13 @@ log4j.logger.org.apache.catalina.session=DEBUG<br /> <newline>     <p> <newline>       If you have multiple instances of Tomcat, each with a separate <newline>-      <code>$CATALINA_HOME</code> but a shared <code>$CATALINA_BASE</code> then <newline>+      <code>$CATALINA_BASE</code> but a shared <code>$CATALINA_HOME</code> then <newline>       you can configure log4j on a per instance basis by replacing references to <newline>       <code>$CATALINA_HOME</code> in the above instructions with <newline>       <code>$CATALINA_BASE</code>. Note that you may need to create a <newline>-      <code>$CATALINA_BASE/lib</code> directory. <newline>+      <code>$CATALINA_BASE/lib</code> directory and if you are running with a <newline>+      security manager you will need to adjust the codebase for JULI in <newline>+      <code>$CATALINA_BASE/conf/catalina.policy</code>. <newline>     </p> <newline>   </section>																								
Tomcat	5		19f64e23ab64e3cb4cb5473a0feafeaf4c37e8b	Mark Emlyn David Thomas <markt@apache.org>	Mon Sep 21 22:31:47 2009 +0000	Separate out Manager app roles Move /manager to /manager/text to simplify permissions Allows the future addition of extra security measures to one interface that might not make sense for another (usually these will be added to the HTML interface but that might not always be the case).				https://svn.apache.org/repos/asf/tomcat/trunk@817446 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/manager/WEB-INF/web.xml b/webapps/manager/WEB-INF/web.xml <newline>index a067f21..ff19a20 100644 <newline>--- a/webapps/manager/WEB-INF/web.xml <newline>+++ b/webapps/manager/WEB-INF/web.xml <newline>@@ -27,12 +27,6 @@ <newline>     Manager lets you view, load/unload/etc particular web applications. <newline>   </description> <newline>-  <!-- Define the Manager Servlet <newline>-       Change servlet-class to: org.apache.catalina.servlets.HTMLManagerServlet <newline>-       to get a Servlet with a more intuitive HTML interface, don't change if you <newline>-       have software that is expected to parse the output from ManagerServlet <newline>-       since they're not compatible. <newline>-   --> <newline>   <servlet> <newline>     <servlet-name>Manager</servlet-name> <newline>     <servlet-class>org.apache.catalina.manager.ManagerServlet</servlet-class> <newline>@@ -66,59 +60,7 @@ <newline>   <!-- Define the Manager Servlet Mapping --> <newline>   <servlet-mapping> <newline>     <servlet-name>Manager</servlet-name> <newline>-      <url-pattern>/list</url-pattern> <newline>-  </servlet-mapping> <newline>-  <servlet-mapping> <newline>-    <servlet-name>Manager</servlet-name> <newline>-      <url-pattern>/expire</url-pattern> <newline>-  </servlet-mapping> <newline>-  <servlet-mapping> <newline>-    <servlet-name>Manager</servlet-name> <newline>-      <url-pattern>/sessions</url-pattern> <newline>-  </servlet-mapping> <newline>-  <servlet-mapping> <newline>-    <servlet-name>Manager</servlet-name> <newline>-      <url-pattern>/start</url-pattern> <newline>-  </servlet-mapping> <newline>-  <servlet-mapping> <newline>-    <servlet-name>Manager</servlet-name> <newline>-      <url-pattern>/stop</url-pattern> <newline>-  </servlet-mapping> <newline>-  <servlet-mapping> <newline>-    <servlet-name>Manager</servlet-name> <newline>-      <url-pattern>/install</url-pattern> <newline>-  </servlet-mapping> <newline>-  <servlet-mapping> <newline>-    <servlet-name>Manager</servlet-name> <newline>-      <url-pattern>/remove</url-pattern> <newline>-  </servlet-mapping> <newline>-  <servlet-mapping> <newline>-    <servlet-name>Manager</servlet-name> <newline>-      <url-pattern>/deploy</url-pattern> <newline>-  </servlet-mapping> <newline>-  <servlet-mapping> <newline>-    <servlet-name>Manager</servlet-name> <newline>-      <url-pattern>/undeploy</url-pattern> <newline>-  </servlet-mapping> <newline>-  <servlet-mapping> <newline>-    <servlet-name>Manager</servlet-name> <newline>-      <url-pattern>/reload</url-pattern> <newline>-  </servlet-mapping> <newline>-  <servlet-mapping> <newline>-    <servlet-name>Manager</servlet-name> <newline>-      <url-pattern>/save</url-pattern> <newline>-  </servlet-mapping> <newline>-  <servlet-mapping> <newline>-    <servlet-name>Manager</servlet-name> <newline>-      <url-pattern>/serverinfo</url-pattern> <newline>-  </servlet-mapping> <newline>-  <servlet-mapping> <newline>-    <servlet-name>Manager</servlet-name> <newline>-      <url-pattern>/roles</url-pattern> <newline>-  </servlet-mapping> <newline>-  <servlet-mapping> <newline>-    <servlet-name>Manager</servlet-name> <newline>-      <url-pattern>/resources</url-pattern> <newline>+      <url-pattern>/text/*</url-pattern> <newline>   </servlet-mapping> <newline>   <servlet-mapping> <newline>     <servlet-name>Status</servlet-name> <newline>@@ -148,30 +90,44 @@ <newline>   </resource-env-ref> <newline>   <!-- Define a Security Constraint on this Application --> <newline>+  <!-- NOTE:  None of these roles are present in the default users file --> <newline>   <security-constraint> <newline>     <web-resource-collection> <newline>-      <web-resource-name>HTMLManger and Manager command</web-resource-name> <newline>-      <url-pattern>/jmxproxy/*</url-pattern> <newline>+      <web-resource-name>HTML Manger interface (for humans)</web-resource-name> <newline>       <url-pattern>/html/*</url-pattern> <newline>-      <url-pattern>/list</url-pattern> <newline>-      <url-pattern>/expire</url-pattern> <newline>-      <url-pattern>/sessions</url-pattern> <newline>-      <url-pattern>/start</url-pattern> <newline>-      <url-pattern>/stop</url-pattern> <newline>-      <url-pattern>/install</url-pattern> <newline>-      <url-pattern>/remove</url-pattern> <newline>-      <url-pattern>/deploy</url-pattern> <newline>-      <url-pattern>/undeploy</url-pattern> <newline>-      <url-pattern>/reload</url-pattern> <newline>-      <url-pattern>/save</url-pattern> <newline>-      <url-pattern>/serverinfo</url-pattern> <newline>+    </web-resource-collection> <newline>+    <auth-constraint> <newline>+       <role-name>manager</role-name> <newline>+    </auth-constraint> <newline>+  </security-constraint> <newline>+  <security-constraint> <newline>+    <web-resource-collection> <newline>+      <web-resource-name>Text Manger interface (for scripts)</web-resource-name> <newline>+      <url-pattern>/text/*</url-pattern> <newline>+    </web-resource-collection> <newline>+    <auth-constraint> <newline>+       <role-name>manager-scripts</role-name> <newline>+    </auth-constraint> <newline>+  </security-constraint> <newline>+  <security-constraint> <newline>+    <web-resource-collection> <newline>+      <web-resource-name>JMX Proxy interface</web-resource-name> <newline>+      <url-pattern>/jmxproxy/*</url-pattern> <newline>+    </web-resource-collection> <newline>+    <auth-constraint> <newline>+       <role-name>manager-jmx</role-name> <newline>+    </auth-constraint> <newline>+  </security-constraint> <newline>+  <security-constraint> <newline>+    <web-resource-collection> <newline>+      <web-resource-name>Status interface</web-resource-name> <newline>       <url-pattern>/status/*</url-pattern> <newline>-      <url-pattern>/roles</url-pattern> <newline>-      <url-pattern>/resources</url-pattern> <newline>     </web-resource-collection> <newline>     <auth-constraint> <newline>-       <!-- NOTE:  This role is not present in the default users file --> <newline>        <role-name>manager</role-name> <newline>+       <role-name>manager-scripts</role-name> <newline>+       <role-name>manager-jmx</role-name> <newline>+       <role-name>manager-status</role-name> <newline>     </auth-constraint> <newline>   </security-constraint> <newline>@@ -184,14 +140,36 @@ <newline>   <!-- Security roles referenced by this web application --> <newline>   <security-role> <newline>     <description> <newline>-      The role that is required to log in to the Manager Application <newline>+      The role that is required to access the HTML Manager pages <newline>     </description> <newline>     <role-name>manager</role-name> <newline>   </security-role> <newline>+  <security-role> <newline>+    <description> <newline>+      The role that is required to access the text Manager pages <newline>+    </description> <newline>+    <role-name>manager-scripts</role-name> <newline>+  </security-role> <newline>+  <security-role> <newline>+    <description> <newline>+      The role that is required to access the HTML JMX Proxy <newline>+    </description> <newline>+    <role-name>manager-jmx</role-name> <newline>+  </security-role> <newline>+  <security-role> <newline>+    <description> <newline>+      The role that is required to access to the Manager Status pages <newline>+    </description> <newline>+    <role-name>manager-status</role-name> <newline>+  </security-role> <newline>   <error-page> <newline>     <error-code>401</error-code> <newline>     <location>/401.jsp</location> <newline>   </error-page> <newline>+  <error-page> <newline>+    <error-code>404</error-code> <newline>+    <location>/404.jsp</location> <newline>+  </error-page> <newline> </web-app>																								
Tomcat	5		f71be5c4165d4c79ca8af5e531dc44d9689e95c	Mark Emlyn David Thomas <markt@apache.org>	Tue Sep 8 10:24:29 2009 +0000	Make the JDBC leak prevention play nicely with a security manager Don't use a fixed size buffer to load the class.				https://svn.apache.org/repos/asf/tomcat/trunk@812432 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/loader/WebappClassLoader.java b/java/org/apache/catalina/loader/WebappClassLoader.java <newline>index f48c860..442eb0b 100644 <newline>--- a/java/org/apache/catalina/loader/WebappClassLoader.java <newline>+++ b/java/org/apache/catalina/loader/WebappClassLoader.java <newline>@@ -1619,16 +1619,21 @@ public class WebappClassLoader <newline>          */ <newline>         InputStream is = getResourceAsStream( <newline>                 "org/apache/catalina/loader/JdbcLeakPrevention.class"); <newline>-        // Cheat - we know roughly how big the class will be (~1K) but allow <newline>-        // plenty room to grow <newline>-        // TODO Let buffer grow as required <newline>-        byte[] classBytes = new byte[4096]; <newline>+        // We know roughly how big the class will be (~ 1K) so allow 2k as a <newline>+        // starting point <newline>+        byte[] classBytes = new byte[2048]; <newline>         int offset = 0; <newline>         try { <newline>-            int read = is.read(classBytes, offset, 4096-offset); <newline>+            int read = is.read(classBytes, offset, classBytes.length-offset); <newline>             while (read > -1) { <newline>                 offset += read; <newline>-                read = is.read(classBytes, offset, 4096-offset); <newline>+                if (offset == classBytes.length) { <newline>+                    // Buffer full - double size <newline>+                    byte[] tmp = new byte[classBytes.length * 2]; <newline>+                    System.arraycopy(classBytes, 0, tmp, 0, classBytes.length); <newline>+                    classBytes = tmp; <newline>+                } <newline>+                read = is.read(classBytes, offset, classBytes.length-offset); <newline>             } <newline>             Class<?> lpClass = <newline>                 defineClass("org.apache.catalina.loader.JdbcLeakPrevention",																								
Tomcat	1	4	9f6ed4b410807d57531ee170c37c0fe8914357c	Mark Emlyn David Thomas <markt@apache.org>	Sat Jun 13 19:19:18 2009 +0000	Remove case insensitivity option. It was a workaround for a change in Tomcat 3 and has security implications if used on case insensitive file systems.				https://svn.apache.org/repos/asf/tomcat/trunk@784455 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/config/context.xml b/webapps/docs/config/context.xml <newline>index 7bbe2de..d228212 100644 <newline>--- a/webapps/docs/config/context.xml <newline>+++ b/webapps/docs/config/context.xml <newline>@@ -328,16 +328,6 @@ <newline>         of the flag is <code>true</code>.</p> <newline>       </attribute> <newline>-      <attribute name="caseSensitive" required="false"> <newline>-        <p>If the value of this flag is <code>false</code>, all case sensitivity <newline>-        checks will be disabled. If not <newline>-        specified, the default value of the flag is <code>true</code>.</p> <newline>-        <p><b>NOTE: This flag MUST NOT be set to false on the Windows platform <newline>-        (or any other OS which does not have a case sensitive filesystem), <newline>-        as it will disable case sensitivity checks, allowing JSP source code <newline>-        disclosure, among other security problems.</b></p> <newline>-      </attribute> <newline>- <newline>       <attribute name="processTlds" required="false"> <newline>         <p>Whether the context should process TLDs on startup.  The default <newline>         is true.  The false setting is intended for special cases																								
Tomcat	5		ab7c49a8e06defd61a0248602374c6ac90ba58a	Mladen Turk <mturk@apache.org>	Wed May 27 08:19:13 2009 +0000	Fix bz41564 by adding /user option to service.bat which respawns the service.bat using runas command. This pops-up a new window with elevated security on Vista+				https://svn.apache.org/repos/asf/tomcat/trunk@779047 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/bin/service.bat b/bin/service.bat <newline>index 7a40f82..5120c9c 100755 <newline>--- a/bin/service.bat <newline>+++ b/bin/service.bat <newline>@@ -24,11 +24,12 @@ rem                        Service is installed using default settings. <newline> rem remove                 Remove the service from the System. <newline> rem <newline> rem name        (optional) If the second argument is present it is considered <newline>-rem                        to be new service name <newline>+rem                        to be new service name <newline> rem <newline> rem $Id$ <newline> rem --------------------------------------------------------------------------- <newline>+set SELF=%~dp0%service.bat <newline> rem Guess CATALINA_HOME if not defined <newline> set CURRENT_DIR=%cd% <newline> if not "%CATALINA_HOME%" == "" goto gotHome <newline>@@ -47,35 +48,54 @@ rem Make sure prerequisite environment variables are set <newline> if not "%JAVA_HOME%" == "" goto okHome <newline> echo The JAVA_HOME environment variable is not defined <newline> echo This environment variable is needed to run this program <newline>-goto end <newline>+goto end <newline> :okHome <newline> if not "%CATALINA_BASE%" == "" goto gotBase <newline> set CATALINA_BASE=%CATALINA_HOME% <newline> :gotBase <newline>- <newline>+ <newline> set EXECUTABLE=%CATALINA_HOME%\bin\tomcat@VERSION_MAJOR@.exe <newline> rem Set default Service name <newline> set SERVICE_NAME=Tomcat@VERSION_MAJOR@ <newline> set PR_DISPLAYNAME=Apache Tomcat @VERSION_MAJOR@ <newline>-if "%1" == "" goto displayUsage <newline>-if "%2" == "" goto setServiceName <newline>-set SERVICE_NAME=%2 <newline>-set PR_DISPLAYNAME=Apache Tomcat %2 <newline>-:setServiceName <newline>-if %1 == install goto doInstall <newline>-if %1 == remove goto doRemove <newline>-if %1 == uninstall goto doRemove <newline>+if "x%1x" == "xx" goto displayUsage <newline>+set SERVICE_CMD=%1 <newline>+shift <newline>+if "x%1x" == "xx" goto checkServiceCmd <newline>+:checkUser <newline>+if "x%1x" == "x/userx" goto runAsUser <newline>+if "x%1x" == "x--userx" goto runAsUser <newline>+set SERVICE_NAME=%1 <newline>+set PR_DISPLAYNAME=Apache Tomcat %1 <newline>+shift <newline>+if "x%1x" == "xx" goto checkServiceCmd <newline>+goto checkUser <newline>+:runAsUser <newline>+shift <newline>+if "x%1x" == "xx" goto displayUsage <newline>+set SERVICE_USER=%1 <newline>+shift <newline>+runas /env /savecred /user:%SERVICE_USER% "%COMSPEC% /K \"%SELF%\" %SERVICE_CMD% %SERVICE_NAME%" <newline>+goto end <newline>+:checkServiceCmd <newline>+if /i %SERVICE_CMD% == install goto doInstall <newline>+if /i %SERVICE_CMD% == remove goto doRemove <newline>+if /i %SERVICE_CMD% == uninstall goto doRemove <newline> echo Unknown parameter "%1" <newline> :displayUsage <newline> echo. <newline>-echo Usage: service.bat install/remove [service_name] <newline>+echo Usage: service.bat install/remove [service_name] [/user username] <newline> goto end <newline> :doRemove <newline> rem Remove the service <newline> "%EXECUTABLE%" //DS//%SERVICE_NAME% <newline>+if not errorlevel 1 goto removed <newline>+echo Failed removing '%SERVICE_NAME%' service <newline>+goto end <newline>+:removed <newline> echo The service '%SERVICE_NAME%' has been removed <newline> goto end																								
Tomcat	5		08407e60426ce9935596caed54fb221f1dc1a79	Mark Emlyn David Thomas <markt@apache.org>	Wed Apr 8 17:15:16 2009 +0000	Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=46509 Use correct link on error page in JSP security example Patch provided by Michael Moody				https://svn.apache.org/repos/asf/tomcat/trunk@763325 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/examples/jsp/security/protected/error.jsp b/webapps/examples/jsp/security/protected/error.jsp <newline>index 71ff515..5fc22ef 100644 <newline>--- a/webapps/examples/jsp/security/protected/error.jsp <newline>+++ b/webapps/examples/jsp/security/protected/error.jsp <newline>@@ -20,6 +20,6 @@ <newline> </head> <newline> <body bgcolor="white"> <newline> Invalid username and/or password, please try <newline>-<a href='<%= response.encodeURL("login.jsp") %>'>again</a>. <newline>+<a href='<%= response.encodeURL("index.jsp") %>'>again</a>. <newline> </body> <newline> </html>																								
Tomcat	5		43aa86a06ea538f2988f8cc15f861593474b37b	Mark Emlyn David Thomas <markt@apache.org>	Wed Apr 8 12:59:21 2009 +0000	Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=46967 and make behaviour consistent when running under a security manager. Based on a patch provided by Kirk Wolf				https://svn.apache.org/repos/asf/tomcat/trunk@763228 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/session/ManagerBase.java b/java/org/apache/catalina/session/ManagerBase.java <newline>index 9a46d24..5c67855 100644 <newline>--- a/java/org/apache/catalina/session/ManagerBase.java <newline>+++ b/java/org/apache/catalina/session/ManagerBase.java <newline>@@ -223,7 +223,11 @@ public abstract class ManagerBase implements Manager, MBeanRegistration { <newline>     private class PrivilegedSetRandomFile implements PrivilegedAction<DataInputStream>{ <newline>-        public DataInputStream run(){ <newline>+        public PrivilegedSetRandomFile(String s) { <newline>+            devRandomSource = s; <newline>+        } <newline>+ <newline>+        public DataInputStream run(){ <newline>             try { <newline>                 File f=new File( devRandomSource ); <newline>                 if( ! f.exists() ) return null; <newline>@@ -233,8 +237,18 @@ public abstract class ManagerBase implements Manager, MBeanRegistration { <newline>                     log.debug( "Opening " + devRandomSource ); <newline>                 return randomIS; <newline>             } catch (IOException ex){ <newline>+                log.warn("Error reading " + devRandomSource, ex); <newline>+                if (randomIS != null) { <newline>+                    try { <newline>+                        randomIS.close(); <newline>+                    } catch (Exception e) { <newline>+                        log.warn("Failed to close randomIS."); <newline>+                    } <newline>+                } <newline>+                devRandomSource = null; <newline>+                randomIS=null; <newline>                 return null; <newline>-            } <newline>+            } <newline>         } <newline>     } <newline>@@ -505,10 +519,10 @@ public abstract class ManagerBase implements Manager, MBeanRegistration { <newline>      *  - so use it if available. <newline>      */ <newline>     public void setRandomFile( String s ) { <newline>-        // as a hack, you can use a static file - and genarate the same <newline>+        // as a hack, you can use a static file - and generate the same <newline>         // session ids ( good for strange debugging ) <newline>         if (Globals.IS_SECURITY_ENABLED){ <newline>-            randomIS = AccessController.doPrivileged(new PrivilegedSetRandomFile()); <newline>+            randomIS = AccessController.doPrivileged(new PrivilegedSetRandomFile(s)); <newline>         } else { <newline>             try{ <newline>                 devRandomSource=s; <newline>@@ -519,12 +533,15 @@ public abstract class ManagerBase implements Manager, MBeanRegistration { <newline>                 if( log.isDebugEnabled() ) <newline>                     log.debug( "Opening " + devRandomSource ); <newline>             } catch( IOException ex ) { <newline>-                try { <newline>-                    randomIS.close(); <newline>-                } catch (Exception e) { <newline>-                    log.warn("Failed to close randomIS."); <newline>+                log.warn("Error reading " + devRandomSource, ex); <newline>+                if (randomIS != null) { <newline>+                    try { <newline>+                        randomIS.close(); <newline>+                    } catch (Exception e) { <newline>+                        log.warn("Failed to close randomIS."); <newline>+                    } <newline>                 } <newline>- <newline>+                devRandomSource = null; <newline>                 randomIS=null; <newline>             } <newline>         }																								
Tomcat	1	1	249eaef2929f4805c1db0543f4ab431bfeffa42	Mark Emlyn David Thomas <markt@apache.org>	Sat Feb 21 00:44:33 2009 +0000	Address Bill's security concerns in previous patch to get TCK to pass under a security manager. TCK passes after this patch with and without security manager.				https://svn.apache.org/repos/asf/tomcat/trunk@746425 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/jasper/el/ExpressionEvaluatorImpl.java b/java/org/apache/jasper/el/ExpressionEvaluatorImpl.java <newline>index 56c099d..f08704f 100644 <newline>--- a/java/org/apache/jasper/el/ExpressionEvaluatorImpl.java <newline>+++ b/java/org/apache/jasper/el/ExpressionEvaluatorImpl.java <newline>@@ -37,7 +37,8 @@ public final class ExpressionEvaluatorImpl extends ExpressionEvaluator { <newline> 																								
Tomcat	3	1	1cc509f2bd3d968c894826393656d830bcdc48c	Mark Emlyn David Thomas <markt@apache.org>	Fri Dec 26 19:25:01 2008 +0000	o.a.c.security generics changes				https://svn.apache.org/repos/asf/tomcat/trunk@729527 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/security/SecurityUtil.java b/java/org/apache/catalina/security/SecurityUtil.java <newline>index 89bef1f..fda5b0c 100644 <newline>--- a/java/org/apache/catalina/security/SecurityUtil.java <newline>+++ b/java/org/apache/catalina/security/SecurityUtil.java <newline>@@ -66,7 +66,8 @@ public final class SecurityUtil{ <newline>     /** <newline>      * Cache every object for which we are creating method on it. <newline>      */ <newline>-    private static HashMap objectCache = new HashMap(); <newline>+    private static HashMap<Object,Method[]> objectCache = <newline>+        new HashMap<Object,Method[]>(); <newline>     private static org.apache.juli.logging.Log log= <newline>         org.apache.juli.logging.LogFactory.getLog( SecurityUtil.class ); <newline>@@ -112,7 +113,7 @@ public final class SecurityUtil{ <newline>      */ <newline>     public static void doAsPrivilege(final String methodName, <newline>                                      final Servlet targetObject, <newline>-                                     final Class[] targetType, <newline>+                                     final Class<?>[] targetType, <newline>                                      final Object[] targetArguments) <newline>         throws java.lang.Exception{ <newline>@@ -140,7 +141,7 @@ public final class SecurityUtil{ <newline>      */ <newline>     public static void doAsPrivilege(final String methodName, <newline>                                      final Servlet targetObject, <newline>-                                     final Class[] targetType, <newline>+                                     final Class<?>[] targetType, <newline>                                      final Object[] targetArguments, <newline>                                      Principal principal) <newline>         throws java.lang.Exception{ <newline>@@ -148,7 +149,7 @@ public final class SecurityUtil{ <newline>         Method method = null; <newline>         Method[] methodsCache = null; <newline>         if(objectCache.containsKey(targetObject)){ <newline>-            methodsCache = (Method[])objectCache.get(targetObject); <newline>+            methodsCache = objectCache.get(targetObject); <newline>             method = findMethod(methodsCache, methodName); <newline>             if (method == null){ <newline>                 method = createMethodAndCacheIt(methodsCache, <newline>@@ -197,7 +198,7 @@ public final class SecurityUtil{ <newline>      */ <newline>     public static void doAsPrivilege(final String methodName, <newline>                                      final Filter targetObject, <newline>-                                     final Class[] targetType, <newline>+                                     final Class<?>[] targetType, <newline>                                      final Object[] targetArguments) <newline>         throws java.lang.Exception{ <newline>@@ -221,7 +222,7 @@ public final class SecurityUtil{ <newline>      */ <newline>     public static void doAsPrivilege(final String methodName, <newline>                                      final Filter targetObject, <newline>-                                     final Class[] targetType, <newline>+                                     final Class<?>[] targetType, <newline>                                      final Object[] targetArguments, <newline>                                      Principal principal) <newline>         throws java.lang.Exception{ <newline>@@ -229,7 +230,7 @@ public final class SecurityUtil{ <newline>         Method[] methodsCache = null; <newline>         if(objectCache.containsKey(targetObject)){ <newline>-            methodsCache = (Method[])objectCache.get(targetObject); <newline>+            methodsCache = objectCache.get(targetObject); <newline>             method = findMethod(methodsCache, methodName); <newline>             if (method == null){ <newline>                 method = createMethodAndCacheIt(methodsCache, <newline>@@ -268,8 +269,9 @@ public final class SecurityUtil{ <newline>         try{ <newline>             Subject subject = null; <newline>-            PrivilegedExceptionAction pea = new PrivilegedExceptionAction(){ <newline>-                    public Object run() throws Exception{ <newline>+            PrivilegedExceptionAction<Void> pea = <newline>+                new PrivilegedExceptionAction<Void>(){ <newline>+                    public Void run() throws Exception{ <newline>                        method.invoke(targetObject, targetArguments); <newline>                        return null; <newline>                     } <newline>@@ -374,7 +376,7 @@ public final class SecurityUtil{ <newline>     private static Method createMethodAndCacheIt(Method[] methodsCache, <newline>                                                  String methodName, <newline>                                                  Object targetObject, <newline>-                                                 Class[] targetType) <newline>+                                                 Class<?>[] targetType) <newline>             throws Exception{ <newline>         if ( methodsCache == null){																								
Tomcat	5		addf017e186c4a49199fff6a92a3a7161759b2e	Mark Emlyn David Thomas <markt@apache.org>	Sun Nov 30 20:14:59 2008 +0000	Allow webapps to access org.apache.jasper.el package. I have looked through the package and I believe this change is safe although more eyes would be good. Without this permission, a handful of TCKs fail if tested with a security manager enabled.				https://svn.apache.org/repos/asf/tomcat/trunk@721886 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/conf/catalina.policy b/conf/catalina.policy <newline>index edb601b..f00aa60 100644 <newline>--- a/conf/catalina.policy <newline>+++ b/conf/catalina.policy <newline>@@ -14,7 +14,7 @@ <newline> // limitations under the License. <newline> // ============================================================================ <newline>-// catalina.corepolicy - Security Policy Permissions for Tomcat @VERSION_MAJOR@ <newline>+// catalina.corepolicy - Security Policy Permissions for Tomcat 6 <newline> // <newline> // This file contains a default set of security policies to be enforced (by the <newline> // JVM) when Catalina is executed with the "-security" option.  In addition <newline>@@ -134,7 +134,8 @@ grant { <newline>     // Allow read of JAXP compliant XML parser debug <newline>     permission java.util.PropertyPermission "jaxp.debug", "read"; <newline>-    // Precompiled JSPs need access to this package. <newline>+    // Precompiled JSPs need access to these packages. <newline>+    permission java.lang.RuntimePermission "accessClassInPackage.org.apache.jasper.el"; <newline>     permission java.lang.RuntimePermission "accessClassInPackage.org.apache.jasper.runtime"; <newline>     permission java.lang.RuntimePermission "accessClassInPackage.org.apache.jasper.runtime.*";																								
Tomcat	5		748e8978d91a4206447a20bf286b9a53e70cfaa	Mark Emlyn David Thomas <markt@apache.org>	Sat Nov 29 20:20:06 2008 +0000	Lots of EL failures with a security manager without this.				https://svn.apache.org/repos/asf/tomcat/trunk@721708 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/conf/catalina.policy b/conf/catalina.policy <newline>index e7dde73..edb601b 100644 <newline>--- a/conf/catalina.policy <newline>+++ b/conf/catalina.policy <newline>@@ -138,9 +138,9 @@ grant { <newline>     permission java.lang.RuntimePermission "accessClassInPackage.org.apache.jasper.runtime"; <newline>     permission java.lang.RuntimePermission "accessClassInPackage.org.apache.jasper.runtime.*"; <newline>-    // Precompiled JSPs need access to this system property. <newline>+    // Precompiled JSPs need access to these system properties. <newline>     permission java.util.PropertyPermission "org.apache.jasper.runtime.BodyContentImpl.LIMIT_BUFFER", "read"; <newline>- <newline>+    permission java.util.PropertyPermission "org.apache.el.parser.COERCE_TO_ZERO", "read"; <newline> };																								
Tomcat	5		9fa038cff2fb67030f9afbb9d2832b1c5e4b26b	Mark Emlyn David Thomas <markt@apache.org>	Sat Nov 29 19:01:57 2008 +0000	Fix some TCK failures when using a security manager.				https://svn.apache.org/repos/asf/tomcat/trunk@721704 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/jasper/runtime/JspApplicationContextImpl.java b/java/org/apache/jasper/runtime/JspApplicationContextImpl.java <newline>index a6431d3..0087a90 100644 <newline>--- a/java/org/apache/jasper/runtime/JspApplicationContextImpl.java <newline>+++ b/java/org/apache/jasper/runtime/JspApplicationContextImpl.java <newline>@@ -16,6 +16,8 @@ <newline>  */ <newline> package org.apache.jasper.runtime; <newline>+import java.security.AccessController; <newline>+import java.security.PrivilegedAction; <newline> import java.util.ArrayList; <newline> import java.util.Iterator; <newline> import java.util.List; <newline>@@ -37,6 +39,7 @@ import javax.servlet.jsp.el.ImplicitObjectELResolver; <newline> import javax.servlet.jsp.el.ScopedAttributeELResolver; <newline> import org.apache.el.ExpressionFactoryImpl; <newline>+import org.apache.jasper.Constants; <newline> import org.apache.jasper.el.ELContextImpl; <newline> /** <newline>@@ -88,8 +91,18 @@ public class JspApplicationContextImpl implements JspApplicationContext { <newline> 																								
Tomcat	5		e8bf856d29aa52ef4739f71872b1a432267d83a	Mark Emlyn David Thomas <markt@apache.org>	Thu Nov 27 21:40:05 2008 +0000	Add doPrivileged block required for Servlet TCK to pass when running with a security manager				https://svn.apache.org/repos/asf/tomcat/trunk@721286 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/jasper/runtime/JspFactoryImpl.java b/java/org/apache/jasper/runtime/JspFactoryImpl.java <newline>index f06a49d..f9852b3 100644 <newline>--- a/java/org/apache/jasper/runtime/JspFactoryImpl.java <newline>+++ b/java/org/apache/jasper/runtime/JspFactoryImpl.java <newline>@@ -196,7 +196,17 @@ public class JspFactoryImpl extends JspFactory { <newline>     } <newline>-    public JspApplicationContext getJspApplicationContext(ServletContext context) { <newline>-        return JspApplicationContextImpl.getInstance(context); <newline>+    public JspApplicationContext getJspApplicationContext( <newline>+            final ServletContext context) { <newline>+        if (Constants.IS_SECURITY_ENABLED) { <newline>+            return AccessController.doPrivileged( <newline>+                    new PrivilegedAction<JspApplicationContext>() { <newline>+                public JspApplicationContext run() { <newline>+                    return JspApplicationContextImpl.getInstance(context); <newline>+                } <newline>+            }); <newline>+        } else { <newline>+            return JspApplicationContextImpl.getInstance(context); <newline>+        } <newline>     } <newline> }																								
Tomcat	3	1	18951ee1294d434da86bc778e039e97319e60e1	Mark Emlyn David Thomas <markt@apache.org>	Mon Nov 3 21:52:42 2008 +0000	Remove the invoker servlet and all references for security reasons. This will not be proposed for backport to 6.0.x				https://svn.apache.org/repos/asf/tomcat/trunk@710179 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/examples/WEB-INF/web.xml b/webapps/examples/WEB-INF/web.xml <newline>index 0f3b933..478bdd5 100644 <newline>--- a/webapps/examples/WEB-INF/web.xml <newline>+++ b/webapps/examples/WEB-INF/web.xml <newline>@@ -27,23 +27,16 @@ <newline>     <display-name>Servlet and JSP Examples</display-name> <newline>-    <!-- Define servlet-mapped and path-mapped example filters --> <newline>+    <!-- Define example filters --> <newline>     <filter> <newline>-        <filter-name>Servlet Mapped Filter</filter-name> <newline>+        <filter-name>Timing filter</filter-name> <newline>         <filter-class>filters.ExampleFilter</filter-class> <newline> 																								
Tomcat	5		28c03bd89e4603cf726a67881f5da81617013c9	Mark Emlyn David Thomas <markt@apache.org>	Mon Oct 27 17:28:16 2008 +0000	Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=46096 Allow for running under a security manager when processing annotations.				https://svn.apache.org/repos/asf/tomcat/trunk@708243 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/core/DefaultInstanceManager.java b/java/org/apache/catalina/core/DefaultInstanceManager.java <newline>index 0997cc6..cc7a76f 100644 <newline>--- a/java/org/apache/catalina/core/DefaultInstanceManager.java <newline>+++ b/java/org/apache/catalina/core/DefaultInstanceManager.java <newline>@@ -26,6 +26,7 @@ import java.lang.reflect.Modifier; <newline> import java.util.Map; <newline> import java.util.Properties; <newline> import java.security.AccessController; <newline>+import java.security.PrivilegedAction; <newline> import java.security.PrivilegedExceptionAction; <newline> import java.security.PrivilegedActionException; <newline> import java.io.InputStream; <newline>@@ -46,6 +47,7 @@ import javax.servlet.Servlet; <newline> import org.apache.InstanceManager; <newline> import org.apache.catalina.security.SecurityUtil; <newline> import org.apache.catalina.ContainerServlet; <newline>+import org.apache.catalina.Globals; <newline> import org.apache.catalina.core.Constants; <newline> import org.apache.catalina.util.StringManager; <newline>@@ -150,14 +152,24 @@ public class DefaultInstanceManager implements InstanceManager { <newline>      * @throws java.lang.reflect.InvocationTargetException <newline>      *                                if call fails <newline>      */ <newline>-    protected void postConstruct(Object instance, Class<?> clazz) <newline>+    protected void postConstruct(Object instance, final Class<?> clazz) <newline>             throws IllegalAccessException, InvocationTargetException { <newline>         Class<?> superClass = clazz.getSuperclass(); <newline>         if (superClass != Object.class) { <newline>             postConstruct(instance, superClass); <newline>         } <newline>-        Method[] methods = clazz.getDeclaredMethods(); <newline>+        Method[] methods = null; <newline>+        if (Globals.IS_SECURITY_ENABLED) { <newline>+            methods = AccessController.doPrivileged( <newline>+                    new PrivilegedAction<Method[]>(){ <newline>+                public Method[] run(){ <newline>+                    return clazz.getDeclaredMethods(); <newline>+                } <newline>+            }); <newline>+        } else { <newline>+            methods = clazz.getDeclaredMethods(); <newline>+        } <newline>         Method postConstruct = null; <newline>         for (Method method : methods) { <newline>             if (method.isAnnotationPresent(PostConstruct.class)) { <newline>@@ -249,7 +261,18 @@ public class DefaultInstanceManager implements InstanceManager { <newline>         while (clazz != null) { <newline>             // Initialize fields annotations <newline>-            Field[] fields = clazz.getDeclaredFields(); <newline>+            Field[] fields = null; <newline>+            if (Globals.IS_SECURITY_ENABLED) { <newline>+                final Class<?> clazz2 = clazz; <newline>+                fields = AccessController.doPrivileged( <newline>+                        new PrivilegedAction<Field[]>(){ <newline>+                    public Field[] run(){ <newline>+                        return clazz2.getDeclaredFields(); <newline>+                    } <newline>+                }); <newline>+            } else { <newline>+                fields = clazz.getDeclaredFields(); <newline>+            } <newline>             for (Field field : fields) { <newline>                 if (injections != null && injections.containsKey(field.getName())) { <newline>                     lookupFieldResource(context, instance, field, <newline>@@ -281,7 +304,18 @@ public class DefaultInstanceManager implements InstanceManager { <newline>             } <newline>             // Initialize methods annotations <newline>-            Method[] methods = clazz.getDeclaredMethods(); <newline>+            Method[] methods = null; <newline>+            if (Globals.IS_SECURITY_ENABLED) { <newline>+                final Class<?> clazz2 = clazz; <newline>+                methods = AccessController.doPrivileged( <newline>+                        new PrivilegedAction<Method[]>(){ <newline>+                    public Method[] run(){ <newline>+                        return clazz2.getDeclaredMethods(); <newline>+                    } <newline>+                }); <newline>+            } else { <newline>+                methods = clazz.getDeclaredMethods(); <newline>+            } <newline>             for (Method method : methods) { <newline>                 String methodName = method.getName(); <newline>                 if (injections != null && methodName.startsWith("set") && methodName.length() > 3) {																								
Tomcat	5		beabcd929cce72c0328c90369402e181af62a8c	Rainer Jung <rjung@apache.org>	Fri Sep 19 19:51:59 2008 +0000	Add an optional and configurable default role to the JNDIRealm. This comes handy, if you only want to authenticate the users, but have a security constraint with a role in the app.				https://svn.apache.org/repos/asf/tomcat/trunk@697213 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/realm-howto.xml b/webapps/docs/realm-howto.xml <newline>index 09f8f0f..cfd37ba 100644 <newline>--- a/webapps/docs/realm-howto.xml <newline>+++ b/webapps/docs/realm-howto.xml <newline>@@ -859,6 +859,12 @@ attributes are supported by this implementation:</p> <newline>         can be used. If no value is given the providers default is used.</p> <newline>       </attribute> <newline>+      <attribute name="commonRole" required="false"> <newline>+        <p>A role name assigned to each successfully authenticated user in <newline>+        addition to the roles retrieved from LDAP. If not specified, only <newline>+        the roles retrieved via LDAP are used.</p> <newline>+      </attribute> <newline>+ <newline>       <attribute name="connectionName" required="false"> <newline>         <p>The directory username to use when establishing a <newline>         connection to the directory for LDAP search operations. If not																								
Tomcat	5		e51e49fe13fb8fe5ec5cf857db218aabf989951	Mark Emlyn David Thomas <markt@apache.org>	Thu Jul 10 23:00:31 2008 +0000	Startup fails with security enabled				https://svn.apache.org/repos/asf/tomcat/trunk@675796 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/security/SecurityClassLoad.java b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>index a71bbf3..0b88458 100644 <newline>--- a/java/org/apache/catalina/security/SecurityClassLoad.java <newline>+++ b/java/org/apache/catalina/security/SecurityClassLoad.java <newline>@@ -64,7 +64,7 @@ public final class SecurityClassLoad { <newline>              "core.ContainerBase$PrivilegedAddChild"); <newline>         loader.loadClass <newline>             (basePackage + <newline>-             "core.StandardWrapper$1"); <newline>+             "core.StandardWrapper"); <newline>         loader.loadClass <newline>         																								
Tomcat	3	1	b17e7e20209187fc4f56bad99e95f2d764cc000	Mark Emlyn David Thomas <markt@apache.org>	Mon Jul 30 23:48:45 2007 +0000	Fix bug 42979. Update sample.war to include recent security fixes. Ported from TC5.				https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@561188 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/webapps/docs/changelog.xml b/webapps/docs/changelog.xml <newline>index 8663dc7..26ba961 100644 <newline>--- a/webapps/docs/changelog.xml <newline>+++ b/webapps/docs/changelog.xml <newline>@@ -26,9 +26,17 @@ <newline>          stop to fail. Based on a fix suggested by Michael Vorburger. <newline>          Port of r454193 (<bug>36976</bug>) from Tomcat 5.5.x. (markt,rjung) <newline>       </fix> <newline>+    </changelog> <newline>+  </subsection> <newline>+  <subsection name="Webapps"> <newline>+    <changelog> <newline>       <fix> <newline>         Fix WebDAV Servlet so it works correctly with MS clients. (markt) <newline>       </fix> <newline>+      <fix> <newline>+        <bug>42979</bug>: Update sample.war to include recent security fixes <newline>+        in the source code. (markt) <newline>+      </fix> <newline>     </changelog> <newline>   </subsection> <newline> </section>																								
Tomcat	5		d6f5508267bfa8dccc05f1395c3375d34c3232d	Remy Maucherat <remm@apache.org>	Fri Jun 29 12:35:04 2007 +0000	- Fix a lost reference problem when using Comet with a security manager.				https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@551870 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/core/ApplicationFilterFactory.java b/java/org/apache/catalina/core/ApplicationFilterFactory.java <newline>index 212a173..f0bfef5 100644 <newline>--- a/java/org/apache/catalina/core/ApplicationFilterFactory.java <newline>+++ b/java/org/apache/catalina/core/ApplicationFilterFactory.java <newline>@@ -123,9 +123,13 @@ public final class ApplicationFilterFactory { <newline>         ApplicationFilterChain filterChain = null; <newline>         if (request instanceof Request) { <newline>             Request req = (Request) request; <newline>+            comet = req.isComet(); <newline>             if (Globals.IS_SECURITY_ENABLED) { <newline>                 // Security: Do not recycle <newline>                 filterChain = new ApplicationFilterChain(); <newline>+                if (comet) { <newline>+                    req.setFilterChain(filterChain); <newline>+                } <newline>             } else { <newline>                 filterChain = (ApplicationFilterChain) req.getFilterChain(); <newline>                 if (filterChain == null) { <newline>@@ -133,7 +137,6 @@ public final class ApplicationFilterFactory { <newline>                     req.setFilterChain(filterChain); <newline>                 } <newline>             } <newline>-            comet = req.isComet(); <newline>         } else { <newline>             // Request dispatcher in use <newline>             filterChain = new ApplicationFilterChain();																								
Tomcat	5		2c47be25fe7abd6f712b819e2f8416f873e07b1	Remy Maucherat <remm@apache.org>	Fri Mar 30 14:38:02 2007 +0000	- Adjustments to error processing with Comet during the begin event (exceptions not causing error reports). - Fix a probable bug when security was enabled (Comet would most likely not work).				https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@524103 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/core/StandardWrapperValve.java b/java/org/apache/catalina/core/StandardWrapperValve.java <newline>index 887b1e6..c992de0 100644 <newline>--- a/java/org/apache/catalina/core/StandardWrapperValve.java <newline>+++ b/java/org/apache/catalina/core/StandardWrapperValve.java <newline>@@ -159,9 +159,10 @@ final class StandardWrapperValve <newline>         } <newline>         // Identify if the request is Comet related now that the servlet has been allocated <newline>+        boolean comet = false; <newline>         if (servlet instanceof CometProcessor <newline>                 && request.getAttribute("org.apache.tomcat.comet.support") == Boolean.TRUE) { <newline>-            request.setComet(true); <newline>+            comet = true; <newline>         } <newline>         // Acknowlege the request <newline>@@ -209,8 +210,9 @@ final class StandardWrapperValve <newline>                 if (context.getSwallowOutput()) { <newline>                     try { <newline>                         SystemLogHandler.startCapture(); <newline>-                        if (request.isComet()) { <newline>+                        if (comet) { <newline>                             filterChain.doFilterEvent(request.getEvent()); <newline>+                            request.setComet(true); <newline>                         } else { <newline>                             filterChain.doFilter(request.getRequest(), <newline>                                     response.getResponse()); <newline>@@ -222,8 +224,9 @@ final class StandardWrapperValve <newline>                         } <newline>                     } <newline>                 } else { <newline>-                    if (request.isComet()) { <newline>+                    if (comet) { <newline>                         filterChain.doFilterEvent(request.getEvent()); <newline>+                        request.setComet(true); <newline>                     } else { <newline>                         filterChain.doFilter <newline>                             (request.getRequest(), response.getResponse());																								
Tomcat	5		bfe39dce70949f609f8173194fab9ea52ca2c5b	Remy Maucherat <remm@apache.org>	Err:509	- Set of minor optimizations. - Unify usage of the security manager flag. - Submitted by Arvind Srinivasan.				https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@505593 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/naming/resources/DirContextURLConnection.java b/java/org/apache/naming/resources/DirContextURLConnection.java <newline>index aa60769..2c85e7e 100644 <newline>--- a/java/org/apache/naming/resources/DirContextURLConnection.java <newline>+++ b/java/org/apache/naming/resources/DirContextURLConnection.java <newline>@@ -59,7 +59,7 @@ public class DirContextURLConnection <newline>         if (context == null) <newline>             throw new IllegalArgumentException <newline>                 ("Directory context can't be null"); <newline>-        if (System.getSecurityManager() != null) { <newline>+        if (org.apache.naming.Constants.IS_SECURITY_ENABLED) { <newline>             this.permission = new JndiPermission(url.toString()); <newline> 																								
Tomcat	5		734c80789a3ff314ff02701f59003259b7a2cc5	Remy Maucherat <remm@apache.org>	Fri Nov 3 10:56:25 2006 +0000	- Remove an extra throwable. - Add a specific flag for recycling facades (when security is on, recycling will always be done, obviously).				https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@470756 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/valves/ErrorReportValve.java b/java/org/apache/catalina/valves/ErrorReportValve.java <newline>index 0c8b3c5..793bc13 100644 <newline>--- a/java/org/apache/catalina/valves/ErrorReportValve.java <newline>+++ b/java/org/apache/catalina/valves/ErrorReportValve.java <newline>@@ -153,8 +153,7 @@ public class ErrorReportValve <newline>      *  a root cause exception <newline>      */ <newline>     protected void report(Request request, Response response, <newline>-                          Throwable throwable) <newline>-        throws IOException { <newline>+                          Throwable throwable) { <newline>         // Do nothing on non-HTTP responses <newline>         int statusCode = response.getStatus();																								
Tomcat	5		74ec61724b26e610b8727603473d3c23ce4d474	Remy Maucherat <remm@apache.org>	Fri Jul 7 22:35:25 2006 +0000	- If there is a security manager, the map should be reset (otherwise, references could be kept).				https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@420002 13f79535-47bb-0310-9956-ffa450edef68	diff --git a/java/org/apache/catalina/connector/Request.java b/java/org/apache/catalina/connector/Request.java <newline>index 0066c5d..4892822 100644 <newline>--- a/java/org/apache/catalina/connector/Request.java <newline>+++ b/java/org/apache/catalina/connector/Request.java <newline>@@ -404,8 +404,12 @@ public class Request <newline>         requestedSessionId = null; <newline>         requestedSessionURL = false; <newline>-        parameterMap.setLocked(false); <newline>-        parameterMap.clear(); <newline>+        if (Constants.SECURITY) { <newline>+            parameterMap = new ParameterMap(); <newline>+        } else { <newline>+            parameterMap.setLocked(false); <newline>+            parameterMap.clear(); <newline>+        } <newline>         mappingData.recycle();																								
